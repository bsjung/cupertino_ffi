/// Automatically generated API for [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
library cupertino_ffi.eventkit;

import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';
import 'package:cupertino_ffi/objective_c.dart' as _objc;
export 'package:cupertino_ffi/core_foundation.dart'
    show arcPush, arcPop, arcReturn, arcFieldGet, arcFieldSet;

bool _isDynamicLibraryOpened = false;

/// Ensures that the Objective-C library has been loaded.
void _openDynamicLibrary() {
  if (!_isDynamicLibraryOpened) {
    _isDynamicLibraryOpened = true;
    DynamicLibrary.open(
        "/System/Library/Frameworks/EventKit.framework/Versions/A/EventKit");
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKActionsAccounting extends Struct<EKActionsAccounting> {
  factory EKActionsAccounting._() {
    throw UnimplementedError();
  }
  static Pointer<EKActionsAccounting> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKActionsAccounting").cast<EKActionsAccounting>();
  }

  static Pointer actions(
    Pointer<EKActionsAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actions"),
    );
  }

  static Pointer init(
    Pointer<EKActionsAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void recordResult(
    Pointer<EKActionsAccounting> _self,
    int arg, {
    @required Pointer forAction,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("recordResult:forAction:"),
      arg,
      forAction,
    );
  }

  static void reset(
    Pointer<EKActionsAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static int resultForAction(
    Pointer<EKActionsAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("resultForAction:"),
      arg,
    );
  }

  static void setActions(
    Pointer<EKActionsAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setActions:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAlarm extends Struct<EKAlarm> {
  factory EKAlarm._() {
    throw UnimplementedError();
  }
  static Pointer<EKAlarm> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKAlarm").cast<EKAlarm>();
  }

  static Pointer UUID(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static Pointer absoluteDate(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("absoluteDate"),
    );
  }

  static Pointer acknowledgedDate(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgedDate"),
    );
  }

  static Pointer actionString(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionString"),
    );
  }

  static Pointer backingAlarm(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingAlarm"),
    );
  }

  static Pointer bookmark(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bookmark"),
    );
  }

  static Pointer calendarItemOwner(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemOwner"),
    );
  }

  static Pointer calendarOwner(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarOwner"),
    );
  }

  static int compare(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer emailAddress(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer externalID(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalID"),
    );
  }

  static Pointer initWithAbsoluteDate(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAbsoluteDate:"),
      arg,
    );
  }

  static Pointer initWithObject(
    Pointer<EKAlarm> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithRelativeOffset(
    Pointer<EKAlarm> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithRelativeOffset:"),
      arg,
    );
  }

  static int isAbsolute(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAbsolute"),
    );
  }

  static int isDefault(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefault"),
    );
  }

  static int isDefaultAlarm(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefaultAlarm"),
    );
  }

  static int isSnoozed(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSnoozed"),
    );
  }

  static int isTimeToLeaveAlarm(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTimeToLeaveAlarm"),
    );
  }

  static int isTopographicallyEqualToAlarm(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTopographicallyEqualToAlarm:"),
      arg,
    );
  }

  static int isVehicleAlarm(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isVehicleAlarm"),
    );
  }

  static int notRelativeToTravelTime(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("notRelativeToTravelTime"),
    );
  }

  static Pointer originalAlarm(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalAlarm"),
    );
  }

  static Pointer owner(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("owner"),
    );
  }

  static Pointer ownerUUID(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerUUID"),
    );
  }

  static int proximity(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("proximity"),
    );
  }

  static Pointer proximityString(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proximityString"),
    );
  }

  static double relativeOffset(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("relativeOffset"),
    );
  }

  static void setAbsoluteDate(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAbsoluteDate:"),
      arg,
    );
  }

  static void setAcknowledgedDate(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcknowledgedDate:"),
      arg,
    );
  }

  static void setActionString(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setActionString:"),
      arg,
    );
  }

  static void setBookmark(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBookmark:"),
      arg,
    );
  }

  static void setCalendarItemOwner(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarItemOwner:"),
      arg,
    );
  }

  static void setCalendarOwner(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarOwner:"),
      arg,
    );
  }

  static void setDefaultAlarm(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarm:"),
      arg,
    );
  }

  static void setEmailAddress(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailAddress:"),
      arg,
    );
  }

  static void setIsSnoozed(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSnoozed:"),
      arg,
    );
  }

  static void setIsTimeToLeaveAlarm(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsTimeToLeaveAlarm:"),
      arg,
    );
  }

  static void setNotRelativeToTravelTime(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNotRelativeToTravelTime:"),
      arg,
    );
  }

  static void setOriginalAlarm(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalAlarm:"),
      arg,
    );
  }

  static void setProximity(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setProximity:"),
      arg,
    );
  }

  static void setProximityString(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProximityString:"),
      arg,
    );
  }

  static void setRelativeOffset(
    Pointer<EKAlarm> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRelativeOffset:"),
      arg,
    );
  }

  static void setSnoozedAlarms(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSnoozedAlarms:"),
      arg,
    );
  }

  static void setSoundName(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSoundName:"),
      arg,
    );
  }

  static void setStructuredLocation(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredLocation:"),
      arg,
    );
  }

  static void setTriggerIsNotRelativeToTravelTime(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTriggerIsNotRelativeToTravelTime:"),
      arg,
    );
  }

  static void setType(
    Pointer<EKAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static void setUrl(
    Pointer<EKAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrl:"),
      arg,
    );
  }

  static Pointer sharedUID(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedUID"),
    );
  }

  static int shouldIncludeInNormalAlarms(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldIncludeInNormalAlarms"),
    );
  }

  static Pointer snoozedAlarms(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("snoozedAlarms"),
    );
  }

  static Pointer soundName(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("soundName"),
    );
  }

  static Pointer structuredLocation(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocation"),
    );
  }

  static int triggerIsNotRelativeToTravelTime(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("triggerIsNotRelativeToTravelTime"),
    );
  }

  static int type(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer url(
    Pointer<EKAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAssistantEventPredicate extends Struct<EKAssistantEventPredicate> {
  factory EKAssistantEventPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKAssistantEventPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKAssistantEventPredicate")
        .cast<EKAssistantEventPredicate>();
  }

  static int countSoFar(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countSoFar"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKAssistantEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<EKAssistantEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static int hash(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKAssistantEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKAssistantEventPredicate> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer title,
    @required Pointer location,
    @required Pointer notes,
    @required int limit,
    @required Pointer calendars,
    @required Pointer participants,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithStartDate:endDate:timeZone:title:location:notes:limit:calendars:participants:"),
      arg,
      endDate,
      timeZone,
      title,
      location,
      notes,
      limit,
      calendars,
      participants,
    );
  }

  static int isEqual(
    Pointer<EKAssistantEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int limit(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("limit"),
    );
  }

  static Pointer location(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer notes(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer participants(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participants"),
    );
  }

  static Pointer predicateFormat(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void setCountSoFar(
    Pointer<EKAssistantEventPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCountSoFar:"),
      arg,
    );
  }

  static Pointer title(
    Pointer<EKAssistantEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAttachment extends Struct<EKAttachment> {
  factory EKAttachment._() {
    throw UnimplementedError();
  }
  static Pointer<EKAttachment> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKAttachment").cast<EKAttachment>();
  }

  static Pointer attachmentIDOnServer(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachmentIDOnServer"),
    );
  }

  static Pointer backingAttachment(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingAttachment"),
    );
  }

  static Pointer contentType(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentType"),
    );
  }

  static Pointer filename(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static Pointer filenameSuggestedByServer(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filenameSuggestedByServer"),
    );
  }

  static Pointer icon(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("icon"),
    );
  }

  static Pointer initWithAttachment(
    Pointer<EKAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAttachment:"),
      arg,
    );
  }

  static Pointer initWithFilepath(
    Pointer<EKAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFilepath:"),
      arg,
    );
  }

  static Pointer initWithObject(
    Pointer<EKAttachment> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer isAutoArchivedNumber(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isAutoArchivedNumber"),
    );
  }

  static int isCached(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCached"),
    );
  }

  static void setAttachmentIDOnServer(
    Pointer<EKAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttachmentIDOnServer:"),
      arg,
    );
  }

  static void setUrlOnDisk(
    Pointer<EKAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrlOnDisk:"),
      arg,
    );
  }

  static void setUrlOnServer(
    Pointer<EKAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrlOnServer:"),
      arg,
    );
  }

  static Pointer urlOnDisk(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlOnDisk"),
    );
  }

  static Pointer urlOnServer(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlOnServer"),
    );
  }

  static Pointer uuid(
    Pointer<EKAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAttendee extends Struct<EKAttendee> {
  factory EKAttendee._() {
    throw UnimplementedError();
  }
  static Pointer<EKAttendee> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKAttendee").cast<EKAttendee>();
  }

  static Pointer displayString(
    Pointer<EKAttendee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayString"),
    );
  }

  static Pointer lastModifiedParticipationStatus(
    Pointer<EKAttendee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastModifiedParticipationStatus"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAvailabilityCache extends Struct<EKAvailabilityCache> {
  factory EKAvailabilityCache._() {
    throw UnimplementedError();
  }
  static Pointer<EKAvailabilityCache> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKAvailabilityCache").cast<EKAvailabilityCache>();
  }

  static void cancelAvailabilityRequestWithID(
    Pointer<EKAvailabilityCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelAvailabilityRequestWithID:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKAvailabilityCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer init(
    Pointer<EKAvailabilityCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithSource(
    Pointer<EKAvailabilityCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSource:"),
      arg,
    );
  }

  static Pointer requestAvailabilityBetweenStartDate(
    Pointer<EKAvailabilityCache> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer ignoredEventID,
    @required Pointer addresses,
    @required Pointer resultsBlock,
    @required Pointer completionBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "requestAvailabilityBetweenStartDate:endDate:ignoredEventID:addresses:resultsBlock:completionBlock:"),
      arg,
      endDate,
      ignoredEventID,
      addresses,
      resultsBlock,
      completionBlock,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAvailabilityCachedSpan extends Struct<EKAvailabilityCachedSpan> {
  factory EKAvailabilityCachedSpan._() {
    throw UnimplementedError();
  }
  static Pointer<EKAvailabilityCachedSpan> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKAvailabilityCachedSpan")
        .cast<EKAvailabilityCachedSpan>();
  }

  static Pointer creationDate(
    Pointer<EKAvailabilityCachedSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationDate"),
    );
  }

  static Pointer description(
    Pointer<EKAvailabilityCachedSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void setCreationDate(
    Pointer<EKAvailabilityCachedSpan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreationDate:"),
      arg,
    );
  }

  static void setSpan(
    Pointer<EKAvailabilityCachedSpan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSpan:"),
      arg,
    );
  }

  static Pointer span(
    Pointer<EKAvailabilityCachedSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("span"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAvailabilityCachedSpanRange
    extends Struct<EKAvailabilityCachedSpanRange> {
  factory EKAvailabilityCachedSpanRange._() {
    throw UnimplementedError();
  }
  static Pointer<EKAvailabilityCachedSpanRange> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKAvailabilityCachedSpanRange")
        .cast<EKAvailabilityCachedSpanRange>();
  }

  static Pointer description(
    Pointer<EKAvailabilityCachedSpanRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer gatherFreshlyCachedSpansBetweenStartDate(
    Pointer<EKAvailabilityCachedSpanRange> _self,
    Pointer arg, {
    @required Pointer endDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("gatherFreshlyCachedSpansBetweenStartDate:endDate:"),
      arg,
      endDate,
    );
  }

  static Pointer init(
    Pointer<EKAvailabilityCachedSpanRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void injectSpans(
    Pointer<EKAvailabilityCachedSpanRange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("injectSpans:"),
      arg,
    );
  }

  static Pointer spans(
    Pointer<EKAvailabilityCachedSpanRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("spans"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAvailabilitySpan extends Struct<EKAvailabilitySpan> {
  factory EKAvailabilitySpan._() {
    throw UnimplementedError();
  }
  static Pointer<EKAvailabilitySpan> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKAvailabilitySpan").cast<EKAvailabilitySpan>();
  }

  static Pointer description(
    Pointer<EKAvailabilitySpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer endDate(
    Pointer<EKAvailabilitySpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer init(
    Pointer<EKAvailabilitySpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKAvailabilitySpan> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:endDate:type:"),
      arg,
      endDate,
      type,
    );
  }

  static Pointer startDate(
    Pointer<EKAvailabilitySpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static int type(
    Pointer<EKAvailabilitySpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKAvailabilityUtilities extends Struct<EKAvailabilityUtilities> {
  factory EKAvailabilityUtilities._() {
    throw UnimplementedError();
  }
  static Pointer<EKAvailabilityUtilities> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKAvailabilityUtilities")
        .cast<EKAvailabilityUtilities>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKBackingObjectsTracker extends Struct<EKBackingObjectsTracker> {
  factory EKBackingObjectsTracker._() {
    throw UnimplementedError();
  }
  static Pointer<EKBackingObjectsTracker> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKBackingObjectsTracker")
        .cast<EKBackingObjectsTracker>();
  }

  static int accessedErrors(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accessedErrors"),
    );
  }

  static int accessedNotifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accessedNotifications"),
    );
  }

  static void addBackingCalendars(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addBackingCalendars:"),
      arg,
    );
  }

  static void addBackingSources(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addBackingSources:"),
      arg,
    );
  }

  static void addOrUpdateBackingNotification(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer forCalendarOrSourceIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addOrUpdateBackingNotification:forCalendarOrSourceIdentifier:"),
      arg,
      forCalendarOrSourceIdentifier,
    );
  }

  static void addOrUpdateBackingNotifications(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addOrUpdateBackingNotifications:"),
      arg,
    );
  }

  static Pointer backingCalendarItems(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingCalendarItems"),
    );
  }

  static Pointer backingCalendars(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingCalendars"),
    );
  }

  static Pointer backingDetached(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingDetached"),
    );
  }

  static Pointer backingErrors(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingErrors"),
    );
  }

  static Pointer backingExdates(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingExdates"),
    );
  }

  static Pointer backingNotifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingNotifications"),
    );
  }

  static Pointer backingRecurrenceSets(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingRecurrenceSets"),
    );
  }

  static Pointer backingSources(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingSources"),
    );
  }

  static Pointer backingStore(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static Pointer calendarDictionary(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarDictionary"),
    );
  }

  static Pointer calendarIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifiers"),
    );
  }

  static Pointer calendarOrSourceToError(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarOrSourceToError"),
    );
  }

  static Pointer calendarOrSourceToNotifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarOrSourceToNotifications"),
    );
  }

  static Pointer calendarSourceIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarSourceIdentifiers"),
    );
  }

  static Pointer calendarSourceWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer calendarSources(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarSources"),
    );
  }

  static Pointer calendarSourcesDictionary(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarSourcesDictionary"),
    );
  }

  static Pointer calendarWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer calendars(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendars"),
    );
  }

  static Pointer calendarsToItemIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarsToItemIdentifiers"),
    );
  }

  static Pointer copyForBackingStore(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackingStore:"),
      arg,
    );
  }

  static void deleteItemWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required int thisAndFuture,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("deleteItemWithIdentifier:thisAndFuture:"),
      arg,
      thisAndFuture,
    );
  }

  static void demandErrors(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("demandErrors"),
    );
  }

  static void demandNotifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("demandNotifications"),
    );
  }

  static Pointer detachedItemsForIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("detachedItemsForIdentifier:"),
      arg,
    );
  }

  static Pointer errorForCalendarWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("errorForCalendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer errorForSourceWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("errorForSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer errors(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errors"),
    );
  }

  static int errorsDemanded(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("errorsDemanded"),
    );
  }

  static Pointer exceptionDatesForIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionDatesForIdentifier:"),
      arg,
    );
  }

  static Pointer exceptionDictionary(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionDictionary"),
    );
  }

  static Pointer externalToInternalIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalToInternalIdentifiers"),
    );
  }

  static Pointer fetchBackingCalendarsWithSourceIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fetchBackingCalendarsWithSourceIdentifiers:"),
      arg,
    );
  }

  static Pointer fetchBackingDelegateSources(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchBackingDelegateSources"),
    );
  }

  static Pointer fetchBackingNotificationsWithCalendarIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer sourceIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "fetchBackingNotificationsWithCalendarIdentifiers:sourceIdentifiers:"),
      arg,
      sourceIdentifiers,
    );
  }

  static Pointer fetchBackingSources(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchBackingSources"),
    );
  }

  static int hasSourceFilters(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSourceFilters"),
    );
  }

  static Pointer init(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static Pointer initWithSourceFilters(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required int options,
    @required Pointer backingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithSourceFilters:options:backingStore:"),
      arg,
      options,
      backingStore,
    );
  }

  static Pointer itemDictionary(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemDictionary"),
    );
  }

  static Pointer itemIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemIdentifiers"),
    );
  }

  static Pointer itemIdentifiersInCalendars(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemIdentifiersInCalendars:"),
      arg,
    );
  }

  static Pointer itemWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemWithIdentifier:"),
      arg,
    );
  }

  static Pointer items(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("items"),
    );
  }

  static Pointer itemsWithExternalIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemsWithExternalIdentifier:"),
      arg,
    );
  }

  static Pointer itemsWithManagedObjectIDs(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemsWithManagedObjectIDs:"),
      arg,
    );
  }

  static Pointer naturalLanguageSuggestedEventCalendarIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("naturalLanguageSuggestedEventCalendarIdentifier"),
    );
  }

  static Pointer notificationIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIdentifiers"),
    );
  }

  static Pointer notificationIdentifiersForCalendarWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIdentifiersForCalendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer notificationIdentifiersForSourceWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIdentifiersForSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer notificationWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationWithIdentifier:"),
      arg,
    );
  }

  static Pointer notifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notifications"),
    );
  }

  static int notificationsDemanded(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("notificationsDemanded"),
    );
  }

  static int options(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer preFrozenCalendarDictionaries(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenCalendarDictionaries"),
    );
  }

  static Pointer preFrozenSourceDictionaries(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenSourceDictionaries"),
    );
  }

  static void refreshBackingCalendars(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingCalendars"),
    );
  }

  static void refreshBackingErrors(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingErrors"),
    );
  }

  static void refreshBackingErrorsWithCalendarIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer sourceIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "refreshBackingErrorsWithCalendarIdentifiers:sourceIdentifiers:"),
      arg,
      sourceIdentifiers,
    );
  }

  static void refreshBackingNotifications(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingNotifications"),
    );
  }

  static void refreshBackingNotificationsWithCalendarIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer sourceIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "refreshBackingNotificationsWithCalendarIdentifiers:sourceIdentifiers:"),
      arg,
      sourceIdentifiers,
    );
  }

  static void refreshBackingSources(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingSources"),
    );
  }

  static void removeCalendarSourceWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCalendarSourceWithIdentifier:"),
      arg,
    );
  }

  static void removeCalendarWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCalendarWithIdentifier:"),
      arg,
    );
  }

  static void removeItemWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItemWithIdentifier:"),
      arg,
    );
  }

  static void removeItemsWithManagedObjectIDs(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItemsWithManagedObjectIDs:"),
      arg,
    );
  }

  static void removeItemsWithoutIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItemsWithoutIdentifiers:"),
      arg,
    );
  }

  static void removeNotificationWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeNotificationWithIdentifier:"),
      arg,
    );
  }

  static void removeNotificationsWithManagedObjectIDs(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeNotificationsWithManagedObjectIDs:"),
      arg,
    );
  }

  static void resetForOptions(
    Pointer<EKBackingObjectsTracker> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("resetForOptions:"),
      arg,
    );
  }

  static Pointer seriesForRecurrenceSetIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("seriesForRecurrenceSetIdentifier:"),
      arg,
    );
  }

  static void setBackingCalendarItems(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingCalendarItems:"),
      arg,
    );
  }

  static void setBackingCalendars(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingCalendars:"),
      arg,
    );
  }

  static void setBackingDetached(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingDetached:"),
      arg,
    );
  }

  static void setBackingExdates(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingExdates:"),
      arg,
    );
  }

  static void setBackingNotifications(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingNotifications:"),
      arg,
    );
  }

  static void setBackingRecurrenceSets(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingRecurrenceSets:"),
      arg,
    );
  }

  static void setBackingSources(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingSources:"),
      arg,
    );
  }

  static void setBackingStore(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStore:"),
      arg,
    );
  }

  static void setCalendarOrSourceToError(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarOrSourceToError:"),
      arg,
    );
  }

  static void setCalendarOrSourceToNotifications(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarOrSourceToNotifications:"),
      arg,
    );
  }

  static void setCalendarsToItemIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarsToItemIdentifiers:"),
      arg,
    );
  }

  static void setErrorsDemanded(
    Pointer<EKBackingObjectsTracker> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setErrorsDemanded:"),
      arg,
    );
  }

  static void setExternalToInternalIdentifiers(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExternalToInternalIdentifiers:"),
      arg,
    );
  }

  static void setNaturalLanguageSuggestedEventCalendarIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNaturalLanguageSuggestedEventCalendarIdentifier:"),
      arg,
    );
  }

  static void setNotificationsDemanded(
    Pointer<EKBackingObjectsTracker> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNotificationsDemanded:"),
      arg,
    );
  }

  static void setOptions(
    Pointer<EKBackingObjectsTracker> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOptions:"),
      arg,
    );
  }

  static void setPreFrozenCalendarDictionaries(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreFrozenCalendarDictionaries:"),
      arg,
    );
  }

  static void setPreFrozenSourceDictionaries(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreFrozenSourceDictionaries:"),
      arg,
    );
  }

  static void setSourceFilters(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceFilters:"),
      arg,
    );
  }

  static void setSuggestedEventCalendarIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestedEventCalendarIdentifier:"),
      arg,
    );
  }

  static Pointer sourceFilters(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceFilters"),
    );
  }

  static Pointer suggestedEventCalendarIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEventCalendarIdentifier"),
    );
  }

  static Pointer summary(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summary"),
    );
  }

  static void trackCalendarSourceWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer source,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCalendarSourceWithIdentifier:source:"),
      arg,
      source,
    );
  }

  static void trackCalendarWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer calendar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCalendarWithIdentifier:calendar:"),
      arg,
      calendar,
    );
  }

  static int trackItemWithIdentifier(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg, {
    @required Pointer item,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackItemWithIdentifier:item:"),
      arg,
      item,
    );
  }

  static Pointer trackedObjectIDsInManagedObjectIDs(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("trackedObjectIDsInManagedObjectIDs:"),
      arg,
    );
  }

  static void untrackAllItems(
    Pointer<EKBackingObjectsTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("untrackAllItems"),
    );
  }

  static void updateCalendarToItemsMappingWithItems(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateCalendarToItemsMappingWithItems:"),
      arg,
    );
  }

  static void updateItems(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateItems:"),
      arg,
    );
  }

  static void useBackingCalendars(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("useBackingCalendars:"),
      arg,
    );
  }

  static void useBackingNotifications(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("useBackingNotifications:"),
      arg,
    );
  }

  static void useBackingSources(
    Pointer<EKBackingObjectsTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("useBackingSources:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKBackingStore extends Struct<EKBackingStore> {
  factory EKBackingStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKBackingStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKBackingStore").cast<EKBackingStore>();
  }

  static int accessToEventsRequested(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accessToEventsRequested"),
    );
  }

  static int accessToRemindersRequested(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accessToRemindersRequested"),
    );
  }

  static Pointer acquireDefaultCalendarForEntityType(
    Pointer<EKBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("acquireDefaultCalendarForEntityType:"),
      arg,
    );
  }

  static void adjustDetachedEvents(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer andExceptions,
    @required Pointer onSeries,
    @required Pointer sliceOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "adjustDetachedEvents:andExceptions:onSeries:sliceOffset:"),
      arg,
      andExceptions,
      onSeries,
      sliceOffset,
    );
  }

  static Pointer allCalendars(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allCalendars"),
    );
  }

  static Pointer allDelegateSources(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allDelegateSources"),
    );
  }

  static Pointer allEventCalendars(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEventCalendars"),
    );
  }

  static Pointer allEvents(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEvents"),
    );
  }

  static Pointer allFrozenOrNewCalendars(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allFrozenOrNewCalendars"),
    );
  }

  static Pointer allFrozenOrNewCalendarsMatchingBlock(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("allFrozenOrNewCalendarsMatchingBlock:"),
      arg,
    );
  }

  static Pointer allNotifications(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allNotifications"),
    );
  }

  static Pointer allNotificationsIncludingPast(
    Pointer<EKBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("allNotificationsIncludingPast:"),
      arg,
    );
  }

  static Pointer allReminderCalendars(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allReminderCalendars"),
    );
  }

  static Pointer allReminders(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allReminders"),
    );
  }

  static Pointer allSources(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allSources"),
    );
  }

  static Pointer backingObjectsQueue(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingObjectsQueue"),
    );
  }

  static Pointer backingObjectsTracker(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingObjectsTracker"),
    );
  }

  static Pointer backingStoreAvailableGroup(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStoreAvailableGroup"),
    );
  }

  static Pointer backingStoreIdentifier(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStoreIdentifier"),
    );
  }

  static int batchAcceptAlternateTimeProposal(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchAcceptAlternateTimeProposal:error:"),
      arg,
      error,
    );
  }

  static int batchAcknowledgeNotifications(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchAcknowledgeNotifications:error:"),
      arg,
      error,
    );
  }

  static int batchChange(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchChange:error:"),
      arg,
      error,
    );
  }

  static int batchChangeAllOrFuture(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int span,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("batchChangeAllOrFuture:span:error:"),
      arg,
      span,
      error,
    );
  }

  static int batchChangeCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchChangeCalendar:error:"),
      arg,
      error,
    );
  }

  static int batchChangeSource(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchChangeSource:error:"),
      arg,
      error,
    );
  }

  static int batchDelete(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchDelete:error:"),
      arg,
      error,
    );
  }

  static int batchDeleteAllOrFuture(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int span,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("batchDeleteAllOrFuture:span:error:"),
      arg,
      span,
      error,
    );
  }

  static int batchDeleteCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchDeleteCalendar:error:"),
      arg,
      error,
    );
  }

  static int batchDeleteSource(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchDeleteSource:error:"),
      arg,
      error,
    );
  }

  static int batchRemoveEvent(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int span,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("batchRemoveEvent:span:error:"),
      arg,
      span,
      error,
    );
  }

  static int batchRespondToInvitations(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required Pointer exceptForDates,
    @required int notifyOrganizer,
    @required Pointer placingInCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "batchRespondToInvitations:withStatus:exceptForDates:notifyOrganizer:placingInCalendar:error:"),
      arg,
      withStatus,
      exceptForDates,
      notifyOrganizer,
      placingInCalendar,
      error,
    );
  }

  static int batchRespondToSharedCalendarInvitation(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "batchRespondToSharedCalendarInvitation:withStatus:error:"),
      arg,
      withStatus,
      error,
    );
  }

  static int batchSaveEvents(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int span,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("batchSaveEvents:span:error:"),
      arg,
      span,
      error,
    );
  }

  static int batchSaveNotifications(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchSaveNotifications:error:"),
      arg,
      error,
    );
  }

  static int batchSaveReminder(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("batchSaveReminder:error:"),
      arg,
      error,
    );
  }

  static Pointer cachedRange(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedRange"),
    );
  }

  static Pointer calendarChangeHelper(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarChangeHelper"),
    );
  }

  static Pointer calendarWithIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarWithIdentifier:"),
      arg,
    );
  }

  static int canCachePredicate(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canCachePredicate:"),
      arg,
    );
  }

  static Pointer changeTracker(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeTracker"),
    );
  }

  static Pointer changeTrackerCopy(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeTrackerCopy"),
    );
  }

  static Pointer commitedEventForEvent$ignoringPotentialSlice$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int ignoringPotentialSlice,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("commitedEventForEvent:ignoringPotentialSlice:"),
      arg,
      ignoringPotentialSlice,
    );
  }

  static Pointer commitedEventForEvent$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("commitedEventForEvent:"),
      arg,
    );
  }

  static Pointer committedCalendarForCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("committedCalendarForCalendar:"),
      arg,
    );
  }

  static Pointer committedItemForItem(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("committedItemForItem:"),
      arg,
    );
  }

  static Pointer copyForBackgroundUpdate(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackgroundUpdate"),
    );
  }

  static Pointer createNonPartialFrozenObjectForPartialObject(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer withFrozenClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createNonPartialFrozenObjectForPartialObject:withFrozenClass:"),
      arg,
      withFrozenClass,
    );
  }

  static Pointer createNonPartialObjectForPartialObject(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer withMeltedClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createNonPartialObjectForPartialObject:withMeltedClass:"),
      arg,
      withMeltedClass,
    );
  }

  static Pointer defaultCalendarForEntityType(
    Pointer<EKBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForEntityType:"),
      arg,
    );
  }

  static Pointer defaultCalendarForNewEvents(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewEvents"),
    );
  }

  static Pointer defaultCalendarForNewReminders(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewReminders"),
    );
  }

  static Pointer detachedEventsForLocalUID(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("detachedEventsForLocalUID:"),
      arg,
    );
  }

  static Pointer diffFromCommittedCalendarForCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("diffFromCommittedCalendarForCalendar:"),
      arg,
    );
  }

  static Pointer diffFromCommittedItemForItem$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("diffFromCommittedItemForItem:"),
      arg,
    );
  }

  static Pointer diffFromCommittedItemForItem$ignoringPotentialSlice$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int ignoringPotentialSlice,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("diffFromCommittedItemForItem:ignoringPotentialSlice:"),
      arg,
      ignoringPotentialSlice,
    );
  }

  static Pointer errorForCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("errorForCalendar:"),
      arg,
    );
  }

  static Pointer errorForSource(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("errorForSource:"),
      arg,
    );
  }

  static int eventsExistOnCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsExistOnCalendar:"),
      arg,
    );
  }

  static int eventsMarkedScheduleAgentClientExistOnCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsMarkedScheduleAgentClientExistOnCalendar:"),
      arg,
    );
  }

  static Pointer eventsWithCalendarIdentifiers(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer exceptionsForLocalUID(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionsForLocalUID:"),
      arg,
    );
  }

  static Pointer expandAndCachePredicate(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("expandAndCachePredicate:"),
      arg,
    );
  }

  static Pointer expandAndCachePredicateReturningCounts(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("expandAndCachePredicateReturningCounts:"),
      arg,
    );
  }

  static int finishBatch(
    Pointer<EKBackingStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("finishBatch:"),
      arg,
    );
  }

  static int finishBatchOfObjectsWithIdentifiers(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("finishBatchOfObjectsWithIdentifiers:error:"),
      arg,
      error,
    );
  }

  static int futureScheduledEventsExistOnCalendar(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("futureScheduledEventsExistOnCalendar:"),
      arg,
    );
  }

  static Pointer identifiersToCommit(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifiersToCommit"),
    );
  }

  static Pointer init(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static Pointer initWithSourceFilters(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int options,
    @required int accessRequestedForEvents,
    @required int accessRequestedForReminders,
    @required Pointer orWithExistingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSourceFilters:options:accessRequestedForEvents:accessRequestedForReminders:orWithExistingStore:"),
      arg,
      options,
      accessRequestedForEvents,
      accessRequestedForReminders,
      orWithExistingStore,
    );
  }

  static void insertNaturalLanguageSuggestedEventCalendar(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("insertNaturalLanguageSuggestedEventCalendar"),
    );
  }

  static void insertSuggestedEventCalendar(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("insertSuggestedEventCalendar"),
    );
  }

  static Pointer itemWithIdentifier$apiExpected$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int apiExpected,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("itemWithIdentifier:apiExpected:"),
      arg,
      apiExpected,
    );
  }

  static Pointer itemWithIdentifier$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemWithIdentifier:"),
      arg,
    );
  }

  static Pointer itemsWithExternalIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int ofType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("itemsWithExternalIdentifier:ofType:"),
      arg,
      ofType,
    );
  }

  static Pointer itemsWithIdentifiers(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int apiExpected,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("itemsWithIdentifiers:apiExpected:"),
      arg,
      apiExpected,
    );
  }

  static Pointer lastOccurrenceInSeries$exclusionOptions$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("lastOccurrenceInSeries:exclusionOptions:"),
      arg,
      exclusionOptions,
    );
  }

  static Pointer lastOccurrenceInSeries$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("lastOccurrenceInSeries:"),
      arg,
    );
  }

  static Pointer lookupItemsWithExternalIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithExternalIdentifier:type:"),
      arg,
      type,
    );
  }

  static Pointer lookupItemsWithIdentifiers(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithIdentifiers:type:"),
      arg,
      type,
    );
  }

  static Pointer mainStore(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mainStore"),
    );
  }

  static Pointer naturalLanguageSuggestedEventCalendar(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("naturalLanguageSuggestedEventCalendar"),
    );
  }

  static Pointer noboCacheQueue(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("noboCacheQueue"),
    );
  }

  static int notificationCountForCalendar$includePast$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int includePast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int64(
      _self,
      _objc.getSelector("notificationCountForCalendar:includePast:"),
      arg,
      includePast,
    );
  }

  static int notificationCountForCalendar$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("notificationCountForCalendar:"),
      arg,
    );
  }

  static Pointer notificationsForCalendar$includePast$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int includePast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForCalendar:includePast:"),
      arg,
      includePast,
    );
  }

  static Pointer notificationsForCalendar$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationsForCalendar:"),
      arg,
    );
  }

  static Pointer notificationsForEvent$includePast$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int includePast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForEvent:includePast:"),
      arg,
      includePast,
    );
  }

  static Pointer notificationsForEvent$isForSeries$includePast$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int isForSeries,
    @required int includePast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForEvent:isForSeries:includePast:"),
      arg,
      isForSeries,
      includePast,
    );
  }

  static Pointer notificationsForEvent$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationsForEvent:"),
      arg,
    );
  }

  static Pointer notificationsForEvent$isForSeries$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int isForSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForEvent:isForSeries:"),
      arg,
      isForSeries,
    );
  }

  static Pointer notificationsForSource$includePast$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required int includePast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForSource:includePast:"),
      arg,
      includePast,
    );
  }

  static Pointer notificationsForSource$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationsForSource:"),
      arg,
    );
  }

  static Pointer occurrenceCache(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceCache"),
    );
  }

  static Pointer occurrencesForMultipleSeries$inRange$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("occurrencesForMultipleSeries:inRange:"),
      arg,
      inRange,
    );
  }

  static Pointer occurrencesForMultipleSeries$inRange$exclusionOptions$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer inRange,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "occurrencesForMultipleSeries:inRange:exclusionOptions:"),
      arg,
      inRange,
      exclusionOptions,
    );
  }

  static Pointer occurrencesForSeries$inRange$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("occurrencesForSeries:inRange:"),
      arg,
      inRange,
    );
  }

  static Pointer occurrencesForSeries$onDate$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer onDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("occurrencesForSeries:onDate:"),
      arg,
      onDate,
    );
  }

  static Pointer occurrencesForSeries$inRange$exclusionOptions$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer inRange,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("occurrencesForSeries:inRange:exclusionOptions:"),
      arg,
      inRange,
      exclusionOptions,
    );
  }

  static int options(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static void pruneCacheForDisjointRange$occurrencesToKeep$(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer occurrencesToKeep,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForDisjointRange:occurrencesToKeep:"),
      arg,
      occurrencesToKeep,
    );
  }

  static void pruneCacheForDisjointRange$(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForDisjointRange:"),
      arg,
    );
  }

  static void pruneCacheForRange(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForRange:"),
      arg,
    );
  }

  static void readdDetachedEvents(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer andExceptions,
    @required Pointer toSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("readdDetachedEvents:andExceptions:toSeries:"),
      arg,
      andExceptions,
      toSeries,
    );
  }

  static Pointer recurrenceChangeManager(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceChangeManager"),
    );
  }

  static void refreshBackingStore(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingStore"),
    );
  }

  static void refreshSources(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshSources"),
    );
  }

  static Pointer remindersWithCalendarIdentifiers(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer remindersWithContactIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithContactIdentifier:"),
      arg,
    );
  }

  static Pointer remindersWithDueDates(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithDueDates"),
    );
  }

  static Pointer remindersWithDueDatesInRange(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer withCalendarIdentifiers,
    @required Pointer withCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithDueDatesInRange:withCalendarIdentifiers:withCompletion:"),
      arg,
      withCalendarIdentifiers,
      withCompletion,
    );
  }

  static Pointer remindersWithIsCompleted$maxResults$withCalendarIdentifiers$(
    Pointer<EKBackingStore> _self,
    int arg, {
    @required int maxResults,
    @required Pointer withCalendarIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithIsCompleted:maxResults:withCalendarIdentifiers:"),
      arg,
      maxResults,
      withCalendarIdentifiers,
    );
  }

  static Pointer remindersWithIsCompleted$maxResults$(
    Pointer<EKBackingStore> _self,
    int arg, {
    @required int maxResults,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Uint64_returns_p(
      _self,
      _objc.getSelector("remindersWithIsCompleted:maxResults:"),
      arg,
      maxResults,
    );
  }

  static void replaceChangeTracker(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceChangeTracker:"),
      arg,
    );
  }

  static void resetCache(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetCache"),
    );
  }

  static int revertCalendars(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("revertCalendars:"),
      arg,
    );
  }

  static int revertItems(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("revertItems:"),
      arg,
    );
  }

  static int revertSources(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("revertSources:"),
      arg,
    );
  }

  static Pointer seriesForRecurrenceSetID(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("seriesForRecurrenceSetID:"),
      arg,
    );
  }

  static void setAccessToEventsRequested(
    Pointer<EKBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAccessToEventsRequested:"),
      arg,
    );
  }

  static void setAccessToRemindersRequested(
    Pointer<EKBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAccessToRemindersRequested:"),
      arg,
    );
  }

  static void setBackingObjectsQueue(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingObjectsQueue:"),
      arg,
    );
  }

  static void setBackingStoreIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStoreIdentifier:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewEvents(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewEvents:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewReminders(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewReminders:"),
      arg,
    );
  }

  static void setIdentifiersToCommit(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentifiersToCommit:"),
      arg,
    );
  }

  static void setMainStore(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMainStore:"),
      arg,
    );
  }

  static void setNoboCacheQueue(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNoboCacheQueue:"),
      arg,
    );
  }

  static void setOccurrenceCache(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOccurrenceCache:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerEmailFromJunkChecks(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerEmailFromJunkChecks:"),
      arg,
    );
  }

  static Pointer sourceErrors(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceErrors"),
    );
  }

  static Pointer sourceFilters(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceFilters"),
    );
  }

  static Pointer sourceWithIdentifier(
    Pointer<EKBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("sourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer suggestedEventCalendar(
    Pointer<EKBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEventCalendar"),
    );
  }

  static void undeleteFuture(
    Pointer<EKBackingStore> _self,
    Pointer arg, {
    @required Pointer originalMaster,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("undeleteFuture:originalMaster:"),
      arg,
      originalMaster,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKBackingStoreAccounting extends Struct<EKBackingStoreAccounting> {
  factory EKBackingStoreAccounting._() {
    throw UnimplementedError();
  }
  static Pointer<EKBackingStoreAccounting> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKBackingStoreAccounting")
        .cast<EKBackingStoreAccounting>();
  }

  static Pointer accountedForAllEventsInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer calendarsBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForAllEventsInQueue:lookupCachedBlock:calendarsBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      calendarsBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForAllRemindersInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer calendarsBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForAllRemindersInQueue:lookupCachedBlock:calendarsBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      calendarsBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForCompletedRemindersInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForCompletedRemindersInQueue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForEventsInCalendars(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForEventsInCalendars:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForEventsInRange(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer calendarsBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
    @required Pointer<Pointer> fetchedMasters,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForEventsInRange:queue:lookupCachedBlock:calendarsBlock:fetchBlock:updateBlock:fetchedMasters:"),
      arg,
      queue,
      lookupCachedBlock,
      calendarsBlock,
      fetchBlock,
      updateBlock,
      fetchedMasters,
    );
  }

  static Pointer accountedForEventsWithGeneralLookupPredicate(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForEventsWithGeneralLookupPredicate:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForIncompletedRemindersInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForIncompletedRemindersInQueue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForOccurrenceWithIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForOccurrenceWithIdentifier:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForOccurrencesWithExternalIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForOccurrencesWithExternalIdentifier:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForOccurrencesWithIdentifiers(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForOccurrencesWithIdentifiers:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForRemindersInCalendars(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer queue,
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForRemindersInCalendars:queue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      queue,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForRemindersWithContactIdentifiersInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForRemindersWithContactIdentifiersInQueue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static Pointer accountedForRemindersWithDueDatesInQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer lookupCachedBlock,
    @required Pointer fetchBlock,
    @required Pointer updateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "accountedForRemindersWithDueDatesInQueue:lookupCachedBlock:fetchBlock:updateBlock:"),
      arg,
      lookupCachedBlock,
      fetchBlock,
      updateBlock,
    );
  }

  static void addReceiptForAllCompletedReminders(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllCompletedReminders"),
    );
  }

  static void addReceiptForAllEvents(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllEvents"),
    );
  }

  static void addReceiptForAllIncompletedReminders(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllIncompletedReminders"),
    );
  }

  static void addReceiptForAllReminders(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllReminders"),
    );
  }

  static void addReceiptForAllRemindersWithContactIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllRemindersWithContactIdentifier"),
    );
  }

  static void addReceiptForAllRemindersWithDueDates(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForAllRemindersWithDueDates"),
    );
  }

  static void addReceiptForEventsInCalendars(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForEventsInCalendars:"),
      arg,
    );
  }

  static void addReceiptForGeneralLookupPredicate(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForGeneralLookupPredicate:"),
      arg,
    );
  }

  static void addReceiptForOccurrence(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForOccurrence:"),
      arg,
    );
  }

  static void addReceiptForOccurrenceExternalIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg, {
    @required Pointer internalIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addReceiptForOccurrenceExternalIdentifier:internalIdentifiers:"),
      arg,
      internalIdentifiers,
    );
  }

  static void addReceiptForOccurrenceIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForOccurrenceIdentifier:"),
      arg,
    );
  }

  static void addReceiptForRange(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForRange:"),
      arg,
    );
  }

  static void addReceiptForRemindersInCalendars(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptForRemindersInCalendars:"),
      arg,
    );
  }

  static void addReceiptsForGeneralLookupPredicates(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptsForGeneralLookupPredicates:"),
      arg,
    );
  }

  static void addReceiptsForOccurrenceExternalIdentifiers(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptsForOccurrenceExternalIdentifiers:"),
      arg,
    );
  }

  static void addReceiptsForOccurrenceIdentifiers(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptsForOccurrenceIdentifiers:"),
      arg,
    );
  }

  static void addReceiptsForOccurrences(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReceiptsForOccurrences:"),
      arg,
    );
  }

  static int allCompletedRemindersAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allCompletedRemindersAccountedFor"),
    );
  }

  static int allEventsAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allEventsAccountedFor"),
    );
  }

  static int allIncompletedRemindersAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allIncompletedRemindersAccountedFor"),
    );
  }

  static int allRemindersAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allRemindersAccountedFor"),
    );
  }

  static int allRemindersWithDueDatesAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allRemindersWithDueDatesAccountedFor"),
    );
  }

  static Pointer backingStore(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static void cacheWasPruned(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cacheWasPruned"),
    );
  }

  static Pointer cachedEventsInRange(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedEventsInRange"),
    );
  }

  static Pointer calendarIdentifiersWithAllRemindersCached(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifiersWithAllRemindersCached"),
    );
  }

  static void clearAll(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearAll"),
    );
  }

  static Pointer copyForBackingStore(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackingStore:"),
      arg,
    );
  }

  static Pointer copyWithZone(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int eventDateRangeAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventDateRangeAccountedFor:"),
      arg,
    );
  }

  static int eventsInCalendarsAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsInCalendarsAccountedFor:"),
      arg,
    );
  }

  static Pointer fetchSerialQueue(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchSerialQueue"),
    );
  }

  static int generalLookupPredicateAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("generalLookupPredicateAccountedFor:"),
      arg,
    );
  }

  static Pointer generalLookupPredicates(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generalLookupPredicates"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static Pointer itemIdentifiers(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemIdentifiers"),
    );
  }

  static Pointer mutableCopyWithZone(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static int occurrenceExternalIdentifierAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("occurrenceExternalIdentifierAccountedFor:"),
      arg,
    );
  }

  static int occurrenceIdentifierAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("occurrenceIdentifierAccountedFor:"),
      arg,
    );
  }

  static int receiptGeneration(
    Pointer<EKBackingStoreAccounting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("receiptGeneration"),
    );
  }

  static int remindersInCalendarsAccountedFor(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("remindersInCalendarsAccountedFor:"),
      arg,
    );
  }

  static void removeReceiptForOccurrenceExternalIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeReceiptForOccurrenceExternalIdentifier:"),
      arg,
    );
  }

  static void removeReceiptForOccurrenceIdentifier(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeReceiptForOccurrenceIdentifier:"),
      arg,
    );
  }

  static void setBackingStore(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStore:"),
      arg,
    );
  }

  static void setCachedEventsInRange(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedEventsInRange:"),
      arg,
    );
  }

  static void setFetchSerialQueue(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchSerialQueue:"),
      arg,
    );
  }

  static void setReceiptGeneration(
    Pointer<EKBackingStoreAccounting> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setReceiptGeneration:"),
      arg,
    );
  }

  static int shrinkCachedRangeTo(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shrinkCachedRangeTo:"),
      arg,
    );
  }

  static Pointer unaccountedForExternalIdentifiersIn(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("unaccountedForExternalIdentifiersIn:"),
      arg,
    );
  }

  static Pointer unaccountedForIdentifiersIn(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("unaccountedForIdentifiersIn:"),
      arg,
    );
  }

  static Pointer uncachedRangeForRange(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("uncachedRangeForRange:"),
      arg,
    );
  }

  static void updateExternalIdentifierReceipts(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateExternalIdentifierReceipts:"),
      arg,
    );
  }

  static void updateIdentifierReceipts(
    Pointer<EKBackingStoreAccounting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateIdentifierReceipts:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKBatchChangeInfo extends Struct<EKBatchChangeInfo> {
  factory EKBatchChangeInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKBatchChangeInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKBatchChangeInfo").cast<EKBatchChangeInfo>();
  }

  static int affectsObject(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("affectsObject:"),
      arg,
    );
  }

  static int changePending(
    Pointer<EKBatchChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("changePending"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKBatchChangeInfo> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer currentUID(
    Pointer<EKBatchChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentUID"),
    );
  }

  static Pointer description(
    Pointer<EKBatchChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithCurrentUID(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg, {
    @required Pointer originalUID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCurrentUID:originalUID:"),
      arg,
      originalUID,
    );
  }

  static Pointer originalUID(
    Pointer<EKBatchChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalUID"),
    );
  }

  static Pointer relatedIdentifier(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("relatedIdentifier:"),
      arg,
    );
  }

  static void setChangePending(
    Pointer<EKBatchChangeInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setChangePending:"),
      arg,
    );
  }

  static void setCurrentUID(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentUID:"),
      arg,
    );
  }

  static void setOriginalUID(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalUID:"),
      arg,
    );
  }

  static Pointer updatedIdentifier(
    Pointer<EKBatchChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("updatedIdentifier:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendar extends Struct<EKCalendar> {
  factory EKCalendar._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendar> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKCalendar").cast<EKCalendar>();
  }

  static Pointer actionStringsDisplayTitle(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionStringsDisplayTitle"),
    );
  }

  static void addAlarms(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAlarms:"),
      arg,
    );
  }

  static void addSharee(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addSharee:"),
      arg,
    );
  }

  static Pointer alarms(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarms"),
    );
  }

  static int allowEvents(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowEvents"),
    );
  }

  static int allowReminders(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowReminders"),
    );
  }

  static int allowedEntityTypes(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("allowedEntityTypes"),
    );
  }

  static int allowsContentModifications(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsContentModifications"),
    );
  }

  static int allowsScheduling(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsScheduling"),
    );
  }

  static Pointer backingCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingCalendar"),
    );
  }

  static int cachedHasSharees(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasSharees"),
    );
  }

  static Pointer calendarError(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarError"),
    );
  }

  static Pointer calendarIdentifier(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifier"),
    );
  }

  static int canMergeWithCalendar(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMergeWithCalendar:"),
      arg,
    );
  }

  static Pointer color(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("color"),
    );
  }

  static Pointer colorString(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("colorString"),
    );
  }

  static Pointer committedCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("committedCalendar"),
    );
  }

  static Pointer containerSource(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSource"),
    );
  }

  static Pointer coreDataEntityName(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("coreDataEntityName"),
    );
  }

  static Pointer defaultAlarmsForAllDayEvents(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForAllDayEvents"),
    );
  }

  static Pointer defaultAlarmsForTimedEvents(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForTimedEvents"),
    );
  }

  static Pointer defaultOrganizerAddressForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerAddressForNewItems"),
    );
  }

  static Pointer defaultOrganizerEmailForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEmailForNewItems"),
    );
  }

  static Pointer defaultOrganizerEncodedLikenessDataForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEncodedLikenessDataForNewItems"),
    );
  }

  static Pointer defaultOrganizerForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerForNewItems"),
    );
  }

  static int defaultOrganizerIsMeForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("defaultOrganizerIsMeForNewItems"),
    );
  }

  static Pointer defaultOrganizerNameForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerNameForNewItems"),
    );
  }

  static Pointer defaultOrganizerPhoneNumberForNewItems(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerPhoneNumberForNewItems"),
    );
  }

  static int deletionWarningsMask(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("deletionWarningsMask"),
    );
  }

  static int displayOrder(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static int eligibleForDefaultSchedulingCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("eligibleForDefaultSchedulingCalendar"),
    );
  }

  static Pointer exportData(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exportData"),
    );
  }

  static Pointer externalURI(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalURI"),
    );
  }

  static Pointer freeBusyCache(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("freeBusyCache"),
    );
  }

  static int hasSharees(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSharees"),
    );
  }

  static int ignoreAlarms(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ignoreAlarms"),
    );
  }

  static void
      importData$insertOptions$updateOptions$synchronous$processEvents$processReminders$progressBlock$finishBlock$(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required int insertOptions,
    @required int updateOptions,
    @required int synchronous,
    @required int processEvents,
    @required int processReminders,
    @required Pointer progressBlock,
    @required Pointer finishBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void(
      _self,
      _objc.getSelector(
          "importData:insertOptions:updateOptions:synchronous:processEvents:processReminders:progressBlock:finishBlock:"),
      arg,
      insertOptions,
      updateOptions,
      synchronous,
      processEvents,
      processReminders,
      progressBlock,
      finishBlock,
    );
  }

  static void
      importData$synchronous$processEvents$processReminders$progressBlock$finishBlock$(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required int synchronous,
    @required int processEvents,
    @required int processReminders,
    @required Pointer progressBlock,
    @required Pointer finishBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void(
      _self,
      _objc.getSelector(
          "importData:synchronous:processEvents:processReminders:progressBlock:finishBlock:"),
      arg,
      synchronous,
      processEvents,
      processReminders,
      progressBlock,
      finishBlock,
    );
  }

  static Pointer initWithAllowEvents(
    Pointer<EKCalendar> _self,
    int arg, {
    @required int allowReminders,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector("initWithAllowEvents:allowReminders:"),
      arg,
      allowReminders,
    );
  }

  static Pointer initWithObject(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static int isAffectingAvailability(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAffectingAvailability"),
    );
  }

  static int isBirthday(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBirthday"),
    );
  }

  static int isColorEditable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isColorEditable"),
    );
  }

  static int isCurrentUserCalendarOwner(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserCalendarOwner"),
    );
  }

  static int isDefaultSchedulingCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefaultSchedulingCalendar"),
    );
  }

  static int isDeletable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeletable"),
    );
  }

  static int isDifferentFromCommitted(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentFromCommitted"),
    );
  }

  static int isDistinguishedExchangeCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDistinguishedExchangeCalendar"),
    );
  }

  static int isEditable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isFacebookBirthdayCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFacebookBirthdayCalendar"),
    );
  }

  static int isFamilyCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFamilyCalendar"),
    );
  }

  static int isImmutable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isImmutable"),
    );
  }

  static int isMarkedImmutableSharees(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedImmutableSharees"),
    );
  }

  static int isMarkedUndeletable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedUndeletable"),
    );
  }

  static int isNaturalLanguageSuggestedEventCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNaturalLanguageSuggestedEventCalendar"),
    );
  }

  static int isRenameable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRenameable"),
    );
  }

  static int isShareable(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isShareable"),
    );
  }

  static int isSubscribed(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribed"),
    );
  }

  static int isSubscribedHolidayCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribedHolidayCalendar"),
    );
  }

  static int isSuggestedEventCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestedEventCalendar"),
    );
  }

  static int mergeWithCalendarAndSave$progressBlock$error$(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required Pointer progressBlock,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("mergeWithCalendarAndSave:progressBlock:error:"),
      arg,
      progressBlock,
      error,
    );
  }

  static int mergeWithCalendarAndSave$error$(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("mergeWithCalendarAndSave:error:"),
      arg,
      error,
    );
  }

  static void mergeWithCalendarAndSave$synchronous$progressBlock$finishBlock$(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required int synchronous,
    @required Pointer progressBlock,
    @required Pointer finishBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_returns_void(
      _self,
      _objc.getSelector(
          "mergeWithCalendarAndSave:synchronous:progressBlock:finishBlock:"),
      arg,
      synchronous,
      progressBlock,
      finishBlock,
    );
  }

  static Pointer notes(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static int notificationCount(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("notificationCount"),
    );
  }

  static int notificationCountIncludingPast(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_Uint64(
      _self,
      _objc.getSelector("notificationCountIncludingPast:"),
      arg,
    );
  }

  static Pointer path(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static Pointer prePublishURL(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prePublishURL"),
    );
  }

  static Pointer publishURL(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publishURL"),
    );
  }

  static void refetch(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refetch"),
    );
  }

  static void reinviteSharees(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("reinviteSharees:"),
      arg,
    );
  }

  static int remove(
    Pointer<EKCalendar> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("remove:"),
      arg,
    );
  }

  static void removeAlarms(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAlarms:"),
      arg,
    );
  }

  static void removeSharee(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeSharee:"),
      arg,
    );
  }

  static int removeWithSpan(
    Pointer<EKCalendar> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("removeWithSpan:error:"),
      arg,
      error,
    );
  }

  static void reorderBetweenEarlier(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required Pointer later,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reorderBetweenEarlier:later:"),
      arg,
      later,
    );
  }

  static Pointer reorderCalendars(
    Pointer<EKCalendar> _self,
    Pointer arg, {
    @required Pointer betweenEarlier,
    @required Pointer later,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("reorderCalendars:betweenEarlier:later:"),
      arg,
      betweenEarlier,
      later,
    );
  }

  static int revert(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("revert"),
    );
  }

  static int saveWithSpan(
    Pointer<EKCalendar> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("saveWithSpan:error:"),
      arg,
      error,
    );
  }

  static Pointer serverPath(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverPath"),
    );
  }

  static void setAlarms(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlarms:"),
      arg,
    );
  }

  static void setAllowEvents(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowEvents:"),
      arg,
    );
  }

  static void setAllowReminders(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowReminders:"),
      arg,
    );
  }

  static void setAllowsScheduling(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsScheduling:"),
      arg,
    );
  }

  static void setColor(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setColor:"),
      arg,
    );
  }

  static void setColorString(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setColorString:"),
      arg,
    );
  }

  static void setContainerSource(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerSource:"),
      arg,
    );
  }

  static void setDefaultAlarmsForAllDayEvents(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarmsForAllDayEvents:"),
      arg,
    );
  }

  static void setDefaultAlarmsForTimedEvents(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarmsForTimedEvents:"),
      arg,
    );
  }

  static void setDisplayOrder(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setDisplayOrder:"),
      arg,
    );
  }

  static void setIgnoreAlarms(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIgnoreAlarms:"),
      arg,
    );
  }

  static void setIsAffectingAvailability(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsAffectingAvailability:"),
      arg,
    );
  }

  static void setIsColorEditable(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsColorEditable:"),
      arg,
    );
  }

  static void setIsDefaultSchedulingCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDefaultSchedulingCalendar:"),
      arg,
    );
  }

  static void setIsDistinguishedExchangeCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDistinguishedExchangeCalendar:"),
      arg,
    );
  }

  static void setIsFacebookBirthdayCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFacebookBirthdayCalendar:"),
      arg,
    );
  }

  static void setIsFamilyCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFamilyCalendar:"),
      arg,
    );
  }

  static void setIsNaturalLanguageSuggestedEventCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsNaturalLanguageSuggestedEventCalendar:"),
      arg,
    );
  }

  static void setIsRenameable(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsRenameable:"),
      arg,
    );
  }

  static void setIsSubscribedHolidayCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSubscribedHolidayCalendar:"),
      arg,
    );
  }

  static void setIsSuggestedEventCalendar(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSuggestedEventCalendar:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setPublishURL(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublishURL:"),
      arg,
    );
  }

  static void setSharedOwnerAddress(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedOwnerAddress:"),
      arg,
    );
  }

  static void setSharedOwnerName(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedOwnerName:"),
      arg,
    );
  }

  static void setSharees(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharees:"),
      arg,
    );
  }

  static void setSource(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSource:"),
      arg,
    );
  }

  static void setSuppressEventSchedulingNotifications(
    Pointer<EKCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuppressEventSchedulingNotifications:"),
      arg,
    );
  }

  static void setSymbolicColor(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSymbolicColor:"),
      arg,
    );
  }

  static void setSymbolicColorName(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSymbolicColorName:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setTypeString(
    Pointer<EKCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTypeString:"),
      arg,
    );
  }

  static Pointer sharedOwnerAddress(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddress"),
    );
  }

  static Pointer sharedOwnerAddresses(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddresses"),
    );
  }

  static Pointer sharedOwnerName(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerName"),
    );
  }

  static Pointer sharedOwnerURL(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerURL"),
    );
  }

  static Pointer sharees(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharees"),
    );
  }

  static Pointer shareesAndOwner(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareesAndOwner"),
    );
  }

  static int sharingStatus(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sharingStatus"),
    );
  }

  static Pointer sharingStatusString(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharingStatusString"),
    );
  }

  static Pointer source(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("source"),
    );
  }

  static Pointer sourceIdentifierForCalendar(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceIdentifierForCalendar"),
    );
  }

  static Pointer subscriptionURL(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionURL"),
    );
  }

  static int supportedEventAvailabilities(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedEventAvailabilities"),
    );
  }

  static int supportsCollectionAlarms(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsCollectionAlarms"),
    );
  }

  static int suppressEventSchedulingNotifications(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suppressEventSchedulingNotifications"),
    );
  }

  static Pointer symbolicColor(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicColor"),
    );
  }

  static Pointer symbolicColorName(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicColorName"),
    );
  }

  static Pointer title(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int type(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer typeString(
    Pointer<EKCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeString"),
    );
  }

  static int validate(
    Pointer<EKCalendar> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarChangeHelper extends Struct<EKCalendarChangeHelper> {
  factory EKCalendarChangeHelper._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarChangeHelper> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarChangeHelper")
        .cast<EKCalendarChangeHelper>();
  }

  static Pointer backingStore(
    Pointer<EKCalendarChangeHelper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static Pointer doCalendarChangeForItem(
    Pointer<EKCalendarChangeHelper> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("doCalendarChangeForItem:error:"),
      arg,
      error,
    );
  }

  static Pointer doCopyEvent(
    Pointer<EKCalendarChangeHelper> _self,
    Pointer arg, {
    @required Pointer toCalendar,
    @required int withOptions,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("doCopyEvent:toCalendar:withOptions:error:"),
      arg,
      toCalendar,
      withOptions,
      error,
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKCalendarChangeHelper> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarEventInvitationNotification
    extends Struct<EKCalendarEventInvitationNotification> {
  factory EKCalendarEventInvitationNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarEventInvitationNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarEventInvitationNotification")
        .cast<EKCalendarEventInvitationNotification>();
  }

  static int attendeeAccepts(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("attendeeAccepts"),
    );
  }

  static int attendeeComments(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("attendeeComments"),
    );
  }

  static int attendeeDeclines(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("attendeeDeclines"),
    );
  }

  static Pointer conflicts(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflicts"),
    );
  }

  static int couldBeJunk(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("couldBeJunk"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer initWithRelatedEvent(
    Pointer<EKCalendarEventInvitationNotification> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRelatedEvent:"),
      arg,
    );
  }

  static int isForReReply(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForReReply"),
    );
  }

  static int isInvitation(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isInvitation"),
    );
  }

  static int isLocationDecline(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLocationDecline"),
    );
  }

  static int isVirtual(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isVirtual"),
    );
  }

  static int needsReply(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsReply"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer respondingAttendee(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("respondingAttendee"),
    );
  }

  static Pointer respondingAttendeeComment(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("respondingAttendeeComment"),
    );
  }

  static Pointer sendersEmail(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersEmail"),
    );
  }

  static Pointer sendersPhoneNumber(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersPhoneNumber"),
    );
  }

  static int status(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("status"),
    );
  }

  static int supportedActions(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }

  static int supportsConflictScanning(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsConflictScanning"),
    );
  }

  static int type(
    Pointer<EKCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarInviteReplyNotification
    extends Struct<EKCalendarInviteReplyNotification> {
  factory EKCalendarInviteReplyNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarInviteReplyNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarInviteReplyNotification")
        .cast<EKCalendarInviteReplyNotification>();
  }

  static int isSharedCalendarReply(
    Pointer<EKCalendarInviteReplyNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarReply"),
    );
  }

  static int status(
    Pointer<EKCalendarInviteReplyNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarItem extends Struct<EKCalendarItem> {
  factory EKCalendarItem._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKCalendarItem").cast<EKCalendarItem>();
  }

  static Pointer URL(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer UUID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static Pointer action(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("action"),
    );
  }

  static void addAlarm(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAlarm:"),
      arg,
    );
  }

  static void addAttachment(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttachment:"),
      arg,
    );
  }

  static void addAttendee(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttendee:"),
      arg,
    );
  }

  static void addRecurrenceRule(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addRecurrenceRule:"),
      arg,
    );
  }

  static Pointer adjustDateFromUTC(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("adjustDateFromUTC:"),
      arg,
    );
  }

  static Pointer adjustDateIntoUTC(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("adjustDateIntoUTC:"),
      arg,
    );
  }

  static Pointer adjustRangeIntoUTC(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("adjustRangeIntoUTC:"),
      arg,
    );
  }

  static Pointer alarmSet(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarmSet"),
    );
  }

  static Pointer alarms(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarms"),
    );
  }

  static Pointer allAlarms(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allAlarms"),
    );
  }

  static int allDay(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allDay"),
    );
  }

  static int allowsAttachmentModifications(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAttachmentModifications"),
    );
  }

  static int allowsAttendeesModifications(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAttendeesModifications"),
    );
  }

  static int allowsLikenessDataModifications(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsLikenessDataModifications"),
    );
  }

  static int allowsParticipantStatusModifications(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsParticipantStatusModifications"),
    );
  }

  static int allowsResponseCommentModifications(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsResponseCommentModifications"),
    );
  }

  static Pointer attachmentSet(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachmentSet"),
    );
  }

  static Pointer attachments(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachments"),
    );
  }

  static Pointer attendeeForCurrentUser(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeForCurrentUser"),
    );
  }

  static Pointer attendeeForMe(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeForMe"),
    );
  }

  static Pointer attendeeRepresentingOrganizer(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeRepresentingOrganizer"),
    );
  }

  static Pointer attendeeSet(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeSet"),
    );
  }

  static Pointer attendees(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendees"),
    );
  }

  static Pointer backingOccurrence(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingOccurrence"),
    );
  }

  static Pointer backingOccurrenceIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingOccurrenceIdentifier"),
    );
  }

  static int cachedHasAlarm(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAlarm"),
    );
  }

  static int cachedHasAttachment(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAttachment"),
    );
  }

  static int cachedHasAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAttendee"),
    );
  }

  static int cachedIsCalendarOwnerInvitedAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedIsCalendarOwnerInvitedAttendee"),
    );
  }

  static int cachedIsCurrentUserInvitedAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedIsCurrentUserInvitedAttendee"),
    );
  }

  static Pointer calendar(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendar"),
    );
  }

  static Pointer calendarItemExternalIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemExternalIdentifier"),
    );
  }

  static Pointer calendarItemIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemIdentifier"),
    );
  }

  static int calendarItemPermission(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("calendarItemPermission"),
    );
  }

  static Pointer calendarItemPermissionNumber(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemPermissionNumber"),
    );
  }

  static int canMoveOrCopyToCalendar$fromCalendar$error$(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveOrCopyToCalendar:fromCalendar:error:"),
      arg,
      fromCalendar,
      error,
    );
  }

  static int canMoveOrCopyToCalendar$error$(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveOrCopyToCalendar:error:"),
      arg,
      error,
    );
  }

  static int canMoveToCalendar$fromCalendar$error$(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveToCalendar:fromCalendar:error:"),
      arg,
      fromCalendar,
      error,
    );
  }

  static int canMoveToCalendar$fromCalendar$allowedRequirements$error$(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required int allowedRequirements,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "canMoveToCalendar:fromCalendar:allowedRequirements:error:"),
      arg,
      fromCalendar,
      allowedRequirements,
      error,
    );
  }

  static int canMoveToCalendar$error$(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveToCalendar:error:"),
      arg,
      error,
    );
  }

  static void changeIdentifiersFromOriginal(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("changeIdentifiersFromOriginal:"),
      arg,
    );
  }

  static void clearCachedTimeValues(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearCachedTimeValues"),
    );
  }

  static Pointer commitedItem(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commitedItem"),
    );
  }

  static Pointer commitedItemIgnoringPotentialSlice(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("commitedItemIgnoringPotentialSlice:"),
      arg,
    );
  }

  static Pointer contactIdentifiers(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifiers"),
    );
  }

  static Pointer contactIdentifiersString(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifiersString"),
    );
  }

  static Pointer container(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer creationDate(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationDate"),
    );
  }

  static int currentUserGeneralizedParticipantRole(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("currentUserGeneralizedParticipantRole"),
    );
  }

  static int currentUserMayActAsOrganizer(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("currentUserMayActAsOrganizer"),
    );
  }

  static Pointer customObjectForKey(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("customObjectForKey:"),
      arg,
    );
  }

  static Pointer datePreservingDateComponentsForDate(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer inCurrentTimeZone,
    @required Pointer movingToTimeZone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "datePreservingDateComponentsForDate:inCurrentTimeZone:movingToTimeZone:"),
      arg,
      inCurrentTimeZone,
      movingToTimeZone,
    );
  }

  static int defaultAlarmWasDeleted(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("defaultAlarmWasDeleted"),
    );
  }

  static Pointer defaultAlarms(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarms"),
    );
  }

  static Pointer duplicate(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("duplicate"),
    );
  }

  static Pointer ekStructuredLocation(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredLocation"),
    );
  }

  static int entityType(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static Pointer externalURI(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalURI"),
    );
  }

  static int futureOccurrencesCannotBeAffectedByChangingStartDateToDate(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "futureOccurrencesCannotBeAffectedByChangingStartDateToDate:"),
      arg,
    );
  }

  static int hasAlarms(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAlarms"),
    );
  }

  static int hasAttachment(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAttachment"),
    );
  }

  static int hasAttendees(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAttendees"),
    );
  }

  static int hasComplexRecurrence(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasComplexRecurrence"),
    );
  }

  static int hasEquivalentRecurrenceRuleToItem(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasEquivalentRecurrenceRuleToItem:"),
      arg,
    );
  }

  static int hasNotes(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasNotes"),
    );
  }

  static int hasRecurrenceRules(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasRecurrenceRules"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static int isAllDay(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAllDay"),
    );
  }

  static int isCalendarOwnerInvitedAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCalendarOwnerInvitedAttendee"),
    );
  }

  static int isCurrentUserInvitedAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserInvitedAttendee"),
    );
  }

  static int isDeletable(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeletable"),
    );
  }

  static int isDifferentFromCommitted(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentFromCommitted"),
    );
  }

  static int isEditable(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEvent(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEvent"),
    );
  }

  static int isOrganizedByCurrentUser(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedByCurrentUser"),
    );
  }

  static int isOrganizedBySharedCalendarOwner(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedBySharedCalendarOwner"),
    );
  }

  static int isOrganizedBySomeoneElse(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedBySomeoneElse"),
    );
  }

  static int isReminder(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReminder"),
    );
  }

  static int isScheduled(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isScheduled"),
    );
  }

  static int isSelfOrganized(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSelfOrganized"),
    );
  }

  static int isValidAttendee(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer forCalendar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValidAttendee:forCalendar:"),
      arg,
      forCalendar,
    );
  }

  static Pointer itemID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemID"),
    );
  }

  static Pointer lastModifiedDate(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastModifiedDate"),
    );
  }

  static Pointer localCustomObjectForKey(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("localCustomObjectForKey:"),
      arg,
    );
  }

  static Pointer localStructuredData(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localStructuredData"),
    );
  }

  static Pointer localUID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localUID"),
    );
  }

  static Pointer location(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static void markDefaultAlarmsDeleted(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markDefaultAlarmsDeleted"),
    );
  }

  static Pointer nonNoneAlarms(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonNoneAlarms"),
    );
  }

  static Pointer notes(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer occurrenceIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceIdentifier"),
    );
  }

  static int organizedByMe(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("organizedByMe"),
    );
  }

  static Pointer organizer(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizer"),
    );
  }

  static Pointer organizerEmail(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerEmail"),
    );
  }

  static Pointer organizerEncodedLikenessData(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerEncodedLikenessData"),
    );
  }

  static int organizerIsRepresentedByAttendee(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("organizerIsRepresentedByAttendee:"),
      arg,
    );
  }

  static Pointer organizerName(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerName"),
    );
  }

  static Pointer organizerPhoneNumber(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerPhoneNumber"),
    );
  }

  static Pointer organizerURL(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerURL"),
    );
  }

  static Pointer participantForMe(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantForMe"),
    );
  }

  static Pointer participantMatchingContact(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("participantMatchingContact:"),
      arg,
    );
  }

  static Pointer preferredLocation(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preferredLocation"),
    );
  }

  static int priority(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("priority"),
    );
  }

  static Pointer priorityNumber(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("priorityNumber"),
    );
  }

  static Pointer recurrenceDateUnadjustedFromUTC(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceDateUnadjustedFromUTC"),
    );
  }

  static Pointer recurrenceIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceIdentifier"),
    );
  }

  static Pointer recurrenceRule(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceRule"),
    );
  }

  static Pointer recurrenceRuleString(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceRuleString"),
    );
  }

  static Pointer recurrenceRules(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceRules"),
    );
  }

  static Pointer recurrenceSet(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceSet"),
    );
  }

  static Pointer recurrenceSetID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceSetID"),
    );
  }

  static void refetch(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refetch"),
    );
  }

  static Pointer relatedExternalID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relatedExternalID"),
    );
  }

  static void removeAlarm(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAlarm:"),
      arg,
    );
  }

  static void removeAllAttachments(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllAttachments"),
    );
  }

  static void removeAttachment(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAttachment:"),
      arg,
    );
  }

  static void removeAttendee(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAttendee:"),
      arg,
    );
  }

  static void removeRecurrenceRule(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeRecurrenceRule:"),
      arg,
    );
  }

  static int revert(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("revert"),
    );
  }

  static Pointer roomAttendeeForLocationString(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("roomAttendeeForLocationString:"),
      arg,
    );
  }

  static Pointer roomAttendees(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("roomAttendees"),
    );
  }

  static Pointer ruleStringForRecurrenceRule(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleStringForRecurrenceRule:"),
      arg,
    );
  }

  static int scheduleAgent(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("scheduleAgent"),
    );
  }

  static Pointer scheduleAgentString(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scheduleAgentString"),
    );
  }

  static Pointer selfAttendee(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selfAttendee"),
    );
  }

  static void setAction(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAction:"),
      arg,
    );
  }

  static void setAlarmSet(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlarmSet:"),
      arg,
    );
  }

  static void setAlarms(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlarms:"),
      arg,
    );
  }

  static void setAllDay(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllDay:"),
      arg,
    );
  }

  static void setAttachmentSet(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttachmentSet:"),
      arg,
    );
  }

  static void setAttachments(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttachments:"),
      arg,
    );
  }

  static void setAttendeeSet(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttendeeSet:"),
      arg,
    );
  }

  static void setAttendees(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttendees:"),
      arg,
    );
  }

  static void setCalendar(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendar:"),
      arg,
    );
  }

  static void setContactIdentifiers(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactIdentifiers:"),
      arg,
    );
  }

  static void setContactIdentifiersString(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactIdentifiersString:"),
      arg,
    );
  }

  static void setContainer(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }

  static void setCustomObject(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setDefaultAlarmWasDeleted(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarmWasDeleted:"),
      arg,
    );
  }

  static void setEkStructuredLocation(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEkStructuredLocation:"),
      arg,
    );
  }

  static void setItemID(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemID:"),
      arg,
    );
  }

  static void setLastModifiedDate(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastModifiedDate:"),
      arg,
    );
  }

  static void setLocalCustomObject(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalCustomObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setLocalStructuredData(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalStructuredData:"),
      arg,
    );
  }

  static void setLocalUID(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalUID:"),
      arg,
    );
  }

  static void setLocation(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocation:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setOrganizedByMe(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOrganizedByMe:"),
      arg,
    );
  }

  static void setOrganizer(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizer:"),
      arg,
    );
  }

  static void setOrganizerEmail(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerEmail:"),
      arg,
    );
  }

  static void setOrganizerEncodedLikenessData(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerEncodedLikenessData:"),
      arg,
    );
  }

  static void setOrganizerName(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerName:"),
      arg,
    );
  }

  static void setOrganizerPhoneNumber(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerPhoneNumber:"),
      arg,
    );
  }

  static void setOrganizerURL(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerURL:"),
      arg,
    );
  }

  static void setParticipantForMe(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantForMe:"),
      arg,
    );
  }

  static void setPriority(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setPriority:"),
      arg,
    );
  }

  static void setPriorityNumber(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPriorityNumber:"),
      arg,
    );
  }

  static void setRecurrenceDateUnadjustedFromUTC(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setRecurrenceIdentifier(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceIdentifier:"),
      arg,
    );
  }

  static void setRecurrenceRuleString(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceRuleString:"),
      arg,
    );
  }

  static void setRecurrenceRules(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceRules:"),
      arg,
    );
  }

  static void setRecurrenceSetID(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceSetID:"),
      arg,
    );
  }

  static void setRelatedExternalID(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelatedExternalID:"),
      arg,
    );
  }

  static void setScheduleAgent(
    Pointer<EKCalendarItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setScheduleAgent:"),
      arg,
    );
  }

  static void setScheduleAgentString(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScheduleAgentString:"),
      arg,
    );
  }

  static void setSelfAttendee(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSelfAttendee:"),
      arg,
    );
  }

  static void setSharedUID(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedUID:"),
      arg,
    );
  }

  static void setSingleRecurrenceRule(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSingleRecurrenceRule:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static void setStartDateUnadjustedFromUTC(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setStructuredData(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredData:"),
      arg,
    );
  }

  static void setStructuredLocation(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredLocation:"),
      arg,
    );
  }

  static void setStructuredLocationWithoutPrediction(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredLocationWithoutPrediction:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static void setTimeZoneObject(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZoneObject:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setURL(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static Pointer sharedUID(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedUID"),
    );
  }

  static Pointer singleChangedValueForKey(
    Pointer<EKCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("singleChangedValueForKey:"),
      arg,
    );
  }

  static Pointer singleRecurrenceRule(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("singleRecurrenceRule"),
    );
  }

  static Pointer specificIdentifier(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("specificIdentifier"),
    );
  }

  static Pointer startDate(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static Pointer startDateUnadjustedFromUTC(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDateUnadjustedFromUTC"),
    );
  }

  static Pointer structuredData(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredData"),
    );
  }

  static Pointer structuredLocation(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocation"),
    );
  }

  static Pointer structuredLocationWithoutPrediction(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocationWithoutPrediction"),
    );
  }

  static Pointer suggestedStartDateForCurrentRecurrenceRule(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedStartDateForCurrentRecurrenceRule"),
    );
  }

  static Pointer timeZone(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer timeZoneObject(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZoneObject"),
    );
  }

  static Pointer title(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static void updateWithAppLink(
    Pointer<EKCalendarItem> _self,
    Pointer arg, {
    @required Pointer<Int8> usedSelectedText,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateWithAppLink:usedSelectedText:"),
      arg,
      usedSelectedText,
    );
  }

  static int validate(
    Pointer<EKCalendarItem> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static void willSave(
    Pointer<EKCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("willSave"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarNotification extends Struct<EKCalendarNotification> {
  factory EKCalendarNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarNotification")
        .cast<EKCalendarNotification>();
  }

  static int allowedEntityTypes(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("allowedEntityTypes"),
    );
  }

  static int attachmentsChanged(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("attachmentsChanged"),
    );
  }

  static Pointer attendeeComment(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeComment"),
    );
  }

  static Pointer calendar(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendar"),
    );
  }

  static Pointer calendarName(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarName"),
    );
  }

  static Pointer closestOccurrence(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("closestOccurrence"),
    );
  }

  static Pointer closestStartDate(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("closestStartDate"),
    );
  }

  static int compare(
    Pointer<EKCalendarNotification> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer componentType(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("componentType"),
    );
  }

  static Pointer containerSource(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSource"),
    );
  }

  static int couldBeJunk(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("couldBeJunk"),
    );
  }

  static Pointer createdCount(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdCount"),
    );
  }

  static int dateChanged(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dateChanged"),
    );
  }

  static Pointer deletedCount(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCount"),
    );
  }

  static int dismissed(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dismissed"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer event(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("event"),
    );
  }

  static Pointer filename(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static Pointer firstName(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstName"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKCalendarNotification> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static int isForEvent(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForEvent"),
    );
  }

  static int isForEventInPast(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForEventInPast"),
    );
  }

  static int isInvitation(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isInvitation"),
    );
  }

  static int isProposedNewTime(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProposedNewTime"),
    );
  }

  static int isResourceChange(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isResourceChange"),
    );
  }

  static int isSharedCalendarInvitation(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarInvitation"),
    );
  }

  static int isSharedCalendarReply(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarReply"),
    );
  }

  static int isSuggestion(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestion"),
    );
  }

  static int isSupportedForEntityType(
    Pointer<EKCalendarNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isSupportedForEntityType:"),
      arg,
    );
  }

  static int junkStatus(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("junkStatus"),
    );
  }

  static Pointer lastName(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastName"),
    );
  }

  static Pointer lastOccurrence(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastOccurrence"),
    );
  }

  static int locationChanged(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("locationChanged"),
    );
  }

  static Pointer name(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer notificationType(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationType"),
    );
  }

  static int numberOfSenders(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfSenders"),
    );
  }

  static Pointer occurrence(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrence"),
    );
  }

  static Pointer occurrenceIdentifier(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceIdentifier"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer principalName(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("principalName"),
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTC(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTC"),
    );
  }

  static int proposedStartDateIsInFuture(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("proposedStartDateIsInFuture"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTC(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTC"),
    );
  }

  static Pointer recipientName(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recipientName"),
    );
  }

  static Pointer senders(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("senders"),
    );
  }

  static Pointer sendersEmail(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersEmail"),
    );
  }

  static Pointer sendersPhoneNumber(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersPhoneNumber"),
    );
  }

  static void setContainerSource(
    Pointer<EKCalendarNotification> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerSource:"),
      arg,
    );
  }

  static void setDismissed(
    Pointer<EKCalendarNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDismissed:"),
      arg,
    );
  }

  static void setJunkStatus(
    Pointer<EKCalendarNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setJunkStatus:"),
      arg,
    );
  }

  static void setOccurrence(
    Pointer<EKCalendarNotification> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOccurrence:"),
      arg,
    );
  }

  static int shouldDisplayInNobo(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldDisplayInNobo"),
    );
  }

  static Pointer source(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("source"),
    );
  }

  static int supportedActions(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }

  static int supportsAction(
    Pointer<EKCalendarNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("supportsAction:"),
      arg,
    );
  }

  static int supportsConflictDecisions(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsConflictDecisions"),
    );
  }

  static int supportsConflictScanning(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsConflictScanning"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }

  static int timeChanged(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeChanged"),
    );
  }

  static Pointer title(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int titleChanged(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("titleChanged"),
    );
  }

  static int type(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer updatedCount(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("updatedCount"),
    );
  }

  static Pointer uuid(
    Pointer<EKCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarPreferences extends Struct<EKCalendarPreferences> {
  factory EKCalendarPreferences._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarPreferences> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarPreferences")
        .cast<EKCalendarPreferences>();
  }

  static Pointer calPreferences(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calPreferences"),
    );
  }

  static int checkedStateForCalendarWithUID(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg, {
    @required Pointer delegateID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("checkedStateForCalendarWithUID:delegateID:"),
      arg,
      delegateID,
    );
  }

  static Pointer disabledCalendarsForDelegateWithUID(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("disabledCalendarsForDelegateWithUID:"),
      arg,
    );
  }

  static Pointer disabledCalendarsForMainWindow(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("disabledCalendarsForMainWindow"),
    );
  }

  static int displayOrderForAccountWithSourceIdentifier(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("displayOrderForAccountWithSourceIdentifier:"),
      arg,
    );
  }

  static Pointer displayOrderForAccounts(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayOrderForAccounts"),
    );
  }

  static int displayOrderForLocalGroupWithSourceIdentifier(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("displayOrderForLocalGroupWithSourceIdentifier:"),
      arg,
    );
  }

  static int expandedStateForTopLevelNodeWithUID(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("expandedStateForTopLevelNodeWithUID:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int invitationNotificationsDisabled(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("invitationNotificationsDisabled"),
    );
  }

  static void setCalPreferences(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalPreferences:"),
      arg,
    );
  }

  static void setInvitationNotificationsDisabled(
    Pointer<EKCalendarPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setInvitationNotificationsDisabled:"),
      arg,
    );
  }

  static void setSharedCalendarNotificationsDisabled(
    Pointer<EKCalendarPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSharedCalendarNotificationsDisabled:"),
      arg,
    );
  }

  static void setShowDeclinedEventsEnabled(
    Pointer<EKCalendarPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShowDeclinedEventsEnabled:"),
      arg,
    );
  }

  static void setTimeToLeaveEnabled(
    Pointer<EKCalendarPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTimeToLeaveEnabled:"),
      arg,
    );
  }

  static int sharedCalendarNotificationsDisabled(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("sharedCalendarNotificationsDisabled"),
    );
  }

  static int showDeclinedEventsEnabled(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("showDeclinedEventsEnabled"),
    );
  }

  static int timeToLeaveEnabled(
    Pointer<EKCalendarPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeToLeaveEnabled"),
    );
  }

  static void updateCheckedStateForCalendarWithUID(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg, {
    @required Pointer delegateID,
    @required int state,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector(
          "updateCheckedStateForCalendarWithUID:delegateID:state:"),
      arg,
      delegateID,
      state,
    );
  }

  static void updateDisplayOrderForAccountsWithSourceIdentifiers(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateDisplayOrderForAccountsWithSourceIdentifiers:"),
      arg,
    );
  }

  static void updateDisplayOrderForLocalGroupsWithSourceIdentifiers(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "updateDisplayOrderForLocalGroupsWithSourceIdentifiers:"),
      arg,
    );
  }

  static void updateExpandedStateForTopLevelNodeWithUID(
    Pointer<EKCalendarPreferences> _self,
    Pointer arg, {
    @required int state,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("updateExpandedStateForTopLevelNodeWithUID:state:"),
      arg,
      state,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarProposeNewTimeNotification
    extends Struct<EKCalendarProposeNewTimeNotification> {
  factory EKCalendarProposeNewTimeNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarProposeNewTimeNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarProposeNewTimeNotification")
        .cast<EKCalendarProposeNewTimeNotification>();
  }

  static Pointer initWithRelatedEvent(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRelatedEvent:"),
      arg,
    );
  }

  static int isProposedNewTime(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProposedNewTime"),
    );
  }

  static Pointer proposedEndDate(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDate"),
    );
  }

  static Pointer proposedStartDate(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDate"),
    );
  }

  static int proposedStartDateIsInFuture(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("proposedStartDateIsInFuture"),
    );
  }

  static int supportedActions(
    Pointer<EKCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarProtocol_Shared extends Struct<EKCalendarProtocol_Shared> {
  factory EKCalendarProtocol_Shared._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarProtocol_Shared> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarProtocol_Shared")
        .cast<EKCalendarProtocol_Shared>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarResourceChangeNotification
    extends Struct<EKCalendarResourceChangeNotification> {
  factory EKCalendarResourceChangeNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarResourceChangeNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarResourceChangeNotification")
        .cast<EKCalendarResourceChangeNotification>();
  }

  static Pointer createCount(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createCount"),
    );
  }

  static Pointer deleteCount(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deleteCount"),
    );
  }

  static int isResourceChange(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isResourceChange"),
    );
  }

  static Pointer location(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer startDate(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static int supportedActions(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }

  static Pointer updateCount(
    Pointer<EKCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("updateCount"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarSharedCalendarNotification
    extends Struct<EKCalendarSharedCalendarNotification> {
  factory EKCalendarSharedCalendarNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarSharedCalendarNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarSharedCalendarNotification")
        .cast<EKCalendarSharedCalendarNotification>();
  }

  static int cachedJunkStatus(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cachedJunkStatus"),
    );
  }

  static Pointer calendarTitle(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarTitle"),
    );
  }

  static int couldBeJunk(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("couldBeJunk"),
    );
  }

  static Pointer invitation(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invitation"),
    );
  }

  static int isSharedCalendarInvitation(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarInvitation"),
    );
  }

  static Pointer sendersEmail(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersEmail"),
    );
  }

  static Pointer sendersPhoneNumber(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersPhoneNumber"),
    );
  }

  static void setIsJunk(
    Pointer<EKCalendarSharedCalendarNotification> _self,
    int arg, {
    @required int shouldSave,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_returns_void(
      _self,
      _objc.getSelector("setIsJunk:shouldSave:"),
      arg,
      shouldSave,
    );
  }

  static int supportedActions(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarStoreBackingStore extends Struct<EKCalendarStoreBackingStore> {
  factory EKCalendarStoreBackingStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarStoreBackingStore> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarStoreBackingStore")
        .cast<EKCalendarStoreBackingStore>();
  }

  static Pointer accounting(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accounting"),
    );
  }

  static Pointer acquireDefaultCalendarForEntityType(
    Pointer<EKCalendarStoreBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("acquireDefaultCalendarForEntityType:"),
      arg,
    );
  }

  static int addEventAndAnyExceptionsForEvent(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required Pointer withManagedObject,
    @required Pointer toAddedEvents,
    @required int alwaysAddObjectsToCache,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector(
          "addEventAndAnyExceptionsForEvent:withManagedObject:toAddedEvents:alwaysAddObjectsToCache:"),
      arg,
      withManagedObject,
      toAddedEvents,
      alwaysAddObjectsToCache,
    );
  }

  static int addReminder(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required Pointer toAddedReminders,
    @required int alwaysAddObjectsToCache,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_Int8(
      _self,
      _objc
          .getSelector("addReminder:toAddedReminders:alwaysAddObjectsToCache:"),
      arg,
      toAddedReminders,
      alwaysAddObjectsToCache,
    );
  }

  static Pointer allEvents(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEvents"),
    );
  }

  static Pointer allReminders(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allReminders"),
    );
  }

  static Pointer backingStoreAvailableGroup(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStoreAvailableGroup"),
    );
  }

  static Pointer cachedRange(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedRange"),
    );
  }

  static Pointer createNonPartialFrozenObjectForPartialObject(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required Pointer withFrozenClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createNonPartialFrozenObjectForPartialObject:withFrozenClass:"),
      arg,
      withFrozenClass,
    );
  }

  static void dealloc(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer defaultCalendarForEntityType(
    Pointer<EKCalendarStoreBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForEntityType:"),
      arg,
    );
  }

  static double ensureExternalUpdateInterval(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("ensureExternalUpdateInterval"),
    );
  }

  static int eventsExistOnCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsExistOnCalendar:"),
      arg,
    );
  }

  static int eventsMarkedScheduleAgentClientExistOnCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsMarkedScheduleAgentClientExistOnCalendar:"),
      arg,
    );
  }

  static Pointer eventsWithCalendarIdentifiers(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer externalChangeQueue(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalChangeQueue"),
    );
  }

  static int futureScheduledEventsExistOnCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("futureScheduledEventsExistOnCalendar:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static Pointer
      initWithSourceFilters$options$accessRequestedForEvents$accessRequestedForReminders$asyncWithCompletion$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int options,
    @required int accessRequestedForEvents,
    @required int accessRequestedForReminders,
    @required Pointer asyncWithCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSourceFilters:options:accessRequestedForEvents:accessRequestedForReminders:asyncWithCompletion:"),
      arg,
      options,
      accessRequestedForEvents,
      accessRequestedForReminders,
      asyncWithCompletion,
    );
  }

  static Pointer initWithSourceFilters$options$asyncWithCompletion$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int options,
    @required Pointer asyncWithCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithSourceFilters:options:asyncWithCompletion:"),
      arg,
      options,
      asyncWithCompletion,
    );
  }

  static Pointer
      initWithSourceFilters$options$accessRequestedForEvents$accessRequestedForReminders$asyncWithCompletion$orWithExistingStore$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int options,
    @required int accessRequestedForEvents,
    @required int accessRequestedForReminders,
    @required Pointer asyncWithCompletion,
    @required Pointer orWithExistingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSourceFilters:options:accessRequestedForEvents:accessRequestedForReminders:asyncWithCompletion:orWithExistingStore:"),
      arg,
      options,
      accessRequestedForEvents,
      accessRequestedForReminders,
      asyncWithCompletion,
      orWithExistingStore,
    );
  }

  static Pointer
      initWithSourceFilters$options$asyncWithCompletion$orWithExistingStore$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int options,
    @required Pointer asyncWithCompletion,
    @required Pointer orWithExistingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSourceFilters:options:asyncWithCompletion:orWithExistingStore:"),
      arg,
      options,
      asyncWithCompletion,
      orWithExistingStore,
    );
  }

  static void insertNaturalLanguageSuggestedEventCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("insertNaturalLanguageSuggestedEventCalendar"),
    );
  }

  static void insertSuggestedEventCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("insertSuggestedEventCalendar"),
    );
  }

  static int isPrefetching(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPrefetching"),
    );
  }

  static Pointer lastExternalChangeProcessed(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastExternalChangeProcessed"),
    );
  }

  static Pointer lookupItemsWithExternalIdentifier(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithExternalIdentifier:type:"),
      arg,
      type,
    );
  }

  static Pointer lookupItemsWithIdentifiers(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithIdentifiers:type:"),
      arg,
      type,
    );
  }

  static Pointer naturalLanguageSuggestedEventCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("naturalLanguageSuggestedEventCalendar"),
    );
  }

  static int persistenceAvailable(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("persistenceAvailable"),
    );
  }

  static void pruneCacheForDisjointRange$occurrencesToKeep$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required Pointer occurrencesToKeep,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForDisjointRange:occurrencesToKeep:"),
      arg,
      occurrencesToKeep,
    );
  }

  static void pruneCacheForDisjointRange$(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForDisjointRange:"),
      arg,
    );
  }

  static void pruneCacheForRange(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneCacheForRange:"),
      arg,
    );
  }

  static Pointer queueStatusOperation(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queueStatusOperation"),
    );
  }

  static Pointer queueStatusQueue(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queueStatusQueue"),
    );
  }

  static void refreshBackingStore(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshBackingStore"),
    );
  }

  static void refreshSources(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshSources"),
    );
  }

  static Pointer remindersWithCalendarIdentifiers(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer remindersWithContactIdentifier(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithContactIdentifier:"),
      arg,
    );
  }

  static Pointer remindersWithDueDates(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithDueDates"),
    );
  }

  static Pointer remindersWithDueDatesInRange(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg, {
    @required Pointer withCalendarIdentifiers,
    @required Pointer withCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithDueDatesInRange:withCalendarIdentifiers:withCompletion:"),
      arg,
      withCalendarIdentifiers,
      withCompletion,
    );
  }

  static Pointer remindersWithIsCompleted(
    Pointer<EKCalendarStoreBackingStore> _self,
    int arg, {
    @required int maxResults,
    @required Pointer withCalendarIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithIsCompleted:maxResults:withCalendarIdentifiers:"),
      arg,
      maxResults,
      withCalendarIdentifiers,
    );
  }

  static void setAccounting(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccounting:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewEvents(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewEvents:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewReminders(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewReminders:"),
      arg,
    );
  }

  static void setEnsureExternalUpdateInterval(
    Pointer<EKCalendarStoreBackingStore> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setEnsureExternalUpdateInterval:"),
      arg,
    );
  }

  static void setExternalChangeQueue(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExternalChangeQueue:"),
      arg,
    );
  }

  static void setIsPrefetching(
    Pointer<EKCalendarStoreBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPrefetching:"),
      arg,
    );
  }

  static void setLastExternalChangeProcessed(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastExternalChangeProcessed:"),
      arg,
    );
  }

  static void setPersistenceAvailable(
    Pointer<EKCalendarStoreBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPersistenceAvailable:"),
      arg,
    );
  }

  static void setQueueStatusOperation(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueueStatusOperation:"),
      arg,
    );
  }

  static void setQueueStatusQueue(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueueStatusQueue:"),
      arg,
    );
  }

  static void set_creationTimestamp(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_creationTimestamp:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerEmailFromJunkChecks(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerEmailFromJunkChecks:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerPhoneNumberFromJunkChecks(
    Pointer<EKCalendarStoreBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerPhoneNumberFromJunkChecks:"),
      arg,
    );
  }

  static Pointer suggestedEventCalendar(
    Pointer<EKCalendarStoreBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEventCalendar"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCalendarSuggestionNotification
    extends Struct<EKCalendarSuggestionNotification> {
  factory EKCalendarSuggestionNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKCalendarSuggestionNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCalendarSuggestionNotification")
        .cast<EKCalendarSuggestionNotification>();
  }

  static int isSuggestion(
    Pointer<EKCalendarSuggestionNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestion"),
    );
  }

  static Pointer originAppName(
    Pointer<EKCalendarSuggestionNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originAppName"),
    );
  }

  static Pointer suggestedEvent(
    Pointer<EKCalendarSuggestionNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEvent"),
    );
  }

  static int supportedActions(
    Pointer<EKCalendarSuggestionNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedActions"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKChangeListener extends Struct<EKChangeListener> {
  factory EKChangeListener._() {
    throw UnimplementedError();
  }
  static Pointer<EKChangeListener> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKChangeListener").cast<EKChangeListener>();
  }

  static void dealloc(
    Pointer<EKChangeListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegates(
    Pointer<EKChangeListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegates"),
    );
  }

  static Pointer init(
    Pointer<EKChangeListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void objectsChangedNotification(
    Pointer<EKChangeListener> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("objectsChangedNotification:"),
      arg,
    );
  }

  static void registerDelegate(
    Pointer<EKChangeListener> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerDelegate:"),
      arg,
    );
  }

  static void setDelegates(
    Pointer<EKChangeListener> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegates:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKChangeLog extends Struct<EKChangeLog> {
  factory EKChangeLog._() {
    throw UnimplementedError();
  }
  static Pointer<EKChangeLog> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKChangeLog").cast<EKChangeLog>();
  }

  static void addChangesToObject(
    Pointer<EKChangeLog> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChangesToObject:withIdentifier:"),
      arg,
      withIdentifier,
    );
  }

  static void applyChangesToObject(
    Pointer<EKChangeLog> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChangesToObject:withIdentifier:"),
      arg,
      withIdentifier,
    );
  }

  static void applyNonRecurrenceChangesToObject(
    Pointer<EKChangeLog> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyNonRecurrenceChangesToObject:withIdentifier:"),
      arg,
      withIdentifier,
    );
  }

  static Pointer changeHistory(
    Pointer<EKChangeLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeHistory"),
    );
  }

  static int changesExistForObjectWithIdentifier(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("changesExistForObjectWithIdentifier:"),
      arg,
    );
  }

  static Pointer copyWithZone(
    Pointer<EKChangeLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void intelligentlyApplyRecurrenceChangesToObject(
    Pointer<EKChangeLog> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "intelligentlyApplyRecurrenceChangesToObject:withIdentifier:"),
      arg,
      withIdentifier,
    );
  }

  static void logChangesForObject(
    Pointer<EKChangeLog> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
    @required int appliesToSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("logChangesForObject:withIdentifier:appliesToSeries:"),
      arg,
      withIdentifier,
      appliesToSeries,
    );
  }

  static Pointer offsetForEvent(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("offsetForEvent:"),
      arg,
    );
  }

  static Pointer relationChangeHistory(
    Pointer<EKChangeLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationChangeHistory"),
    );
  }

  static void reset(
    Pointer<EKChangeLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void resetIdentifiers(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetIdentifiers:"),
      arg,
    );
  }

  static Pointer seriesOffsets(
    Pointer<EKChangeLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("seriesOffsets"),
    );
  }

  static void setChangeHistory(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeHistory:"),
      arg,
    );
  }

  static void setRelationChangeHistory(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationChangeHistory:"),
      arg,
    );
  }

  static void setSeriesOffsets(
    Pointer<EKChangeLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSeriesOffsets:"),
      arg,
    );
  }

  static Pointer summary(
    Pointer<EKChangeLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summary"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKChangeSet extends Struct<EKChangeSet> {
  factory EKChangeSet._() {
    throw UnimplementedError();
  }
  static Pointer<EKChangeSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKChangeSet").cast<EKChangeSet>();
  }

  static void addChanges(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChanges:"),
      arg,
    );
  }

  static void addToChanges(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer forMultiValueKey,
    @required Pointer basedOn,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addToChanges:forMultiValueKey:basedOn:"),
      arg,
      forMultiValueKey,
      basedOn,
    );
  }

  static void changeSingleValue$forKey$basedOn$and$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer forKey,
    @required Pointer basedOn,
    @required Pointer and,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("changeSingleValue:forKey:basedOn:and:"),
      arg,
      forKey,
      basedOn,
      and,
    );
  }

  static void changeSingleValue$forKey$basedOn$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer forKey,
    @required Pointer basedOn,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("changeSingleValue:forKey:basedOn:"),
      arg,
      forKey,
      basedOn,
    );
  }

  static Pointer changedKeys(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeys"),
    );
  }

  static Pointer changedMultiValueKeys(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedMultiValueKeys"),
    );
  }

  static Pointer changedSingleValueKeys(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedSingleValueKeys"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKChangeSet> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void forceChangeValue(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forceChangeValue:forKey:"),
      arg,
      forKey,
    );
  }

  static int hasChanges(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static int hasUnsavedChangeForKey(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChangeForKey:"),
      arg,
    );
  }

  static int hasUnsavedChanges(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChanges"),
    );
  }

  static int hasUnsavedMultiValueAdditionForKey(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedMultiValueAdditionForKey:"),
      arg,
    );
  }

  static int hasUnsavedMultiValueRemovalForKey(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedMultiValueRemovalForKey:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithChangeSet$(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithChangeSet:"),
      arg,
    );
  }

  static Pointer initWithChangeSet$changesToSkip$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer changesToSkip,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithChangeSet:changesToSkip:"),
      arg,
      changesToSkip,
    );
  }

  static Pointer initWithChangeSet$changesToKeep$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer changesToKeep,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithChangeSet:changesToKeep:"),
      arg,
      changesToKeep,
    );
  }

  static Pointer initWithSingleValueChanges(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer multiValueAdditions,
    @required Pointer multiValueRemovals,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSingleValueChanges:multiValueAdditions:multiValueRemovals:"),
      arg,
      multiValueAdditions,
      multiValueRemovals,
    );
  }

  static int isDeleted(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static int isModified(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isModified"),
    );
  }

  static int isNew(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNew"),
    );
  }

  static int isSaved(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSaved"),
    );
  }

  static int isUndeleted(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUndeleted"),
    );
  }

  static void markChangesAsSaved(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markChangesAsSaved"),
    );
  }

  static Pointer multiValueAdditions(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("multiValueAdditions"),
    );
  }

  static Pointer multiValueRemovals(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("multiValueRemovals"),
    );
  }

  static Pointer mutableCopyWithZone(
    Pointer<EKChangeSet> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static void removeFromChanges(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer forMultiValueKey,
    @required Pointer basedOn,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromChanges:forMultiValueKey:basedOn:"),
      arg,
      forMultiValueKey,
      basedOn,
    );
  }

  static void rollbackChanges(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rollbackChanges"),
    );
  }

  static void setIsDeleted(
    Pointer<EKChangeSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDeleted:"),
      arg,
    );
  }

  static void setIsModified(
    Pointer<EKChangeSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsModified:"),
      arg,
    );
  }

  static void setIsNew(
    Pointer<EKChangeSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsNew:"),
      arg,
    );
  }

  static void setIsSaved(
    Pointer<EKChangeSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSaved:"),
      arg,
    );
  }

  static void setIsUndeleted(
    Pointer<EKChangeSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsUndeleted:"),
      arg,
    );
  }

  static void setMultiValueAdditions(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMultiValueAdditions:"),
      arg,
    );
  }

  static void setMultiValueRemovals(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMultiValueRemovals:"),
      arg,
    );
  }

  static void setSingleValueChanges(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSingleValueChanges:"),
      arg,
    );
  }

  static Pointer singleValueChanges(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("singleValueChanges"),
    );
  }

  static Pointer summary(
    Pointer<EKChangeSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summary"),
    );
  }

  static Pointer unsavedMultiValueAddedObjectsForKey(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("unsavedMultiValueAddedObjectsForKey:"),
      arg,
    );
  }

  static Pointer unsavedMultiValueRemovedObjectsForKey(
    Pointer<EKChangeSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("unsavedMultiValueRemovedObjectsForKey:"),
      arg,
    );
  }

  static Pointer valueForSingleValueKey$basedOn$and$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer basedOn,
    @required Pointer and,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForSingleValueKey:basedOn:and:"),
      arg,
      basedOn,
      and,
    );
  }

  static Pointer valueForSingleValueKey$basedOn$(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer basedOn,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForSingleValueKey:basedOn:"),
      arg,
      basedOn,
    );
  }

  static Pointer valuesForMultiValueKey(
    Pointer<EKChangeSet> _self,
    Pointer arg, {
    @required Pointer basedOn,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("valuesForMultiValueKey:basedOn:"),
      arg,
      basedOn,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKChangeTracker extends Struct<EKChangeTracker> {
  factory EKChangeTracker._() {
    throw UnimplementedError();
  }
  static Pointer<EKChangeTracker> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKChangeTracker").cast<EKChangeTracker>();
  }

  static Pointer acknowledgedNotificationIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgedNotificationIDMap"),
    );
  }

  static Pointer acknowledgedNotificationIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgedNotificationIdentifiers"),
    );
  }

  static Pointer acknowledgedNotifications(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgedNotifications"),
    );
  }

  static Pointer addedExceptionIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addedExceptionIDMap"),
    );
  }

  static Pointer addedExceptionWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addedExceptionWithIdentifier:"),
      arg,
    );
  }

  static Pointer addedExceptions(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addedExceptions"),
    );
  }

  static Pointer allModifiedCalendarIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedCalendarIdentifiers"),
    );
  }

  static Pointer allModifiedCalendars(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedCalendars"),
    );
  }

  static Pointer allModifiedItemIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedItemIdentifiers"),
    );
  }

  static Pointer allModifiedItems(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedItems"),
    );
  }

  static Pointer allModifiedNotificationIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedNotificationIdentifiers"),
    );
  }

  static Pointer allModifiedSourceIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allModifiedSourceIdentifiers"),
    );
  }

  static Pointer backingStore(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static Pointer calendarByApplyingTrackedChangesToCalendar(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarByApplyingTrackedChangesToCalendar:"),
      arg,
    );
  }

  static Pointer calendarIdentifiersWithMovedNotifications(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifiersWithMovedNotifications"),
    );
  }

  static int calendarWithIdentifierIsDeleted(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("calendarWithIdentifierIsDeleted:"),
      arg,
    );
  }

  static Pointer changeLog(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeLog"),
    );
  }

  static Pointer changedCalendarIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedCalendarIDMap"),
    );
  }

  static Pointer changedCalendarIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedCalendarIdentifiers"),
    );
  }

  static Pointer changedCalendarWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("changedCalendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer changedCalendars(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedCalendars"),
    );
  }

  static Pointer changedItemIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedItemIDMap"),
    );
  }

  static Pointer changedItemIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedItemIdentifiers"),
    );
  }

  static Pointer changedItemWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("changedItemWithIdentifier:"),
      arg,
    );
  }

  static Pointer changedItems(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedItems"),
    );
  }

  static Pointer changedNotificationIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedNotificationIDMap"),
    );
  }

  static Pointer changedNotificationIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedNotificationIdentifiers"),
    );
  }

  static Pointer changedNotifications(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedNotifications"),
    );
  }

  static Pointer changedSourceIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedSourceIDMap"),
    );
  }

  static Pointer changedSourceIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedSourceIdentifiers"),
    );
  }

  static Pointer changedSourceWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("changedSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer changedSources(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedSources"),
    );
  }

  static Pointer copyForBackingStore(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackingStore:"),
      arg,
    );
  }

  static Pointer createdCalendarIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdCalendarIDMap"),
    );
  }

  static Pointer createdCalendarIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdCalendarIdentifiers"),
    );
  }

  static Pointer createdCalendarWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createdCalendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer createdCalendars(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdCalendars"),
    );
  }

  static Pointer createdItemIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdItemIDMap"),
    );
  }

  static Pointer createdItemIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdItemIdentifiers"),
    );
  }

  static Pointer createdItemWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createdItemWithIdentifier:"),
      arg,
    );
  }

  static Pointer createdItems(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdItems"),
    );
  }

  static Pointer createdNotificationIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdNotificationIDMap"),
    );
  }

  static Pointer createdNotificationIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdNotificationIdentifiers"),
    );
  }

  static Pointer createdNotifications(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdNotifications"),
    );
  }

  static Pointer createdSourceIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdSourceIDMap"),
    );
  }

  static Pointer createdSourceIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdSourceIdentifiers"),
    );
  }

  static Pointer createdSourceWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createdSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer createdSources(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdSources"),
    );
  }

  static Pointer deletedCalendarIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCalendarIDMap"),
    );
  }

  static Pointer deletedCalendarIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCalendarIdentifiers"),
    );
  }

  static Pointer deletedCalendarWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCalendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer deletedCalendars(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCalendars"),
    );
  }

  static Pointer deletedFutureIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedFutureIDMap"),
    );
  }

  static Pointer deletedFutureItemIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedFutureItemIdentifiers"),
    );
  }

  static Pointer deletedItemIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedItemIDMap"),
    );
  }

  static Pointer deletedItemIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedItemIdentifiers"),
    );
  }

  static Pointer deletedItemWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deletedItemWithIdentifier:"),
      arg,
    );
  }

  static Pointer deletedItems(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedItems"),
    );
  }

  static Pointer deletedSourceIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSourceIDMap"),
    );
  }

  static Pointer deletedSourceIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSourceIdentifiers"),
    );
  }

  static Pointer deletedSourceWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer deletedSources(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSources"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static Pointer itemByApplyingTrackedChangesToItem(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required Pointer withIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("itemByApplyingTrackedChangesToItem:withIdentifier:"),
      arg,
      withIdentifier,
    );
  }

  static int itemWithIdentifierIsDeleted(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemWithIdentifierIsDeleted:"),
      arg,
    );
  }

  static int itemWithIdentifierIsFutureDeleted(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemWithIdentifierIsFutureDeleted:"),
      arg,
    );
  }

  static Pointer movedNotificationMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("movedNotificationMap"),
    );
  }

  static Pointer notificationByApplyingTrackedChangesToNotification(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationByApplyingTrackedChangesToNotification:"),
      arg,
    );
  }

  static Pointer notificationIdentifiersMovedToCalendarIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIdentifiersMovedToCalendarIdentifier:"),
      arg,
    );
  }

  static int notificationWithIdentifierIsAcknowledged(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("notificationWithIdentifierIsAcknowledged:"),
      arg,
    );
  }

  static Pointer notificationsMovedToCalendar(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notificationsMovedToCalendar:"),
      arg,
    );
  }

  static Pointer objectsToReset(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectsToReset"),
    );
  }

  static Pointer removedExceptionIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("removedExceptionIDMap"),
    );
  }

  static Pointer removedExceptionWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("removedExceptionWithIdentifier:"),
      arg,
    );
  }

  static Pointer removedExceptions(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("removedExceptions"),
    );
  }

  static void reset(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void resetChanges(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetChanges"),
    );
  }

  static void resetChangesForIdentifiers(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetChangesForIdentifiers:"),
      arg,
    );
  }

  static void resetForIdentifiers(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetForIdentifiers:"),
      arg,
    );
  }

  static void resetIDMaps(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetIDMaps"),
    );
  }

  static void resetIDMapsForIdentifiers(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetIDMapsForIdentifiers:"),
      arg,
    );
  }

  static void resetObjects(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetObjects"),
    );
  }

  static void resetObjectsForIdentifiers$skipReset$(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required int skipReset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("resetObjectsForIdentifiers:skipReset:"),
      arg,
      skipReset,
    );
  }

  static void resetObjectsForIdentifiers$(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetObjectsForIdentifiers:"),
      arg,
    );
  }

  static int responseForSharedCalendarInvitation(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("responseForSharedCalendarInvitation:"),
      arg,
    );
  }

  static void setAcknowledgedNotificationIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcknowledgedNotificationIDMap:"),
      arg,
    );
  }

  static void setAddedExceptionIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddedExceptionIDMap:"),
      arg,
    );
  }

  static void setBackingStore(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStore:"),
      arg,
    );
  }

  static void setChangeLog(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeLog:"),
      arg,
    );
  }

  static void setChangedCalendarIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedCalendarIDMap:"),
      arg,
    );
  }

  static void setChangedItemIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedItemIDMap:"),
      arg,
    );
  }

  static void setChangedNotificationIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedNotificationIDMap:"),
      arg,
    );
  }

  static void setChangedSourceIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedSourceIDMap:"),
      arg,
    );
  }

  static void setCreatedCalendarIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedCalendarIDMap:"),
      arg,
    );
  }

  static void setCreatedItemIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedItemIDMap:"),
      arg,
    );
  }

  static void setCreatedNotificationIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedNotificationIDMap:"),
      arg,
    );
  }

  static void setCreatedSourceIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedSourceIDMap:"),
      arg,
    );
  }

  static void setDeletedCalendarIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedCalendarIDMap:"),
      arg,
    );
  }

  static void setDeletedFutureIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedFutureIDMap:"),
      arg,
    );
  }

  static void setDeletedItemIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedItemIDMap:"),
      arg,
    );
  }

  static void setDeletedSourceIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedSourceIDMap:"),
      arg,
    );
  }

  static void setMovedNotificationMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMovedNotificationMap:"),
      arg,
    );
  }

  static void setObjectsToReset(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectsToReset:"),
      arg,
    );
  }

  static void setRemovedExceptionIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRemovedExceptionIDMap:"),
      arg,
    );
  }

  static void setSharedCalendarNotificationResponseMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedCalendarNotificationResponseMap:"),
      arg,
    );
  }

  static void setShiftedDetachedEventIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShiftedDetachedEventIDMap:"),
      arg,
    );
  }

  static void setUndetachedEventIDMap(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUndetachedEventIDMap:"),
      arg,
    );
  }

  static Pointer sharedCalendarNotificationResponseMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedCalendarNotificationResponseMap"),
    );
  }

  static Pointer shiftedDetachedEventIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shiftedDetachedEventIDMap"),
    );
  }

  static Pointer shiftedDetachedEventIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shiftedDetachedEventIdentifiers"),
    );
  }

  static Pointer shiftedDetachedEventWithIdentifier(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("shiftedDetachedEventWithIdentifier:"),
      arg,
    );
  }

  static Pointer shiftedDetachedEvents(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shiftedDetachedEvents"),
    );
  }

  static Pointer sourceByApplyingTrackedChangesToSource(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("sourceByApplyingTrackedChangesToSource:"),
      arg,
    );
  }

  static int sourceWithIdentifierIsDeleted(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("sourceWithIdentifierIsDeleted:"),
      arg,
    );
  }

  static int suggestedEventsChanged(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suggestedEventsChanged"),
    );
  }

  static Pointer summary(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summary"),
    );
  }

  static void trackAcknowledgedNotification(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackAcknowledgedNotification:"),
      arg,
    );
  }

  static void trackAddedDetachedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackAddedDetachedEvent:"),
      arg,
    );
  }

  static void trackAddedException(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackAddedException:"),
      arg,
    );
  }

  static void trackChangedCalendar(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedCalendar:"),
      arg,
    );
  }

  static void trackChangedItem$(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedItem:"),
      arg,
    );
  }

  static void trackChangedItem$forIdentifier$(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required Pointer forIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedItem:forIdentifier:"),
      arg,
      forIdentifier,
    );
  }

  static void trackChangedNotification(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedNotification:"),
      arg,
    );
  }

  static void trackChangedSeries(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedSeries:"),
      arg,
    );
  }

  static void trackChangedSource(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackChangedSource:"),
      arg,
    );
  }

  static void trackCreatedCalendar(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCreatedCalendar:"),
      arg,
    );
  }

  static void trackCreatedItem(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCreatedItem:"),
      arg,
    );
  }

  static void trackCreatedNotification(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCreatedNotification:"),
      arg,
    );
  }

  static void trackCreatedSeries(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCreatedSeries:"),
      arg,
    );
  }

  static void trackCreatedSource(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackCreatedSource:"),
      arg,
    );
  }

  static void trackDeletedCalendar(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackDeletedCalendar:"),
      arg,
    );
  }

  static void trackDeletedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required int andFuture,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("trackDeletedEvent:andFuture:"),
      arg,
      andFuture,
    );
  }

  static void trackDeletedItem(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackDeletedItem:"),
      arg,
    );
  }

  static void trackDeletedSeries(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackDeletedSeries:"),
      arg,
    );
  }

  static void trackDeletedSource(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackDeletedSource:"),
      arg,
    );
  }

  static void trackMovedNotification(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer toCalendar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackMovedNotification:fromCalendar:toCalendar:"),
      arg,
      fromCalendar,
      toCalendar,
    );
  }

  static void trackRedetachedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackRedetachedEvent:"),
      arg,
    );
  }

  static void trackRemovedDetachedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackRemovedDetachedEvent:"),
      arg,
    );
  }

  static void trackRemovedException(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackRemovedException:"),
      arg,
    );
  }

  static void trackSharedCalendarInvitation(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required int response,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("trackSharedCalendarInvitation:response:"),
      arg,
      response,
    );
  }

  static void trackShiftedDetachedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required Pointer toDetachedEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackShiftedDetachedEvent:toDetachedEvent:"),
      arg,
      toDetachedEvent,
    );
  }

  static void trackUndeletedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg, {
    @required int andFuture,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("trackUndeletedEvent:andFuture:"),
      arg,
      andFuture,
    );
  }

  static void trackUndeletedItem(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackUndeletedItem:"),
      arg,
    );
  }

  static void trackUndetachedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackUndetachedEvent:"),
      arg,
    );
  }

  static void trackUnexceptedEvent(
    Pointer<EKChangeTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackUnexceptedEvent:"),
      arg,
    );
  }

  static Pointer undetachedEventIDMap(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("undetachedEventIDMap"),
    );
  }

  static Pointer undetachedEventIdentifiers(
    Pointer<EKChangeTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("undetachedEventIdentifiers"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKConferenceURLDetector extends Struct<EKConferenceURLDetector> {
  factory EKConferenceURLDetector._() {
    throw UnimplementedError();
  }
  static Pointer<EKConferenceURLDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKConferenceURLDetector")
        .cast<EKConferenceURLDetector>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKConflictDetails extends Struct<EKConflictDetails> {
  factory EKConflictDetails._() {
    throw UnimplementedError();
  }
  static Pointer<EKConflictDetails> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKConflictDetails").cast<EKConflictDetails>();
  }

  static Pointer conflictPeriodForSeries(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictPeriodForSeries"),
    );
  }

  static Pointer conflictingDates(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictingDates"),
    );
  }

  static Pointer conflictingEvents(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictingEvents"),
    );
  }

  static Pointer description(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithConflictingDates(
    Pointer<EKConflictDetails> _self,
    Pointer arg, {
    @required Pointer conflictingEvents,
    @required Pointer needsActionEvents,
    @required int totalOccurrencesInSeries,
    @required Pointer conflictPeriodForSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithConflictingDates:conflictingEvents:needsActionEvents:totalOccurrencesInSeries:conflictPeriodForSeries:"),
      arg,
      conflictingEvents,
      needsActionEvents,
      totalOccurrencesInSeries,
      conflictPeriodForSeries,
    );
  }

  static Pointer needsActionEvents(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("needsActionEvents"),
    );
  }

  static void setConflictPeriodForSeries(
    Pointer<EKConflictDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictPeriodForSeries:"),
      arg,
    );
  }

  static void setConflictingDates(
    Pointer<EKConflictDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictingDates:"),
      arg,
    );
  }

  static void setConflictingEvents(
    Pointer<EKConflictDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictingEvents:"),
      arg,
    );
  }

  static void setNeedsActionEvents(
    Pointer<EKConflictDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNeedsActionEvents:"),
      arg,
    );
  }

  static void setTotalConflictingEvents(
    Pointer<EKConflictDetails> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTotalConflictingEvents:"),
      arg,
    );
  }

  static void setTotalConflictsInSeries(
    Pointer<EKConflictDetails> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTotalConflictsInSeries:"),
      arg,
    );
  }

  static void setTotalNeedsActionEvents(
    Pointer<EKConflictDetails> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTotalNeedsActionEvents:"),
      arg,
    );
  }

  static void setTotalOccurrencesInSeries(
    Pointer<EKConflictDetails> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTotalOccurrencesInSeries:"),
      arg,
    );
  }

  static int totalConflictingEvents(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("totalConflictingEvents"),
    );
  }

  static int totalConflictsInSeries(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("totalConflictsInSeries"),
    );
  }

  static int totalNeedsActionEvents(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("totalNeedsActionEvents"),
    );
  }

  static int totalOccurrencesInSeries(
    Pointer<EKConflictDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("totalOccurrencesInSeries"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKConflictScanJob extends Struct<EKConflictScanJob> {
  factory EKConflictScanJob._() {
    throw UnimplementedError();
  }
  static Pointer<EKConflictScanJob> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKConflictScanJob").cast<EKConflictScanJob>();
  }

  static Pointer calendarIdentifiers(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifiers"),
    );
  }

  static Pointer conflictDates(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictDates"),
    );
  }

  static Pointer event(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("event"),
    );
  }

  static Pointer eventsConflictedWith(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventsConflictedWith"),
    );
  }

  static Pointer nonAcceptedEvents(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonAcceptedEvents"),
    );
  }

  static Pointer occurrences(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrences"),
    );
  }

  static Pointer scanRange(
    Pointer<EKConflictScanJob> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scanRange"),
    );
  }

  static void setCalendarIdentifiers(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarIdentifiers:"),
      arg,
    );
  }

  static void setConflictDates(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictDates:"),
      arg,
    );
  }

  static void setEvent(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEvent:"),
      arg,
    );
  }

  static void setEventsConflictedWith(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventsConflictedWith:"),
      arg,
    );
  }

  static void setNonAcceptedEvents(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNonAcceptedEvents:"),
      arg,
    );
  }

  static void setOccurrences(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOccurrences:"),
      arg,
    );
  }

  static void setScanRange(
    Pointer<EKConflictScanJob> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScanRange:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKConflictScanner extends Struct<EKConflictScanner> {
  factory EKConflictScanner._() {
    throw UnimplementedError();
  }
  static Pointer<EKConflictScanner> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKConflictScanner").cast<EKConflictScanner>();
  }

  static Pointer conflictsForEvents(
    Pointer<EKConflictScanner> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("conflictsForEvents:"),
      arg,
    );
  }

  static Pointer conflictsForNotifications(
    Pointer<EKConflictScanner> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("conflictsForNotifications:"),
      arg,
    );
  }

  static Pointer eventStore(
    Pointer<EKConflictScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStore"),
    );
  }

  static Pointer initWithEventStore(
    Pointer<EKConflictScanner> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventStore:"),
      arg,
    );
  }

  static void setEventStore(
    Pointer<EKConflictScanner> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventStore:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKContactEventRangePredicate
    extends Struct<EKContactEventRangePredicate> {
  factory EKContactEventRangePredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKContactEventRangePredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKContactEventRangePredicate")
        .cast<EKContactEventRangePredicate>();
  }

  static Pointer contacts(
    Pointer<EKContactEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contacts"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendars,
    @required Pointer contacts,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:endDate:calendars:contacts:"),
      arg,
      endDate,
      calendars,
      contacts,
    );
  }

  static int isEqual(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer matcher(
    Pointer<EKContactEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("matcher"),
    );
  }

  static Pointer predicateFormat(
    Pointer<EKContactEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void setContacts(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContacts:"),
      arg,
    );
  }

  static void setMatcher(
    Pointer<EKContactEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMatcher:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCoreDataFaultDelegate extends Struct<EKCoreDataFaultDelegate> {
  factory EKCoreDataFaultDelegate._() {
    throw UnimplementedError();
  }
  static Pointer<EKCoreDataFaultDelegate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKCoreDataFaultDelegate")
        .cast<EKCoreDataFaultDelegate>();
  }

  static int context(
    Pointer<EKCoreDataFaultDelegate> _self,
    Pointer arg, {
    @required Pointer shouldHandleInaccessibleFault,
    @required Pointer forObjectID,
    @required Pointer andTrigger,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector(
          "context:shouldHandleInaccessibleFault:forObjectID:andTrigger:"),
      arg,
      shouldHandleInaccessibleFault,
      forObjectID,
      andTrigger,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKCreateOperation extends Struct<EKCreateOperation> {
  factory EKCreateOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKCreateOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKCreateOperation").cast<EKCreateOperation>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKDataProtectionObserver extends Struct<EKDataProtectionObserver> {
  factory EKDataProtectionObserver._() {
    throw UnimplementedError();
  }
  static Pointer<EKDataProtectionObserver> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKDataProtectionObserver")
        .cast<EKDataProtectionObserver>();
  }

  static int dataIsAccessible(
    Pointer<EKDataProtectionObserver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dataIsAccessible"),
    );
  }

  static void setStateChangedCallback(
    Pointer<EKDataProtectionObserver> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStateChangedCallback:"),
      arg,
    );
  }

  static Pointer stateChangedCallback(
    Pointer<EKDataProtectionObserver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stateChangedCallback"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKDebugPreferences extends Struct<EKDebugPreferences> {
  factory EKDebugPreferences._() {
    throw UnimplementedError();
  }
  static Pointer<EKDebugPreferences> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKDebugPreferences").cast<EKDebugPreferences>();
  }

  static double availabilityFreshnessWindow(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("availabilityFreshnessWindow"),
    );
  }

  static int forceDisplayOfNewTravelAdvisoryHypotheses(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("forceDisplayOfNewTravelAdvisoryHypotheses"),
    );
  }

  static Pointer init(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static double overriddenTravelAdvisoryHypothesisAggressiveTravelTime(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector(
          "overriddenTravelAdvisoryHypothesisAggressiveTravelTime"),
    );
  }

  static double overriddenTravelAdvisoryHypothesisConservativeTravelTime(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector(
          "overriddenTravelAdvisoryHypothesisConservativeTravelTime"),
    );
  }

  static Pointer overriddenTravelAdvisoryHypothesisCurrentTrafficDensity(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector(
          "overriddenTravelAdvisoryHypothesisCurrentTrafficDensity"),
    );
  }

  static double overriddenTravelAdvisoryHypothesisEstimatedTravelTime(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc
          .getSelector("overriddenTravelAdvisoryHypothesisEstimatedTravelTime"),
    );
  }

  static Pointer overriddenTravelAdvisoryHypothesisRouteName(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("overriddenTravelAdvisoryHypothesisRouteName"),
    );
  }

  static int overriddenTravelAdvisoryHypothesisSupportsLiveTraffic(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc
          .getSelector("overriddenTravelAdvisoryHypothesisSupportsLiveTraffic"),
    );
  }

  static Pointer overriddenTravelAdvisoryHypothesisTransportType(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("overriddenTravelAdvisoryHypothesisTransportType"),
    );
  }

  static Pointer overriddenTravelAdvisoryHypothesisTravelState(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("overriddenTravelAdvisoryHypothesisTravelState"),
    );
  }

  static int overrideTravelAdvisoryHypothesis(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("overrideTravelAdvisoryHypothesis"),
    );
  }

  static int performAgendaEntryEqualityChecksInTravelEngine(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("performAgendaEntryEqualityChecksInTravelEngine"),
    );
  }

  static int preventMarkingTravelAdvisoryEntriesAsDismissed(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preventMarkingTravelAdvisoryEntriesAsDismissed"),
    );
  }

  static int saveGeocodedLocationsInTravelEngine(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("saveGeocodedLocationsInTravelEngine"),
    );
  }

  static void setAvailabilityFreshnessWindow(
    Pointer<EKDebugPreferences> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setAvailabilityFreshnessWindow:"),
      arg,
    );
  }

  static void setForceDisplayOfNewTravelAdvisoryHypotheses(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForceDisplayOfNewTravelAdvisoryHypotheses:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisAggressiveTravelTime(
    Pointer<EKDebugPreferences> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector(
          "setOverriddenTravelAdvisoryHypothesisAggressiveTravelTime:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisConservativeTravelTime(
    Pointer<EKDebugPreferences> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector(
          "setOverriddenTravelAdvisoryHypothesisConservativeTravelTime:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisCurrentTrafficDensity(
    Pointer<EKDebugPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "setOverriddenTravelAdvisoryHypothesisCurrentTrafficDensity:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisEstimatedTravelTime(
    Pointer<EKDebugPreferences> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector(
          "setOverriddenTravelAdvisoryHypothesisEstimatedTravelTime:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisRouteName(
    Pointer<EKDebugPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOverriddenTravelAdvisoryHypothesisRouteName:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisSupportsLiveTraffic(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector(
          "setOverriddenTravelAdvisoryHypothesisSupportsLiveTraffic:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisTransportType(
    Pointer<EKDebugPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOverriddenTravelAdvisoryHypothesisTransportType:"),
      arg,
    );
  }

  static void setOverriddenTravelAdvisoryHypothesisTravelState(
    Pointer<EKDebugPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOverriddenTravelAdvisoryHypothesisTravelState:"),
      arg,
    );
  }

  static void setOverrideTravelAdvisoryHypothesis(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOverrideTravelAdvisoryHypothesis:"),
      arg,
    );
  }

  static void setPerformAgendaEntryEqualityChecksInTravelEngine(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPerformAgendaEntryEqualityChecksInTravelEngine:"),
      arg,
    );
  }

  static void setPreventMarkingTravelAdvisoryEntriesAsDismissed(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPreventMarkingTravelAdvisoryEntriesAsDismissed:"),
      arg,
    );
  }

  static void setSaveGeocodedLocationsInTravelEngine(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSaveGeocodedLocationsInTravelEngine:"),
      arg,
    );
  }

  static void setShouldBypassTravelEngineThrottle(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldBypassTravelEngineThrottle:"),
      arg,
    );
  }

  static void setShowDepartureDateForTransitTimeToLeave(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShowDepartureDateForTransitTimeToLeave:"),
      arg,
    );
  }

  static void setShowVerboseMessagesForTimeToLeave(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShowVerboseMessagesForTimeToLeave:"),
      arg,
    );
  }

  static void setUseAverageETAForTimeToLeave(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseAverageETAForTimeToLeave:"),
      arg,
    );
  }

  static void setVerifyIntegrityOfAvailabilityTimeSearchTimelines(
    Pointer<EKDebugPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setVerifyIntegrityOfAvailabilityTimeSearchTimelines:"),
      arg,
    );
  }

  static int shouldBypassTravelEngineThrottle(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBypassTravelEngineThrottle"),
    );
  }

  static int showDepartureDateForTransitTimeToLeave(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("showDepartureDateForTransitTimeToLeave"),
    );
  }

  static int showVerboseMessagesForTimeToLeave(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("showVerboseMessagesForTimeToLeave"),
    );
  }

  static int useAverageETAForTimeToLeave(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useAverageETAForTimeToLeave"),
    );
  }

  static int verifyIntegrityOfAvailabilityTimeSearchTimelines(
    Pointer<EKDebugPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("verifyIntegrityOfAvailabilityTimeSearchTimelines"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKDefaultSerializerFactory extends Struct<EKDefaultSerializerFactory> {
  factory EKDefaultSerializerFactory._() {
    throw UnimplementedError();
  }
  static Pointer<EKDefaultSerializerFactory> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKDefaultSerializerFactory")
        .cast<EKDefaultSerializerFactory>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKDeleteOperation extends Struct<EKDeleteOperation> {
  factory EKDeleteOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKDeleteOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKDeleteOperation").cast<EKDeleteOperation>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKDiff extends Struct<EKDiff> {
  factory EKDiff._() {
    throw UnimplementedError();
  }
  static Pointer<EKDiff> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKDiff").cast<EKDiff>();
  }

  static Pointer changeSetForDiff(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeSetForDiff"),
    );
  }

  static Pointer differentIdentityKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentIdentityKeys"),
    );
  }

  static Pointer differentImmutableKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentImmutableKeys"),
    );
  }

  static Pointer differentKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentKeys"),
    );
  }

  static Pointer differentRelationshipMultiValueKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentRelationshipMultiValueKeys"),
    );
  }

  static Pointer differentRelationshipSingleValueKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentRelationshipSingleValueKeys"),
    );
  }

  static Pointer differentSingleValueKeys(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("differentSingleValueKeys"),
    );
  }

  static Pointer firstObject(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstObject"),
    );
  }

  static Pointer initWithFirstObject(
    Pointer<EKDiff> _self,
    Pointer arg, {
    @required Pointer secondObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFirstObject:secondObject:"),
      arg,
      secondObject,
    );
  }

  static Pointer relationshipMultiValueAdds(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationshipMultiValueAdds"),
    );
  }

  static Pointer relationshipMultiValueModifies(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationshipMultiValueModifies"),
    );
  }

  static Pointer relationshipMultiValueRemoves(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationshipMultiValueRemoves"),
    );
  }

  static Pointer relationshipSingleValueModifies(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationshipSingleValueModifies"),
    );
  }

  static int result(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("result"),
    );
  }

  static Pointer secondObject(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondObject"),
    );
  }

  static void setDifferentIdentityKeys(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDifferentIdentityKeys:"),
      arg,
    );
  }

  static void setDifferentImmutableKeys(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDifferentImmutableKeys:"),
      arg,
    );
  }

  static void setDifferentRelationshipMultiValueKeys(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDifferentRelationshipMultiValueKeys:"),
      arg,
    );
  }

  static void setDifferentRelationshipSingleValueKeys(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDifferentRelationshipSingleValueKeys:"),
      arg,
    );
  }

  static void setDifferentSingleValueKeys(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDifferentSingleValueKeys:"),
      arg,
    );
  }

  static void setFirstObject(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFirstObject:"),
      arg,
    );
  }

  static void setRelationshipMultiValueAdds(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationshipMultiValueAdds:"),
      arg,
    );
  }

  static void setRelationshipMultiValueModifies(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationshipMultiValueModifies:"),
      arg,
    );
  }

  static void setRelationshipMultiValueRemoves(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationshipMultiValueRemoves:"),
      arg,
    );
  }

  static void setRelationshipSingleValueModifies(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationshipSingleValueModifies:"),
      arg,
    );
  }

  static void setResult(
    Pointer<EKDiff> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setResult:"),
      arg,
    );
  }

  static void setSecondObject(
    Pointer<EKDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSecondObject:"),
      arg,
    );
  }

  static Pointer summaryDictionary(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summaryDictionary"),
    );
  }

  static Pointer summaryString(
    Pointer<EKDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summaryString"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEWSItemIDPredicate extends Struct<EKEWSItemIDPredicate> {
  factory EKEWSItemIDPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKEWSItemIDPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKEWSItemIDPredicate").cast<EKEWSItemIDPredicate>();
  }

  static Pointer description(
    Pointer<EKEWSItemIDPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKEWSItemIDPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<EKEWSItemIDPredicate> _self,
    Pointer arg, {
    @required Pointer substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static int hash(
    Pointer<EKEWSItemIDPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKEWSItemIDPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithItemID(
    Pointer<EKEWSItemIDPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithItemID:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<EKEWSItemIDPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicateForCoreData(
    Pointer<EKEWSItemIDPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCoreData"),
    );
  }

  static Pointer predicateFormat(
    Pointer<EKEWSItemIDPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEditingContext extends Struct<EKEditingContext> {
  factory EKEditingContext._() {
    throw UnimplementedError();
  }
  static Pointer<EKEditingContext> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKEditingContext").cast<EKEditingContext>();
  }

  static int addAllObjects(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("addAllObjects"),
    );
  }

  static Pointer commitDelegate(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commitDelegate"),
    );
  }

  static Pointer decisionDelegate(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decisionDelegate"),
    );
  }

  static int deleteAllObjects(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("deleteAllObjects"),
    );
  }

  static Pointer group(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("group"),
    );
  }

  static int hasUpdatePriority(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUpdatePriority"),
    );
  }

  static Pointer initWithObjects(
    Pointer<EKEditingContext> _self,
    Pointer arg, {
    @required Pointer observer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObjects:observer:"),
      arg,
      observer,
    );
  }

  static int isActive(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isActive"),
    );
  }

  static int isOpen(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOpen"),
    );
  }

  static void notifyObservers(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("notifyObservers"),
    );
  }

  static Pointer objectsBeingEdited(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectsBeingEdited"),
    );
  }

  static Pointer observer(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("observer"),
    );
  }

  static Pointer pendingGroupUpdates(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pendingGroupUpdates"),
    );
  }

  static Pointer pendingObserverUpdates(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pendingObserverUpdates"),
    );
  }

  static int performUndoableOperation(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performUndoableOperation:"),
      arg,
    );
  }

  static void relatedObjectsDidUpdate(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("relatedObjectsDidUpdate:"),
      arg,
    );
  }

  static void revert(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("revert"),
    );
  }

  static int saveCompleteChange(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("saveCompleteChange"),
    );
  }

  static int saveCompleteChange$(
    Pointer<EKEditingContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("saveCompleteChange:"),
      arg,
    );
  }

  static int saveCompleteChangeWithImpliedCommitDecision(
    Pointer<EKEditingContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("saveCompleteChangeWithImpliedCommitDecision:"),
      arg,
    );
  }

  static int savePartialChange(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("savePartialChange"),
    );
  }

  static void setCommitDelegate(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCommitDelegate:"),
      arg,
    );
  }

  static void setDecisionDelegate(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDecisionDelegate:"),
      arg,
    );
  }

  static void setGroup(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGroup:"),
      arg,
    );
  }

  static void setIsActive(
    Pointer<EKEditingContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsActive:"),
      arg,
    );
  }

  static void setIsOpen(
    Pointer<EKEditingContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsOpen:"),
      arg,
    );
  }

  static void setObjectsBeingEdited(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectsBeingEdited:"),
      arg,
    );
  }

  static void setObserver(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObserver:"),
      arg,
    );
  }

  static void setPendingGroupUpdates(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPendingGroupUpdates:"),
      arg,
    );
  }

  static void setPendingObserverUpdates(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPendingObserverUpdates:"),
      arg,
    );
  }

  static void setUndoDelegate(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUndoDelegate:"),
      arg,
    );
  }

  static int shouldResetUndoStack(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldResetUndoStack"),
    );
  }

  static Pointer trackedObjects(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trackedObjects"),
    );
  }

  static void trackedObjectsDidRevert(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackedObjectsDidRevert:"),
      arg,
    );
  }

  static void trackedObjectsDidUpdate(
    Pointer<EKEditingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackedObjectsDidUpdate:"),
      arg,
    );
  }

  static Pointer undoDelegate(
    Pointer<EKEditingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("undoDelegate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEditingContextGroup extends Struct<EKEditingContextGroup> {
  factory EKEditingContextGroup._() {
    throw UnimplementedError();
  }
  static Pointer<EKEditingContextGroup> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKEditingContextGroup")
        .cast<EKEditingContextGroup>();
  }

  static Pointer activeEditingContexts(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activeEditingContexts"),
    );
  }

  static Pointer activeEditingContextsExcludingContext(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("activeEditingContextsExcludingContext:"),
      arg,
    );
  }

  static void addAdditionalObjects(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAdditionalObjects:"),
      arg,
    );
  }

  static void addContext(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addContext:"),
      arg,
    );
  }

  static Pointer additionalObjectGroups(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("additionalObjectGroups"),
    );
  }

  static Pointer earlyCommitDecisionAsNumber(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("earlyCommitDecisionAsNumber"),
    );
  }

  static int earlyCommitDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("earlyCommitDecisionForGroup"),
    );
  }

  static int earlyCommitDecisionForGroupIsSet(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("earlyCommitDecisionForGroupIsSet"),
    );
  }

  static Pointer eventStore(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStore"),
    );
  }

  static Pointer identifiersToCommit(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifiersToCommit"),
    );
  }

  static Pointer initWithObjectGroup(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObjectGroup:"),
      arg,
    );
  }

  static Pointer newIdentifierForIdentifier(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("newIdentifierForIdentifier:"),
      arg,
    );
  }

  static Pointer objectGroup(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectGroup"),
    );
  }

  static Pointer oldObject(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg, {
    @required Pointer didUpdateTo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("oldObject:didUpdateTo:"),
      arg,
      didUpdateTo,
    );
  }

  static Pointer openContexts(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("openContexts"),
    );
  }

  static Pointer originalObjects(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalObjects"),
    );
  }

  static void removeContext(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeContext:"),
      arg,
    );
  }

  static void setAdditionalObjectGroups(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAdditionalObjectGroups:"),
      arg,
    );
  }

  static void setEarlyCommitDecisionAsNumber(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEarlyCommitDecisionAsNumber:"),
      arg,
    );
  }

  static void setEventStore(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventStore:"),
      arg,
    );
  }

  static void setObjectGroup(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectGroup:"),
      arg,
    );
  }

  static void setOpenContexts(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOpenContexts:"),
      arg,
    );
  }

  static void setSpanDecisionAsNumber(
    Pointer<EKEditingContextGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSpanDecisionAsNumber:"),
      arg,
    );
  }

  static Pointer spanDecisionAsNumber(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("spanDecisionAsNumber"),
    );
  }

  static int spanDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("spanDecisionForGroup"),
    );
  }

  static int spanDecisionForGroupIsSet(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("spanDecisionForGroupIsSet"),
    );
  }

  static void specifyEarlyCommitDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("specifyEarlyCommitDecisionForGroup:"),
      arg,
    );
  }

  static void specifySpanDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("specifySpanDecisionForGroup:"),
      arg,
    );
  }

  static Pointer trackedObjects(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trackedObjects"),
    );
  }

  static void unspecifyEarlyCommitDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unspecifyEarlyCommitDecisionForGroup"),
    );
  }

  static void unspecifySpanDecisionForGroup(
    Pointer<EKEditingContextGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unspecifySpanDecisionForGroup"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEvent extends Struct<EKEvent> {
  factory EKEvent._() {
    throw UnimplementedError();
  }
  static Pointer<EKEvent> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKEvent").cast<EKEvent>();
  }

  static Pointer actionStringsDisplayTitle(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionStringsDisplayTitle"),
    );
  }

  static void addConferenceRooms(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addConferenceRooms:"),
      arg,
    );
  }

  static int alarmOverlapsWithEventInSeries(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("alarmOverlapsWithEventInSeries"),
    );
  }

  static int allowsAlarmModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAlarmModifications"),
    );
  }

  static int allowsAllDayModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAllDayModifications"),
    );
  }

  static int allowsAttachmentModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAttachmentModifications"),
    );
  }

  static int allowsAttendeeRemoval(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAttendeeRemoval:"),
      arg,
    );
  }

  static int allowsAttendeesModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAttendeesModifications"),
    );
  }

  static int allowsAvailabilityModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAvailabilityModifications"),
    );
  }

  static int allowsParticipantStatusModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsParticipantStatusModifications"),
    );
  }

  static int allowsPrivateModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsPrivateModifications"),
    );
  }

  static int allowsProposedTimeModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsProposedTimeModifications"),
    );
  }

  static int allowsResponseCommentModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsResponseCommentModifications"),
    );
  }

  static int allowsTravelTimeModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsTravelTimeModifications"),
    );
  }

  static int attendeesStatus(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("attendeesStatus"),
    );
  }

  static int automaticLocationGeocodingAllowed(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticLocationGeocodingAllowed"),
    );
  }

  static int availability(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("availability"),
    );
  }

  static int availabilityEnum(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("availabilityEnum"),
    );
  }

  static Pointer backingOccurrenceIdentifier(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingOccurrenceIdentifier"),
    );
  }

  static Pointer birthdayContactIdentifier(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("birthdayContactIdentifier"),
    );
  }

  static int birthdayPersonID(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("birthdayPersonID"),
    );
  }

  static Pointer birthdayPersonUniqueID(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("birthdayPersonUniqueID"),
    );
  }

  static Pointer birthdayTitle(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("birthdayTitle"),
    );
  }

  static int cachedJunkStatus(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cachedJunkStatus"),
    );
  }

  static int canBeReRepliedTo(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canBeReRepliedTo"),
    );
  }

  static int canMoveOrCopyToCalendar(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveOrCopyToCalendar:fromCalendar:error:"),
      arg,
      fromCalendar,
      error,
    );
  }

  static int canMoveToCalendar$fromCalendar$error$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveToCalendar:fromCalendar:error:"),
      arg,
      fromCalendar,
      error,
    );
  }

  static int canMoveToCalendar$fromCalendar$allowedRequirements$error$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required int allowedRequirements,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "canMoveToCalendar:fromCalendar:allowedRequirements:error:"),
      arg,
      fromCalendar,
      allowedRequirements,
      error,
    );
  }

  static void clearCachedTimeValues(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearCachedTimeValues"),
    );
  }

  static void clearDetectedConferenceURL(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearDetectedConferenceURL"),
    );
  }

  static Pointer commitedItem(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commitedItem"),
    );
  }

  static Pointer commitedItemIgnoringPotentialSlice(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("commitedItemIgnoringPotentialSlice:"),
      arg,
    );
  }

  static int compareStartDateWithEvent(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareStartDateWithEvent:"),
      arg,
    );
  }

  static int compareTimeEndingRecently(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareTimeEndingRecently:"),
      arg,
    );
  }

  static Pointer conferenceURL(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conferenceURL"),
    );
  }

  static Pointer conferenceURLDetected(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conferenceURLDetected"),
    );
  }

  static Pointer conferenceURLForDisplay(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conferenceURLForDisplay"),
    );
  }

  static Pointer copyToCalendar(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required int withOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("copyToCalendar:withOptions:"),
      arg,
      withOptions,
    );
  }

  static int couldBeJunk(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("couldBeJunk"),
    );
  }

  static int daysSpannedInCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("daysSpannedInCalendar:"),
      arg,
    );
  }

  static Pointer defaultAlarms(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarms"),
    );
  }

  static Pointer detachedEventOccurrences(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("detachedEventOccurrences"),
    );
  }

  static Pointer detachedEvents(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("detachedEvents"),
    );
  }

  static Pointer diffFromCommitted(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("diffFromCommitted"),
    );
  }

  static int dontSendNotificationForChanges(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dontSendNotificationForChanges"),
    );
  }

  static Pointer dropBoxLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dropBoxLocation"),
    );
  }

  static double duration(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("duration"),
    );
  }

  static Pointer durationComponents(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("durationComponents"),
    );
  }

  static int durationOverlapsRecurrenceInterval(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("durationOverlapsRecurrenceInterval"),
    );
  }

  static Pointer ekStructuredEndLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredEndLocation"),
    );
  }

  static Pointer ekStructuredStartLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredStartLocation"),
    );
  }

  static int eligibleForTravelAdvisories(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("eligibleForTravelAdvisories"),
    );
  }

  static Pointer endDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer endDateUnadjustedFromUTC(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDateUnadjustedFromUTC"),
    );
  }

  static Pointer endLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endLocation"),
    );
  }

  static Pointer endTimeZone(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endTimeZone"),
    );
  }

  static Pointer endTimeZoneObject(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endTimeZoneObject"),
    );
  }

  static int entityType(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static Pointer eventIdentifier(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventIdentifier"),
    );
  }

  static Pointer eventOccurrenceID(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventOccurrenceID"),
    );
  }

  static Pointer exceptionDates(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionDates"),
    );
  }

  static Pointer externalURI(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalURI"),
    );
  }

  static Pointer frozenObject(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frozenObject"),
    );
  }

  static Pointer futureLocalUidForSliceChild(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("futureLocalUidForSliceChild"),
    );
  }

  static int hasChangesAffectingRecurrenceDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasChangesAffectingRecurrenceDate"),
    );
  }

  static int hasChangesRecommendingSpanAll(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasChangesRecommendingSpanAll"),
    );
  }

  static int hasChangesRequiringSpanAll(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasChangesRequiringSpanAll"),
    );
  }

  static int hasFieldsIncompatibleWithMoveToCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasFieldsIncompatibleWithMoveToCalendar:"),
      arg,
    );
  }

  static int hasResponseCommentChange(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasResponseCommentChange"),
    );
  }

  static int hasUnsavedChangesToEndDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChangesToEndDate"),
    );
  }

  static int hasUnsavedChangesToStartDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChangesToStartDate"),
    );
  }

  static int internalAllowsAlarmModifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("internalAllowsAlarmModifications"),
    );
  }

  static int intersectsRangeIfFloating$normalRange$checkProposed$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer normalRange,
    @required int checkProposed,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("intersectsRangeIfFloating:normalRange:checkProposed:"),
      arg,
      normalRange,
      checkProposed,
    );
  }

  static int intersectsRangeIfFloating$normalRange$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer normalRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("intersectsRangeIfFloating:normalRange:"),
      arg,
      normalRange,
    );
  }

  static int isBackingObjectSignificantlyDetached(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBackingObjectSignificantlyDetached"),
    );
  }

  static int isBackingObjectSignificantlyDetachedIgnoringParticipation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isBackingObjectSignificantlyDetachedIgnoringParticipation"),
    );
  }

  static int isBirthday(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBirthday"),
    );
  }

  static int isDetached(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDetached"),
    );
  }

  static int isDifferentAndHasForwardedAttendeesWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndHasForwardedAttendeesWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndHasNewProposedTimeWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndHasNewProposedTimeWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndHasOnlyUnscheduledAttendeesWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndHasOnlyUnscheduledAttendeesWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndHasUnscheduledAttendeesWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndHasUnscheduledAttendeesWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndModifiedAttendeesWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndModifiedAttendeesWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndRequiresRSVPWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndRequiresRSVPWithDiff:"),
      arg,
    );
  }

  static int isDifferentAndRequiresRescheduleWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentAndRequiresRescheduleWithDiff:"),
      arg,
    );
  }

  static int isDifferentExceptingPerUserPropertiesWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentExceptingPerUserPropertiesWithDiff:"),
      arg,
    );
  }

  static int isDifferentFromCommittedEventAndHasForwardedAttendees(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc
          .getSelector("isDifferentFromCommittedEventAndHasForwardedAttendees"),
    );
  }

  static int isDifferentFromCommittedEventAndHasNewProposedTime(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentFromCommittedEventAndHasNewProposedTime"),
    );
  }

  static int isDifferentFromCommittedEventAndHasOnlyUnscheduledAttendees(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isDifferentFromCommittedEventAndHasOnlyUnscheduledAttendees"),
    );
  }

  static int isDifferentFromCommittedEventAndHasUnscheduledAttendees(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isDifferentFromCommittedEventAndHasUnscheduledAttendees"),
    );
  }

  static int isDifferentFromCommittedEventAndRequiresRSVP(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentFromCommittedEventAndRequiresRSVP"),
    );
  }

  static int isDifferentFromCommittedEventAndRequiresReschedule(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentFromCommittedEventAndRequiresReschedule"),
    );
  }

  static int isDifferentFromCommittedEventExceptingPerUserProperties(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isDifferentFromCommittedEventExceptingPerUserProperties"),
    );
  }

  static int isDifferentWithDiff(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDifferentWithDiff:"),
      arg,
    );
  }

  static int isEditable(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEndDateDirty(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEndDateDirty"),
    );
  }

  static int isEvent(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEvent"),
    );
  }

  static int isFirstOccurrence(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFirstOccurrence"),
    );
  }

  static int isLastOccurrence(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLastOccurrence"),
    );
  }

  static int isMainOccurrence(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMainOccurrence"),
    );
  }

  static int isMultiDayTimedEventInCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMultiDayTimedEventInCalendar:"),
      arg,
    );
  }

  static int isOnlyOccurrence(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOnlyOccurrence"),
    );
  }

  static int isOutOfOrderWithEventInSeries(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOutOfOrderWithEventInSeries"),
    );
  }

  static int isPhantom(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPhantom"),
    );
  }

  static int isPrivacySet(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPrivacySet"),
    );
  }

  static int isPrivacySetInDelegateOrSharedToMeCalendar(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPrivacySetInDelegateOrSharedToMeCalendar"),
    );
  }

  static int isRedetached(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRedetached"),
    );
  }

  static int isSignificantlyDetached(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSignificantlyDetached"),
    );
  }

  static int isSignificantlyDetachedIgnoringParticipation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSignificantlyDetachedIgnoringParticipation"),
    );
  }

  static int isStartDateDirty(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isStartDateDirty"),
    );
  }

  static int isUndetached(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUndetached"),
    );
  }

  static int isUnexcepted(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUnexcepted"),
    );
  }

  static int isValidRecurrenceDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValidRecurrenceDate:"),
      arg,
    );
  }

  static int isYearlessBirthday(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isYearlessBirthday"),
    );
  }

  static int isYearlessLeapMonthBirthday(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isYearlessLeapMonthBirthday"),
    );
  }

  static int junkStatus(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("junkStatus"),
    );
  }

  static Pointer lastRecurrenceDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastRecurrenceDate"),
    );
  }

  static int locationIsAConferenceRoom(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("locationIsAConferenceRoom"),
    );
  }

  static Pointer locationWithoutPrediction(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locationWithoutPrediction"),
    );
  }

  static Pointer locations(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locations"),
    );
  }

  static Pointer locationsWithoutPrediction(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locationsWithoutPrediction"),
    );
  }

  static Pointer lunarCalendarString(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lunarCalendarString"),
    );
  }

  static void makeRecurrenceEndCountBased(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeRecurrenceEndCountBased"),
    );
  }

  static void makeRecurrenceEndDateBased(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeRecurrenceEndDateBased"),
    );
  }

  static void markAsSaved(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsSaved"),
    );
  }

  static Pointer masterEvent(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("masterEvent"),
    );
  }

  static Pointer masterEventOccurrence(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("masterEventOccurrence"),
    );
  }

  static Pointer nameForBirthday(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameForBirthday"),
    );
  }

  static int needsGeocoding(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsGeocoding"),
    );
  }

  static int needsResponse(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsResponse"),
    );
  }

  static Pointer notifications(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notifications"),
    );
  }

  static Pointer notificationsForSeries(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationsForSeries"),
    );
  }

  static Pointer notificationsForSeriesIncludingPast(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForSeriesIncludingPast:"),
      arg,
    );
  }

  static Pointer notificationsIncludingPast(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsIncludingPast:"),
      arg,
    );
  }

  static Pointer occurrenceDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceDate"),
    );
  }

  static Pointer occurrenceForDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceForDate:"),
      arg,
    );
  }

  static Pointer occurrenceIdentifier(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrenceIdentifier"),
    );
  }

  static Pointer organizer(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizer"),
    );
  }

  static int overlapsWithOrIsSameDayAsEventInSeries(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("overlapsWithOrIsSameDayAsEventInSeries"),
    );
  }

  static int participantsStatus(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("participantsStatus"),
    );
  }

  static int participationStatus(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participationStatus"),
    );
  }

  static Pointer preferredLocationWithoutPrediction(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preferredLocationWithoutPrediction"),
    );
  }

  static int privacyLevel(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("privacyLevel"),
    );
  }

  static Pointer privacyLevelString(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privacyLevelString"),
    );
  }

  static Pointer proposedEndDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDate"),
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTCForMe(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTCForMe"),
    );
  }

  static Pointer proposedStartDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDate"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTCForMe(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTCForMe"),
    );
  }

  static int refresh(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("refresh"),
    );
  }

  static void removeConferenceRooms(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeConferenceRooms:"),
      arg,
    );
  }

  static int removeWithSpan(
    Pointer<EKEvent> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("removeWithSpan:error:"),
      arg,
      error,
    );
  }

  static int requirementsToMoveFromCalendar(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer toCalendar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("requirementsToMoveFromCalendar:toCalendar:"),
      arg,
      toCalendar,
    );
  }

  static int requirementsToMoveToCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("requirementsToMoveToCalendar:"),
      arg,
    );
  }

  static int requiresCopyToMoveFromCalendar(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer toCalendar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("requiresCopyToMoveFromCalendar:toCalendar:"),
      arg,
      toCalendar,
    );
  }

  static Pointer responseComment(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseComment"),
    );
  }

  static Pointer responseCommentForDisplay(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseCommentForDisplay"),
    );
  }

  static int saveWithSpan(
    Pointer<EKEvent> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("saveWithSpan:error:"),
      arg,
      error,
    );
  }

  static Pointer scanForConflicts(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scanForConflicts"),
    );
  }

  static Pointer sendersEmail(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersEmail"),
    );
  }

  static Pointer sendersPhoneNumber(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendersPhoneNumber"),
    );
  }

  static int seriesHasOutOfOrderEvents(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("seriesHasOutOfOrderEvents"),
    );
  }

  static int seriesHasOverlappingAlarms(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("seriesHasOverlappingAlarms"),
    );
  }

  static int seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents"),
    );
  }

  static void setAllDay(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllDay:"),
      arg,
    );
  }

  static void setAutoGeneratedResponseCommentForProposedStartDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAutoGeneratedResponseCommentForProposedStartDate:"),
      arg,
    );
  }

  static void setAvailability(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setAvailability:"),
      arg,
    );
  }

  static void setAvailabilityEnum(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setAvailabilityEnum:"),
      arg,
    );
  }

  static void setBirthdayTitle(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBirthdayTitle:"),
      arg,
    );
  }

  static void setCachedJunkStatus(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCachedJunkStatus:"),
      arg,
    );
  }

  static void setConferenceURL(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConferenceURL:"),
      arg,
    );
  }

  static void setDontSendNotificationForChanges(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDontSendNotificationForChanges:"),
      arg,
    );
  }

  static void setEkStructuredEndLocation(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEkStructuredEndLocation:"),
      arg,
    );
  }

  static void setEkStructuredStartLocation(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEkStructuredStartLocation:"),
      arg,
    );
  }

  static void setEndDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setEndDateUnadjustedFromUTC(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setEndLocation(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndLocation:"),
      arg,
    );
  }

  static void setEndTimeZone(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndTimeZone:"),
      arg,
    );
  }

  static void setEndTimeZoneObject(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndTimeZoneObject:"),
      arg,
    );
  }

  static void setFutureLocalUidForSliceChild(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFutureLocalUidForSliceChild:"),
      arg,
    );
  }

  static void setIsDetached(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDetached:"),
      arg,
    );
  }

  static void setIsJunk(
    Pointer<EKEvent> _self,
    int arg, {
    @required int shouldSave,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_returns_void(
      _self,
      _objc.getSelector("setIsJunk:shouldSave:"),
      arg,
      shouldSave,
    );
  }

  static void setIsPhantom(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPhantom:"),
      arg,
    );
  }

  static void setJunkStatus(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setJunkStatus:"),
      arg,
    );
  }

  static void setLocations(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocations:"),
      arg,
    );
  }

  static void setNeedsGeocoding(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNeedsGeocoding:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setNotesCommon(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotesCommon:"),
      arg,
    );
  }

  static void setPrivacyLevel(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPrivacyLevel:"),
      arg,
    );
  }

  static void setPrivacyLevelString(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrivacyLevelString:"),
      arg,
    );
  }

  static void setProposedEndDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedEndDate:"),
      arg,
    );
  }

  static void setProposedStartDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedStartDate:"),
      arg,
    );
  }

  static void setResponseComment(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResponseComment:"),
      arg,
    );
  }

  static void setSliceDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSliceDate:"),
      arg,
    );
  }

  static void setSliceParentID(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSliceParentID:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static void setStatusString(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatusString:"),
      arg,
    );
  }

  static void setStructuredLocation$(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredLocation:"),
      arg,
    );
  }

  static void setStructuredLocation$preserveConferenceRooms$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required int preserveConferenceRooms,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStructuredLocation:preserveConferenceRooms:"),
      arg,
      preserveConferenceRooms,
    );
  }

  static void setSuggestionInfo(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfo:"),
      arg,
    );
  }

  static void setSuggestionInfoAcknowledged(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoAcknowledged:"),
      arg,
    );
  }

  static void setSuggestionInfoChangedFields(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoChangedFields:"),
      arg,
    );
  }

  static void setSuggestionInfoOpaqueKey(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoOpaqueKey:"),
      arg,
    );
  }

  static void setSuggestionInfoTimestamp(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoTimestamp:"),
      arg,
    );
  }

  static void setSuggestionInfoUniqueKey(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoUniqueKey:"),
      arg,
    );
  }

  static void setTimeZoneObject(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZoneObject:"),
      arg,
    );
  }

  static void setTravelAdvisoryBehavior(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setTravelAdvisoryBehavior:"),
      arg,
    );
  }

  static void setTravelAdvisoryBehaviorString(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTravelAdvisoryBehaviorString:"),
      arg,
    );
  }

  static void setTravelDuration(
    Pointer<EKEvent> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTravelDuration:"),
      arg,
    );
  }

  static void setTravelStartLocation(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTravelStartLocation:"),
      arg,
    );
  }

  static void setTravelTime(
    Pointer<EKEvent> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTravelTime:"),
      arg,
    );
  }

  static void setURL(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static void setURLCommon(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURLCommon:"),
      arg,
    );
  }

  static int shouldBeIncluded(
    Pointer<EKEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("shouldBeIncluded:"),
      arg,
    );
  }

  static int shouldBeIncludedIfIntersectsRange(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("shouldBeIncludedIfIntersectsRange:exclusionOptions:"),
      arg,
      exclusionOptions,
    );
  }

  static Pointer singleChangedValueForKey(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("singleChangedValueForKey:"),
      arg,
    );
  }

  static Pointer sliceDate(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceDate"),
    );
  }

  static Pointer sliceParentID(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceParentID"),
    );
  }

  static Pointer startDateIncludingTravel(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDateIncludingTravel"),
    );
  }

  static Pointer startDateIncludingTravelUnadjustedFromUTC(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDateIncludingTravelUnadjustedFromUTC"),
    );
  }

  static Pointer startOfDayForEndDateInCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("startOfDayForEndDateInCalendar:"),
      arg,
    );
  }

  static Pointer startOfDayForStartDateInCalendar(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("startOfDayForStartDateInCalendar:"),
      arg,
    );
  }

  static int status(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("status"),
    );
  }

  static Pointer statusString(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusString"),
    );
  }

  static Pointer structuredLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocation"),
    );
  }

  static Pointer suggestionInfo(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfo"),
    );
  }

  static int suggestionInfoAcknowledged(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suggestionInfoAcknowledged"),
    );
  }

  static int suggestionInfoChangedFields(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("suggestionInfoChangedFields"),
    );
  }

  static Pointer suggestionInfoOpaqueKey(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoOpaqueKey"),
    );
  }

  static Pointer suggestionInfoTimestamp(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoTimestamp"),
    );
  }

  static Pointer suggestionInfoUniqueKey(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoUniqueKey"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }

  static int supportsParticipationStatusModificationsWithoutNotification(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "supportsParticipationStatusModificationsWithoutNotification"),
    );
  }

  static Pointer timeToLeaveAlarm(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeToLeaveAlarm"),
    );
  }

  static Pointer title(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int travelAdvisoryBehavior(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("travelAdvisoryBehavior"),
    );
  }

  static int travelAdvisoryBehaviorIsEffectivelyEnabled(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("travelAdvisoryBehaviorIsEffectivelyEnabled"),
    );
  }

  static Pointer travelAdvisoryBehaviorString(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("travelAdvisoryBehaviorString"),
    );
  }

  static double travelDuration(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("travelDuration"),
    );
  }

  static Pointer travelStartLocation(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("travelStartLocation"),
    );
  }

  static double travelTime(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("travelTime"),
    );
  }

  static void updateConferenceURLIfNeeded(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("updateConferenceURLIfNeeded"),
    );
  }

  static int updateEventToEvent$commit$(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required int commit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("updateEventToEvent:commit:"),
      arg,
      commit,
    );
  }

  static int updateEventToEvent$(
    Pointer<EKEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("updateEventToEvent:"),
      arg,
    );
  }

  static int updateWithGeocodedMapItemAndSaveWithCommit(
    Pointer<EKEvent> _self,
    Pointer arg, {
    @required Pointer eventStore,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "updateWithGeocodedMapItemAndSaveWithCommit:eventStore:error:"),
      arg,
      eventStore,
      error,
    );
  }

  static int validate(
    Pointer<EKEvent> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateWithSpan(
    Pointer<EKEvent> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("validateWithSpan:error:"),
      arg,
      error,
    );
  }

  static void willSave(
    Pointer<EKEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("willSave"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEventOccurrenceCache extends Struct<EKEventOccurrenceCache> {
  factory EKEventOccurrenceCache._() {
    throw UnimplementedError();
  }
  static Pointer<EKEventOccurrenceCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKEventOccurrenceCache")
        .cast<EKEventOccurrenceCache>();
  }

  static Pointer allEvents(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEvents"),
    );
  }

  static Pointer backingStore(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static void binEvents(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("binEvents:"),
      arg,
    );
  }

  static Pointer binnedDates(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("binnedDates"),
    );
  }

  static Pointer binnedEvents(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("binnedEvents"),
    );
  }

  static Pointer cacheQueue(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cacheQueue"),
    );
  }

  static void clearAll(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearAll"),
    );
  }

  static Pointer copyForBackingStore(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackingStore:"),
      arg,
    );
  }

  static Pointer countsForEventsInRange$withPredicate$(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg, {
    @required Pointer withPredicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("countsForEventsInRange:withPredicate:"),
      arg,
      withPredicate,
    );
  }

  static Pointer countsForEventsInRange$(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("countsForEventsInRange:"),
      arg,
    );
  }

  static Pointer eventsInRange$withPredicate$(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg, {
    @required Pointer withPredicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsInRange:withPredicate:"),
      arg,
      withPredicate,
    );
  }

  static Pointer eventsInRange$(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsInRange:"),
      arg,
    );
  }

  static Pointer eventsWithProposedTimes(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithProposedTimes"),
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static void pruneWithOccurrencesToKeep(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("pruneWithOccurrencesToKeep:"),
      arg,
    );
  }

  static void rebinAllEvents(
    Pointer<EKEventOccurrenceCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rebinAllEvents"),
    );
  }

  static void rebinOccurrences(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("rebinOccurrences:"),
      arg,
    );
  }

  static void setBackingStore(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStore:"),
      arg,
    );
  }

  static void setBinnedDates(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBinnedDates:"),
      arg,
    );
  }

  static void setBinnedEvents(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBinnedEvents:"),
      arg,
    );
  }

  static void setCacheQueue(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCacheQueue:"),
      arg,
    );
  }

  static void setEventsWithProposedTimes(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventsWithProposedTimes:"),
      arg,
    );
  }

  static void unbinOccurrences(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unbinOccurrences:"),
      arg,
    );
  }

  static void unbinOccurrencesWithObjectIDs(
    Pointer<EKEventOccurrenceCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unbinOccurrencesWithObjectIDs:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEventOccurrenceProtocol_Shared
    extends Struct<EKEventOccurrenceProtocol_Shared> {
  factory EKEventOccurrenceProtocol_Shared._() {
    throw UnimplementedError();
  }
  static Pointer<EKEventOccurrenceProtocol_Shared> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKEventOccurrenceProtocol_Shared")
        .cast<EKEventOccurrenceProtocol_Shared>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEventRangePredicate extends Struct<EKEventRangePredicate> {
  factory EKEventRangePredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKEventRangePredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKEventRangePredicate")
        .cast<EKEventRangePredicate>();
  }

  static Pointer copyWithZone(
    Pointer<EKEventRangePredicate> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer endDate(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static int exclusionOptions(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("exclusionOptions"),
    );
  }

  static int faultingOption(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("faultingOption"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer
      initWithStartDate$endDate$timeZone$calendars$prefetchHint$exclusionOptions$(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer calendars,
    @required int prefetchHint,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector(
          "initWithStartDate:endDate:timeZone:calendars:prefetchHint:exclusionOptions:"),
      arg,
      endDate,
      timeZone,
      calendars,
      prefetchHint,
      exclusionOptions,
    );
  }

  static Pointer
      initWithStartDate$endDate$timeZone$calendars$prefetchHint$exclusionOptions$faultingOption$(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer calendars,
    @required int prefetchHint,
    @required int exclusionOptions,
    @required int faultingOption,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p(
      _self,
      _objc.getSelector(
          "initWithStartDate:endDate:timeZone:calendars:prefetchHint:exclusionOptions:faultingOption:"),
      arg,
      endDate,
      timeZone,
      calendars,
      prefetchHint,
      exclusionOptions,
      faultingOption,
    );
  }

  static int isEqual(
    Pointer<EKEventRangePredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicateFormat(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static int prefetchHint(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("prefetchHint"),
    );
  }

  static Pointer startDate(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static Pointer timeZone(
    Pointer<EKEventRangePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEventSliceInfo extends Struct<EKEventSliceInfo> {
  factory EKEventSliceInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKEventSliceInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKEventSliceInfo").cast<EKEventSliceInfo>();
  }

  static int affectsObject(
    Pointer<EKEventSliceInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("affectsObject:"),
      arg,
    );
  }

  static Pointer copyWithZone(
    Pointer<EKEventSliceInfo> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer currentDate(
    Pointer<EKEventSliceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentDate"),
    );
  }

  static Pointer description(
    Pointer<EKEventSliceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void setCurrentDate(
    Pointer<EKEventSliceInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentDate:"),
      arg,
    );
  }

  static void setSliceDate(
    Pointer<EKEventSliceInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSliceDate:"),
      arg,
    );
  }

  static void setSliceType(
    Pointer<EKEventSliceInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSliceType:"),
      arg,
    );
  }

  static Pointer sliceDate(
    Pointer<EKEventSliceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceDate"),
    );
  }

  static int sliceType(
    Pointer<EKEventSliceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("sliceType"),
    );
  }

  static Pointer updatedIdentifier(
    Pointer<EKEventSliceInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("updatedIdentifier:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKEventStore extends Struct<EKEventStore> {
  factory EKEventStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKEventStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKEventStore").cast<EKEventStore>();
  }

  static int acceptAlternateTimeProposalNotification(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc
          .getSelector("acceptAlternateTimeProposalNotification:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int acceptInvitation(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer exceptForDates,
    @required int notifyOrganizer,
    @required Pointer placingInCalendar,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "acceptInvitation:exceptForDates:notifyOrganizer:placingInCalendar:commit:error:"),
      arg,
      exceptForDates,
      notifyOrganizer,
      placingInCalendar,
      commit,
      error,
    );
  }

  static int acknowledgeNotification(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("acknowledgeNotification:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int acknowledgeNotifications(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("acknowledgeNotifications:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static Pointer acquireDefaultCalendarForNewEvents(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acquireDefaultCalendarForNewEvents"),
    );
  }

  static Pointer acquireDefaultCalendarForNewReminders(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acquireDefaultCalendarForNewReminders"),
    );
  }

  static Pointer allCalendars(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allCalendars"),
    );
  }

  static Pointer allEvents(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEvents"),
    );
  }

  static Pointer allFrozenOrNewCalendars(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allFrozenOrNewCalendars"),
    );
  }

  static Pointer allFrozenOrNewCalendarsForEntityType(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("allFrozenOrNewCalendarsForEntityType:"),
      arg,
    );
  }

  static Pointer allNotifications(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allNotifications"),
    );
  }

  static Pointer allNotificationsIncludingPast(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("allNotificationsIncludingPast:"),
      arg,
    );
  }

  static Pointer allReminders(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allReminders"),
    );
  }

  static int anyCompletedRemindersInCalendars(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("anyCompletedRemindersInCalendars:"),
      arg,
    );
  }

  static void applyLiveEdits(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyLiveEdits:"),
      arg,
    );
  }

  static int automaticLocationGeocodingAllowed(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticLocationGeocodingAllowed"),
    );
  }

  static Pointer backgroundFetchQueue(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backgroundFetchQueue"),
    );
  }

  static Pointer backingEventsWithIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("backingEventsWithIdentifiers:"),
      arg,
    );
  }

  static Pointer backingStore(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static Pointer backingStoreAvailableGroup(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStoreAvailableGroup"),
    );
  }

  static int backingStoreType(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("backingStoreType"),
    );
  }

  static Pointer calendarItemWithExternalURI(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemWithExternalURI:"),
      arg,
    );
  }

  static Pointer calendarItemWithIdentifier$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemWithIdentifier:"),
      arg,
    );
  }

  static Pointer calendarItemWithIdentifier$apiExpected$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int apiExpected,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("calendarItemWithIdentifier:apiExpected:"),
      arg,
      apiExpected,
    );
  }

  static Pointer calendarItemsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer entityClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemsMatchingPredicate:entityClass:"),
      arg,
      entityClass,
    );
  }

  static Pointer calendarItemsWithEWSIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemsWithEWSIdentifier:"),
      arg,
    );
  }

  static Pointer calendarItemsWithExternalIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemsWithExternalIdentifier:"),
      arg,
    );
  }

  static Pointer calendarWithExternalURI(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarWithExternalURI:"),
      arg,
    );
  }

  static Pointer calendarWithIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("calendarWithIdentifier:"),
      arg,
    );
  }

  static Pointer calendars(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendars"),
    );
  }

  static Pointer calendarsForEntityType(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("calendarsForEntityType:"),
      arg,
    );
  }

  static void cancelFetchRequest(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelFetchRequest:"),
      arg,
    );
  }

  static Pointer changeListener(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeListener"),
    );
  }

  static void clearLiveEdits(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearLiveEdits:"),
      arg,
    );
  }

  static int closeEditingContext(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("closeEditingContext:"),
      arg,
    );
  }

  static int closeEditingContextAndCommitChanges(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("closeEditingContextAndCommitChanges:"),
      arg,
    );
  }

  static int closeEditingContextWithoutCommittingChanges(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("closeEditingContextWithoutCommittingChanges:"),
      arg,
    );
  }

  static int commit(
    Pointer<EKEventStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("commit:"),
      arg,
    );
  }

  static int commitChangesFromEditingContextWithoutClosing(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("commitChangesFromEditingContextWithoutClosing:"),
      arg,
    );
  }

  static int commitObjectsWithIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("commitObjectsWithIdentifiers:error:"),
      arg,
      error,
    );
  }

  static Pointer copyForBackgroundUpdate(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyForBackgroundUpdate"),
    );
  }

  static void dealloc(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer defaultCalendarForNewEvents(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewEvents"),
    );
  }

  static Pointer defaultCalendarForNewReminders(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewReminders"),
    );
  }

  static Pointer delegateSources(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegateSources"),
    );
  }

  static void deleteDraftOfEventWithOccurrenceID(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteDraftOfEventWithOccurrenceID:"),
      arg,
    );
  }

  static Pointer editingContextGroups(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("editingContextGroups"),
    );
  }

  static void enumerateEventsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateEventsMatchingPredicate:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static Pointer eventCountsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventCountsMatchingPredicate:"),
      arg,
    );
  }

  static Pointer eventStoreIdentifier(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStoreIdentifier"),
    );
  }

  static Pointer eventWithExternalURI(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventWithExternalURI:"),
      arg,
    );
  }

  static Pointer eventWithIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventWithIdentifier:"),
      arg,
    );
  }

  static Pointer eventWithUniqueId$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventWithUniqueId:"),
      arg,
    );
  }

  static Pointer eventWithUniqueId$occurrenceDate$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer occurrenceDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventWithUniqueId:occurrenceDate:"),
      arg,
      occurrenceDate,
    );
  }

  static Pointer eventsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsMatchingPredicate:"),
      arg,
    );
  }

  static void eventsMatchingPredicateInTemporaryStore(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer withActionBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "eventsMatchingPredicateInTemporaryStore:withActionBlock:"),
      arg,
      withActionBlock,
    );
  }

  static Pointer eventsWithCalendarIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer eventsWithExternalIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithExternalIdentifier:"),
      arg,
    );
  }

  static Pointer eventsWithIdentifiers$apiExpected$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int apiExpected,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("eventsWithIdentifiers:apiExpected:"),
      arg,
      apiExpected,
    );
  }

  static Pointer eventsWithIdentifiers$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithIdentifiers:"),
      arg,
    );
  }

  static void fetchEventCountsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchEventCountsMatchingPredicate:completion:"),
      arg,
      completion,
    );
  }

  static Pointer fetchEventsMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("fetchEventsMatchingPredicate:completion:"),
      arg,
      completion,
    );
  }

  static Pointer
      fetchRemindersMatchingPredicate$completionCallback$cancelCallback$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer completionCallback,
    @required Pointer cancelCallback,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "fetchRemindersMatchingPredicate:completionCallback:cancelCallback:"),
      arg,
      completionCallback,
      cancelCallback,
    );
  }

  static Pointer fetchRemindersMatchingPredicate$completion$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRemindersMatchingPredicate:completion:"),
      arg,
      completion,
    );
  }

  static Pointer filteredNotificationsForEntityType(
    Pointer<EKEventStore> _self,
    int arg, {
    @required Pointer notifications,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("filteredNotificationsForEntityType:notifications:"),
      arg,
      notifications,
    );
  }

  static int hasImmediatelyEligibleTravelEvents(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasImmediatelyEligibleTravelEvents"),
    );
  }

  static Pointer inboxRepliedSectionItems(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inboxRepliedSectionItems"),
    );
  }

  static Pointer init(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initAsyncWithCompletionBlock(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initAsyncWithCompletionBlock:"),
      arg,
    );
  }

  static Pointer initWithAccessToEntityTypes(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithAccessToEntityTypes:"),
      arg,
    );
  }

  static Pointer initWithEventStore(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer andNewBackingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventStore:andNewBackingStore:"),
      arg,
      andNewBackingStore,
    );
  }

  static Pointer initWithSourceFilters$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSourceFilters:"),
      arg,
    );
  }

  static Pointer initWithSourceFilters$options$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithSourceFilters:options:"),
      arg,
      options,
    );
  }

  static Pointer initWithSources(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSources:"),
      arg,
    );
  }

  static Pointer initWithStoreType$options$sourceFilters$asyncWithCompletion$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int options,
    @required Pointer sourceFilters,
    @required Pointer asyncWithCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithStoreType:options:sourceFilters:asyncWithCompletion:"),
      arg,
      options,
      sourceFilters,
      asyncWithCompletion,
    );
  }

  static Pointer initWithStoreType$sourceFilters$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required Pointer sourceFilters,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_p(
      _self,
      _objc.getSelector("initWithStoreType:sourceFilters:"),
      arg,
      sourceFilters,
    );
  }

  static Pointer
      initWithStoreType$options$sourceFilters$asyncWithCompletion$orWithExistingStore$andBackingStore$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int options,
    @required Pointer sourceFilters,
    @required Pointer asyncWithCompletion,
    @required Pointer orWithExistingStore,
    @required Pointer andBackingStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithStoreType:options:sourceFilters:asyncWithCompletion:orWithExistingStore:andBackingStore:"),
      arg,
      options,
      sourceFilters,
      asyncWithCompletion,
      orWithExistingStore,
      andBackingStore,
    );
  }

  static Pointer initWithStoreType$(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithStoreType:"),
      arg,
    );
  }

  static Pointer initWithStoreType$options$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithStoreType:options:"),
      arg,
      options,
    );
  }

  static void insertSuggestedEventCalendar(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("insertSuggestedEventCalendar"),
    );
  }

  static Pointer lastCheckpointDate(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastCheckpointDate"),
    );
  }

  static int lastConfirmedSplashScreenVersion(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("lastConfirmedSplashScreenVersion"),
    );
  }

  static Pointer liveEditingStore(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("liveEditingStore"),
    );
  }

  static Pointer loadDraftOfEventWithOccurrenceID(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadDraftOfEventWithOccurrenceID:"),
      arg,
    );
  }

  static Pointer localSource(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localSource"),
    );
  }

  static Pointer naturalLanguageSuggestedEventCalendar(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("naturalLanguageSuggestedEventCalendar"),
    );
  }

  static Pointer nextEventWithCalendarIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("nextEventWithCalendarIdentifiers:exclusionOptions:"),
      arg,
      exclusionOptions,
    );
  }

  static Pointer notificationsForEntityType$includingPast$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int includingPast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("notificationsForEntityType:includingPast:"),
      arg,
      includingPast,
    );
  }

  static Pointer notificationsForEntityType$(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("notificationsForEntityType:"),
      arg,
    );
  }

  static void
      notifyChangedSources$changedCalendars$changedEvents$changedSuggestedEvents$changedReminders$changedNotifications$sourceIdentifiers$calendarIdentifiers$eventIdentifiers$reminderIdentifiers$otherChanges$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int changedCalendars,
    @required int changedEvents,
    @required int changedSuggestedEvents,
    @required int changedReminders,
    @required int changedNotifications,
    @required Pointer sourceIdentifiers,
    @required Pointer calendarIdentifiers,
    @required Pointer eventIdentifiers,
    @required Pointer reminderIdentifiers,
    @required Pointer otherChanges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "notifyChangedSources:changedCalendars:changedEvents:changedSuggestedEvents:changedReminders:changedNotifications:sourceIdentifiers:calendarIdentifiers:eventIdentifiers:reminderIdentifiers:otherChanges:"),
      arg,
      changedCalendars,
      changedEvents,
      changedSuggestedEvents,
      changedReminders,
      changedNotifications,
      sourceIdentifiers,
      calendarIdentifiers,
      eventIdentifiers,
      reminderIdentifiers,
      otherChanges,
    );
  }

  static void
      notifyChangedSources$changedCalendars$changedEvents$changedSuggestedEvents$changedReminders$changedNotifications$otherChanges$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required int changedCalendars,
    @required int changedEvents,
    @required int changedSuggestedEvents,
    @required int changedReminders,
    @required int changedNotifications,
    @required Pointer otherChanges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "notifyChangedSources:changedCalendars:changedEvents:changedSuggestedEvents:changedReminders:changedNotifications:otherChanges:"),
      arg,
      changedCalendars,
      changedEvents,
      changedSuggestedEvents,
      changedReminders,
      changedNotifications,
      otherChanges,
    );
  }

  static int numberOfCompletedRemindersInCalendars(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfCompletedRemindersInCalendars:"),
      arg,
    );
  }

  static Pointer occurrencesForMultipleSeries(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("occurrencesForMultipleSeries:inRange:"),
      arg,
      inRange,
    );
  }

  static int onlyNotifyForAccountedChanges(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("onlyNotifyForAccountedChanges"),
    );
  }

  static Pointer openEditingContextWithObject$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("openEditingContextWithObject:"),
      arg,
    );
  }

  static Pointer openEditingContextWithObject$observer$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer observer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("openEditingContextWithObject:observer:"),
      arg,
      observer,
    );
  }

  static Pointer openEditingContextWithObjects$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("openEditingContextWithObjects:"),
      arg,
    );
  }

  static Pointer openEditingContextWithObjects$observer$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer observer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("openEditingContextWithObjects:observer:"),
      arg,
      observer,
    );
  }

  static int options(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int partialSaveCalendar(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("partialSaveCalendar:error:"),
      arg,
      error,
    );
  }

  static int partialSaveItem(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int span,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("partialSaveItem:span:error:"),
      arg,
      span,
      error,
    );
  }

  static Pointer predicateForAllIncompleteReminders(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForAllIncompleteReminders"),
    );
  }

  static Pointer predicateForAllRemindersDueBeforeOrOnDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForAllRemindersDueBeforeOrOnDueDate:calendars:"),
      arg,
      calendars,
    );
  }

  static Pointer predicateForAllRemindersWithDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForAllRemindersWithDueDate:calendars:"),
      arg,
      calendars,
    );
  }

  static Pointer predicateForAssistantEventSearchWithTimeZone(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer startDate,
    @required Pointer endDate,
    @required Pointer title,
    @required Pointer location,
    @required Pointer notes,
    @required Pointer participants,
    @required Pointer calendars,
    @required int limit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForAssistantEventSearchWithTimeZone:startDate:endDate:title:location:notes:participants:calendars:limit:"),
      arg,
      startDate,
      endDate,
      title,
      location,
      notes,
      participants,
      calendars,
      limit,
    );
  }

  static Pointer predicateForCompletedRemindersMaxResults$calendars$(
    Pointer<EKEventStore> _self,
    int arg, {
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("predicateForCompletedRemindersMaxResults:calendars:"),
      arg,
      calendars,
    );
  }

  static Pointer predicateForCompletedRemindersMaxResults$(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("predicateForCompletedRemindersMaxResults:"),
      arg,
    );
  }

  static Pointer predicateForCompletedRemindersWithCalendars(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCompletedRemindersWithCalendars:"),
      arg,
    );
  }

  static Pointer predicateForCompletedRemindersWithCompletionDateStarting(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer ending,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:"),
      arg,
      ending,
      calendars,
    );
  }

  static Pointer predicateForCompletedRemindersWithDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForCompletedRemindersWithDueDate:calendars:sortOrder:"),
      arg,
      calendars,
      sortOrder,
    );
  }

  static Pointer predicateForCompletedRemindersWithDueDateOrCompletionDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForCompletedRemindersWithDueDateOrCompletionDate:calendars:sortOrder:"),
      arg,
      calendars,
      sortOrder,
    );
  }

  static Pointer predicateForEventCreatedFromSuggestionWithOpaqueKey(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForEventCreatedFromSuggestionWithOpaqueKey:"),
      arg,
    );
  }

  static Pointer predicateForEventsCreatedFromSuggestionsWithStartDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsCreatedFromSuggestionsWithStartDate:endDate:calendars:"),
      arg,
      endDate,
      calendars,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$calendarIdentifiers$exclusionOptions$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendarIdentifiers,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:calendarIdentifiers:exclusionOptions:"),
      arg,
      endDate,
      calendarIdentifiers,
      exclusionOptions,
    );
  }

  static Pointer predicateForEventsWithStartDate$endDate$timeZone$calendars$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:timeZone:calendars:"),
      arg,
      endDate,
      timeZone,
      calendars,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$timeZone$calendars$calendarIdentifiers$prefetchHint$exclusionOptions$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer calendars,
    @required Pointer calendarIdentifiers,
    @required int prefetchHint,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:timeZone:calendars:calendarIdentifiers:prefetchHint:exclusionOptions:"),
      arg,
      endDate,
      timeZone,
      calendars,
      calendarIdentifiers,
      prefetchHint,
      exclusionOptions,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$timeZone$calendars$prefetchHint$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer timeZone,
    @required Pointer calendars,
    @required int prefetchHint,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:timeZone:calendars:prefetchHint:"),
      arg,
      endDate,
      timeZone,
      calendars,
      prefetchHint,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$calendarIdentifiers$prefetchHint$exclusionOptions$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendarIdentifiers,
    @required int prefetchHint,
    @required int exclusionOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:calendarIdentifiers:prefetchHint:exclusionOptions:"),
      arg,
      endDate,
      calendarIdentifiers,
      prefetchHint,
      exclusionOptions,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$calendars$matchingContacts$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendars,
    @required Pointer matchingContacts,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:calendars:matchingContacts:"),
      arg,
      endDate,
      calendars,
      matchingContacts,
    );
  }

  static Pointer
      predicateForEventsWithStartDate$endDate$calendarIdentifiers$prefetchHint$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendarIdentifiers,
    @required int prefetchHint,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithStartDate:endDate:calendarIdentifiers:prefetchHint:"),
      arg,
      endDate,
      calendarIdentifiers,
      prefetchHint,
    );
  }

  static Pointer predicateForEventsWithStartDate$endDate$calendars$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForEventsWithStartDate:endDate:calendars:"),
      arg,
      endDate,
      calendars,
    );
  }

  static Pointer predicateForEventsWithTitle(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer location,
    @required Pointer notes,
    @required Pointer participantNames,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForEventsWithTitle:location:notes:participantNames:calendars:"),
      arg,
      location,
      notes,
      participantNames,
      calendars,
    );
  }

  static Pointer predicateForIncompleteRemindersDueBeforeOrOnDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForIncompleteRemindersDueBeforeOrOnDueDate:calendars:sortOrder:"),
      arg,
      calendars,
      sortOrder,
    );
  }

  static Pointer predicateForIncompleteRemindersDueBeforeOrOnExactDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForIncompleteRemindersDueBeforeOrOnExactDueDate:calendars:sortOrder:"),
      arg,
      calendars,
      sortOrder,
    );
  }

  static Pointer predicateForIncompleteRemindersWithDueDate(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForIncompleteRemindersWithDueDate:calendars:sortOrder:"),
      arg,
      calendars,
      sortOrder,
    );
  }

  static Pointer predicateForIncompleteRemindersWithDueDateStarting(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer ending,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:"),
      arg,
      ending,
      calendars,
    );
  }

  static Pointer
      predicateForNaturalLanguageSuggestedEventsWithSearchString$startDate$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer startDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForNaturalLanguageSuggestedEventsWithSearchString:startDate:"),
      arg,
      startDate,
    );
  }

  static Pointer predicateForNaturalLanguageSuggestedEventsWithSearchString$(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForNaturalLanguageSuggestedEventsWithSearchString:"),
      arg,
    );
  }

  static Pointer predicateForRemindersInCalendars(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForRemindersInCalendars:"),
      arg,
    );
  }

  static Pointer predicateForRemindersWithContactIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForRemindersWithContactIdentifier:"),
      arg,
    );
  }

  static Pointer predicateForRemindersWithSearchTerm(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForRemindersWithSearchTerm:"),
      arg,
    );
  }

  static Pointer
      predicateForRemindersWithTitle$listTitle$limitToCompletedOrIncomplete$completed$dueAfter$dueBefore$searchTerm$sortOrder$maxResults$hasContactIdentifier$contactIdentifier$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer listTitle,
    @required int limitToCompletedOrIncomplete,
    @required int completed,
    @required Pointer dueAfter,
    @required Pointer dueBefore,
    @required Pointer searchTerm,
    @required int sortOrder,
    @required int maxResults,
    @required int hasContactIdentifier,
    @required Pointer contactIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "predicateForRemindersWithTitle:listTitle:limitToCompletedOrIncomplete:completed:dueAfter:dueBefore:searchTerm:sortOrder:maxResults:hasContactIdentifier:contactIdentifier:"),
      arg,
      listTitle,
      limitToCompletedOrIncomplete,
      completed,
      dueAfter,
      dueBefore,
      searchTerm,
      sortOrder,
      maxResults,
      hasContactIdentifier,
      contactIdentifier,
    );
  }

  static Pointer
      predicateForRemindersWithTitle$listTitle$limitToCompletedOrIncomplete$completed$dueAfter$dueBefore$searchTerm$sortOrder$maxResults$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer listTitle,
    @required int limitToCompletedOrIncomplete,
    @required int completed,
    @required Pointer dueAfter,
    @required Pointer dueBefore,
    @required Pointer searchTerm,
    @required int sortOrder,
    @required int maxResults,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "predicateForRemindersWithTitle:listTitle:limitToCompletedOrIncomplete:completed:dueAfter:dueBefore:searchTerm:sortOrder:maxResults:"),
      arg,
      listTitle,
      limitToCompletedOrIncomplete,
      completed,
      dueAfter,
      dueBefore,
      searchTerm,
      sortOrder,
      maxResults,
    );
  }

  static Pointer predicateForRemindersWithTitle$calendars$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForRemindersWithTitle:calendars:"),
      arg,
      calendars,
    );
  }

  static Pointer
      predicateForRemindersWithTitle$listTitle$limitToCompletedOrIncomplete$completed$dueAfter$dueBefore$searchTerm$sortOrder$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer listTitle,
    @required int limitToCompletedOrIncomplete,
    @required int completed,
    @required Pointer dueAfter,
    @required Pointer dueBefore,
    @required Pointer searchTerm,
    @required int sortOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector(
          "predicateForRemindersWithTitle:listTitle:limitToCompletedOrIncomplete:completed:dueAfter:dueBefore:searchTerm:sortOrder:"),
      arg,
      listTitle,
      limitToCompletedOrIncomplete,
      completed,
      dueAfter,
      dueBefore,
      searchTerm,
      sortOrder,
    );
  }

  static Pointer readWriteCalendarsForEntityType(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("readWriteCalendarsForEntityType:"),
      arg,
    );
  }

  static void refreshObjectIDs(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("refreshObjectIDs:inContext:"),
      arg,
      inContext,
    );
  }

  static void refreshSourcesIfNecessary(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshSourcesIfNecessary"),
    );
  }

  static Pointer reminderWithExternalURI(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reminderWithExternalURI:"),
      arg,
    );
  }

  static Pointer reminderWithIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reminderWithIdentifier:"),
      arg,
    );
  }

  static Pointer remindersMatchingPredicate(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersMatchingPredicate:"),
      arg,
    );
  }

  static Pointer remindersWithCalendarIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer remindersWithExternalIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithExternalIdentifier:"),
      arg,
    );
  }

  static Pointer remindersWithIdentifiers(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithIdentifiers:"),
      arg,
    );
  }

  static int removeCalendar(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("removeCalendar:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int removeEvent(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int span,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("removeEvent:span:commit:error:"),
      arg,
      span,
      commit,
      error,
    );
  }

  static int removeReminder(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("removeReminder:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int removeSource(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("removeSource:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static void removeSuggestedEventCalendar(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeSuggestedEventCalendar"),
    );
  }

  static void requestAccessToEntityType(
    Pointer<EKEventStore> _self,
    int arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("requestAccessToEntityType:completion:"),
      arg,
      completion,
    );
  }

  static void reset(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void resetCache(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetCache"),
    );
  }

  static int
      respondToInvitation$withStatus$notifyOrganizer$placingInCalendar$commit$error$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required int notifyOrganizer,
    @required Pointer placingInCalendar,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "respondToInvitation:withStatus:notifyOrganizer:placingInCalendar:commit:error:"),
      arg,
      withStatus,
      notifyOrganizer,
      placingInCalendar,
      commit,
      error,
    );
  }

  static int respondToInvitation$withStatus$commit$error$(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("respondToInvitation:withStatus:commit:error:"),
      arg,
      withStatus,
      commit,
      error,
    );
  }

  static int respondToInvitations(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required int notifyOrganizer,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "respondToInvitations:withStatus:notifyOrganizer:commit:error:"),
      arg,
      withStatus,
      notifyOrganizer,
      commit,
      error,
    );
  }

  static int respondToSharedCalendarInvitation(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withStatus,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "respondToSharedCalendarInvitation:withStatus:commit:error:"),
      arg,
      withStatus,
      commit,
      error,
    );
  }

  static int saveCalendar(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveCalendar:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int saveDraftOfEvent(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("saveDraftOfEvent:"),
      arg,
    );
  }

  static int saveEvent(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int span,
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveEvent:span:commit:error:"),
      arg,
      span,
      commit,
      error,
    );
  }

  static int saveNotification(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveNotification:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int saveNotifications(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveNotifications:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int saveReminder(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveReminder:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static int saveSource(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int commit,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("saveSource:commit:error:"),
      arg,
      commit,
      error,
    );
  }

  static void setBackingStore(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingStore:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewEvents(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewEvents:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewReminders(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewReminders:"),
      arg,
    );
  }

  static void setLastCheckpointDate(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastCheckpointDate:"),
      arg,
    );
  }

  static void setLiveEditingStore(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLiveEditingStore:"),
      arg,
    );
  }

  static void setOnlyNotifyForAccountedChanges(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOnlyNotifyForAccountedChanges:"),
      arg,
    );
  }

  static void setRangeOfInterest(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRangeOfInterest:"),
      arg,
    );
  }

  static void setShouldSanitizeVehicleAlarms(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldSanitizeVehicleAlarms:"),
      arg,
    );
  }

  static int shouldSanitizeVehicleAlarms(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSanitizeVehicleAlarms"),
    );
  }

  static int shouldWhitelistOrganizerEmailFromJunkChecks(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerEmailFromJunkChecks:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerPhoneNumberFromJunkChecks(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerPhoneNumberFromJunkChecks:"),
      arg,
    );
  }

  static void showDateInCalendar(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int inView,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("showDateInCalendar:inView:"),
      arg,
      inView,
    );
  }

  static void showEventInCalendar(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withOpenOptions,
    @required int inView,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_Int32_returns_void(
      _self,
      _objc.getSelector("showEventInCalendar:withOpenOptions:inView:"),
      arg,
      withOpenOptions,
      inView,
    );
  }

  static void showReminderInReminders(
    Pointer<EKEventStore> _self,
    Pointer arg, {
    @required int withOpenOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("showReminderInReminders:withOpenOptions:"),
      arg,
      withOpenOptions,
    );
  }

  static Pointer sourceErrors(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceErrors"),
    );
  }

  static Pointer sourceFilters(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceFilters"),
    );
  }

  static Pointer sourceWithIdentifier(
    Pointer<EKEventStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("sourceWithIdentifier:"),
      arg,
    );
  }

  static Pointer sources(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sources"),
    );
  }

  static Pointer sourcesEnabledForEntityType(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("sourcesEnabledForEntityType:"),
      arg,
    );
  }

  static Pointer stringForOpenOption(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("stringForOpenOption:"),
      arg,
    );
  }

  static Pointer stringForViewOption(
    Pointer<EKEventStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("stringForViewOption:"),
      arg,
    );
  }

  static Pointer suggestedEventCalendar(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEventCalendar"),
    );
  }

  static Pointer upcomingSuggestedEvents(
    Pointer<EKEventStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("upcomingSuggestedEvents"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFeatureSet extends Struct<EKFeatureSet> {
  factory EKFeatureSet._() {
    throw UnimplementedError();
  }
  static Pointer<EKFeatureSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFeatureSet").cast<EKFeatureSet>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenAlarm extends Struct<EKFrozenAlarm> {
  factory EKFrozenAlarm._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenAlarm> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenAlarm").cast<EKFrozenAlarm>();
  }

  static Pointer absoluteDate(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("absoluteDate"),
    );
  }

  static Pointer acknowledgedDate(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgedDate"),
    );
  }

  static Pointer actionString(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionString"),
    );
  }

  static Pointer bookmark(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bookmark"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenAlarm> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isDefault(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefault"),
    );
  }

  static int isSnoozed(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSnoozed"),
    );
  }

  static int isTimeToLeaveAlarm(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTimeToLeaveAlarm"),
    );
  }

  static int notRelativeToTravelTime(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("notRelativeToTravelTime"),
    );
  }

  static Pointer proximityString(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proximityString"),
    );
  }

  static double relativeOffset(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("relativeOffset"),
    );
  }

  static Pointer sharedUID(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedUID"),
    );
  }

  static Pointer soundName(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("soundName"),
    );
  }

  static Pointer structuredLocation(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocation"),
    );
  }

  static Pointer url(
    Pointer<EKFrozenAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenAttachment extends Struct<EKFrozenAttachment> {
  factory EKFrozenAttachment._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenAttachment> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenAttachment").cast<EKFrozenAttachment>();
  }

  static Pointer attachmentIDOnServer(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachmentIDOnServer"),
    );
  }

  static Pointer contentType(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentType"),
    );
  }

  static Pointer filenameSuggestedByServer(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filenameSuggestedByServer"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenAttachment> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer isAutoArchivedNumber(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isAutoArchivedNumber"),
    );
  }

  static Pointer urlOnDisk(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlOnDisk"),
    );
  }

  static Pointer urlOnServer(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlOnServer"),
    );
  }

  static Pointer uuid(
    Pointer<EKFrozenAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenAttendee extends Struct<EKFrozenAttendee> {
  factory EKFrozenAttendee._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenAttendee> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenAttendee").cast<EKFrozenAttendee>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendar extends Struct<EKFrozenCalendar> {
  factory EKFrozenCalendar._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendar> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenCalendar").cast<EKFrozenCalendar>();
  }

  static Pointer alarms(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarms"),
    );
  }

  static int allowEvents(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowEvents"),
    );
  }

  static int allowReminders(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowReminders"),
    );
  }

  static int allowedEntityTypes(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("allowedEntityTypes"),
    );
  }

  static int allowsContentModifications(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsContentModifications"),
    );
  }

  static int allowsScheduling(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsScheduling"),
    );
  }

  static int cachedHasSharees(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasSharees"),
    );
  }

  static Pointer cachedPreFrozenRelationshipObjects(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedPreFrozenRelationshipObjects"),
    );
  }

  static Pointer calendarIdentifier(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifier"),
    );
  }

  static Pointer color(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("color"),
    );
  }

  static Pointer colorString(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("colorString"),
    );
  }

  static Pointer containerSource(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSource"),
    );
  }

  static Pointer defaultAlarmsForAllDayEvents(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForAllDayEvents"),
    );
  }

  static Pointer defaultAlarmsForTimedEvents(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForTimedEvents"),
    );
  }

  static Pointer defaultOrganizerAddressForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerAddressForNewItems"),
    );
  }

  static Pointer defaultOrganizerEmailForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEmailForNewItems"),
    );
  }

  static Pointer defaultOrganizerEncodedLikenessDataForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEncodedLikenessDataForNewItems"),
    );
  }

  static int defaultOrganizerIsMeForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("defaultOrganizerIsMeForNewItems"),
    );
  }

  static Pointer defaultOrganizerNameForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerNameForNewItems"),
    );
  }

  static Pointer defaultOrganizerPhoneNumberForNewItems(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerPhoneNumberForNewItems"),
    );
  }

  static int displayOrder(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static int eligibleForDefaultSchedulingCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("eligibleForDefaultSchedulingCalendar"),
    );
  }

  static int ignoreAlarms(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ignoreAlarms"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenCalendar> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isAffectingAvailability(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAffectingAvailability"),
    );
  }

  static int isBirthday(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBirthday"),
    );
  }

  static int isColorEditable(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isColorEditable"),
    );
  }

  static int isDefaultSchedulingCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefaultSchedulingCalendar"),
    );
  }

  static int isDistinguishedExchangeCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDistinguishedExchangeCalendar"),
    );
  }

  static int isFacebookBirthdayCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFacebookBirthdayCalendar"),
    );
  }

  static int isFamilyCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFamilyCalendar"),
    );
  }

  static int isMarkedImmutableSharees(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedImmutableSharees"),
    );
  }

  static int isMarkedUndeletable(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedUndeletable"),
    );
  }

  static int isNaturalLanguageSuggestedEventCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNaturalLanguageSuggestedEventCalendar"),
    );
  }

  static int isRenameable(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRenameable"),
    );
  }

  static int isShareable(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isShareable"),
    );
  }

  static int isSubscribed(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribed"),
    );
  }

  static int isSubscribedHolidayCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribedHolidayCalendar"),
    );
  }

  static int isSuggestedEventCalendar(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestedEventCalendar"),
    );
  }

  static Pointer notes(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer path(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static Pointer preFrozenRelationshipObjects(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenRelationshipObjects"),
    );
  }

  static Pointer prePublishURL(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prePublishURL"),
    );
  }

  static Pointer publishURL(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publishURL"),
    );
  }

  static Pointer serverPath(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverPath"),
    );
  }

  static Pointer sharedOwnerAddress(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddress"),
    );
  }

  static Pointer sharedOwnerAddresses(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddresses"),
    );
  }

  static Pointer sharedOwnerName(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerName"),
    );
  }

  static Pointer sharees(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharees"),
    );
  }

  static int sharingStatus(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sharingStatus"),
    );
  }

  static Pointer sharingStatusString(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharingStatusString"),
    );
  }

  static Pointer subscriptionURL(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionURL"),
    );
  }

  static int supportedEventAvailabilities(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("supportedEventAvailabilities"),
    );
  }

  static int suppressEventSchedulingNotifications(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suppressEventSchedulingNotifications"),
    );
  }

  static Pointer symbolicColorName(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicColorName"),
    );
  }

  static Pointer title(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int type(
    Pointer<EKFrozenCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarEventInvitationNotification
    extends Struct<EKFrozenCalendarEventInvitationNotification> {
  factory EKFrozenCalendarEventInvitationNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarEventInvitationNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarEventInvitationNotification")
        .cast<EKFrozenCalendarEventInvitationNotification>();
  }

  static int isInvitation(
    Pointer<EKFrozenCalendarEventInvitationNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isInvitation"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarInviteReplyNotification
    extends Struct<EKFrozenCalendarInviteReplyNotification> {
  factory EKFrozenCalendarInviteReplyNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarInviteReplyNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarInviteReplyNotification")
        .cast<EKFrozenCalendarInviteReplyNotification>();
  }

  static int isSharedCalendarReply(
    Pointer<EKFrozenCalendarInviteReplyNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarReply"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarItem extends Struct<EKFrozenCalendarItem> {
  factory EKFrozenCalendarItem._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenCalendarItem").cast<EKFrozenCalendarItem>();
  }

  static Pointer URL(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer alarmSet(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarmSet"),
    );
  }

  static int allDay(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allDay"),
    );
  }

  static int allowsParticipantStatusModifications(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsParticipantStatusModifications"),
    );
  }

  static Pointer attachmentSet(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachmentSet"),
    );
  }

  static Pointer attendeeSet(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeSet"),
    );
  }

  static Pointer cachedAdjustedStartDate(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedAdjustedStartDate"),
    );
  }

  static Pointer cachedCalendar(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedCalendar"),
    );
  }

  static int cachedHasAlarm(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAlarm"),
    );
  }

  static int cachedHasAttachment(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAttachment"),
    );
  }

  static int cachedHasAttendee(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasAttendee"),
    );
  }

  static int cachedIsCalendarOwnerInvitedAttendee(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedIsCalendarOwnerInvitedAttendee"),
    );
  }

  static int cachedIsCurrentUserInvitedAttendee(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedIsCurrentUserInvitedAttendee"),
    );
  }

  static Pointer cachedPreFrozenRelationshipObjects(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedPreFrozenRelationshipObjects"),
    );
  }

  static Pointer calendarItemPermissionNumber(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItemPermissionNumber"),
    );
  }

  static Pointer contactIdentifiersString(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifiersString"),
    );
  }

  static Pointer container(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer creationDate(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationDate"),
    );
  }

  static int defaultAlarmWasDeleted(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("defaultAlarmWasDeleted"),
    );
  }

  static Pointer ekStructuredLocation(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredLocation"),
    );
  }

  static int hasAttendees(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAttendees"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenCalendarItem> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isCalendarOwnerInvitedAttendee(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCalendarOwnerInvitedAttendee"),
    );
  }

  static int isCurrentUserInvitedAttendee(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserInvitedAttendee"),
    );
  }

  static int isEvent(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEvent"),
    );
  }

  static int isOrganizedByCurrentUser(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedByCurrentUser"),
    );
  }

  static int isOrganizedBySharedCalendarOwner(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedBySharedCalendarOwner"),
    );
  }

  static int isOrganizedBySomeoneElse(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrganizedBySomeoneElse"),
    );
  }

  static int isPropertyUnavailable(
    Pointer<EKFrozenCalendarItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPropertyUnavailable:"),
      arg,
    );
  }

  static int isReminder(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReminder"),
    );
  }

  static int isScheduled(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isScheduled"),
    );
  }

  static Pointer itemID(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemID"),
    );
  }

  static Pointer lastModifiedDate(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastModifiedDate"),
    );
  }

  static Pointer localStructuredData(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localStructuredData"),
    );
  }

  static Pointer localUID(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localUID"),
    );
  }

  static Pointer location(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer notes(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static int organizedByMe(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("organizedByMe"),
    );
  }

  static Pointer organizer(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizer"),
    );
  }

  static Pointer organizerEmail(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerEmail"),
    );
  }

  static Pointer organizerEncodedLikenessData(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerEncodedLikenessData"),
    );
  }

  static Pointer organizerName(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerName"),
    );
  }

  static Pointer organizerPhoneNumber(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerPhoneNumber"),
    );
  }

  static Pointer organizerURL(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerURL"),
    );
  }

  static Pointer participantForMe(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantForMe"),
    );
  }

  static Pointer preFrozenRelationshipObjects(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenRelationshipObjects"),
    );
  }

  static Pointer priorityNumber(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("priorityNumber"),
    );
  }

  static Pointer recurrenceDateUnadjustedFromUTC(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceDateUnadjustedFromUTC"),
    );
  }

  static Pointer recurrenceRuleString(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceRuleString"),
    );
  }

  static Pointer recurrenceSetID(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceSetID"),
    );
  }

  static Pointer relatedExternalID(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relatedExternalID"),
    );
  }

  static Pointer scheduleAgentString(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scheduleAgentString"),
    );
  }

  static Pointer sharedUID(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedUID"),
    );
  }

  static Pointer startDate(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static Pointer startDateUnadjustedFromUTC(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDateUnadjustedFromUTC"),
    );
  }

  static Pointer structuredData(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredData"),
    );
  }

  static Pointer timeZoneObject(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZoneObject"),
    );
  }

  static Pointer title(
    Pointer<EKFrozenCalendarItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarNotification
    extends Struct<EKFrozenCalendarNotification> {
  factory EKFrozenCalendarNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarNotification")
        .cast<EKFrozenCalendarNotification>();
  }

  static int attachmentsChanged(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("attachmentsChanged"),
    );
  }

  static Pointer attendeeComment(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendeeComment"),
    );
  }

  static Pointer calendarName(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarName"),
    );
  }

  static Pointer componentType(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("componentType"),
    );
  }

  static Pointer containerSource(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSource"),
    );
  }

  static Pointer createdCount(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdCount"),
    );
  }

  static int dateChanged(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dateChanged"),
    );
  }

  static Pointer deletedCount(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedCount"),
    );
  }

  static int dismissed(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dismissed"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer filename(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static Pointer firstName(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstName"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenCalendarNotification> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isInvitation(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isInvitation"),
    );
  }

  static int isProposedNewTime(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProposedNewTime"),
    );
  }

  static int isResourceChange(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isResourceChange"),
    );
  }

  static int isSharedCalendarInvitation(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarInvitation"),
    );
  }

  static int isSharedCalendarReply(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarReply"),
    );
  }

  static int isSuggestion(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestion"),
    );
  }

  static int junkStatus(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("junkStatus"),
    );
  }

  static Pointer lastName(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastName"),
    );
  }

  static int locationChanged(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("locationChanged"),
    );
  }

  static Pointer name(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer notificationType(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationType"),
    );
  }

  static Pointer occurrence(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("occurrence"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer principalName(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("principalName"),
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTC(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTC"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTC(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTC"),
    );
  }

  static Pointer senders(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("senders"),
    );
  }

  static int timeChanged(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeChanged"),
    );
  }

  static Pointer title(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int titleChanged(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("titleChanged"),
    );
  }

  static Pointer updatedCount(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("updatedCount"),
    );
  }

  static Pointer uuid(
    Pointer<EKFrozenCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarProposeNewTimeNotification
    extends Struct<EKFrozenCalendarProposeNewTimeNotification> {
  factory EKFrozenCalendarProposeNewTimeNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarProposeNewTimeNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarProposeNewTimeNotification")
        .cast<EKFrozenCalendarProposeNewTimeNotification>();
  }

  static int isProposedNewTime(
    Pointer<EKFrozenCalendarProposeNewTimeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProposedNewTime"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarResourceChangeNotification
    extends Struct<EKFrozenCalendarResourceChangeNotification> {
  factory EKFrozenCalendarResourceChangeNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarResourceChangeNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarResourceChangeNotification")
        .cast<EKFrozenCalendarResourceChangeNotification>();
  }

  static int isResourceChange(
    Pointer<EKFrozenCalendarResourceChangeNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isResourceChange"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarSharedCalendarNotification
    extends Struct<EKFrozenCalendarSharedCalendarNotification> {
  factory EKFrozenCalendarSharedCalendarNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarSharedCalendarNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarSharedCalendarNotification")
        .cast<EKFrozenCalendarSharedCalendarNotification>();
  }

  static int isSharedCalendarInvitation(
    Pointer<EKFrozenCalendarSharedCalendarNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSharedCalendarInvitation"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarSource extends Struct<EKFrozenCalendarSource> {
  factory EKFrozenCalendarSource._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarSource> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarSource")
        .cast<EKFrozenCalendarSource>();
  }

  static int displayOrder(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static Pointer dropBoxPathString(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dropBoxPathString"),
    );
  }

  static Pointer externalSourceIdentifier(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalSourceIdentifier"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenCalendarSource> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isDelegate(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDelegate"),
    );
  }

  static int isEnabledForEvents(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForEvents"),
    );
  }

  static int isEnabledForReminders(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForReminders"),
    );
  }

  static int isWritable(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isWritable"),
    );
  }

  static Pointer ownerAddresses(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerAddresses"),
    );
  }

  static Pointer providerIdentifier(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("providerIdentifier"),
    );
  }

  static Pointer serverURL(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverURL"),
    );
  }

  static Pointer sourceIdentifier(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceIdentifier"),
    );
  }

  static int supportsAttendeeComments(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsAttendeeComments"),
    );
  }

  static int supportsDropBoxAttachments(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsDropBoxAttachments"),
    );
  }

  static int supportsEmailValidation(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEmailValidation"),
    );
  }

  static int supportsEventCalendarCreation(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEventCalendarCreation"),
    );
  }

  static int supportsFreebusy(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsFreebusy"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }

  static int supportsLikenessPropagation(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsLikenessPropagation"),
    );
  }

  static int supportsManagedAttachments(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsManagedAttachments"),
    );
  }

  static int supportsPhoneNumbers(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPhoneNumbers"),
    );
  }

  static int supportsPrivateEvents(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPrivateEvents"),
    );
  }

  static int supportsSharingScheduling(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsSharingScheduling"),
    );
  }

  static int supportsTaskCalendarCreation(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsTaskCalendarCreation"),
    );
  }

  static int supportsUnbind(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsUnbind"),
    );
  }

  static Pointer title(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer typeString(
    Pointer<EKFrozenCalendarSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeString"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenCalendarSuggestionNotification
    extends Struct<EKFrozenCalendarSuggestionNotification> {
  factory EKFrozenCalendarSuggestionNotification._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenCalendarSuggestionNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenCalendarSuggestionNotification")
        .cast<EKFrozenCalendarSuggestionNotification>();
  }

  static int isSuggestion(
    Pointer<EKFrozenCalendarSuggestionNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestion"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenEvent extends Struct<EKFrozenEvent> {
  factory EKFrozenEvent._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenEvent> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenEvent").cast<EKFrozenEvent>();
  }

  static int allowsAvailabilityModifications(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAvailabilityModifications"),
    );
  }

  static int availability(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("availability"),
    );
  }

  static int availabilityEnum(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("availabilityEnum"),
    );
  }

  static Pointer birthdayTitle(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("birthdayTitle"),
    );
  }

  static Pointer cachedAdjustedEndDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedAdjustedEndDate"),
    );
  }

  static Pointer cachedAdjustedProposedEndDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedAdjustedProposedEndDate"),
    );
  }

  static Pointer cachedAdjustedProposedStartDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedAdjustedProposedStartDate"),
    );
  }

  static int cachedAvailability(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("cachedAvailability"),
    );
  }

  static Pointer cachedDurationComponents(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedDurationComponents"),
    );
  }

  static int cachedStatus(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("cachedStatus"),
    );
  }

  static Pointer conferenceURL(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conferenceURL"),
    );
  }

  static int dontSendNotificationForChanges(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dontSendNotificationForChanges"),
    );
  }

  static Pointer durationComponents(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("durationComponents"),
    );
  }

  static Pointer ekStructuredEndLocation(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredEndLocation"),
    );
  }

  static Pointer ekStructuredStartLocation(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ekStructuredStartLocation"),
    );
  }

  static Pointer endDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer endDateUnadjustedFromUTC(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDateUnadjustedFromUTC"),
    );
  }

  static Pointer endTimeZoneObject(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endTimeZoneObject"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenEvent> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isDetached(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDetached"),
    );
  }

  static int isEvent(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEvent"),
    );
  }

  static int isPhantom(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPhantom"),
    );
  }

  static int isYearlessBirthday(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isYearlessBirthday"),
    );
  }

  static int isYearlessLeapMonthBirthday(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isYearlessLeapMonthBirthday"),
    );
  }

  static int junkStatus(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("junkStatus"),
    );
  }

  static Pointer lunarCalendarString(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lunarCalendarString"),
    );
  }

  static Pointer nameForBirthday(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameForBirthday"),
    );
  }

  static int needsGeocoding(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsGeocoding"),
    );
  }

  static int participantsStatus(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("participantsStatus"),
    );
  }

  static Pointer privacyLevelString(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privacyLevelString"),
    );
  }

  static Pointer proposedEndDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDate"),
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTCForMe(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTCForMe"),
    );
  }

  static Pointer proposedStartDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDate"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTCForMe(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTCForMe"),
    );
  }

  static Pointer responseComment(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseComment"),
    );
  }

  static void setSuggestionInfoAcknowledged(
    Pointer<EKFrozenEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuggestionInfoAcknowledged:"),
      arg,
    );
  }

  static Pointer sliceDate(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceDate"),
    );
  }

  static Pointer sliceParentID(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceParentID"),
    );
  }

  static int status(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("status"),
    );
  }

  static Pointer statusString(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusString"),
    );
  }

  static int suggestionInfoAcknowledged(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suggestionInfoAcknowledged"),
    );
  }

  static int suggestionInfoChangedFields(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("suggestionInfoChangedFields"),
    );
  }

  static Pointer suggestionInfoOpaqueKey(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoOpaqueKey"),
    );
  }

  static Pointer suggestionInfoTimestamp(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoTimestamp"),
    );
  }

  static Pointer suggestionInfoUniqueKey(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestionInfoUniqueKey"),
    );
  }

  static Pointer travelAdvisoryBehaviorString(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("travelAdvisoryBehaviorString"),
    );
  }

  static double travelDuration(
    Pointer<EKFrozenEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("travelDuration"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenObject extends Struct<EKFrozenObject> {
  factory EKFrozenObject._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenObject").cast<EKFrozenObject>();
  }

  static int cachedHash(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cachedHash"),
    );
  }

  static int canBeConvertedToFullObject(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToFullObject"),
    );
  }

  static Pointer changeSet(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeSet"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKFrozenObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer existingMeltedObject(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("existingMeltedObject"),
    );
  }

  static Pointer frozenObject(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frozenObject"),
    );
  }

  static int hash(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithObject$(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static Pointer
      initWithObject$createPartialObject$preFrozenRelationshipObjects$(
    Pointer<EKFrozenObject> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer initWithObject$createPartialObject$(
    Pointer<EKFrozenObject> _self,
    Pointer arg, {
    @required int createPartialObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithObject:createPartialObject:"),
      arg,
      createPartialObject,
    );
  }

  static int isCompletelyEqual(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompletelyEqual:"),
      arg,
    );
  }

  static int isEqual$(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqual$ignoringProperties$(
    Pointer<EKFrozenObject> _self,
    Pointer arg, {
    @required Pointer ignoringProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:ignoringProperties:"),
      arg,
      ignoringProperties,
    );
  }

  static int isFrozen(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFrozen"),
    );
  }

  static int isNew(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNew"),
    );
  }

  static int isPartialObject(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPartialObject"),
    );
  }

  static int isPropertyUnavailable(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPropertyUnavailable:"),
      arg,
    );
  }

  static Pointer managedObjectID(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("managedObjectID"),
    );
  }

  static Pointer meltedObjectInStore(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedObjectInStore:"),
      arg,
    );
  }

  static Pointer preFrozenRelationshipObjects(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenRelationshipObjects"),
    );
  }

  static Pointer semanticIdentifier(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("semanticIdentifier"),
    );
  }

  static void setCachedHash(
    Pointer<EKFrozenObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCachedHash:"),
      arg,
    );
  }

  static void setIsNew(
    Pointer<EKFrozenObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsNew:"),
      arg,
    );
  }

  static void setIsPartialObject(
    Pointer<EKFrozenObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPartialObject:"),
      arg,
    );
  }

  static void setManagedObjectID(
    Pointer<EKFrozenObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setManagedObjectID:"),
      arg,
    );
  }

  static Pointer uniqueIdentifier(
    Pointer<EKFrozenObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueIdentifier"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenOrganizer extends Struct<EKFrozenOrganizer> {
  factory EKFrozenOrganizer._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenOrganizer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenOrganizer").cast<EKFrozenOrganizer>();
  }

  static Pointer initWithName(
    Pointer<EKFrozenOrganizer> _self,
    Pointer arg, {
    @required Pointer url,
    @required Pointer emailAddress,
    @required Pointer phoneNumber,
    @required Pointer encodedLikenessData,
    @required int isCurrentUserForScheduling,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:url:emailAddress:phoneNumber:encodedLikenessData:isCurrentUserForScheduling:"),
      arg,
      url,
      emailAddress,
      phoneNumber,
      encodedLikenessData,
      isCurrentUserForScheduling,
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenOrganizer> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKFrozenOrganizer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenParticipant extends Struct<EKFrozenParticipant> {
  factory EKFrozenParticipant._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenParticipant> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenParticipant").cast<EKFrozenParticipant>();
  }

  static Pointer URL(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer comment(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("comment"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer encodedLikenessData(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encodedLikenessData"),
    );
  }

  static Pointer initWithName(
    Pointer<EKFrozenParticipant> _self,
    Pointer arg, {
    @required Pointer url,
    @required Pointer emailAddress,
    @required Pointer phoneNumber,
    @required Pointer role,
    @required Pointer status,
    @required int type,
    @required Pointer encodedLikenessData,
    @required int isCurrentUser,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:url:emailAddress:phoneNumber:role:status:type:encodedLikenessData:isCurrentUser:"),
      arg,
      url,
      emailAddress,
      phoneNumber,
      role,
      status,
      type,
      encodedLikenessData,
      isCurrentUser,
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenParticipant> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer inviterNameString(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inviterNameString"),
    );
  }

  static int isCurrentUser(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUser"),
    );
  }

  static int isCurrentUserForScheduling(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForScheduling"),
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }

  static Pointer name(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer proposalStatusString(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposalStatusString"),
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTC(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTC"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTC(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTC"),
    );
  }

  static int replyRequested(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("replyRequested"),
    );
  }

  static Pointer role(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("role"),
    );
  }

  static int scheduleForceSend(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("scheduleForceSend"),
    );
  }

  static Pointer scheduleStatusString(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scheduleStatusString"),
    );
  }

  static Pointer status(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }

  static Pointer statusModifiedDate(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusModifiedDate"),
    );
  }

  static int type(
    Pointer<EKFrozenParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenRecurrenceRule extends Struct<EKFrozenRecurrenceRule> {
  factory EKFrozenRecurrenceRule._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenRecurrenceRule> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenRecurrenceRule")
        .cast<EKFrozenRecurrenceRule>();
  }

  static int allDay(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allDay"),
    );
  }

  static Pointer countNumber(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("countNumber"),
    );
  }

  static Pointer daysOfTheMonth(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheMonth"),
    );
  }

  static Pointer daysOfTheWeek(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheWeek"),
    );
  }

  static Pointer daysOfTheYear(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheYear"),
    );
  }

  static Pointer endDate(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer firstDayOfTheWeekNumber(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstDayOfTheWeekNumber"),
    );
  }

  static int floating(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("floating"),
    );
  }

  static Pointer frequencyNumber(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frequencyNumber"),
    );
  }

  static Pointer initWithRuleString(
    Pointer<EKFrozenRecurrenceRule> _self,
    Pointer arg, {
    @required int allDay,
    @required int floating,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector("initWithRuleString:allDay:floating:"),
      arg,
      allDay,
      floating,
    );
  }

  static Pointer intervalNumber(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("intervalNumber"),
    );
  }

  static Pointer meltedObjectInStore(
    Pointer<EKFrozenRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedObjectInStore:"),
      arg,
    );
  }

  static Pointer monthsOfTheYear(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("monthsOfTheYear"),
    );
  }

  static int ruleIsForAllDayItem(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ruleIsForAllDayItem"),
    );
  }

  static int ruleIsForFloatingItem(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ruleIsForFloatingItem"),
    );
  }

  static void setAllDay(
    Pointer<EKFrozenRecurrenceRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllDay:"),
      arg,
    );
  }

  static void setFloating(
    Pointer<EKFrozenRecurrenceRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFloating:"),
      arg,
    );
  }

  static Pointer setPositions(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setPositions"),
    );
  }

  static Pointer weeksOfTheYear(
    Pointer<EKFrozenRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weeksOfTheYear"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenReminder extends Struct<EKFrozenReminder> {
  factory EKFrozenReminder._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenReminder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenReminder").cast<EKFrozenReminder>();
  }

  static Pointer action(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("action"),
    );
  }

  static Pointer appLink(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("appLink"),
    );
  }

  static Pointer cachedAdjustedDueDate(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedAdjustedDueDate"),
    );
  }

  static int cachedHasLocationAlarm(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasLocationAlarm"),
    );
  }

  static int canEditRecurrence(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canEditRecurrence"),
    );
  }

  static Pointer completionDate(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completionDate"),
    );
  }

  static Pointer dueDate(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueDate"),
    );
  }

  static Pointer dueDateUnadjustedFromUTC(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueDateUnadjustedFromUTC"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenReminder> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isReminder(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReminder"),
    );
  }

  static Pointer orderNumber(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("orderNumber"),
    );
  }

  static int statusCompleteNotByDate(
    Pointer<EKFrozenReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("statusCompleteNotByDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenSharee extends Struct<EKFrozenSharee> {
  factory EKFrozenSharee._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenSharee> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKFrozenSharee").cast<EKFrozenSharee>();
  }

  static Pointer URL(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer accessLevel(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accessLevel"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenSharee> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static int isCurrentUserForScheduling(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForScheduling"),
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }

  static Pointer name(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer status(
    Pointer<EKFrozenSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenStructuredLocation extends Struct<EKFrozenStructuredLocation> {
  factory EKFrozenStructuredLocation._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenStructuredLocation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenStructuredLocation")
        .cast<EKFrozenStructuredLocation>();
  }

  static Pointer abURLString(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abURLString"),
    );
  }

  static Pointer address(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("address"),
    );
  }

  static Pointer geoURLString(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("geoURLString"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenStructuredLocation> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer mapKitHandle(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mapKitHandle"),
    );
  }

  static Pointer radiusNumber(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("radiusNumber"),
    );
  }

  static Pointer routeType(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routeType"),
    );
  }

  static Pointer title(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer uuid(
    Pointer<EKFrozenStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKFrozenSuggestedEventInfo extends Struct<EKFrozenSuggestedEventInfo> {
  factory EKFrozenSuggestedEventInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKFrozenSuggestedEventInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKFrozenSuggestedEventInfo")
        .cast<EKFrozenSuggestedEventInfo>();
  }

  static int changedFields(
    Pointer<EKFrozenSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changedFields"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKFrozenSuggestedEventInfo> _self,
    Pointer arg, {
    @required int createPartialObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer opaqueKey(
    Pointer<EKFrozenSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("opaqueKey"),
    );
  }

  static void setChangedFields(
    Pointer<EKFrozenSuggestedEventInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setChangedFields:"),
      arg,
    );
  }

  static void setTimestampAsDate(
    Pointer<EKFrozenSuggestedEventInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimestampAsDate:"),
      arg,
    );
  }

  static Pointer timestampAsDate(
    Pointer<EKFrozenSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timestampAsDate"),
    );
  }

  static Pointer uniqueKey(
    Pointer<EKFrozenSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueKey"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKGeneralLookupPredicate extends Struct<EKGeneralLookupPredicate> {
  factory EKGeneralLookupPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKGeneralLookupPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKGeneralLookupPredicate")
        .cast<EKGeneralLookupPredicate>();
  }

  static Pointer predicateForCoreData(
    Pointer<EKGeneralLookupPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCoreData"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKInMemoryBackingStore extends Struct<EKInMemoryBackingStore> {
  factory EKInMemoryBackingStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKInMemoryBackingStore> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKInMemoryBackingStore")
        .cast<EKInMemoryBackingStore>();
  }

  static Pointer acquireDefaultCalendarForEntityType(
    Pointer<EKInMemoryBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("acquireDefaultCalendarForEntityType:"),
      arg,
    );
  }

  static Pointer allEvents(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allEvents"),
    );
  }

  static Pointer allReminders(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allReminders"),
    );
  }

  static Pointer createNonPartialFrozenObjectPartialObject(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg, {
    @required Pointer withFrozenClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createNonPartialFrozenObjectPartialObject:withFrozenClass:"),
      arg,
      withFrozenClass,
    );
  }

  static Pointer defaultCalendarForEntityType(
    Pointer<EKInMemoryBackingStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForEntityType:"),
      arg,
    );
  }

  static Pointer defaultCalendarForNewEvents(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewEvents"),
    );
  }

  static Pointer defaultCalendarForNewReminders(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultCalendarForNewReminders"),
    );
  }

  static Pointer errorForCalendar(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("errorForCalendar:"),
      arg,
    );
  }

  static int eventsExistOnCalendar(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsExistOnCalendar:"),
      arg,
    );
  }

  static int eventsMarkedScheduleAgentClientExistOnCalendar(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("eventsMarkedScheduleAgentClientExistOnCalendar:"),
      arg,
    );
  }

  static Pointer eventsWithCalendarIdentifiers(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("eventsWithCalendarIdentifiers:"),
      arg,
    );
  }

  static int futureScheduledEventsExistOnCalendar(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("futureScheduledEventsExistOnCalendar:"),
      arg,
    );
  }

  static Pointer lookupItemsWithExternalIdentifier(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithExternalIdentifier:type:"),
      arg,
      type,
    );
  }

  static Pointer lookupItemsWithIdentifiers(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("lookupItemsWithIdentifiers:type:"),
      arg,
      type,
    );
  }

  static Pointer naturalLanguageSuggestedEventCalendar(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("naturalLanguageSuggestedEventCalendar"),
    );
  }

  static void refreshSources(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refreshSources"),
    );
  }

  static Pointer remindersWithCalendarIdentifiers(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remindersWithCalendarIdentifiers:"),
      arg,
    );
  }

  static Pointer remindersWithDueDatesInRange(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg, {
    @required Pointer withCalendarIdentifiers,
    @required Pointer withCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithDueDatesInRange:withCalendarIdentifiers:withCompletion:"),
      arg,
      withCalendarIdentifiers,
      withCompletion,
    );
  }

  static Pointer remindersWithIsCompleted(
    Pointer<EKInMemoryBackingStore> _self,
    int arg, {
    @required int maxResults,
    @required Pointer withCalendarIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "remindersWithIsCompleted:maxResults:withCalendarIdentifiers:"),
      arg,
      maxResults,
      withCalendarIdentifiers,
    );
  }

  static void setDefaultCalendarForNewEvents(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewEvents:"),
      arg,
    );
  }

  static void setDefaultCalendarForNewReminders(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultCalendarForNewReminders:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerEmailFromJunkChecks(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerEmailFromJunkChecks:"),
      arg,
    );
  }

  static int shouldWhitelistOrganizerPhoneNumberFromJunkChecks(
    Pointer<EKInMemoryBackingStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldWhitelistOrganizerPhoneNumberFromJunkChecks:"),
      arg,
    );
  }

  static Pointer suggestedEventCalendar(
    Pointer<EKInMemoryBackingStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedEventCalendar"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKInviteeAlternativeTime extends Struct<EKInviteeAlternativeTime> {
  factory EKInviteeAlternativeTime._() {
    throw UnimplementedError();
  }
  static Pointer<EKInviteeAlternativeTime> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKInviteeAlternativeTime")
        .cast<EKInviteeAlternativeTime>();
  }

  static Pointer conflictedParticipants(
    Pointer<EKInviteeAlternativeTime> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictedParticipants"),
    );
  }

  static Pointer description(
    Pointer<EKInviteeAlternativeTime> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer endDate(
    Pointer<EKInviteeAlternativeTime> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKInviteeAlternativeTime> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer conflictedParticipants,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:endDate:conflictedParticipants:"),
      arg,
      endDate,
      conflictedParticipants,
    );
  }

  static void setConflictedParticipants(
    Pointer<EKInviteeAlternativeTime> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictedParticipants:"),
      arg,
    );
  }

  static void setEndDate(
    Pointer<EKInviteeAlternativeTime> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKInviteeAlternativeTime> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static Pointer startDate(
    Pointer<EKInviteeAlternativeTime> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKInviteeAlternativeTimeSearcher
    extends Struct<EKInviteeAlternativeTimeSearcher> {
  factory EKInviteeAlternativeTimeSearcher._() {
    throw UnimplementedError();
  }
  static Pointer<EKInviteeAlternativeTimeSearcher> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKInviteeAlternativeTimeSearcher")
        .cast<EKInviteeAlternativeTimeSearcher>();
  }

  static int availabilityRequestInProgress(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("availabilityRequestInProgress"),
    );
  }

  static Pointer availabilityRequestsQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availabilityRequestsQueue"),
    );
  }

  static double availabilitySearchDurationMultiplier(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("availabilitySearchDurationMultiplier"),
    );
  }

  static Pointer callbackQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("callbackQueue"),
    );
  }

  static void dealloc(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer ignoredEventID(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ignoredEventID"),
    );
  }

  static Pointer initWithStateChangedCallback(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStateChangedCallback:"),
      arg,
    );
  }

  static Pointer internalOriginalConflictedParticipants(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalOriginalConflictedParticipants"),
    );
  }

  static Pointer internalOriginalEndDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalOriginalEndDate"),
    );
  }

  static Pointer internalOriginalStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalOriginalStartDate"),
    );
  }

  static Pointer internalProposedStarts(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalProposedStarts"),
    );
  }

  static Pointer internalProposedTimes(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalProposedTimes"),
    );
  }

  static int internalSearchingForMoreTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "internalSearchingForMoreTimesWhenAllAttendeesCanAttend"),
    );
  }

  static int internalSearchingForMoreTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "internalSearchingForMoreTimesWhenSomeAttendeesCanAttend"),
    );
  }

  static Pointer internalTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalTimesWhenAllAttendeesCanAttend"),
    );
  }

  static Pointer internalTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalTimesWhenSomeAttendeesCanAttend"),
    );
  }

  static Pointer leftoverSpans(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftoverSpans"),
    );
  }

  static Pointer nextAvailabilityRangeStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextAvailabilityRangeStartDate"),
    );
  }

  static int noConflictRequired(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("noConflictRequired"),
    );
  }

  static Pointer organizerAddress(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizerAddress"),
    );
  }

  static Pointer originalConflictedParticipants(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalConflictedParticipants"),
    );
  }

  static Pointer originalEndDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalEndDate"),
    );
  }

  static Pointer originalRangeStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalRangeStartDate"),
    );
  }

  static Pointer originalStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalStartDate"),
    );
  }

  static Pointer participantAddressesToParticipants(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantAddressesToParticipants"),
    );
  }

  static Pointer processingQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("processingQueue"),
    );
  }

  static Pointer proposedTimes(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedTimes"),
    );
  }

  static int remainingSearchAttempts(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("remainingSearchAttempts"),
    );
  }

  static void resetWithEvent(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg, {
    @required Pointer organizerAddressForNewlyScheduledEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "resetWithEvent:organizerAddressForNewlyScheduledEvent:"),
      arg,
      organizerAddressForNewlyScheduledEvent,
    );
  }

  static void searchForMoreTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("searchForMoreTimesWhenAllAttendeesCanAttend"),
    );
  }

  static void searchForMoreTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("searchForMoreTimesWhenSomeAttendeesCanAttend"),
    );
  }

  static int searchingForMoreTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("searchingForMoreTimesWhenAllAttendeesCanAttend"),
    );
  }

  static int searchingForMoreTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("searchingForMoreTimesWhenSomeAttendeesCanAttend"),
    );
  }

  static void setAvailabilityRequestInProgress(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAvailabilityRequestInProgress:"),
      arg,
    );
  }

  static void setAvailabilityRequestsQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAvailabilityRequestsQueue:"),
      arg,
    );
  }

  static void setAvailabilitySearchDurationMultiplier(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setAvailabilitySearchDurationMultiplier:"),
      arg,
    );
  }

  static void setCallbackQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCallbackQueue:"),
      arg,
    );
  }

  static void setIgnoredEventID(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIgnoredEventID:"),
      arg,
    );
  }

  static void setInternalOriginalConflictedParticipants(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalOriginalConflictedParticipants:"),
      arg,
    );
  }

  static void setInternalOriginalEndDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalOriginalEndDate:"),
      arg,
    );
  }

  static void setInternalOriginalStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalOriginalStartDate:"),
      arg,
    );
  }

  static void setInternalProposedStarts(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalProposedStarts:"),
      arg,
    );
  }

  static void setInternalProposedTimes(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalProposedTimes:"),
      arg,
    );
  }

  static void setInternalSearchingForMoreTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector(
          "setInternalSearchingForMoreTimesWhenAllAttendeesCanAttend:"),
      arg,
    );
  }

  static void setInternalSearchingForMoreTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector(
          "setInternalSearchingForMoreTimesWhenSomeAttendeesCanAttend:"),
      arg,
    );
  }

  static void setInternalTimesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalTimesWhenAllAttendeesCanAttend:"),
      arg,
    );
  }

  static void setInternalTimesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalTimesWhenSomeAttendeesCanAttend:"),
      arg,
    );
  }

  static void setLeftoverSpans(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLeftoverSpans:"),
      arg,
    );
  }

  static void setNextAvailabilityRangeStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNextAvailabilityRangeStartDate:"),
      arg,
    );
  }

  static void setNoConflictRequired(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNoConflictRequired:"),
      arg,
    );
  }

  static void setOrganizerAddress(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizerAddress:"),
      arg,
    );
  }

  static void setOriginalRangeStartDate(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalRangeStartDate:"),
      arg,
    );
  }

  static void setParticipantAddressesToParticipants(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantAddressesToParticipants:"),
      arg,
    );
  }

  static void setProcessingQueue(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProcessingQueue:"),
      arg,
    );
  }

  static void setRemainingSearchAttempts(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRemainingSearchAttempts:"),
      arg,
    );
  }

  static void setSource(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSource:"),
      arg,
    );
  }

  static void setStateChanged(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStateChanged:"),
      arg,
    );
  }

  static Pointer source(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("source"),
    );
  }

  static Pointer stateChanged(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stateChanged"),
    );
  }

  static Pointer timesWhenAllAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timesWhenAllAttendeesCanAttend"),
    );
  }

  static Pointer timesWhenSomeAttendeesCanAttend(
    Pointer<EKInviteeAlternativeTimeSearcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timesWhenSomeAttendeesCanAttend"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKInviteeTimeSpan extends Struct<EKInviteeTimeSpan> {
  factory EKInviteeTimeSpan._() {
    throw UnimplementedError();
  }
  static Pointer<EKInviteeTimeSpan> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKInviteeTimeSpan").cast<EKInviteeTimeSpan>();
  }

  static Pointer conflictedParticipants(
    Pointer<EKInviteeTimeSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictedParticipants"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKInviteeTimeSpan> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKInviteeTimeSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer endDate(
    Pointer<EKInviteeTimeSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer init(
    Pointer<EKInviteeTimeSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setConflictedParticipants(
    Pointer<EKInviteeTimeSpan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictedParticipants:"),
      arg,
    );
  }

  static void setEndDate(
    Pointer<EKInviteeTimeSpan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKInviteeTimeSpan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static Pointer startDate(
    Pointer<EKInviteeTimeSpan> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKJunkInvitationProtocol_Shared
    extends Struct<EKJunkInvitationProtocol_Shared> {
  factory EKJunkInvitationProtocol_Shared._() {
    throw UnimplementedError();
  }
  static Pointer<EKJunkInvitationProtocol_Shared> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKJunkInvitationProtocol_Shared")
        .cast<EKJunkInvitationProtocol_Shared>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKLiveEditingStore extends Struct<EKLiveEditingStore> {
  factory EKLiveEditingStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKLiveEditingStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKLiveEditingStore").cast<EKLiveEditingStore>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKManagedObjectContext extends Struct<EKManagedObjectContext> {
  factory EKManagedObjectContext._() {
    throw UnimplementedError();
  }
  static Pointer<EKManagedObjectContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKManagedObjectContext")
        .cast<EKManagedObjectContext>();
  }

  static Pointer confirmedSuggestedEvents(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("confirmedSuggestedEvents"),
    );
  }

  static Pointer deletedSuggestionInfoUniqueKeys(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSuggestionInfoUniqueKeys"),
    );
  }

  static Pointer modifiedCalendarMap(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifiedCalendarMap"),
    );
  }

  static Pointer modifiedItemMap(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifiedItemMap"),
    );
  }

  static Pointer modifiedNotificationMap(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifiedNotificationMap"),
    );
  }

  static Pointer modifiedSourceMap(
    Pointer<EKManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifiedSourceMap"),
    );
  }

  static void setConfirmedSuggestedEvents(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfirmedSuggestedEvents:"),
      arg,
    );
  }

  static void setDeletedSuggestionInfoUniqueKeys(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedSuggestionInfoUniqueKeys:"),
      arg,
    );
  }

  static void setModifiedCalendarMap(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifiedCalendarMap:"),
      arg,
    );
  }

  static void setModifiedItemMap(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifiedItemMap:"),
      arg,
    );
  }

  static void setModifiedNotificationMap(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifiedNotificationMap:"),
      arg,
    );
  }

  static void setModifiedSourceMap(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifiedSourceMap:"),
      arg,
    );
  }

  static int trackConfirmedSuggestedEvents(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackConfirmedSuggestedEvents:error:"),
      arg,
      error,
    );
  }

  static int trackDeletedSuggestionInfoUniqueKeys(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackDeletedSuggestionInfoUniqueKeys:error:"),
      arg,
      error,
    );
  }

  static int trackModifiedCalendars(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackModifiedCalendars:error:"),
      arg,
      error,
    );
  }

  static int trackModifiedItems(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackModifiedItems:error:"),
      arg,
      error,
    );
  }

  static int trackModifiedNotifications(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackModifiedNotifications:error:"),
      arg,
      error,
    );
  }

  static int trackModifiedSources(
    Pointer<EKManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackModifiedSources:error:"),
      arg,
      error,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKNaturalLanguageSuggestedEventPredicate
    extends Struct<EKNaturalLanguageSuggestedEventPredicate> {
  factory EKNaturalLanguageSuggestedEventPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKNaturalLanguageSuggestedEventPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKNaturalLanguageSuggestedEventPredicate")
        .cast<EKNaturalLanguageSuggestedEventPredicate>();
  }

  static Pointer description(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static int hash(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
    Pointer arg, {
    @required Pointer searchString,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:searchString:calendars:"),
      arg,
      searchString,
      calendars,
    );
  }

  static int isEqual(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicateForCoreData(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCoreData"),
    );
  }

  static Pointer predicateFormat(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer searchString(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchString"),
    );
  }

  static Pointer startDate(
    Pointer<EKNaturalLanguageSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObject extends Struct<EKObject> {
  factory EKObject._() {
    throw UnimplementedError();
  }
  static Pointer<EKObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKObject").cast<EKObject>();
  }

  static Pointer actionStringsDisplayTitle(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionStringsDisplayTitle"),
    );
  }

  static void addCachedMeltedObject(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forMultiValueKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addCachedMeltedObject:forMultiValueKey:"),
      arg,
      forMultiValueKey,
    );
  }

  static void addChanges(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChanges:"),
      arg,
    );
  }

  static void addChangesFromObject$except$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer except,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChangesFromObject:except:"),
      arg,
      except,
    );
  }

  static void addChangesFromObject$keep$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer keep,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChangesFromObject:keep:"),
      arg,
      keep,
    );
  }

  static void addChangesFromObject$(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChangesFromObject:"),
      arg,
    );
  }

  static void addMultiChangedObjectValue(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addMultiChangedObjectValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void addMultiChangedObjectValues(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addMultiChangedObjectValues:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer additionalFrozenProperties(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("additionalFrozenProperties"),
    );
  }

  static void applyChanges(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChanges:"),
      arg,
    );
  }

  static Pointer backingObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingObject"),
    );
  }

  static Pointer batchChangeInfo(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("batchChangeInfo"),
    );
  }

  static int cachedHash(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cachedHash"),
    );
  }

  static Pointer cachedMeltedObjectForSingleValueKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("cachedMeltedObjectForSingleValueKey:"),
      arg,
    );
  }

  static Pointer cachedMeltedObjectsForMultiValueKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("cachedMeltedObjectsForMultiValueKey:"),
      arg,
    );
  }

  static Pointer cachedValueForKey$populateBlock$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer populateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("cachedValueForKey:populateBlock:"),
      arg,
      populateBlock,
    );
  }

  static Pointer
      cachedValueForKey$expectingCachedValue$forMasterKey$relatedKeys$populateBlock$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer expectingCachedValue,
    @required Pointer forMasterKey,
    @required Pointer relatedKeys,
    @required Pointer populateBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "cachedValueForKey:expectingCachedValue:forMasterKey:relatedKeys:populateBlock:"),
      arg,
      expectingCachedValue,
      forMasterKey,
      relatedKeys,
      populateBlock,
    );
  }

  static Pointer cachedValueForKey$(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("cachedValueForKey:"),
      arg,
    );
  }

  static int canBeConvertedToFullObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToFullObject"),
    );
  }

  static void changeIdentifiersFromOriginal(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("changeIdentifiersFromOriginal:"),
      arg,
    );
  }

  static Pointer changeSet(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeSet"),
    );
  }

  static Pointer changedKeys(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeys"),
    );
  }

  static Pointer changedKeysAgainstObject(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeysAgainstObject:"),
      arg,
    );
  }

  static void clearCachedValueForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearCachedValueForKey:"),
      arg,
    );
  }

  static void clearCachedValuesForKeys(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearCachedValuesForKeys:"),
      arg,
    );
  }

  static Pointer copyWithZone(
    Pointer<EKObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer coreDataEntityName(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("coreDataEntityName"),
    );
  }

  static Pointer description(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer diffWithObject(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("diffWithObject:"),
      arg,
    );
  }

  static Pointer duplicate(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("duplicate"),
    );
  }

  static Pointer duplicateWithOptions(
    Pointer<EKObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("duplicateWithOptions:"),
      arg,
    );
  }

  static void emptyMeltedCache(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("emptyMeltedCache"),
    );
  }

  static void emptyMeltedCacheForKeys(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("emptyMeltedCacheForKeys:"),
      arg,
    );
  }

  static Pointer eventStore(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStore"),
    );
  }

  static Pointer eventStoreIdentifier(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStoreIdentifier"),
    );
  }

  static Pointer existingMeltedObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("existingMeltedObject"),
    );
  }

  static Pointer frozenObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frozenObject"),
    );
  }

  static Pointer frozenOrMeltedCachedSingleRelationObjectForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("frozenOrMeltedCachedSingleRelationObjectForKey:"),
      arg,
    );
  }

  static int hasChanges(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static int hasUnsavedChanges(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChanges"),
    );
  }

  static int hasUnsavedChangesIgnoreKeys(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChangesIgnoreKeys:"),
      arg,
    );
  }

  static int hasUnsavedChangesInKeys(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUnsavedChangesInKeys:"),
      arg,
    );
  }

  static int hash(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithObject$(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static Pointer
      initWithObject$createPartialBackingObject$keepBackingObject$preFrozenRelationshipObjects$additionalFrozenProperties$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithObject$keepBackingObject$preFrozenRelationshipObjects$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:keepBackingObject:preFrozenRelationshipObjects:"),
      arg,
      keepBackingObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer
      initWithObject$createPartialBackingObject$keepBackingObject$preFrozenRelationshipObjects$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
    );
  }

  static Pointer initWithObject$keepBackingObject$additionalFrozenProperties$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int keepBackingObject,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:keepBackingObject:additionalFrozenProperties:"),
      arg,
      keepBackingObject,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithObject$keepBackingObject$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int keepBackingObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithObject:keepBackingObject:"),
      arg,
      keepBackingObject,
    );
  }

  static Pointer initWithObject$createPartialBackingObject$keepBackingObject$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
    );
  }

  static Pointer inverseObjectWithObject(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("inverseObjectWithObject:"),
      arg,
    );
  }

  static int isCompletelyEqual(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompletelyEqual:"),
      arg,
    );
  }

  static int isDeleted(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static int isEqual$(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqual$comparingKeys$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer comparingKeys,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:comparingKeys:"),
      arg,
      comparingKeys,
    );
  }

  static int isEqual$comparingKeys$compareImmutableKeys$ignoringProperties$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer comparingKeys,
    @required int compareImmutableKeys,
    @required Pointer ignoringProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isEqual:comparingKeys:compareImmutableKeys:ignoringProperties:"),
      arg,
      comparingKeys,
      compareImmutableKeys,
      ignoringProperties,
    );
  }

  static int isEqual$ignoringProperties$(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer ignoringProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:ignoringProperties:"),
      arg,
      ignoringProperties,
    );
  }

  static int isFrozen(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFrozen"),
    );
  }

  static int isNew(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNew"),
    );
  }

  static int isPartialObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPartialObject"),
    );
  }

  static int isPropertyUnavailable(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPropertyUnavailable:"),
      arg,
    );
  }

  static int isSaved(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSaved"),
    );
  }

  static int isUndeleted(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUndeleted"),
    );
  }

  static Pointer managedObjectID(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("managedObjectID"),
    );
  }

  static void markAsCommitted(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsCommitted"),
    );
  }

  static void markAsDeleted(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsDeleted"),
    );
  }

  static void markAsNew(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsNew"),
    );
  }

  static void markAsNotNew(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsNotNew"),
    );
  }

  static void markAsSaved(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsSaved"),
    );
  }

  static void markAsUndeleted(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("markAsUndeleted"),
    );
  }

  static int meltedAndCachedMultiRelationCountForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("meltedAndCachedMultiRelationCountForKey:"),
      arg,
    );
  }

  static Pointer meltedAndCachedMultiRelationObjectsForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedAndCachedMultiRelationObjectsForKey:"),
      arg,
    );
  }

  static Pointer meltedAndCachedSingleRelationObjectForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedAndCachedSingleRelationObjectForKey:"),
      arg,
    );
  }

  static Pointer meltedObjectInStore(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedObjectInStore:"),
      arg,
    );
  }

  static Pointer multiChangedObjectValuesForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("multiChangedObjectValuesForKey:"),
      arg,
    );
  }

  static Pointer mutableCopyWithZone(
    Pointer<EKObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer preFrozenRelationshipObjects(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenRelationshipObjects"),
    );
  }

  static Pointer previouslySavedObject(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previouslySavedObject"),
    );
  }

  static Pointer privacyDescription(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privacyDescription"),
    );
  }

  static void refetch(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refetch"),
    );
  }

  static int refresh(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("refresh"),
    );
  }

  static void removeCachedMeltedObject(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forMultiValueKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCachedMeltedObject:forMultiValueKey:"),
      arg,
      forMultiValueKey,
    );
  }

  static void removeMultiChangedObjectValue(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeMultiChangedObjectValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void removeMultiChangedObjectValues(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeMultiChangedObjectValues:forKey:"),
      arg,
      forKey,
    );
  }

  static int removeWithSpan$error$(
    Pointer<EKObject> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("removeWithSpan:error:"),
      arg,
      error,
    );
  }

  static void removeWithSpan$(
    Pointer<EKObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("removeWithSpan:"),
      arg,
    );
  }

  static void replaceMultiChangedObjectValuesWithObjectValues(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceMultiChangedObjectValuesWithObjectValues:forKey:"),
      arg,
      forKey,
    );
  }

  static void reset(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static int revert(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("revert"),
    );
  }

  static void rollback(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rollback"),
    );
  }

  static int saveWithSpan$error$(
    Pointer<EKObject> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("saveWithSpan:error:"),
      arg,
      error,
    );
  }

  static void saveWithSpan$(
    Pointer<EKObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("saveWithSpan:"),
      arg,
    );
  }

  static Pointer semanticIdentifier(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("semanticIdentifier"),
    );
  }

  static void setAdditionalFrozenProperties(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAdditionalFrozenProperties:"),
      arg,
    );
  }

  static void setBackingObject(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackingObject:"),
      arg,
    );
  }

  static void setBatchChangeInfo(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBatchChangeInfo:"),
      arg,
    );
  }

  static void setCachedHash(
    Pointer<EKObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCachedHash:"),
      arg,
    );
  }

  static void setCachedMeltedObject(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forSingleValueKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedMeltedObject:forSingleValueKey:"),
      arg,
      forSingleValueKey,
    );
  }

  static void setCachedMeltedObjects(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forMultiValueKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedMeltedObjects:forMultiValueKey:"),
      arg,
      forMultiValueKey,
    );
  }

  static void setCachedValue(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setChangeSet(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeSet:"),
      arg,
    );
  }

  static void setEventStore(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventStore:"),
      arg,
    );
  }

  static void setEventStoreIdentifier(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEventStoreIdentifier:"),
      arg,
    );
  }

  static void setManagedObjectID(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setManagedObjectID:"),
      arg,
    );
  }

  static void setSingleChangedValue(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSingleChangedValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void set_cachedMeltedObjects(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_cachedMeltedObjects:"),
      arg,
    );
  }

  static void set_cachedValues(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_cachedValues:"),
      arg,
    );
  }

  static void set_validationContext(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_validationContext:"),
      arg,
    );
  }

  static Pointer singleChangedValueForKey(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("singleChangedValueForKey:"),
      arg,
    );
  }

  static Pointer specificIdentifier(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("specificIdentifier"),
    );
  }

  static Pointer summary(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summary"),
    );
  }

  static Pointer summaryDiffWithObject(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("summaryDiffWithObject:"),
      arg,
    );
  }

  static Pointer uniqueIdentifier(
    Pointer<EKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueIdentifier"),
    );
  }

  static void updateMeltedAndCachedMultiRelationObjects(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateMeltedAndCachedMultiRelationObjects:forKey:"),
      arg,
      forKey,
    );
  }

  static void updateMeltedAndCachedSingleRelationObject(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer forKey,
    @required Pointer frozenClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "updateMeltedAndCachedSingleRelationObject:forKey:frozenClass:"),
      arg,
      forKey,
      frozenClass,
    );
  }

  static void updatedMeltedCacheForChangeSet(
    Pointer<EKObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updatedMeltedCacheForChangeSet:"),
      arg,
    );
  }

  static int validate(
    Pointer<EKObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateWithOwner(
    Pointer<EKObject> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateWithOwner:error:"),
      arg,
      error,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectChangeSummarizer extends Struct<EKObjectChangeSummarizer> {
  factory EKObjectChangeSummarizer._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectChangeSummarizer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectChangeSummarizer")
        .cast<EKObjectChangeSummarizer>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreation extends Struct<EKObjectCreation> {
  factory EKObjectCreation._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKObjectCreation").cast<EKObjectCreation>();
  }

  static Pointer createAlarmsWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createAlarmsWithProperties:"),
      arg,
    );
  }

  static Pointer
      createAllDayEventInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createAllDayEventInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer createAllDayEventInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createAllDayEventInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer createAttendeesWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createAttendeesWithProperties:"),
      arg,
    );
  }

  static Pointer
      createCalendarCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$additionalCalendarProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalCalendarProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:additionalCalendarProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalCalendarProperties,
    );
  }

  static Pointer
      createCalendarCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createCalendarCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$additionalCalendarProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalCalendarProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:additionalCalendarProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalCalendarProperties,
    );
  }

  static Pointer
      createCalendarCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createCalendarInEventStore$withType$additionalCalendarProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
    @required Pointer additionalCalendarProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarInEventStore:withType:additionalCalendarProperties:"),
      arg,
      withType,
      additionalCalendarProperties,
    );
  }

  static Pointer createCalendarInEventStore$withType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createCalendarInEventStore:withType:"),
      arg,
      withType,
    );
  }

  static Pointer
      createCalendarInUniqueSourceInEventStore$withType$additionalCalendarProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
    @required Pointer additionalCalendarProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createCalendarInUniqueSourceInEventStore:withType:additionalCalendarProperties:"),
      arg,
      withType,
      additionalCalendarProperties,
    );
  }

  static Pointer createCalendarInUniqueSourceInEventStore$withType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createCalendarInUniqueSourceInEventStore:withType:"),
      arg,
      withType,
    );
  }

  static Pointer createCalendarWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createCalendarWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static Pointer
      createCancelledScheduledEventCurrentUserIsAttendeeInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createCancelledScheduledEventCurrentUserIsAttendeeInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer
      createCancelledScheduledEventCurrentUserIsAttendeeInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createCancelledScheduledEventCurrentUserIsAttendeeInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createDailyRecurringEventsInEventStore$numberOfEvents$additonalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int numberOfEvents,
    @required Pointer additonalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createDailyRecurringEventsInEventStore:numberOfEvents:additonalEventProperties:"),
      arg,
      numberOfEvents,
      additonalEventProperties,
    );
  }

  static Pointer createDailyRecurringEventsInEventStore$numberOfEvents$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int numberOfEvents,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createDailyRecurringEventsInEventStore:numberOfEvents:"),
      arg,
      numberOfEvents,
    );
  }

  static Pointer
      createDetachedEventInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createDetachedEventInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer createDetachedEventInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createDetachedEventInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createEventCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createEventCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createEventCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createEventCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createEventCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createEventCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createEventCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createEventCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer createEventInBirthdayCalendarInEventStore(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createEventInBirthdayCalendarInEventStore:"),
      arg,
    );
  }

  static Pointer
      createEventInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createEventInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer createEventInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createEventInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createEventInReadOnlyCalendarInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createEventInReadOnlyCalendarInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer createEventInReadOnlyCalendarInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createEventInReadOnlyCalendarInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createEventInSubscriptionCalendarInEventStore$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createEventInSubscriptionCalendarInEventStore:additionalEventProperties:"),
      arg,
      additionalEventProperties,
    );
  }

  static Pointer createEventInSubscriptionCalendarInEventStore$(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createEventInSubscriptionCalendarInEventStore:"),
      arg,
    );
  }

  static Pointer createEventWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createEventWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static Pointer createEventsWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createEventsWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static Pointer createOrganizerWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createOrganizerWithProperties:"),
      arg,
    );
  }

  static Pointer
      createPrivateEventCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createPrivateEventCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createPrivateEventCurrentUserIsSharedCalendarOwnerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createPrivateEventCurrentUserIsSharedCalendarOwnerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createPrivateEventCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createPrivateEventCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createPrivateEventCurrentUserIsSharedCalendarShareeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createPrivateEventCurrentUserIsSharedCalendarShareeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer createPrivateEventInEventStore$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createPrivateEventInEventStore:additionalEventProperties:"),
      arg,
      additionalEventProperties,
    );
  }

  static Pointer createPrivateEventInEventStore$(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createPrivateEventInEventStore:"),
      arg,
    );
  }

  static Pointer
      createReadOnlyCalendarInEventStore$withType$additionalCalendarProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
    @required Pointer additionalCalendarProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createReadOnlyCalendarInEventStore:withType:additionalCalendarProperties:"),
      arg,
      withType,
      additionalCalendarProperties,
    );
  }

  static Pointer createReadOnlyCalendarInEventStore$withType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int withType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createReadOnlyCalendarInEventStore:withType:"),
      arg,
      withType,
    );
  }

  static Pointer
      createReminderInEventStore$calendarType$additionalReminderProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalReminderProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createReminderInEventStore:calendarType:additionalReminderProperties:"),
      arg,
      calendarType,
      additionalReminderProperties,
    );
  }

  static Pointer createReminderInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createReminderInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer createReminderWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createReminderWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static Pointer createRemindersWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createRemindersWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsAttendeeInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsAttendeeInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsAttendeeInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsAttendeeInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsForwardedAttendeeInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsForwardedAttendeeInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsForwardedAttendeeInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsForwardedAttendeeInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInSubscriptionCalendarInEventStore$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInSubscriptionCalendarInEventStore:additionalEventProperties:"),
      arg,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInSubscriptionCalendarInEventStore$(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsNotAttendeeOrOrganizerInSubscriptionCalendarInEventStore:"),
      arg,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsOrganizerInEventStore$calendarType$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsOrganizerInEventStore:calendarType:additionalEventProperties:"),
      arg,
      calendarType,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsOrganizerInEventStore$calendarType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int calendarType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsOrganizerInEventStore:calendarType:"),
      arg,
      calendarType,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsReadOnlySharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsReadOnlySharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsReadOnlySharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsReadOnlySharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarOwnerPlusAttendeeAndSharedCalendarShareeIsOrganizerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarOwnerPlusAttendeeAndSharedCalendarShareeIsOrganizerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarOwnerPlusAttendeeAndSharedCalendarShareeIsOrganizerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarOwnerPlusAttendeeAndSharedCalendarShareeIsOrganizerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarOwnerPlusOrganizerAndSharedCalendarShareeIsAttendeeInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarOwnerPlusOrganizerAndSharedCalendarShareeIsAttendeeInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarOwnerPlusOrganizerAndSharedCalendarShareeIsAttendeeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarOwnerPlusOrganizerAndSharedCalendarShareeIsAttendeeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsAttendeeInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsAttendeeInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsAttendeeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsAttendeeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsNotAttendeeOrOrganizerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsNotAttendeeOrOrganizerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsNotAttendeeOrOrganizerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsNotAttendeeOrOrganizerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareePlusAttendeeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareePlusAttendeeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareePlusAttendeeAndSharedCalendarOwnerIsOrganizerInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareePlusAttendeeAndSharedCalendarOwnerIsOrganizerInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareePlusOrganizerAndSharedCalendarOwnerIsAttendeeInEventStore$sharedSchedulingSupported$additionalEventProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
    @required Pointer additionalEventProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareePlusOrganizerAndSharedCalendarOwnerIsAttendeeInEventStore:sharedSchedulingSupported:additionalEventProperties:"),
      arg,
      sharedSchedulingSupported,
      additionalEventProperties,
    );
  }

  static Pointer
      createScheduledEventCurrentUserIsSharedCalendarShareePlusOrganizerAndSharedCalendarOwnerIsAttendeeInEventStore$sharedSchedulingSupported$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sharedSchedulingSupported,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "createScheduledEventCurrentUserIsSharedCalendarShareePlusOrganizerAndSharedCalendarOwnerIsAttendeeInEventStore:sharedSchedulingSupported:"),
      arg,
      sharedSchedulingSupported,
    );
  }

  static Pointer createShareesWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createShareesWithProperties:"),
      arg,
    );
  }

  static Pointer
      createSourceInEventStore$sourceType$additionalSourceProperties$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sourceType,
    @required Pointer additionalSourceProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "createSourceInEventStore:sourceType:additionalSourceProperties:"),
      arg,
      sourceType,
      additionalSourceProperties,
    );
  }

  static Pointer createSourceInEventStore$sourceType$(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required int sourceType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("createSourceInEventStore:sourceType:"),
      arg,
      sourceType,
    );
  }

  static Pointer createSourceWithProperties(
    Pointer<EKObjectCreation> _self,
    Pointer arg, {
    @required Pointer eventStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createSourceWithProperties:eventStore:"),
      arg,
      eventStore,
    );
  }

  static void disableDefaultAlarms(
    Pointer<EKObjectCreation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableDefaultAlarms"),
    );
  }

  static void enableDefaultAlarms(
    Pointer<EKObjectCreation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableDefaultAlarms"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreationCalendarStore
    extends Struct<EKObjectCreationCalendarStore> {
  factory EKObjectCreationCalendarStore._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreationCalendarStore> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectCreationCalendarStore")
        .cast<EKObjectCreationCalendarStore>();
  }

  static Pointer context(
    Pointer<EKObjectCreationCalendarStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("context"),
    );
  }

  static void disableDefaultAlarms(
    Pointer<EKObjectCreationCalendarStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableDefaultAlarms"),
    );
  }

  static void enableDefaultAlarms(
    Pointer<EKObjectCreationCalendarStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableDefaultAlarms"),
    );
  }

  static Pointer init(
    Pointer<EKObjectCreationCalendarStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setContext(
    Pointer<EKObjectCreationCalendarStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContext:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreationInMemory extends Struct<EKObjectCreationInMemory> {
  factory EKObjectCreationInMemory._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreationInMemory> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectCreationInMemory")
        .cast<EKObjectCreationInMemory>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreationInMemoryCalendar
    extends Struct<EKObjectCreationInMemoryCalendar> {
  factory EKObjectCreationInMemoryCalendar._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreationInMemoryCalendar> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectCreationInMemoryCalendar")
        .cast<EKObjectCreationInMemoryCalendar>();
  }

  static Pointer alarms(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarms"),
    );
  }

  static int allowEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowEvents"),
    );
  }

  static int allowReminders(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowReminders"),
    );
  }

  static int allowsContentModifications(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsContentModifications"),
    );
  }

  static int allowsScheduling(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsScheduling"),
    );
  }

  static int cachedHasSharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasSharees"),
    );
  }

  static Pointer calendarIdentifier(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifier"),
    );
  }

  static Pointer color(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("color"),
    );
  }

  static Pointer colorString(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("colorString"),
    );
  }

  static Pointer containerSource(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSource"),
    );
  }

  static Pointer defaultAlarmsForAllDayEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForAllDayEvents"),
    );
  }

  static Pointer defaultAlarmsForTimedEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultAlarmsForTimedEvents"),
    );
  }

  static Pointer defaultOrganizerAddressForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerAddressForNewItems"),
    );
  }

  static Pointer defaultOrganizerEmailForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEmailForNewItems"),
    );
  }

  static Pointer defaultOrganizerEncodedLikenessDataForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerEncodedLikenessDataForNewItems"),
    );
  }

  static int defaultOrganizerIsMeForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("defaultOrganizerIsMeForNewItems"),
    );
  }

  static Pointer defaultOrganizerNameForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerNameForNewItems"),
    );
  }

  static Pointer defaultOrganizerPhoneNumberForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultOrganizerPhoneNumberForNewItems"),
    );
  }

  static int displayOrder(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static int ignoreAlarms(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ignoreAlarms"),
    );
  }

  static Pointer init(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isAffectingAvailability(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAffectingAvailability"),
    );
  }

  static int isBirthday(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBirthday"),
    );
  }

  static int isColorEditable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isColorEditable"),
    );
  }

  static int isDefaultSchedulingCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefaultSchedulingCalendar"),
    );
  }

  static int isDistinguishedExchangeCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDistinguishedExchangeCalendar"),
    );
  }

  static int isFacebookBirthdayCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFacebookBirthdayCalendar"),
    );
  }

  static int isFamilyCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFamilyCalendar"),
    );
  }

  static int isMarkedImmutableSharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedImmutableSharees"),
    );
  }

  static int isMarkedUndeletable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMarkedUndeletable"),
    );
  }

  static int isNaturalLanguageSuggestedEventCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNaturalLanguageSuggestedEventCalendar"),
    );
  }

  static int isRenameable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRenameable"),
    );
  }

  static int isShareable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isShareable"),
    );
  }

  static int isSubscribed(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribed"),
    );
  }

  static int isSubscribedHolidayCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubscribedHolidayCalendar"),
    );
  }

  static int isSuggestedEventCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuggestedEventCalendar"),
    );
  }

  static Pointer notes(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer path(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static Pointer prePublishURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prePublishURL"),
    );
  }

  static Pointer publishURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publishURL"),
    );
  }

  static Pointer serverPath(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverPath"),
    );
  }

  static void setAlarms(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlarms:"),
      arg,
    );
  }

  static void setAllowEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowEvents:"),
      arg,
    );
  }

  static void setAllowReminders(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowReminders:"),
      arg,
    );
  }

  static void setAllowsContentModifications(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsContentModifications:"),
      arg,
    );
  }

  static void setAllowsScheduling(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsScheduling:"),
      arg,
    );
  }

  static void setCachedHasSharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCachedHasSharees:"),
      arg,
    );
  }

  static void setCalendarIdentifier(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarIdentifier:"),
      arg,
    );
  }

  static void setColor(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setColor:"),
      arg,
    );
  }

  static void setColorString(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setColorString:"),
      arg,
    );
  }

  static void setContainerSource(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerSource:"),
      arg,
    );
  }

  static void setDefaultAlarmsForAllDayEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarmsForAllDayEvents:"),
      arg,
    );
  }

  static void setDefaultAlarmsForTimedEvents(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultAlarmsForTimedEvents:"),
      arg,
    );
  }

  static void setDefaultOrganizerAddressForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerAddressForNewItems:"),
      arg,
    );
  }

  static void setDefaultOrganizerEmailForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerEmailForNewItems:"),
      arg,
    );
  }

  static void setDefaultOrganizerEncodedLikenessDataForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerEncodedLikenessDataForNewItems:"),
      arg,
    );
  }

  static void setDefaultOrganizerIsMeForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerIsMeForNewItems:"),
      arg,
    );
  }

  static void setDefaultOrganizerNameForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerNameForNewItems:"),
      arg,
    );
  }

  static void setDefaultOrganizerPhoneNumberForNewItems(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultOrganizerPhoneNumberForNewItems:"),
      arg,
    );
  }

  static void setDisplayOrder(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setDisplayOrder:"),
      arg,
    );
  }

  static void setIgnoreAlarms(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIgnoreAlarms:"),
      arg,
    );
  }

  static void setIsAffectingAvailability(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsAffectingAvailability:"),
      arg,
    );
  }

  static void setIsBirthday(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsBirthday:"),
      arg,
    );
  }

  static void setIsColorEditable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsColorEditable:"),
      arg,
    );
  }

  static void setIsDefaultSchedulingCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDefaultSchedulingCalendar:"),
      arg,
    );
  }

  static void setIsDistinguishedExchangeCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDistinguishedExchangeCalendar:"),
      arg,
    );
  }

  static void setIsFacebookBirthdayCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFacebookBirthdayCalendar:"),
      arg,
    );
  }

  static void setIsFamilyCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFamilyCalendar:"),
      arg,
    );
  }

  static void setIsMarkedImmutableSharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsMarkedImmutableSharees:"),
      arg,
    );
  }

  static void setIsMarkedUndeletable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsMarkedUndeletable:"),
      arg,
    );
  }

  static void setIsNaturalLanguageSuggestedEventCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsNaturalLanguageSuggestedEventCalendar:"),
      arg,
    );
  }

  static void setIsRenameable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsRenameable:"),
      arg,
    );
  }

  static void setIsShareable(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsShareable:"),
      arg,
    );
  }

  static void setIsSubscribed(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSubscribed:"),
      arg,
    );
  }

  static void setIsSubscribedHolidayCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSubscribedHolidayCalendar:"),
      arg,
    );
  }

  static void setIsSuggestedEventCalendar(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsSuggestedEventCalendar:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setPath(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPath:"),
      arg,
    );
  }

  static void setPrePublishURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrePublishURL:"),
      arg,
    );
  }

  static void setPublishURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublishURL:"),
      arg,
    );
  }

  static void setServerPath(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerPath:"),
      arg,
    );
  }

  static void setSharedOwnerAddress(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedOwnerAddress:"),
      arg,
    );
  }

  static void setSharedOwnerAddresses(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedOwnerAddresses:"),
      arg,
    );
  }

  static void setSharedOwnerName(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedOwnerName:"),
      arg,
    );
  }

  static void setSharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharees:"),
      arg,
    );
  }

  static void setSharingStatusString(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharingStatusString:"),
      arg,
    );
  }

  static void setSubscriptionURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionURL:"),
      arg,
    );
  }

  static void setSuppressEventSchedulingNotifications(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuppressEventSchedulingNotifications:"),
      arg,
    );
  }

  static void setSymbolicColorName(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSymbolicColorName:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static Pointer sharedOwnerAddress(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddress"),
    );
  }

  static Pointer sharedOwnerAddresses(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerAddresses"),
    );
  }

  static Pointer sharedOwnerName(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedOwnerName"),
    );
  }

  static Pointer sharees(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharees"),
    );
  }

  static Pointer sharingStatusString(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharingStatusString"),
    );
  }

  static Pointer subscriptionURL(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionURL"),
    );
  }

  static int suppressEventSchedulingNotifications(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suppressEventSchedulingNotifications"),
    );
  }

  static Pointer symbolicColorName(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicColorName"),
    );
  }

  static Pointer title(
    Pointer<EKObjectCreationInMemoryCalendar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreationInMemoryObject
    extends Struct<EKObjectCreationInMemoryObject> {
  factory EKObjectCreationInMemoryObject._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreationInMemoryObject> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectCreationInMemoryObject")
        .cast<EKObjectCreationInMemoryObject>();
  }

  static int canBeConvertedToFullObject(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToFullObject"),
    );
  }

  static Pointer changeSet(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeSet"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer existingMeltedObject(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("existingMeltedObject"),
    );
  }

  static Pointer frozenObject(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frozenObject"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static int isCompletelyEqual(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompletelyEqual:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer arg, {
    @required Pointer ignoringProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:ignoringProperties:"),
      arg,
      ignoringProperties,
    );
  }

  static int isFrozen(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFrozen"),
    );
  }

  static int isNew(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNew"),
    );
  }

  static int isPartialObject(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPartialObject"),
    );
  }

  static int isPropertyUnavailable(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPropertyUnavailable:"),
      arg,
    );
  }

  static Pointer managedObjectID(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("managedObjectID"),
    );
  }

  static Pointer meltedObjectInStore(
    Pointer<EKObjectCreationInMemoryObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("meltedObjectInStore:"),
      arg,
    );
  }

  static Pointer preFrozenRelationshipObjects(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preFrozenRelationshipObjects"),
    );
  }

  static Pointer uniqueIdentifier(
    Pointer<EKObjectCreationInMemoryObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueIdentifier"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectCreationInMemorySource
    extends Struct<EKObjectCreationInMemorySource> {
  factory EKObjectCreationInMemorySource._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectCreationInMemorySource> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectCreationInMemorySource")
        .cast<EKObjectCreationInMemorySource>();
  }

  static int displayOrder(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static Pointer dropBoxPathString(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dropBoxPathString"),
    );
  }

  static Pointer externalSourceIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalSourceIdentifier"),
    );
  }

  static Pointer init(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isDelegate(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDelegate"),
    );
  }

  static int isEnabledForEvents(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForEvents"),
    );
  }

  static int isEnabledForReminders(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForReminders"),
    );
  }

  static int isNew(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNew"),
    );
  }

  static int isWritable(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isWritable"),
    );
  }

  static Pointer ownerAddresses(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerAddresses"),
    );
  }

  static Pointer providerIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("providerIdentifier"),
    );
  }

  static Pointer serverURL(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverURL"),
    );
  }

  static void setDisplayOrder(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setDisplayOrder:"),
      arg,
    );
  }

  static void setDropBoxPathString(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDropBoxPathString:"),
      arg,
    );
  }

  static void setExternalSourceIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExternalSourceIdentifier:"),
      arg,
    );
  }

  static void setIsDelegate(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDelegate:"),
      arg,
    );
  }

  static void setIsEnabledForEvents(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsEnabledForEvents:"),
      arg,
    );
  }

  static void setIsEnabledForReminders(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsEnabledForReminders:"),
      arg,
    );
  }

  static void setIsWritable(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsWritable:"),
      arg,
    );
  }

  static void setOwnerAddresses(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwnerAddresses:"),
      arg,
    );
  }

  static void setProviderIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProviderIdentifier:"),
      arg,
    );
  }

  static void setServerURL(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerURL:"),
      arg,
    );
  }

  static void setSourceIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceIdentifier:"),
      arg,
    );
  }

  static void setSupportsAttendeeComments(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsAttendeeComments:"),
      arg,
    );
  }

  static void setSupportsDropBoxAttachments(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsDropBoxAttachments:"),
      arg,
    );
  }

  static void setSupportsEmailValidation(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsEmailValidation:"),
      arg,
    );
  }

  static void setSupportsEventCalendarCreation(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsEventCalendarCreation:"),
      arg,
    );
  }

  static void setSupportsFreebusy(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsFreebusy:"),
      arg,
    );
  }

  static void setSupportsJunkReporting(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsJunkReporting:"),
      arg,
    );
  }

  static void setSupportsLikenessPropagation(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsLikenessPropagation:"),
      arg,
    );
  }

  static void setSupportsManagedAttachments(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsManagedAttachments:"),
      arg,
    );
  }

  static void setSupportsPhoneNumbers(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsPhoneNumbers:"),
      arg,
    );
  }

  static void setSupportsPrivateEvents(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsPrivateEvents:"),
      arg,
    );
  }

  static void setSupportsSharingScheduling(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsSharingScheduling:"),
      arg,
    );
  }

  static void setSupportsTaskCalendarCreation(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsTaskCalendarCreation:"),
      arg,
    );
  }

  static void setSupportsUnbind(
    Pointer<EKObjectCreationInMemorySource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsUnbind:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setTypeString(
    Pointer<EKObjectCreationInMemorySource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTypeString:"),
      arg,
    );
  }

  static Pointer sourceIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceIdentifier"),
    );
  }

  static int supportsAttendeeComments(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsAttendeeComments"),
    );
  }

  static int supportsDropBoxAttachments(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsDropBoxAttachments"),
    );
  }

  static int supportsEmailValidation(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEmailValidation"),
    );
  }

  static int supportsEventCalendarCreation(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEventCalendarCreation"),
    );
  }

  static int supportsFreebusy(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsFreebusy"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }

  static int supportsLikenessPropagation(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsLikenessPropagation"),
    );
  }

  static int supportsManagedAttachments(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsManagedAttachments"),
    );
  }

  static int supportsPhoneNumbers(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPhoneNumbers"),
    );
  }

  static int supportsPrivateEvents(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPrivateEvents"),
    );
  }

  static int supportsSharingScheduling(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsSharingScheduling"),
    );
  }

  static int supportsTaskCalendarCreation(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsTaskCalendarCreation"),
    );
  }

  static int supportsUnbind(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsUnbind"),
    );
  }

  static Pointer title(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer typeString(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeString"),
    );
  }

  static Pointer uniqueIdentifier(
    Pointer<EKObjectCreationInMemorySource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueIdentifier"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectGroup extends Struct<EKObjectGroup> {
  factory EKObjectGroup._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectGroup> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKObjectGroup").cast<EKObjectGroup>();
  }

  static Pointer description(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithObjects(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObjects:"),
      arg,
    );
  }

  static void newObject(
    Pointer<EKObjectGroup> _self,
    Pointer arg, {
    @required Pointer spawnedFromObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("newObject:spawnedFromObject:"),
      arg,
      spawnedFromObject,
    );
  }

  static Pointer objectIdentifiers(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectIdentifiers"),
    );
  }

  static Pointer objectMap(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectMap"),
    );
  }

  static Pointer objects(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objects"),
    );
  }

  static int objectsBelongInGroup(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("objectsBelongInGroup:"),
      arg,
    );
  }

  static Pointer originalObjectMap(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalObjectMap"),
    );
  }

  static Pointer originalObjects(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalObjects"),
    );
  }

  static void setObjectMap(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectMap:"),
      arg,
    );
  }

  static void setOriginalObjectMap(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalObjectMap:"),
      arg,
    );
  }

  static void setSpawnedObjectIdentifiers(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSpawnedObjectIdentifiers:"),
      arg,
    );
  }

  static Pointer shiftedOccurrencePreviouslySpawnedByIdentifier(
    Pointer<EKObjectGroup> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("shiftedOccurrencePreviouslySpawnedByIdentifier:"),
      arg,
    );
  }

  static Pointer spawnedObjectIdentifiers(
    Pointer<EKObjectGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("spawnedObjectIdentifiers"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectPersistentChangesModel
    extends Struct<EKObjectPersistentChangesModel> {
  factory EKObjectPersistentChangesModel._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectPersistentChangesModel> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectPersistentChangesModel")
        .cast<EKObjectPersistentChangesModel>();
  }

  static Pointer deletedIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedIDs"),
    );
  }

  static Pointer description(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hasAnyChanges(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAnyChanges"),
    );
  }

  static Pointer immutableAllModifiedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableAllModifiedObjectIDs"),
    );
  }

  static Pointer immutableAllUpdatedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableAllUpdatedObjectIDs"),
    );
  }

  static Pointer immutableDeletedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableDeletedObjectIDs"),
    );
  }

  static Pointer immutableInsertedAndUpdatedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableInsertedAndUpdatedObjectIDs"),
    );
  }

  static Pointer immutableInsertedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableInsertedObjectIDs"),
    );
  }

  static Pointer immutableNonTimeUpdatedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableNonTimeUpdatedObjectIDs"),
    );
  }

  static Pointer immutableTimeUpdatedObjectIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("immutableTimeUpdatedObjectIDs"),
    );
  }

  static Pointer init(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer insertedIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("insertedIDs"),
    );
  }

  static Pointer nonTimeUpdatedIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonTimeUpdatedIDs"),
    );
  }

  static Pointer timeUpdatedIDs(
    Pointer<EKObjectPersistentChangesModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeUpdatedIDs"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKObjectValidationContext extends Struct<EKObjectValidationContext> {
  factory EKObjectValidationContext._() {
    throw UnimplementedError();
  }
  static Pointer<EKObjectValidationContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKObjectValidationContext")
        .cast<EKObjectValidationContext>();
  }

  static int depth(
    Pointer<EKObjectValidationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("depth"),
    );
  }

  static void faultIfNeededForObject(
    Pointer<EKObjectValidationContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("faultIfNeededForObject:"),
      arg,
    );
  }

  static Pointer initWithRootObject(
    Pointer<EKObjectValidationContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRootObject:"),
      arg,
    );
  }

  static int reachedMaxDepth(
    Pointer<EKObjectValidationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("reachedMaxDepth"),
    );
  }

  static Pointer rootObject(
    Pointer<EKObjectValidationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootObject"),
    );
  }

  static void setDepth(
    Pointer<EKObjectValidationContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDepth:"),
      arg,
    );
  }

  static void setReachedMaxDepth(
    Pointer<EKObjectValidationContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setReachedMaxDepth:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKOccurrenceProtocol_Shared extends Struct<EKOccurrenceProtocol_Shared> {
  factory EKOccurrenceProtocol_Shared._() {
    throw UnimplementedError();
  }
  static Pointer<EKOccurrenceProtocol_Shared> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKOccurrenceProtocol_Shared")
        .cast<EKOccurrenceProtocol_Shared>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKOrganizer extends Struct<EKOrganizer> {
  factory EKOrganizer._() {
    throw UnimplementedError();
  }
  static Pointer<EKOrganizer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKOrganizer").cast<EKOrganizer>();
  }

  static Pointer initWithName(
    Pointer<EKOrganizer> _self,
    Pointer arg, {
    @required Pointer url,
    @required Pointer email,
    @required Pointer phoneNumber,
    @required Pointer encodedLikenessData,
    @required int isCurrentUserForScheduling,
    @required int isCurrentUserForSharing,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:url:email:phoneNumber:encodedLikenessData:isCurrentUserForScheduling:isCurrentUserForSharing:"),
      arg,
      url,
      email,
      phoneNumber,
      encodedLikenessData,
      isCurrentUserForScheduling,
      isCurrentUserForSharing,
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKOrganizer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKParticipant extends Struct<EKParticipant> {
  factory EKParticipant._() {
    throw UnimplementedError();
  }
  static Pointer<EKParticipant> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKParticipant").cast<EKParticipant>();
  }

  static Pointer ABPersonInAddressBook(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ABPersonInAddressBook:"),
      arg,
    );
  }

  static Pointer URL(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer comment(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("comment"),
    );
  }

  static Pointer contactIdentifier(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifier"),
    );
  }

  static Pointer contactPredicate(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactPredicate"),
    );
  }

  static Pointer description(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer encodedLikenessData(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encodedLikenessData"),
    );
  }

  static int hasParticipantStatusChange(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasParticipantStatusChange"),
    );
  }

  static Pointer initWithName$emailAddress$phoneNumber$url$(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required Pointer emailAddress,
    @required Pointer phoneNumber,
    @required Pointer url,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:emailAddress:phoneNumber:url:"),
      arg,
      emailAddress,
      phoneNumber,
      url,
    );
  }

  static Pointer initWithName$url$(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required Pointer url,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:url:"),
      arg,
      url,
    );
  }

  static Pointer initWithObject(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithParticipant(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required Pointer newURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithParticipant:newURL:"),
      arg,
      newURL,
    );
  }

  static Pointer inviterNameString(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inviterNameString"),
    );
  }

  static int isCurrentUser(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUser"),
    );
  }

  static int isCurrentUserForScheduling(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForScheduling"),
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }

  static int isEqualToParticipant(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToParticipant:"),
      arg,
    );
  }

  static int isInviteUndeliverable(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isInviteUndeliverable"),
    );
  }

  static int isLocationRoom(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLocationRoom"),
    );
  }

  static int isVettedBySource(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isVettedBySource"),
    );
  }

  static Pointer name(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer nameComponents(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameComponents"),
    );
  }

  static Pointer nameUsingAddressAsBackup(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameUsingAddressAsBackup"),
    );
  }

  static Pointer nameUsingEmailAsBackup(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameUsingEmailAsBackup"),
    );
  }

  static int participantRole(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantRole"),
    );
  }

  static int participantScheduleStatus(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantScheduleStatus"),
    );
  }

  static int participantStatus(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantStatus"),
    );
  }

  static int participantType(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantType"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer proposalStatusString(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposalStatusString"),
    );
  }

  static Pointer proposedEndDateForEvent(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateForEvent:"),
      arg,
    );
  }

  static Pointer proposedEndDateUnadjustedFromUTC(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedEndDateUnadjustedFromUTC"),
    );
  }

  static Pointer proposedStartDateForEvent(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateForEvent:"),
      arg,
    );
  }

  static int proposedStartDateStatus(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("proposedStartDateStatus"),
    );
  }

  static Pointer proposedStartDateUnadjustedFromUTC(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proposedStartDateUnadjustedFromUTC"),
    );
  }

  static int replyRequested(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("replyRequested"),
    );
  }

  static Pointer role(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("role"),
    );
  }

  static int scheduleForceSend(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("scheduleForceSend"),
    );
  }

  static Pointer scheduleStatusString(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scheduleStatusString"),
    );
  }

  static void setCurrentUser(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCurrentUser:"),
      arg,
    );
  }

  static void setEmailAddress(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailAddress:"),
      arg,
    );
  }

  static void setEncodedLikenessData(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncodedLikenessData:"),
      arg,
    );
  }

  static void setInviterNameString(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInviterNameString:"),
      arg,
    );
  }

  static void setParticipantRole(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantRole:"),
      arg,
    );
  }

  static void setParticipantStatus(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantStatus:"),
      arg,
    );
  }

  static void setParticipantType(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantType:"),
      arg,
    );
  }

  static void setPhoneNumber(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPhoneNumber:"),
      arg,
    );
  }

  static void setProposalStatusString(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposalStatusString:"),
      arg,
    );
  }

  static void setProposedEndDate(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required Pointer forEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedEndDate:forEvent:"),
      arg,
      forEvent,
    );
  }

  static void setProposedEndDateUnadjustedFromUTC(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedEndDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setProposedStartDate(
    Pointer<EKParticipant> _self,
    Pointer arg, {
    @required Pointer forEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedStartDate:forEvent:"),
      arg,
      forEvent,
    );
  }

  static void setProposedStartDateStatus(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setProposedStartDateStatus:"),
      arg,
    );
  }

  static void setProposedStartDateUnadjustedFromUTC(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProposedStartDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setReplyRequested(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setReplyRequested:"),
      arg,
    );
  }

  static void setRole(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRole:"),
      arg,
    );
  }

  static void setScheduleForceSend(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setScheduleForceSend:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static void setStatusModifiedDate(
    Pointer<EKParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatusModifiedDate:"),
      arg,
    );
  }

  static void setType(
    Pointer<EKParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static Pointer status(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }

  static Pointer statusModifiedDate(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusModifiedDate"),
    );
  }

  static int type(
    Pointer<EKParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKParticipantForSorting extends Struct<EKParticipantForSorting> {
  factory EKParticipantForSorting._() {
    throw UnimplementedError();
  }
  static Pointer<EKParticipantForSorting> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKParticipantForSorting")
        .cast<EKParticipantForSorting>();
  }

  static Pointer cachedDisplayName(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedDisplayName"),
    );
  }

  static int compare(
    Pointer<EKParticipantForSorting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer copyWithZone(
    Pointer<EKParticipantForSorting> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer displayName(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayName"),
    );
  }

  static Pointer firstName(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstName"),
    );
  }

  static int isEmail(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEmail"),
    );
  }

  static int isPhone(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPhone"),
    );
  }

  static Pointer lastName(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastName"),
    );
  }

  static Pointer participant(
    Pointer<EKParticipantForSorting> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participant"),
    );
  }

  static void setCachedDisplayName(
    Pointer<EKParticipantForSorting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedDisplayName:"),
      arg,
    );
  }

  static void setFirstName(
    Pointer<EKParticipantForSorting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFirstName:"),
      arg,
    );
  }

  static void setIsEmail(
    Pointer<EKParticipantForSorting> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsEmail:"),
      arg,
    );
  }

  static void setIsPhone(
    Pointer<EKParticipantForSorting> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPhone:"),
      arg,
    );
  }

  static void setLastName(
    Pointer<EKParticipantForSorting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastName:"),
      arg,
    );
  }

  static void setParticipant(
    Pointer<EKParticipantForSorting> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipant:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKParticipantToContactMatcher
    extends Struct<EKParticipantToContactMatcher> {
  factory EKParticipantToContactMatcher._() {
    throw UnimplementedError();
  }
  static Pointer<EKParticipantToContactMatcher> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKParticipantToContactMatcher")
        .cast<EKParticipantToContactMatcher>();
  }

  static int anyContactMatchesAnyParticipant(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("anyContactMatchesAnyParticipant:"),
      arg,
    );
  }

  static int anyContactMatchesAnyParticipantFromItem(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("anyContactMatchesAnyParticipantFromItem:"),
      arg,
    );
  }

  static int anyContactMatchesParticipant(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("anyContactMatchesParticipant:"),
      arg,
    );
  }

  static Pointer contactCompanyNames(
    Pointer<EKParticipantToContactMatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactCompanyNames"),
    );
  }

  static Pointer contactEmailAddresses(
    Pointer<EKParticipantToContactMatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactEmailAddresses"),
    );
  }

  static Pointer contactNameComponents(
    Pointer<EKParticipantToContactMatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactNameComponents"),
    );
  }

  static Pointer contacts(
    Pointer<EKParticipantToContactMatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contacts"),
    );
  }

  static Pointer initWithContacts(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContacts:"),
      arg,
    );
  }

  static Pointer matchingParticipantsFromItem(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("matchingParticipantsFromItem:"),
      arg,
    );
  }

  static Pointer matchingParticipantsFromParticipants(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("matchingParticipantsFromParticipants:"),
      arg,
    );
  }

  static void setContactCompanyNames(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactCompanyNames:"),
      arg,
    );
  }

  static void setContactEmailAddresses(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactEmailAddresses:"),
      arg,
    );
  }

  static void setContactNameComponents(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactNameComponents:"),
      arg,
    );
  }

  static void setContacts(
    Pointer<EKParticipantToContactMatcher> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContacts:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPersistentHistoryTransactionChangeSummary
    extends Struct<EKPersistentHistoryTransactionChangeSummary> {
  factory EKPersistentHistoryTransactionChangeSummary._() {
    throw UnimplementedError();
  }
  static Pointer<EKPersistentHistoryTransactionChangeSummary> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKPersistentHistoryTransactionChangeSummary")
        .cast<EKPersistentHistoryTransactionChangeSummary>();
  }

  static int calendarsOrAccountsChanged(
    Pointer<EKPersistentHistoryTransactionChangeSummary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("calendarsOrAccountsChanged"),
    );
  }

  static Pointer gatherChangesSinceLastDate(
    Pointer<EKPersistentHistoryTransactionChangeSummary> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("gatherChangesSinceLastDate:error:"),
      arg,
      error,
    );
  }

  static Pointer init(
    Pointer<EKPersistentHistoryTransactionChangeSummary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer latestTimestamp(
    Pointer<EKPersistentHistoryTransactionChangeSummary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("latestTimestamp"),
    );
  }

  static Pointer summaryModel(
    Pointer<EKPersistentHistoryTransactionChangeSummary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("summaryModel"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPersistentHistoryTransactionChangeSummaryModel
    extends Struct<EKPersistentHistoryTransactionChangeSummaryModel> {
  factory EKPersistentHistoryTransactionChangeSummaryModel._() {
    throw UnimplementedError();
  }
  static Pointer<EKPersistentHistoryTransactionChangeSummaryModel> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKPersistentHistoryTransactionChangeSummaryModel")
        .cast<EKPersistentHistoryTransactionChangeSummaryModel>();
  }

  static Pointer accounts(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accounts"),
    );
  }

  static void addPropertyWithName(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPropertyWithName:onEntity:"),
      arg,
      onEntity,
    );
  }

  static void addRelevantObjectID(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
    Pointer arg, {
    @required int withModificationType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addRelevantObjectID:withModificationType:"),
      arg,
      withModificationType,
    );
  }

  static void addRelevantObjectIDs(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
    Pointer arg, {
    @required int withModificationType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addRelevantObjectIDs:withModificationType:"),
      arg,
      withModificationType,
    );
  }

  static Pointer calendarItems(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarItems"),
    );
  }

  static Pointer calendars(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendars"),
    );
  }

  static Pointer init(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer notifications(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notifications"),
    );
  }

  static Pointer otherModifiedObjects(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("otherModifiedObjects"),
    );
  }

  static void setUpdatedProperties(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUpdatedProperties:"),
      arg,
    );
  }

  static Pointer updatedProperties(
    Pointer<EKPersistentHistoryTransactionChangeSummaryModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("updatedProperties"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPostSliceDescription extends Struct<EKPostSliceDescription> {
  factory EKPostSliceDescription._() {
    throw UnimplementedError();
  }
  static Pointer<EKPostSliceDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKPostSliceDescription")
        .cast<EKPostSliceDescription>();
  }

  static Pointer copyWithZone(
    Pointer<EKPostSliceDescription> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer createdSeriesDetails(
    Pointer<EKPostSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdSeriesDetails"),
    );
  }

  static Pointer description(
    Pointer<EKPostSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithOriginalSliceDescription(
    Pointer<EKPostSliceDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOriginalSliceDescription:"),
      arg,
    );
  }

  static void setCreatedSeriesDetails(
    Pointer<EKPostSliceDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedSeriesDetails:"),
      arg,
    );
  }

  static void setUpdatedMainSeriesDetails(
    Pointer<EKPostSliceDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUpdatedMainSeriesDetails:"),
      arg,
    );
  }

  static Pointer updatedMainSeriesDetails(
    Pointer<EKPostSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("updatedMainSeriesDetails"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPredicate extends Struct<EKPredicate> {
  factory EKPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKPredicate").cast<EKPredicate>();
  }

  static Pointer calendarIdentifiers(
    Pointer<EKPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifiers"),
    );
  }

  static Pointer description(
    Pointer<EKPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer fastPathResultWithStore(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fastPathResultWithStore:"),
      arg,
    );
  }

  static int hasFastPathWithStore(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasFastPathWithStore:"),
      arg,
    );
  }

  static Pointer initWithCalendars(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCalendars:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setCalendarIdentifiers(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarIdentifiers:"),
      arg,
    );
  }

  static void setSkipSorting(
    Pointer<EKPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSkipSorting:"),
      arg,
    );
  }

  static void setSortComparator(
    Pointer<EKPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSortComparator:"),
      arg,
    );
  }

  static int skipSorting(
    Pointer<EKPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("skipSorting"),
    );
  }

  static Pointer sortComparator(
    Pointer<EKPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sortComparator"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPredicateSearch extends Struct<EKPredicateSearch> {
  factory EKPredicateSearch._() {
    throw UnimplementedError();
  }
  static Pointer<EKPredicateSearch> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKPredicateSearch").cast<EKPredicateSearch>();
  }

  static Pointer cancelCallback(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cancelCallback"),
    );
  }

  static void cancelSearch(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancelSearch"),
    );
  }

  static Pointer completionCallback(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completionCallback"),
    );
  }

  static Pointer currentResults(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentResults"),
    );
  }

  static void dealloc(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithPredicate(
    Pointer<EKPredicateSearch> _self,
    Pointer arg, {
    @required Pointer store,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPredicate:store:"),
      arg,
      store,
    );
  }

  static Pointer queryQueue(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queryQueue"),
    );
  }

  static Pointer run(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("run"),
    );
  }

  static Pointer runForCountsOnly(
    Pointer<EKPredicateSearch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("runForCountsOnly"),
    );
  }

  static void setCancelCallback(
    Pointer<EKPredicateSearch> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCancelCallback:"),
      arg,
    );
  }

  static void setCompletionCallback(
    Pointer<EKPredicateSearch> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompletionCallback:"),
      arg,
    );
  }

  static void setCurrentResults(
    Pointer<EKPredicateSearch> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentResults:"),
      arg,
    );
  }

  static void setQueryQueue(
    Pointer<EKPredicateSearch> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueryQueue:"),
      arg,
    );
  }

  static void startWithCompletionCallback(
    Pointer<EKPredicateSearch> _self,
    Pointer arg, {
    @required Pointer cancelCallback,
    @required int synchronous,
    @required int batchCompletion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Int8_returns_void(
      _self,
      _objc.getSelector(
          "startWithCompletionCallback:cancelCallback:synchronous:batchCompletion:"),
      arg,
      cancelCallback,
      synchronous,
      batchCompletion,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKPreferences extends Struct<EKPreferences> {
  factory EKPreferences._() {
    throw UnimplementedError();
  }
  static Pointer<EKPreferences> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKPreferences").cast<EKPreferences>();
  }

  static int alertInviteeDeclines(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("alertInviteeDeclines"),
    );
  }

  static int alwaysSetArrivedAndSettledForReminders(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("alwaysSetArrivedAndSettledForReminders"),
    );
  }

  static int bypassSplashScreen(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("bypassSplashScreen"),
    );
  }

  static Pointer deselectedCalendarIdentifiers(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deselectedCalendarIdentifiers"),
    );
  }

  static Pointer deselectedCalendarSyncHashes(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deselectedCalendarSyncHashes"),
    );
  }

  static Pointer init(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int lastConfirmedSplashScreenVersion(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("lastConfirmedSplashScreenVersion"),
    );
  }

  static int refiringReminderAlarmsEnabled(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("refiringReminderAlarmsEnabled"),
    );
  }

  static int remindMeAboutThisInCalendarWidgetEnabled(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("remindMeAboutThisInCalendarWidgetEnabled"),
    );
  }

  static Pointer selectedCalendarIdentifiers(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selectedCalendarIdentifiers"),
    );
  }

  static void setAlertInviteeDeclines(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAlertInviteeDeclines:"),
      arg,
    );
  }

  static void setAlwaysSetArrivedAndSettledForReminders(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAlwaysSetArrivedAndSettledForReminders:"),
      arg,
    );
  }

  static void setDeselectedCalendarIdentifiers(
    Pointer<EKPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeselectedCalendarIdentifiers:"),
      arg,
    );
  }

  static void setDeselectedCalendarSyncHashes(
    Pointer<EKPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeselectedCalendarSyncHashes:"),
      arg,
    );
  }

  static void setLastConfirmedSplashScreenVersion(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLastConfirmedSplashScreenVersion:"),
      arg,
    );
  }

  static void setRefiringReminderAlarmsEnabled(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRefiringReminderAlarmsEnabled:"),
      arg,
    );
  }

  static void setRemindMeAboutThisInCalendarWidgetEnabled(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRemindMeAboutThisInCalendarWidgetEnabled:"),
      arg,
    );
  }

  static void setSelectedCalendarIdentifiers(
    Pointer<EKPreferences> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSelectedCalendarIdentifiers:"),
      arg,
    );
  }

  static void setShowDeclinedEvents(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShowDeclinedEvents:"),
      arg,
    );
  }

  static void setTravelEngineThrottlePeriod(
    Pointer<EKPreferences> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTravelEngineThrottlePeriod:"),
      arg,
    );
  }

  static void setUseShortReminderRefireInterval(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseShortReminderRefireInterval:"),
      arg,
    );
  }

  static void setUseShortReminderSnoozeInterval(
    Pointer<EKPreferences> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseShortReminderSnoozeInterval:"),
      arg,
    );
  }

  static int showDeclinedEvents(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("showDeclinedEvents"),
    );
  }

  static double travelEngineThrottlePeriod(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("travelEngineThrottlePeriod"),
    );
  }

  static int useShortReminderRefireInterval(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useShortReminderRefireInterval"),
    );
  }

  static int useShortReminderSnoozeInterval(
    Pointer<EKPreferences> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useShortReminderSnoozeInterval"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKQueryEventPredicate extends Struct<EKQueryEventPredicate> {
  factory EKQueryEventPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKQueryEventPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKQueryEventPredicate")
        .cast<EKQueryEventPredicate>();
  }

  static void encodeWithCoder(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int entityType(
    Pointer<EKQueryEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static Pointer initWithCalendars(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCalendars:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithTitle(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg, {
    @required Pointer location,
    @required Pointer notes,
    @required Pointer participantNames,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithTitle:location:notes:participantNames:calendars:"),
      arg,
      location,
      notes,
      participantNames,
      calendars,
    );
  }

  static Pointer location(
    Pointer<EKQueryEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer mdQueryString(
    Pointer<EKQueryEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mdQueryString"),
    );
  }

  static Pointer notes(
    Pointer<EKQueryEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer participantNames(
    Pointer<EKQueryEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantNames"),
    );
  }

  static void setLocation(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocation:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setParticipantNames(
    Pointer<EKQueryEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantNames:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKQueryPredicate extends Struct<EKQueryPredicate> {
  factory EKQueryPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKQueryPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKQueryPredicate").cast<EKQueryPredicate>();
  }

  static Pointer calendarTitle(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarTitle"),
    );
  }

  static Pointer customQueryString(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customQueryString"),
    );
  }

  static int disableBackingStoreUpdate(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("disableBackingStoreUpdate"),
    );
  }

  static int entityType(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static Pointer initWithCalendars(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCalendars:"),
      arg,
    );
  }

  static int maxResults(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maxResults"),
    );
  }

  static Pointer mdQueryString(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mdQueryString"),
    );
  }

  static Pointer searchTerm(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchTerm"),
    );
  }

  static void setCalendarTitle(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarTitle:"),
      arg,
    );
  }

  static void setCustomQueryString(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomQueryString:"),
      arg,
    );
  }

  static void setDisableBackingStoreUpdate(
    Pointer<EKQueryPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDisableBackingStoreUpdate:"),
      arg,
    );
  }

  static void setMaxResults(
    Pointer<EKQueryPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaxResults:"),
      arg,
    );
  }

  static void setSearchTerm(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSearchTerm:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKQueryPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static Pointer title(
    Pointer<EKQueryPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKQueryReminderPredicate extends Struct<EKQueryReminderPredicate> {
  factory EKQueryReminderPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKQueryReminderPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKQueryReminderPredicate")
        .cast<EKQueryReminderPredicate>();
  }

  static Pointer calendarTitle(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarTitle"),
    );
  }

  static int completed(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("completed"),
    );
  }

  static Pointer contactIdentifier(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifier"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer dueAfter(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueAfter"),
    );
  }

  static Pointer dueBefore(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueBefore"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int entityType(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static Pointer fastPathResultWithStore(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fastPathResultWithStore:"),
      arg,
    );
  }

  static int hasContactIdentifier(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasContactIdentifier"),
    );
  }

  static int hasFastPathWithStore(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasFastPathWithStore:"),
      arg,
    );
  }

  static Pointer initWithCalendars(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCalendars:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int limitToCompletedOrIncomplete(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("limitToCompletedOrIncomplete"),
    );
  }

  static int maxResults(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maxResults"),
    );
  }

  static Pointer mdQueryString(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mdQueryString"),
    );
  }

  static Pointer searchTerm(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchTerm"),
    );
  }

  static void setCalendarTitle(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarTitle:"),
      arg,
    );
  }

  static void setCompleted(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCompleted:"),
      arg,
    );
  }

  static void setContactIdentifier(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactIdentifier:"),
      arg,
    );
  }

  static void setDueAfter(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDueAfter:"),
      arg,
    );
  }

  static void setDueBefore(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDueBefore:"),
      arg,
    );
  }

  static void setHasContactIdentifier(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasContactIdentifier:"),
      arg,
    );
  }

  static void setLimitToCompletedOrIncomplete(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLimitToCompletedOrIncomplete:"),
      arg,
    );
  }

  static void setMaxResults(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaxResults:"),
      arg,
    );
  }

  static void setSearchTerm(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSearchTerm:"),
      arg,
    );
  }

  static void setSortOrder(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setSortOrder:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKQueryReminderPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setUseCompletionDateAsAlternate(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseCompletionDateAsAlternate:"),
      arg,
    );
  }

  static void setUseDueDateAsCompletionDate(
    Pointer<EKQueryReminderPredicate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseDueDateAsCompletionDate:"),
      arg,
    );
  }

  static int sortOrder(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("sortOrder"),
    );
  }

  static Pointer title(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static int useCompletionDateAsAlternate(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useCompletionDateAsAlternate"),
    );
  }

  static int useDueDateAsCompletionDate(
    Pointer<EKQueryReminderPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useDueDateAsCompletionDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKReadWriteLock extends Struct<EKReadWriteLock> {
  factory EKReadWriteLock._() {
    throw UnimplementedError();
  }
  static Pointer<EKReadWriteLock> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKReadWriteLock").cast<EKReadWriteLock>();
  }

  static Pointer initWithName(
    Pointer<EKReadWriteLock> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:"),
      arg,
    );
  }

  static void performWithReadLock(
    Pointer<EKReadWriteLock> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performWithReadLock:"),
      arg,
    );
  }

  static void performWithWriteLock(
    Pointer<EKReadWriteLock> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performWithWriteLock:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecents extends Struct<EKRecents> {
  factory EKRecents._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecents> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRecents").cast<EKRecents>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceChangeInfo extends Struct<EKRecurrenceChangeInfo> {
  factory EKRecurrenceChangeInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceChangeInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceChangeInfo")
        .cast<EKRecurrenceChangeInfo>();
  }

  static int changeType(
    Pointer<EKRecurrenceChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceChangeInfo> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer offset(
    Pointer<EKRecurrenceChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("offset"),
    );
  }

  static void setChangeType(
    Pointer<EKRecurrenceChangeInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setChangeType:"),
      arg,
    );
  }

  static void setOffset(
    Pointer<EKRecurrenceChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOffset:"),
      arg,
    );
  }

  static Pointer updatedIdentifier(
    Pointer<EKRecurrenceChangeInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("updatedIdentifier:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceChangeManager extends Struct<EKRecurrenceChangeManager> {
  factory EKRecurrenceChangeManager._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceChangeManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceChangeManager")
        .cast<EKRecurrenceChangeManager>();
  }

  static void adjustDetachedEvents(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer andExceptions,
    @required Pointer onSeries,
    @required Pointer sliceOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "adjustDetachedEvents:andExceptions:onSeries:sliceOffset:"),
      arg,
      andExceptions,
      onSeries,
      sliceOffset,
    );
  }

  static Pointer backingStore(
    Pointer<EKRecurrenceChangeManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingStore"),
    );
  }

  static void copyDetachedEventsAndExceptionsFromSeries(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer toSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyDetachedEventsAndExceptionsFromSeries:toSeries:"),
      arg,
      toSeries,
    );
  }

  static Pointer doChangeAllOnSeries(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer forEvent,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("doChangeAllOnSeries:forEvent:error:"),
      arg,
      forEvent,
      error,
    );
  }

  static Pointer doThisAndFutureChangeOnSeries(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer forEvent,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("doThisAndFutureChangeOnSeries:forEvent:error:"),
      arg,
      forEvent,
      error,
    );
  }

  static int doThisAndFutureDeleteOnEvent(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer withMaster,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("doThisAndFutureDeleteOnEvent:withMaster:error:"),
      arg,
      withMaster,
      error,
    );
  }

  static Pointer initWithBackingStore(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingStore:"),
      arg,
    );
  }

  static void moveDetachedEventsAndExceptionsFromSeries$toSeries$(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer toSeries,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("moveDetachedEventsAndExceptionsFromSeries:toSeries:"),
      arg,
      toSeries,
    );
  }

  static void moveDetachedEventsAndExceptionsFromSeries$toSeries$sliceDate$(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer toSeries,
    @required Pointer sliceDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "moveDetachedEventsAndExceptionsFromSeries:toSeries:sliceDate:"),
      arg,
      toSeries,
      sliceDate,
    );
  }

  static void readdDetachedEvents(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer andExceptions,
    @required Pointer toSeries,
    @required Pointer afterDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc
          .getSelector("readdDetachedEvents:andExceptions:toSeries:afterDate:"),
      arg,
      andExceptions,
      toSeries,
      afterDate,
    );
  }

  static void undoThisAndFutureDeleteOnEvent(
    Pointer<EKRecurrenceChangeManager> _self,
    Pointer arg, {
    @required Pointer originalMaster,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("undoThisAndFutureDeleteOnEvent:originalMaster:"),
      arg,
      originalMaster,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceDayOfWeek extends Struct<EKRecurrenceDayOfWeek> {
  factory EKRecurrenceDayOfWeek._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceDayOfWeek> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceDayOfWeek")
        .cast<EKRecurrenceDayOfWeek>();
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceDayOfWeek> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int dayOfTheWeek(
    Pointer<EKRecurrenceDayOfWeek> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("dayOfTheWeek"),
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceDayOfWeek> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKRecurrenceDayOfWeek> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<EKRecurrenceDayOfWeek> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer iCalendarDescription(
    Pointer<EKRecurrenceDayOfWeek> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("iCalendarDescription"),
    );
  }

  static Pointer iCalendarValueFromDayOfTheWeek(
    Pointer<EKRecurrenceDayOfWeek> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("iCalendarValueFromDayOfTheWeek:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKRecurrenceDayOfWeek> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithDayOfTheWeek(
    Pointer<EKRecurrenceDayOfWeek> _self,
    int arg, {
    @required int weekNumber,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector("initWithDayOfTheWeek:weekNumber:"),
      arg,
      weekNumber,
    );
  }

  static int isEqual(
    Pointer<EKRecurrenceDayOfWeek> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int weekNumber(
    Pointer<EKRecurrenceDayOfWeek> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("weekNumber"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceEnd extends Struct<EKRecurrenceEnd> {
  factory EKRecurrenceEnd._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceEnd> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRecurrenceEnd").cast<EKRecurrenceEnd>();
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceEnd> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceEnd> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKRecurrenceEnd> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer endDate(
    Pointer<EKRecurrenceEnd> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static int hash(
    Pointer<EKRecurrenceEnd> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKRecurrenceEnd> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithEndDate(
    Pointer<EKRecurrenceEnd> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEndDate:"),
      arg,
    );
  }

  static Pointer initWithOccurrenceCount(
    Pointer<EKRecurrenceEnd> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOccurrenceCount:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<EKRecurrenceEnd> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int occurrenceCount(
    Pointer<EKRecurrenceEnd> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("occurrenceCount"),
    );
  }

  static int usesEndDate(
    Pointer<EKRecurrenceEnd> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesEndDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceException extends Struct<EKRecurrenceException> {
  factory EKRecurrenceException._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceException> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceException")
        .cast<EKRecurrenceException>();
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceException> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer exceptionDateUnadjustedFromUTC(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionDateUnadjustedFromUTC"),
    );
  }

  static int hash(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer identifierString(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifierString"),
    );
  }

  static int isEqual(
    Pointer<EKRecurrenceException> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer localUID(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localUID"),
    );
  }

  static Pointer masterManagedObjectID(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("masterManagedObjectID"),
    );
  }

  static Pointer recurrenceDateUnadjustedFromUTC(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceDateUnadjustedFromUTC"),
    );
  }

  static Pointer recurrenceIdentifier(
    Pointer<EKRecurrenceException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceIdentifier"),
    );
  }

  static void setMasterManagedObjectID(
    Pointer<EKRecurrenceException> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMasterManagedObjectID:"),
      arg,
    );
  }

  static void setRecurrenceIdentifier(
    Pointer<EKRecurrenceException> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceIdentifier:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceGenerator extends Struct<EKRecurrenceGenerator> {
  factory EKRecurrenceGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceGenerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceGenerator")
        .cast<EKRecurrenceGenerator>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceIdentifier extends Struct<EKRecurrenceIdentifier> {
  factory EKRecurrenceIdentifier._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceIdentifier> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurrenceIdentifier")
        .cast<EKRecurrenceIdentifier>();
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceIdentifier> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<EKRecurrenceIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer identifierString(
    Pointer<EKRecurrenceIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifierString"),
    );
  }

  static int isEqual(
    Pointer<EKRecurrenceIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer localUID(
    Pointer<EKRecurrenceIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localUID"),
    );
  }

  static Pointer recurrenceDateUnadjustedFromUTC(
    Pointer<EKRecurrenceIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceDateUnadjustedFromUTC"),
    );
  }

  static void setIdentifierString(
    Pointer<EKRecurrenceIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentifierString:"),
      arg,
    );
  }

  static void setLocalUID(
    Pointer<EKRecurrenceIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalUID:"),
      arg,
    );
  }

  static void setRecurrenceDateUnadjustedFromUTC(
    Pointer<EKRecurrenceIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceDateUnadjustedFromUTC:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceRule extends Struct<EKRecurrenceRule> {
  factory EKRecurrenceRule._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceRule> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRecurrenceRule").cast<EKRecurrenceRule>();
  }

  static Pointer UUID(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static Pointer backingObject(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingObject"),
    );
  }

  static Pointer backingRule(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingRule"),
    );
  }

  static Pointer cachedEnd(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedEnd"),
    );
  }

  static Pointer cachedEndDate(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedEndDate"),
    );
  }

  static Pointer calendarIdentifier(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifier"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKRecurrenceRule> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer countNumber(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("countNumber"),
    );
  }

  static Pointer daysOfTheMonth(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheMonth"),
    );
  }

  static Pointer daysOfTheWeek(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheWeek"),
    );
  }

  static Pointer daysOfTheYear(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheYear"),
    );
  }

  static Pointer description(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int dirtyStateMayAffectExceptionDates(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dirtyStateMayAffectExceptionDates"),
    );
  }

  static Pointer endDate(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static int firstDayOfTheWeek(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("firstDayOfTheWeek"),
    );
  }

  static Pointer firstDayOfTheWeekNumber(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstDayOfTheWeekNumber"),
    );
  }

  static int frequency(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("frequency"),
    );
  }

  static Pointer frequencyNumber(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frequencyNumber"),
    );
  }

  static int hasDuplicateMonthsOfYear(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasDuplicateMonthsOfYear"),
    );
  }

  static Pointer humanReadableDescriptionWithStartDate(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("humanReadableDescriptionWithStartDate:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer
      initRecurrenceWithFrequency$interval$daysOfTheWeek$daysOfTheMonth$monthsOfTheYear$weeksOfTheYear$daysOfTheYear$setPositions$end$(
    Pointer<EKRecurrenceRule> _self,
    int arg, {
    @required int interval,
    @required Pointer daysOfTheWeek,
    @required Pointer daysOfTheMonth,
    @required Pointer monthsOfTheYear,
    @required Pointer weeksOfTheYear,
    @required Pointer daysOfTheYear,
    @required Pointer setPositions,
    @required Pointer end,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:"),
      arg,
      interval,
      daysOfTheWeek,
      daysOfTheMonth,
      monthsOfTheYear,
      weeksOfTheYear,
      daysOfTheYear,
      setPositions,
      end,
    );
  }

  static Pointer initRecurrenceWithFrequency$interval$end$(
    Pointer<EKRecurrenceRule> _self,
    int arg, {
    @required int interval,
    @required Pointer end,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initRecurrenceWithFrequency:interval:end:"),
      arg,
      interval,
      end,
    );
  }

  static Pointer initWithBackingRule(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBackingRule:"),
      arg,
    );
  }

  static int interval(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("interval"),
    );
  }

  static Pointer intervalNumber(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("intervalNumber"),
    );
  }

  static Pointer item(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("item"),
    );
  }

  static Pointer monthsOfTheYear(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("monthsOfTheYear"),
    );
  }

  static int newStartDateIsInvalid(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg, {
    @required Pointer currentStartDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("newStartDateIsInvalid:currentStartDate:"),
      arg,
      currentStartDate,
    );
  }

  static int newStartDateIsValid(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg, {
    @required Pointer currentStartDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("newStartDateIsValid:currentStartDate:"),
      arg,
      currentStartDate,
    );
  }

  static Pointer recurrenceEnd(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceEnd"),
    );
  }

  static void reset(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static int ruleIsForAllDayItem(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ruleIsForAllDayItem"),
    );
  }

  static int ruleIsForFloatingItem(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ruleIsForFloatingItem"),
    );
  }

  static void setCachedEnd(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedEnd:"),
      arg,
    );
  }

  static void setCountNumber(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCountNumber:"),
      arg,
    );
  }

  static void setDaysOfTheMonth(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDaysOfTheMonth:"),
      arg,
    );
  }

  static void setDaysOfTheWeek(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDaysOfTheWeek:"),
      arg,
    );
  }

  static void setDaysOfTheYear(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDaysOfTheYear:"),
      arg,
    );
  }

  static void setEndDate(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setFirstDayOfTheWeek(
    Pointer<EKRecurrenceRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFirstDayOfTheWeek:"),
      arg,
    );
  }

  static void setFrequency(
    Pointer<EKRecurrenceRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setFrequency:"),
      arg,
    );
  }

  static void setInterval(
    Pointer<EKRecurrenceRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setInterval:"),
      arg,
    );
  }

  static void setItem(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:"),
      arg,
    );
  }

  static void setMonthsOfTheYear(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMonthsOfTheYear:"),
      arg,
    );
  }

  static Pointer setPositions(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setPositions"),
    );
  }

  static void setRecurrenceEnd(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceEnd:"),
      arg,
    );
  }

  static void setSetPositions(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSetPositions:"),
      arg,
    );
  }

  static void setWeeksOfTheYear(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWeeksOfTheYear:"),
      arg,
    );
  }

  static int shouldPinMonthDays(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldPinMonthDays"),
    );
  }

  static Pointer stringValueAsDate(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValueAsDate"),
    );
  }

  static void updateItem(
    Pointer<EKRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateItem:"),
      arg,
    );
  }

  static int usesEndDate(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesEndDate"),
    );
  }

  static Pointer weeksOfTheYear(
    Pointer<EKRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weeksOfTheYear"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurrenceSet extends Struct<EKRecurrenceSet> {
  factory EKRecurrenceSet._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurrenceSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRecurrenceSet").cast<EKRecurrenceSet>();
  }

  static Pointer description(
    Pointer<EKRecurrenceSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer recurrenceSetID(
    Pointer<EKRecurrenceSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceSetID"),
    );
  }

  static Pointer series(
    Pointer<EKRecurrenceSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("series"),
    );
  }

  static void setRecurrenceSetID(
    Pointer<EKRecurrenceSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceSetID:"),
      arg,
    );
  }

  static void setSeries(
    Pointer<EKRecurrenceSet> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSeries:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRecurringReminderCompletedChangeInfo
    extends Struct<EKRecurringReminderCompletedChangeInfo> {
  factory EKRecurringReminderCompletedChangeInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKRecurringReminderCompletedChangeInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRecurringReminderCompletedChangeInfo")
        .cast<EKRecurringReminderCompletedChangeInfo>();
  }

  static Pointer reminderCompletedInfo(
    Pointer<EKRecurringReminderCompletedChangeInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reminderCompletedInfo"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRelationChange extends Struct<EKRelationChange> {
  factory EKRelationChange._() {
    throw UnimplementedError();
  }
  static Pointer<EKRelationChange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRelationChange").cast<EKRelationChange>();
  }

  static Pointer changeSet(
    Pointer<EKRelationChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeSet"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKRelationChange> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKRelationChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer relationChangeKey(
    Pointer<EKRelationChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationChangeKey"),
    );
  }

  static void setChangeSet(
    Pointer<EKRelationChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeSet:"),
      arg,
    );
  }

  static void setRelationChangeKey(
    Pointer<EKRelationChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationChangeKey:"),
      arg,
    );
  }

  static void setUniqueIdentifier(
    Pointer<EKRelationChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUniqueIdentifier:"),
      arg,
    );
  }

  static Pointer uniqueIdentifier(
    Pointer<EKRelationChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueIdentifier"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKReminder extends Struct<EKReminder> {
  factory EKReminder._() {
    throw UnimplementedError();
  }
  static Pointer<EKReminder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKReminder").cast<EKReminder>();
  }

  static Pointer action(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("action"),
    );
  }

  static Pointer actionStringsDisplayTitle(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionStringsDisplayTitle"),
    );
  }

  static Pointer appLink(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("appLink"),
    );
  }

  static Pointer bestDisplayAlarm(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bestDisplayAlarm"),
    );
  }

  static int cachedHasLocationAlarm(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cachedHasLocationAlarm"),
    );
  }

  static int canEditRecurrence(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canEditRecurrence"),
    );
  }

  static int canMoveOrCopyFromCalendar(
    Pointer<EKReminder> _self,
    Pointer arg, {
    @required Pointer toCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveOrCopyFromCalendar:toCalendar:error:"),
      arg,
      toCalendar,
      error,
    );
  }

  static int canMoveToCalendar(
    Pointer<EKReminder> _self,
    Pointer arg, {
    @required Pointer fromCalendar,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canMoveToCalendar:fromCalendar:error:"),
      arg,
      fromCalendar,
      error,
    );
  }

  static int compareDueDateWithReminder(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareDueDateWithReminder:"),
      arg,
    );
  }

  static Pointer completionDate(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completionDate"),
    );
  }

  static int currentUserMayActAsOrganizer(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("currentUserMayActAsOrganizer"),
    );
  }

  static int displayOrder(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static Pointer dueDate(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueDate"),
    );
  }

  static Pointer dueDateComponents(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueDateComponents"),
    );
  }

  static Pointer dueDateUnadjustedFromUTC(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dueDateUnadjustedFromUTC"),
    );
  }

  static int entityType(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("entityType"),
    );
  }

  static Pointer externalURI(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalURI"),
    );
  }

  static int hasLocationAlarm(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLocationAlarm"),
    );
  }

  static Pointer humanReadableRecurrenceDescription(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("humanReadableRecurrenceDescription"),
    );
  }

  static int isCompleted(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompleted"),
    );
  }

  static int isReminder(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReminder"),
    );
  }

  static int order(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("order"),
    );
  }

  static Pointer orderNumber(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("orderNumber"),
    );
  }

  static int priority(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("priority"),
    );
  }

  static int removeWithSpan(
    Pointer<EKReminder> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("removeWithSpan:error:"),
      arg,
      error,
    );
  }

  static void reorderBetweenEarlier(
    Pointer<EKReminder> _self,
    Pointer arg, {
    @required Pointer later,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reorderBetweenEarlier:later:"),
      arg,
      later,
    );
  }

  static int saveWithSpan(
    Pointer<EKReminder> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("saveWithSpan:error:"),
      arg,
      error,
    );
  }

  static void setAction(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAction:"),
      arg,
    );
  }

  static void setAllDay(
    Pointer<EKReminder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllDay:"),
      arg,
    );
  }

  static void setAppLink(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAppLink:"),
      arg,
    );
  }

  static void setCompleted(
    Pointer<EKReminder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCompleted:"),
      arg,
    );
  }

  static void setCompletionDate(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompletionDate:"),
      arg,
    );
  }

  static void setDisplayOrder(
    Pointer<EKReminder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDisplayOrder:"),
      arg,
    );
  }

  static void setDueDate(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDueDate:"),
      arg,
    );
  }

  static void setDueDateComponents(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDueDateComponents:"),
      arg,
    );
  }

  static void setDueDateUnadjustedFromUTC(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDueDateUnadjustedFromUTC:"),
      arg,
    );
  }

  static void setOrderNumber(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrderNumber:"),
      arg,
    );
  }

  static void setPriority(
    Pointer<EKReminder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setPriority:"),
      arg,
    );
  }

  static void setStartDateComponents(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDateComponents:"),
      arg,
    );
  }

  static void setStatusCompleteNotByDate(
    Pointer<EKReminder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStatusCompleteNotByDate:"),
      arg,
    );
  }

  static void setTimeZoneObject(
    Pointer<EKReminder> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZoneObject:"),
      arg,
    );
  }

  static Pointer startDateComponents(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDateComponents"),
    );
  }

  static int statusCompleteNotByDate(
    Pointer<EKReminder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("statusCompleteNotByDate"),
    );
  }

  static void updateWithAppLink(
    Pointer<EKReminder> _self,
    Pointer arg, {
    @required Pointer<Int8> usedSelectedText,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateWithAppLink:usedSelectedText:"),
      arg,
      usedSelectedText,
    );
  }

  static int validate(
    Pointer<EKReminder> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRepliedEventPredicate extends Struct<EKRepliedEventPredicate> {
  factory EKRepliedEventPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKRepliedEventPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRepliedEventPredicate")
        .cast<EKRepliedEventPredicate>();
  }

  static int evaluateWithObject(
    Pointer<EKRepliedEventPredicate> _self,
    Pointer arg, {
    @required Pointer substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static int hash(
    Pointer<EKRepliedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<EKRepliedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicateForCoreData(
    Pointer<EKRepliedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCoreData"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRequestAvailabilityOperation
    extends Struct<EKRequestAvailabilityOperation> {
  factory EKRequestAvailabilityOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKRequestAvailabilityOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKRequestAvailabilityOperation")
        .cast<EKRequestAvailabilityOperation>();
  }

  static void cancel(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer description(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer error(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer init(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithSource(
    Pointer<EKRequestAvailabilityOperation> _self,
    Pointer arg, {
    @required Pointer startDate,
    @required Pointer endDate,
    @required Pointer ignoredEventID,
    @required Pointer addresses,
    @required Pointer resultsBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithSource:startDate:endDate:ignoredEventID:addresses:resultsBlock:"),
      arg,
      startDate,
      endDate,
      ignoredEventID,
      addresses,
      resultsBlock,
    );
  }

  static int isConcurrent(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConcurrent"),
    );
  }

  static int isExecuting(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static void main(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static void setError(
    Pointer<EKRequestAvailabilityOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void start(
    Pointer<EKRequestAvailabilityOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKResliceOperation extends Struct<EKResliceOperation> {
  factory EKResliceOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKResliceOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKResliceOperation").cast<EKResliceOperation>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKRevertOperation extends Struct<EKRevertOperation> {
  factory EKRevertOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKRevertOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKRevertOperation").cast<EKRevertOperation>();
  }

  static Pointer originalChangeTracker(
    Pointer<EKRevertOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalChangeTracker"),
    );
  }

  static void setOriginalChangeTracker(
    Pointer<EKRevertOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalChangeTracker:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSaveOperation extends Struct<EKSaveOperation> {
  factory EKSaveOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKSaveOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSaveOperation").cast<EKSaveOperation>();
  }

  static int completedRecurringReminder(
    Pointer<EKSaveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("completedRecurringReminder"),
    );
  }

  static Pointer objectsRequiringAlteredSpan(
    Pointer<EKSaveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectsRequiringAlteredSpan"),
    );
  }

  static Pointer previousObjects(
    Pointer<EKSaveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousObjects"),
    );
  }

  static Pointer previousSliceInfo(
    Pointer<EKSaveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousSliceInfo"),
    );
  }

  static void setCompletedRecurringReminder(
    Pointer<EKSaveOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCompletedRecurringReminder:"),
      arg,
    );
  }

  static void setObjectsRequiringAlteredSpan(
    Pointer<EKSaveOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectsRequiringAlteredSpan:"),
      arg,
    );
  }

  static void setPreviousObjects(
    Pointer<EKSaveOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousObjects:"),
      arg,
    );
  }

  static void setPreviousSliceInfo(
    Pointer<EKSaveOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousSliceInfo:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSecureKeyedArchiverSerializer
    extends Struct<EKSecureKeyedArchiverSerializer> {
  factory EKSecureKeyedArchiverSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<EKSecureKeyedArchiverSerializer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSecureKeyedArchiverSerializer")
        .cast<EKSecureKeyedArchiverSerializer>();
  }

  static Pointer deserializeData(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeData:error:"),
      arg,
      error,
    );
  }

  static Pointer eventStore(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventStore"),
    );
  }

  static Pointer initWithEventStore(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
    Pointer arg, {
    @required Pointer withVersion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventStore:withVersion:"),
      arg,
      withVersion,
    );
  }

  static Pointer serializeEvent(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("serializeEvent:error:"),
      arg,
      error,
    );
  }

  static Pointer version(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("version"),
    );
  }

  static Pointer versionFromData(
    Pointer<EKSecureKeyedArchiverSerializer> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("versionFromData:error:"),
      arg,
      error,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableAlarm extends Struct<EKSerializableAlarm> {
  factory EKSerializableAlarm._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableAlarm> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSerializableAlarm").cast<EKSerializableAlarm>();
  }

  static Pointer absoluteDate(
    Pointer<EKSerializableAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("absoluteDate"),
    );
  }

  static Pointer createAlarm(
    Pointer<EKSerializableAlarm> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createAlarm:"),
      arg,
    );
  }

  static Pointer initWithAlarm(
    Pointer<EKSerializableAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAlarm:"),
      arg,
    );
  }

  static int isAbsolute(
    Pointer<EKSerializableAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAbsolute"),
    );
  }

  static int isTimeToLeaveAlarm(
    Pointer<EKSerializableAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTimeToLeaveAlarm"),
    );
  }

  static double relativeOffset(
    Pointer<EKSerializableAlarm> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("relativeOffset"),
    );
  }

  static void setAbsoluteDate(
    Pointer<EKSerializableAlarm> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAbsoluteDate:"),
      arg,
    );
  }

  static void setIsAbsolute(
    Pointer<EKSerializableAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsAbsolute:"),
      arg,
    );
  }

  static void setIsTimeToLeaveAlarm(
    Pointer<EKSerializableAlarm> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsTimeToLeaveAlarm:"),
      arg,
    );
  }

  static void setRelativeOffset(
    Pointer<EKSerializableAlarm> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRelativeOffset:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableAttachment extends Struct<EKSerializableAttachment> {
  factory EKSerializableAttachment._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableAttachment> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSerializableAttachment")
        .cast<EKSerializableAttachment>();
  }

  static Pointer createAttachment(
    Pointer<EKSerializableAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createAttachment"),
    );
  }

  static Pointer initWithAttachment(
    Pointer<EKSerializableAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAttachment:"),
      arg,
    );
  }

  static void setUrlOnDisk(
    Pointer<EKSerializableAttachment> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrlOnDisk:"),
      arg,
    );
  }

  static Pointer urlOnDisk(
    Pointer<EKSerializableAttachment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlOnDisk"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableEvent extends Struct<EKSerializableEvent> {
  factory EKSerializableEvent._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableEvent> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSerializableEvent").cast<EKSerializableEvent>();
  }

  static Pointer alarms(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alarms"),
    );
  }

  static Pointer attachments(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachments"),
    );
  }

  static Pointer attendees(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attendees"),
    );
  }

  static Pointer calendarIdentifier(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarIdentifier"),
    );
  }

  static Pointer createEventInEventStore(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createEventInEventStore:"),
      arg,
    );
  }

  static Pointer endDate(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static Pointer initWithEvent(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEvent:"),
      arg,
    );
  }

  static int isAllDay(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAllDay"),
    );
  }

  static Pointer location(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer notes(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notes"),
    );
  }

  static Pointer recurrenceRules(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceRules"),
    );
  }

  static void setAlarms(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlarms:"),
      arg,
    );
  }

  static void setAttachments(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttachments:"),
      arg,
    );
  }

  static void setAttendees(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttendees:"),
      arg,
    );
  }

  static void setCalendarIdentifier(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarIdentifier:"),
      arg,
    );
  }

  static void setEndDate(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setIsAllDay(
    Pointer<EKSerializableEvent> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsAllDay:"),
      arg,
    );
  }

  static void setLocation(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocation:"),
      arg,
    );
  }

  static void setNotes(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotes:"),
      arg,
    );
  }

  static void setRecurrenceRules(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceRules:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static void setStructuredLocation(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStructuredLocation:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setTravelTime(
    Pointer<EKSerializableEvent> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTravelTime:"),
      arg,
    );
  }

  static void setUrl(
    Pointer<EKSerializableEvent> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrl:"),
      arg,
    );
  }

  static Pointer startDate(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static Pointer structuredLocation(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("structuredLocation"),
    );
  }

  static Pointer timeZone(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer title(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static double travelTime(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("travelTime"),
    );
  }

  static Pointer url(
    Pointer<EKSerializableEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableObject extends Struct<EKSerializableObject> {
  factory EKSerializableObject._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSerializableObject").cast<EKSerializableObject>();
  }

  static void encodeWithCoder(
    Pointer<EKSerializableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<EKSerializableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableParticipant extends Struct<EKSerializableParticipant> {
  factory EKSerializableParticipant._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableParticipant> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSerializableParticipant")
        .cast<EKSerializableParticipant>();
  }

  static Pointer createAttendee(
    Pointer<EKSerializableParticipant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createAttendee:"),
      arg,
    );
  }

  static Pointer emailAddress(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer initWithParticipant(
    Pointer<EKSerializableParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithParticipant:"),
      arg,
    );
  }

  static Pointer name(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int participantRole(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantRole"),
    );
  }

  static int participantStatus(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantStatus"),
    );
  }

  static int participantType(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantType"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static void setEmailAddress(
    Pointer<EKSerializableParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailAddress:"),
      arg,
    );
  }

  static void setName(
    Pointer<EKSerializableParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setParticipantRole(
    Pointer<EKSerializableParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantRole:"),
      arg,
    );
  }

  static void setParticipantStatus(
    Pointer<EKSerializableParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantStatus:"),
      arg,
    );
  }

  static void setParticipantType(
    Pointer<EKSerializableParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantType:"),
      arg,
    );
  }

  static void setPhoneNumber(
    Pointer<EKSerializableParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPhoneNumber:"),
      arg,
    );
  }

  static void setUrl(
    Pointer<EKSerializableParticipant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrl:"),
      arg,
    );
  }

  static Pointer url(
    Pointer<EKSerializableParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableRecurrenceRule
    extends Struct<EKSerializableRecurrenceRule> {
  factory EKSerializableRecurrenceRule._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableRecurrenceRule> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSerializableRecurrenceRule")
        .cast<EKSerializableRecurrenceRule>();
  }

  static Pointer createRecurrenceRule(
    Pointer<EKSerializableRecurrenceRule> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createRecurrenceRule:"),
      arg,
    );
  }

  static Pointer daysOfTheMonth(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheMonth"),
    );
  }

  static Pointer daysOfTheWeek(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheWeek"),
    );
  }

  static Pointer daysOfTheYear(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daysOfTheYear"),
    );
  }

  static int firstDayOfTheWeek(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("firstDayOfTheWeek"),
    );
  }

  static int frequency(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("frequency"),
    );
  }

  static Pointer initWithRecurrenceRule(
    Pointer<EKSerializableRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecurrenceRule:"),
      arg,
    );
  }

  static int interval(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("interval"),
    );
  }

  static Pointer monthsOfTheYear(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("monthsOfTheYear"),
    );
  }

  static Pointer recurrenceEnd(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recurrenceEnd"),
    );
  }

  static Pointer setPositions(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setPositions"),
    );
  }

  static void setRecurrenceEnd(
    Pointer<EKSerializableRecurrenceRule> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecurrenceEnd:"),
      arg,
    );
  }

  static Pointer weeksOfTheYear(
    Pointer<EKSerializableRecurrenceRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weeksOfTheYear"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSerializableStructuredLocation
    extends Struct<EKSerializableStructuredLocation> {
  factory EKSerializableStructuredLocation._() {
    throw UnimplementedError();
  }
  static Pointer<EKSerializableStructuredLocation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSerializableStructuredLocation")
        .cast<EKSerializableStructuredLocation>();
  }

  static Pointer calLocation(
    Pointer<EKSerializableStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calLocation"),
    );
  }

  static Pointer createStructuredLocation(
    Pointer<EKSerializableStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createStructuredLocation"),
    );
  }

  static Pointer initWithStructuredLocation(
    Pointer<EKSerializableStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStructuredLocation:"),
      arg,
    );
  }

  static void setCalLocation(
    Pointer<EKSerializableStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalLocation:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSeriesDetails extends Struct<EKSeriesDetails> {
  factory EKSeriesDetails._() {
    throw UnimplementedError();
  }
  static Pointer<EKSeriesDetails> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSeriesDetails").cast<EKSeriesDetails>();
  }

  static Pointer copyWithZone(
    Pointer<EKSeriesDetails> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer detachedEvents(
    Pointer<EKSeriesDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("detachedEvents"),
    );
  }

  static Pointer exceptionDates(
    Pointer<EKSeriesDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exceptionDates"),
    );
  }

  static Pointer initWithEvent(
    Pointer<EKSeriesDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEvent:"),
      arg,
    );
  }

  static Pointer initWithMasterEvent(
    Pointer<EKSeriesDetails> _self,
    Pointer arg, {
    @required Pointer detachedEvents,
    @required Pointer exceptionDates,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMasterEvent:detachedEvents:exceptionDates:"),
      arg,
      detachedEvents,
      exceptionDates,
    );
  }

  static Pointer masterEvent(
    Pointer<EKSeriesDetails> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("masterEvent"),
    );
  }

  static void setDetachedEvents(
    Pointer<EKSeriesDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDetachedEvents:"),
      arg,
    );
  }

  static void setExceptionDates(
    Pointer<EKSeriesDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExceptionDates:"),
      arg,
    );
  }

  static void setMasterEvent(
    Pointer<EKSeriesDetails> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMasterEvent:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSharee extends Struct<EKSharee> {
  factory EKSharee._() {
    throw UnimplementedError();
  }
  static Pointer<EKSharee> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSharee").cast<EKSharee>();
  }

  static Pointer ABPersonInAddressBook(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ABPersonInAddressBook:"),
      arg,
    );
  }

  static Pointer URL(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer accessLevel(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accessLevel"),
    );
  }

  static Pointer backingSharee(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingSharee"),
    );
  }

  static Pointer contactPredicate(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactPredicate"),
    );
  }

  static Pointer emailAddress(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static Pointer initWithName(
    Pointer<EKSharee> _self,
    Pointer arg, {
    @required Pointer url,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:url:"),
      arg,
      url,
    );
  }

  static Pointer initWithObject(
    Pointer<EKSharee> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static int isCurrentUserForScheduling(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForScheduling"),
    );
  }

  static int isCurrentUserForSharing(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUserForSharing"),
    );
  }

  static Pointer managedObjectID(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("managedObjectID"),
    );
  }

  static Pointer name(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer phoneNumber(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static void setAccessLevel(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccessLevel:"),
      arg,
    );
  }

  static void setManagedObjectID(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setManagedObjectID:"),
      arg,
    );
  }

  static void setName(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setShareeAccessLevel(
    Pointer<EKSharee> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setShareeAccessLevel:"),
      arg,
    );
  }

  static void setShareeStatus(
    Pointer<EKSharee> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setShareeStatus:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static void setURL(
    Pointer<EKSharee> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static int shareeAccessLevel(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("shareeAccessLevel"),
    );
  }

  static int shareeStatus(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("shareeStatus"),
    );
  }

  static Pointer status(
    Pointer<EKSharee> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSliceDescription extends Struct<EKSliceDescription> {
  factory EKSliceDescription._() {
    throw UnimplementedError();
  }
  static Pointer<EKSliceDescription> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSliceDescription").cast<EKSliceDescription>();
  }

  static Pointer copyWithZone(
    Pointer<EKSliceDescription> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<EKSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer originalEventToSliceOn(
    Pointer<EKSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalEventToSliceOn"),
    );
  }

  static Pointer originalMainSeriesDetails(
    Pointer<EKSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalMainSeriesDetails"),
    );
  }

  static void setOriginalEventToSliceOn(
    Pointer<EKSliceDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalEventToSliceOn:"),
      arg,
    );
  }

  static void setOriginalMainSeriesDetails(
    Pointer<EKSliceDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalMainSeriesDetails:"),
      arg,
    );
  }

  static Pointer sliceDate(
    Pointer<EKSliceDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sliceDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSource extends Struct<EKSource> {
  factory EKSource._() {
    throw UnimplementedError();
  }
  static Pointer<EKSource> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSource").cast<EKSource>();
  }

  static Pointer allCalendars(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allCalendars"),
    );
  }

  static Pointer allFrozenOrNewCalendars(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allFrozenOrNewCalendars"),
    );
  }

  static Pointer availabilityCache(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availabilityCache"),
    );
  }

  static Pointer backingSource(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingSource"),
    );
  }

  static Pointer calendars(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendars"),
    );
  }

  static Pointer calendarsForEntityType(
    Pointer<EKSource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("calendarsForEntityType:"),
      arg,
    );
  }

  static int changeDefaultSchedulingCalendar(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("changeDefaultSchedulingCalendar"),
    );
  }

  static Pointer copyWithZone(
    Pointer<EKSource> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer coreDataEntityName(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("coreDataEntityName"),
    );
  }

  static Pointer description(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int displayOrder(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrder"),
    );
  }

  static int displayOrderForNewCalendar(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("displayOrderForNewCalendar"),
    );
  }

  static Pointer dropBoxPathFromEvent(
    Pointer<EKSource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dropBoxPathFromEvent:"),
      arg,
    );
  }

  static Pointer dropBoxPathString(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dropBoxPathString"),
    );
  }

  static Pointer externalID(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalID"),
    );
  }

  static Pointer externalSourceIdentifier(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("externalSourceIdentifier"),
    );
  }

  static Pointer frozenOrNewCalendarsForEntityType(
    Pointer<EKSource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("frozenOrNewCalendarsForEntityType:"),
      arg,
    );
  }

  static int hasOwnerEmailAddress(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasOwnerEmailAddress"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKSource> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithTypeString(
    Pointer<EKSource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTypeString:"),
      arg,
    );
  }

  static int isDelegate(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDelegate"),
    );
  }

  static int isEnabled(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabled"),
    );
  }

  static int isEnabledForEvents(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForEvents"),
    );
  }

  static int isEnabledForReminders(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabledForReminders"),
    );
  }

  static int isFacebookSource(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFacebookSource"),
    );
  }

  static int isNestedLocalSource(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNestedLocalSource"),
    );
  }

  static int isWritable(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isWritable"),
    );
  }

  static Pointer ownerAddresses(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerAddresses"),
    );
  }

  static int preferUsingEventOrganizerEmailWhenComposingMail(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preferUsingEventOrganizerEmailWhenComposingMail"),
    );
  }

  static int prefersSuggestingNewTimeViaEmail(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("prefersSuggestingNewTimeViaEmail"),
    );
  }

  static Pointer providerIdentifier(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("providerIdentifier"),
    );
  }

  static void refetch(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("refetch"),
    );
  }

  static int removeWithSpan(
    Pointer<EKSource> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("removeWithSpan:error:"),
      arg,
      error,
    );
  }

  static int revert(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("revert"),
    );
  }

  static int saveWithSpan(
    Pointer<EKSource> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("saveWithSpan:error:"),
      arg,
      error,
    );
  }

  static Pointer serverURL(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverURL"),
    );
  }

  static void setEnabled(
    Pointer<EKSource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEnabled:"),
      arg,
    );
  }

  static void setExternalID(
    Pointer<EKSource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExternalID:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKSource> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static Pointer sharedCalendarInvitationsForEntityType(
    Pointer<EKSource> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("sharedCalendarInvitationsForEntityType:"),
      arg,
    );
  }

  static Pointer sourceError(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceError"),
    );
  }

  static Pointer sourceIdentifier(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceIdentifier"),
    );
  }

  static int sourceType(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("sourceType"),
    );
  }

  static int supportsAbsoluteAlarms(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsAbsoluteAlarms"),
    );
  }

  static int supportsAttendeeComments(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsAttendeeComments"),
    );
  }

  static int supportsAttendeeEventForwarding(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsAttendeeEventForwarding"),
    );
  }

  static int supportsCalendarCreation(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsCalendarCreation"),
    );
  }

  static int supportsCalendarItemsOverlappingInSameSeries(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsCalendarItemsOverlappingInSameSeries"),
    );
  }

  static int supportsCalendarItemsStartingOnSameDayInSameSeries(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsCalendarItemsStartingOnSameDayInSameSeries"),
    );
  }

  static int supportsDropBoxAttachments(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsDropBoxAttachments"),
    );
  }

  static int supportsDurationLongerThanRecurrenceInterval(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsDurationLongerThanRecurrenceInterval"),
    );
  }

  static int supportsEmailValidation(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEmailValidation"),
    );
  }

  static int supportsEventCalendarCreation(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsEventCalendarCreation"),
    );
  }

  static int supportsFloatingTimeZone(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsFloatingTimeZone"),
    );
  }

  static int supportsFreebusy(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsFreebusy"),
    );
  }

  static int supportsInvitationModificationsWithoutNotification(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsInvitationModificationsWithoutNotification"),
    );
  }

  static int supportsJunkReporting(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsJunkReporting"),
    );
  }

  static int supportsLikenessPropagation(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsLikenessPropagation"),
    );
  }

  static int supportsManagedAttachments(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsManagedAttachments"),
    );
  }

  static int supportsMultipleAlarms(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsMultipleAlarms"),
    );
  }

  static int supportsMultipleDaysInMonthlyRecurrence(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsMultipleDaysInMonthlyRecurrence"),
    );
  }

  static int supportsMultipleMonthsInYearlyRecurrence(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsMultipleMonthsInYearlyRecurrence"),
    );
  }

  static int supportsPhoneNumbers(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPhoneNumbers"),
    );
  }

  static int supportsPrivateEvents(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsPrivateEvents"),
    );
  }

  static int supportsReminderActions(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsReminderActions"),
    );
  }

  static int supportsReorderingDetachedEvents(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsReorderingDetachedEvents"),
    );
  }

  static int supportsSeriesStartingOnDateOutsideRecurrence(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsSeriesStartingOnDateOutsideRecurrence"),
    );
  }

  static int supportsSharingScheduling(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsSharingScheduling"),
    );
  }

  static int supportsSuggestingNewTime(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsSuggestingNewTime"),
    );
  }

  static int supportsTaskCalendarCreation(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsTaskCalendarCreation"),
    );
  }

  static int supportsURLs(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsURLs"),
    );
  }

  static int supportsUnbind(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsUnbind"),
    );
  }

  static int supportsYearlyRecurrenceWithArbitraryInterval(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsYearlyRecurrenceWithArbitraryInterval"),
    );
  }

  static Pointer symbolicColorForNewCalendar(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicColorForNewCalendar"),
    );
  }

  static Pointer title(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer typeString(
    Pointer<EKSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeString"),
    );
  }

  static int validate(
    Pointer<EKSource> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKStructuredLocation extends Struct<EKStructuredLocation> {
  factory EKStructuredLocation._() {
    throw UnimplementedError();
  }
  static Pointer<EKStructuredLocation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKStructuredLocation").cast<EKStructuredLocation>();
  }

  static Pointer abURLString(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abURLString"),
    );
  }

  static Pointer address(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("address"),
    );
  }

  static Pointer addressBookEntityID(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addressBookEntityID"),
    );
  }

  static Pointer backingLocation(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backingLocation"),
    );
  }

  static Pointer calLocation(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calLocation"),
    );
  }

  static Pointer description(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer geoLocation(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("geoLocation"),
    );
  }

  static Pointer geoURLString(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("geoURLString"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKStructuredLocation> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static int isEqualToLocation(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToLocation:"),
      arg,
    );
  }

  static int isStructured(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isStructured"),
    );
  }

  static Pointer mapKitHandle(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mapKitHandle"),
    );
  }

  static double radius(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("radius"),
    );
  }

  static Pointer radiusNumber(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("radiusNumber"),
    );
  }

  static Pointer routeType(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routeType"),
    );
  }

  static Pointer routing(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routing"),
    );
  }

  static void setAbURLString(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAbURLString:"),
      arg,
    );
  }

  static void setAddress(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddress:"),
      arg,
    );
  }

  static void setAddressBookEntityID(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddressBookEntityID:"),
      arg,
    );
  }

  static void setGeoLocation(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGeoLocation:"),
      arg,
    );
  }

  static void setGeoURLString(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGeoURLString:"),
      arg,
    );
  }

  static void setMapKitHandle(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMapKitHandle:"),
      arg,
    );
  }

  static void setRadius(
    Pointer<EKStructuredLocation> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRadius:"),
      arg,
    );
  }

  static void setRadiusNumber(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRadiusNumber:"),
      arg,
    );
  }

  static void setRouteType(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRouteType:"),
      arg,
    );
  }

  static void setRouting(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRouting:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static Pointer title(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static void updateFromMapItem(
    Pointer<EKStructuredLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateFromMapItem:"),
      arg,
    );
  }

  static Pointer uuid(
    Pointer<EKStructuredLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uuid"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSuggestedEventInfo extends Struct<EKSuggestedEventInfo> {
  factory EKSuggestedEventInfo._() {
    throw UnimplementedError();
  }
  static Pointer<EKSuggestedEventInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKSuggestedEventInfo").cast<EKSuggestedEventInfo>();
  }

  static int changedFields(
    Pointer<EKSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changedFields"),
    );
  }

  static Pointer initWithObject(
    Pointer<EKSuggestedEventInfo> _self,
    Pointer arg, {
    @required int createPartialBackingObject,
    @required int keepBackingObject,
    @required Pointer preFrozenRelationshipObjects,
    @required Pointer additionalFrozenProperties,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObject:createPartialBackingObject:keepBackingObject:preFrozenRelationshipObjects:additionalFrozenProperties:"),
      arg,
      createPartialBackingObject,
      keepBackingObject,
      preFrozenRelationshipObjects,
      additionalFrozenProperties,
    );
  }

  static Pointer initWithOpaqueKey(
    Pointer<EKSuggestedEventInfo> _self,
    Pointer arg, {
    @required Pointer uniqueKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOpaqueKey:uniqueKey:"),
      arg,
      uniqueKey,
    );
  }

  static Pointer opaqueKey(
    Pointer<EKSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("opaqueKey"),
    );
  }

  static void setChangedFields(
    Pointer<EKSuggestedEventInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setChangedFields:"),
      arg,
    );
  }

  static void setTimestamp(
    Pointer<EKSuggestedEventInfo> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimestamp:"),
      arg,
    );
  }

  static void setTimestampAsDate(
    Pointer<EKSuggestedEventInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimestampAsDate:"),
      arg,
    );
  }

  static double timestamp(
    Pointer<EKSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timestamp"),
    );
  }

  static Pointer timestampAsDate(
    Pointer<EKSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timestampAsDate"),
    );
  }

  static Pointer uniqueKey(
    Pointer<EKSuggestedEventInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueKey"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSuggestedEventPredicate extends Struct<EKSuggestedEventPredicate> {
  factory EKSuggestedEventPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<EKSuggestedEventPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSuggestedEventPredicate")
        .cast<EKSuggestedEventPredicate>();
  }

  static Pointer description(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer endDate(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static int evaluateWithObject(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg, {
    @required Pointer substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static int hash(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg, {
    @required Pointer endDate,
    @required Pointer opaqueKey,
    @required Pointer calendars,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:endDate:opaqueKey:calendars:"),
      arg,
      endDate,
      opaqueKey,
      calendars,
    );
  }

  static int isEqual(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer opaqueKey(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("opaqueKey"),
    );
  }

  static Pointer predicateForCoreData(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateForCoreData"),
    );
  }

  static Pointer predicateFormat(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void setEndDate(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndDate:"),
      arg,
    );
  }

  static void setOpaqueKey(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOpaqueKey:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<EKSuggestedEventPredicate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static Pointer startDate(
    Pointer<EKSuggestedEventPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKSyntheticGEORouteHypothesis
    extends Struct<EKSyntheticGEORouteHypothesis> {
  factory EKSyntheticGEORouteHypothesis._() {
    throw UnimplementedError();
  }
  static Pointer<EKSyntheticGEORouteHypothesis> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKSyntheticGEORouteHypothesis")
        .cast<EKSyntheticGEORouteHypothesis>();
  }

  static Pointer aggressiveDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("aggressiveDepartureDate"),
    );
  }

  static double aggressiveTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("aggressiveTravelTime"),
    );
  }

  static Pointer conservativeDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conservativeDepartureDate"),
    );
  }

  static double conservativeTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("conservativeTravelTime"),
    );
  }

  static int currentTrafficDensity(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("currentTrafficDensity"),
    );
  }

  static double estimatedTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("estimatedTravelTime"),
    );
  }

  static Pointer initWithStartDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg, {
    @required double conservativeTravelTime,
    @required double estimatedTravelTime,
    @required double aggressiveTravelTime,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_float64_returns_p(
      _self,
      _objc.getSelector(
          "initWithStartDate:conservativeTravelTime:estimatedTravelTime:aggressiveTravelTime:"),
      arg,
      conservativeTravelTime,
      estimatedTravelTime,
      aggressiveTravelTime,
    );
  }

  static Pointer routeName(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routeName"),
    );
  }

  static void setAggressiveDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAggressiveDepartureDate:"),
      arg,
    );
  }

  static void setAggressiveTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setAggressiveTravelTime:"),
      arg,
    );
  }

  static void setConservativeDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConservativeDepartureDate:"),
      arg,
    );
  }

  static void setConservativeTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setConservativeTravelTime:"),
      arg,
    );
  }

  static void setCurrentTrafficDensity(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCurrentTrafficDensity:"),
      arg,
    );
  }

  static void setEstimatedTravelTime(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setEstimatedTravelTime:"),
      arg,
    );
  }

  static void setRouteName(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRouteName:"),
      arg,
    );
  }

  static void setSuggestedDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestedDepartureDate:"),
      arg,
    );
  }

  static void setSupportsLiveTraffic(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsLiveTraffic:"),
      arg,
    );
  }

  static void setTrafficDensityDescription(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTrafficDensityDescription:"),
      arg,
    );
  }

  static void setTransportType(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setTransportType:"),
      arg,
    );
  }

  static void setTravelState(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setTravelState:"),
      arg,
    );
  }

  static Pointer suggestedDepartureDate(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedDepartureDate"),
    );
  }

  static int supportsLiveTraffic(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsLiveTraffic"),
    );
  }

  static Pointer trafficDensityDescription(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trafficDensityDescription"),
    );
  }

  static int transportType(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("transportType"),
    );
  }

  static int travelState(
    Pointer<EKSyntheticGEORouteHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("travelState"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKTempEventStoreFactory extends Struct<EKTempEventStoreFactory> {
  factory EKTempEventStoreFactory._() {
    throw UnimplementedError();
  }
  static Pointer<EKTempEventStoreFactory> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKTempEventStoreFactory")
        .cast<EKTempEventStoreFactory>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKTimedEventStorePurger extends Struct<EKTimedEventStorePurger> {
  factory EKTimedEventStorePurger._() {
    throw UnimplementedError();
  }
  static Pointer<EKTimedEventStorePurger> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKTimedEventStorePurger")
        .cast<EKTimedEventStorePurger>();
  }

  static Pointer acquireCachedEventStoreOrCreate(
    Pointer<EKTimedEventStorePurger> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("acquireCachedEventStoreOrCreate:"),
      arg,
    );
  }

  static Pointer callbackQueue(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("callbackQueue"),
    );
  }

  static Pointer creationBlock(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationBlock"),
    );
  }

  static void dealloc(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer internalCreationBlock(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalCreationBlock"),
    );
  }

  static int internalPurgingAllowed(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("internalPurgingAllowed"),
    );
  }

  static Pointer internalStore(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internalStore"),
    );
  }

  static double internalTimeout(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("internalTimeout"),
    );
  }

  static int purgingAllowed(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("purgingAllowed"),
    );
  }

  static void setCallbackQueue(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCallbackQueue:"),
      arg,
    );
  }

  static void setCreationBlock(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreationBlock:"),
      arg,
    );
  }

  static void setInternalCreationBlock(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalCreationBlock:"),
      arg,
    );
  }

  static void setInternalPurgingAllowed(
    Pointer<EKTimedEventStorePurger> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setInternalPurgingAllowed:"),
      arg,
    );
  }

  static void setInternalStore(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternalStore:"),
      arg,
    );
  }

  static void setInternalTimeout(
    Pointer<EKTimedEventStorePurger> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setInternalTimeout:"),
      arg,
    );
  }

  static void setPurgingAllowed(
    Pointer<EKTimedEventStorePurger> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPurgingAllowed:"),
      arg,
    );
  }

  static void setTimeout(
    Pointer<EKTimedEventStorePurger> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimeout:"),
      arg,
    );
  }

  static void setTimer(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimer:"),
      arg,
    );
  }

  static void setWorkQueue(
    Pointer<EKTimedEventStorePurger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWorkQueue:"),
      arg,
    );
  }

  static double timeout(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeout"),
    );
  }

  static Pointer timer(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timer"),
    );
  }

  static Pointer workQueue(
    Pointer<EKTimedEventStorePurger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("workQueue"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKTravelEngineHypothesis extends Struct<EKTravelEngineHypothesis> {
  factory EKTravelEngineHypothesis._() {
    throw UnimplementedError();
  }
  static Pointer<EKTravelEngineHypothesis> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKTravelEngineHypothesis")
        .cast<EKTravelEngineHypothesis>();
  }

  static Pointer aggressiveDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("aggressiveDepartureDate"),
    );
  }

  static double aggressiveTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("aggressiveTravelTime"),
    );
  }

  static Pointer conservativeDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conservativeDepartureDate"),
    );
  }

  static double conservativeTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("conservativeTravelTime"),
    );
  }

  static int currentTrafficDensity(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("currentTrafficDensity"),
    );
  }

  static Pointer description(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer effectiveDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("effectiveDepartureDate"),
    );
  }

  static double effectiveTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("effectiveTravelTime"),
    );
  }

  static void encodeWithCoder(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static double estimatedTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("estimatedTravelTime"),
    );
  }

  static Pointer init(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithEKGEORouteHypothesis(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEKGEORouteHypothesis:"),
      arg,
    );
  }

  static Pointer initWithGEORouteHypothesis(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithGEORouteHypothesis:"),
      arg,
    );
  }

  static Pointer initWithSyntheticGEORouteHypothesis(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSyntheticGEORouteHypothesis:"),
      arg,
    );
  }

  static Pointer routeName(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routeName"),
    );
  }

  static void setAggressiveDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAggressiveDepartureDate:"),
      arg,
    );
  }

  static void setAggressiveTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setAggressiveTravelTime:"),
      arg,
    );
  }

  static void setConservativeDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConservativeDepartureDate:"),
      arg,
    );
  }

  static void setConservativeTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setConservativeTravelTime:"),
      arg,
    );
  }

  static void setCurrentTrafficDensity(
    Pointer<EKTravelEngineHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCurrentTrafficDensity:"),
      arg,
    );
  }

  static void setEstimatedTravelTime(
    Pointer<EKTravelEngineHypothesis> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setEstimatedTravelTime:"),
      arg,
    );
  }

  static void setRouteName(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRouteName:"),
      arg,
    );
  }

  static void setSuggestedDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestedDepartureDate:"),
      arg,
    );
  }

  static void setSupportsLiveTraffic(
    Pointer<EKTravelEngineHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsLiveTraffic:"),
      arg,
    );
  }

  static void setTrafficDensityDescription(
    Pointer<EKTravelEngineHypothesis> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTrafficDensityDescription:"),
      arg,
    );
  }

  static void setTransportType(
    Pointer<EKTravelEngineHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setTransportType:"),
      arg,
    );
  }

  static void setTravelState(
    Pointer<EKTravelEngineHypothesis> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setTravelState:"),
      arg,
    );
  }

  static Pointer suggestedDepartureDate(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedDepartureDate"),
    );
  }

  static int supportsLiveTraffic(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsLiveTraffic"),
    );
  }

  static Pointer trafficDensityDescription(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trafficDensityDescription"),
    );
  }

  static int transportType(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("transportType"),
    );
  }

  static int travelState(
    Pointer<EKTravelEngineHypothesis> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("travelState"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKTravelEngineUtilities extends Struct<EKTravelEngineUtilities> {
  factory EKTravelEngineUtilities._() {
    throw UnimplementedError();
  }
  static Pointer<EKTravelEngineUtilities> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKTravelEngineUtilities")
        .cast<EKTravelEngineUtilities>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUncompleteRecurringReminderOperation
    extends Struct<EKUncompleteRecurringReminderOperation> {
  factory EKUncompleteRecurringReminderOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKUncompleteRecurringReminderOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKUncompleteRecurringReminderOperation")
        .cast<EKUncompleteRecurringReminderOperation>();
  }

  static Pointer previouslyCompletedRecurringReminder(
    Pointer<EKUncompleteRecurringReminderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previouslyCompletedRecurringReminder"),
    );
  }

  static void setPreviouslyCompletedRecurringReminder(
    Pointer<EKUncompleteRecurringReminderOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviouslyCompletedRecurringReminder:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUndeleteFutureOperation extends Struct<EKUndeleteFutureOperation> {
  factory EKUndeleteFutureOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKUndeleteFutureOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("EKUndeleteFutureOperation")
        .cast<EKUndeleteFutureOperation>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUndoManager extends Struct<EKUndoManager> {
  factory EKUndoManager._() {
    throw UnimplementedError();
  }
  static Pointer<EKUndoManager> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKUndoManager").cast<EKUndoManager>();
  }

  static void clearUndoOperations(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearUndoOperations"),
    );
  }

  static Pointer commitDelegate(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commitDelegate"),
    );
  }

  static Pointer decisionDelegate(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decisionDelegate"),
    );
  }

  static int disableUndoForOrganizerScheduling(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("disableUndoForOrganizerScheduling"),
    );
  }

  static void handleUndoForOperation(
    Pointer<EKUndoManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleUndoForOperation:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer lastError(
    Pointer<EKUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastError"),
    );
  }

  static void setCommitDelegate(
    Pointer<EKUndoManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCommitDelegate:"),
      arg,
    );
  }

  static void setDecisionDelegate(
    Pointer<EKUndoManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDecisionDelegate:"),
      arg,
    );
  }

  static void setDisableUndoForOrganizerScheduling(
    Pointer<EKUndoManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDisableUndoForOrganizerScheduling:"),
      arg,
    );
  }

  static void setLastError(
    Pointer<EKUndoManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastError:"),
      arg,
    );
  }

  static void undoOperation(
    Pointer<EKUndoManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("undoOperation:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUndoSliceOutcome extends Struct<EKUndoSliceOutcome> {
  factory EKUndoSliceOutcome._() {
    throw UnimplementedError();
  }
  static Pointer<EKUndoSliceOutcome> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKUndoSliceOutcome").cast<EKUndoSliceOutcome>();
  }

  static Pointer copyWithZone(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer createdSeriesDetails(
    Pointer<EKUndoSliceOutcome> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createdSeriesDetails"),
    );
  }

  static Pointer initResliceFromOutcome(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initResliceFromOutcome:"),
      arg,
    );
  }

  static Pointer initWithOriginalPostSliceDescription(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOriginalPostSliceDescription:"),
      arg,
    );
  }

  static Pointer mainSeriesDetails(
    Pointer<EKUndoSliceOutcome> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mainSeriesDetails"),
    );
  }

  static Pointer masterToDelete(
    Pointer<EKUndoSliceOutcome> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("masterToDelete"),
    );
  }

  static Pointer originalPostSliceDescription(
    Pointer<EKUndoSliceOutcome> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalPostSliceDescription"),
    );
  }

  static void setCreatedSeriesDetails(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatedSeriesDetails:"),
      arg,
    );
  }

  static void setMainSeriesDetails(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMainSeriesDetails:"),
      arg,
    );
  }

  static void setMasterToDelete(
    Pointer<EKUndoSliceOutcome> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMasterToDelete:"),
      arg,
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUndoableOperation extends Struct<EKUndoableOperation> {
  factory EKUndoableOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKUndoableOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKUndoableOperation").cast<EKUndoableOperation>();
  }

  static Pointer actionName(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("actionName"),
    );
  }

  static Pointer error(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static int execute(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("execute"),
    );
  }

  static Pointer initWithObjects(
    Pointer<EKUndoableOperation> _self,
    Pointer arg, {
    @required int span,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:span:"),
      arg,
      span,
    );
  }

  static Pointer inverseOperation(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inverseOperation"),
    );
  }

  static Pointer objects(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objects"),
    );
  }

  static Pointer originalObjects(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalObjects"),
    );
  }

  static Pointer originalSliceDescriptions(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalSliceDescriptions"),
    );
  }

  static Pointer precomputedActionName(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("precomputedActionName"),
    );
  }

  static Pointer precomputedInverseOperation(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("precomputedInverseOperation"),
    );
  }

  static void setError(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setObjects(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjects:"),
      arg,
    );
  }

  static void setOriginalObjects(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalObjects:"),
      arg,
    );
  }

  static void setOriginalSliceDescriptions(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalSliceDescriptions:"),
      arg,
    );
  }

  static void setPrecomputedActionName(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrecomputedActionName:"),
      arg,
    );
  }

  static void setPrecomputedInverseOperation(
    Pointer<EKUndoableOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrecomputedInverseOperation:"),
      arg,
    );
  }

  static void setSpan(
    Pointer<EKUndoableOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSpan:"),
      arg,
    );
  }

  static int span(
    Pointer<EKUndoableOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("span"),
    );
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUnrevertOperation extends Struct<EKUnrevertOperation> {
  factory EKUnrevertOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKUnrevertOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKUnrevertOperation").cast<EKUnrevertOperation>();
  }
}

/// Automatically generated API. Part of [EventKit](https://developer.apple.com/documentation/cloudkit?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
@unsized
class EKUnsliceOperation extends Struct<EKUnsliceOperation> {
  factory EKUnsliceOperation._() {
    throw UnimplementedError();
  }
  static Pointer<EKUnsliceOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("EKUnsliceOperation").cast<EKUnsliceOperation>();
  }

  static Pointer originalObjects(
    Pointer<EKUnsliceOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalObjects"),
    );
  }
}

final _call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p_C,
        _call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int32 arg,
    Uint64 options,
    Pointer sourceFilters,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore,
    Pointer andBackingStore);
typedef _call_objc_p_p_Int32_Uint64_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int options,
    Pointer sourceFilters,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore,
    Pointer andBackingStore);

final _call_objc_p_p_Int32_Uint64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Uint64_p_p_returns_p_C,
        _call_objc_p_p_Int32_Uint64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Uint64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int32 arg,
    Uint64 options,
    Pointer sourceFilters,
    Pointer asyncWithCompletion);
typedef _call_objc_p_p_Int32_Uint64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int options,
    Pointer sourceFilters,
    Pointer asyncWithCompletion);

final _call_objc_p_p_Int32_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Uint64_returns_p_C,
        _call_objc_p_p_Int32_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Uint64 options);
typedef _call_objc_p_p_Int32_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int options);

final _call_objc_p_p_Int32_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_p_returns_p_C,
    _call_objc_p_p_Int32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Pointer sourceFilters);
typedef _call_objc_p_p_Int32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer sourceFilters);

final _call_objc_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_p_C,
    _call_objc_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_void_C,
    _call_objc_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p_C,
            _call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int64 arg,
    Int64 interval,
    Pointer daysOfTheWeek,
    Pointer daysOfTheMonth,
    Pointer monthsOfTheYear,
    Pointer weeksOfTheYear,
    Pointer daysOfTheYear,
    Pointer setPositions,
    Pointer end);
typedef _call_objc_p_p_Int64_Int64_p_p_p_p_p_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int interval,
        Pointer daysOfTheWeek,
        Pointer daysOfTheMonth,
        Pointer monthsOfTheYear,
        Pointer weeksOfTheYear,
        Pointer daysOfTheYear,
        Pointer setPositions,
        Pointer end);

final _call_objc_p_p_Int64_Int64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_Int64_p_returns_p_C,
        _call_objc_p_p_Int64_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Int64 interval, Pointer end);
typedef _call_objc_p_p_Int64_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int interval, Pointer end);

final _call_objc_p_p_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_Int64_returns_p_C,
        _call_objc_p_p_Int64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Int64 weekNumber);
typedef _call_objc_p_p_Int64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int weekNumber);

final _call_objc_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer error);
typedef _call_objc_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer error);

final _call_objc_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer forAction);
typedef _call_objc_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forAction);

final _call_objc_p_p_Int64_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_Int8_C,
    _call_objc_p_p_Int64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_p_C,
    _call_objc_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_void_C,
    _call_objc_p_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void_C,
            _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void_C
    = Void Function(
        Pointer _arg0,
        Pointer _arg1,
        Int8 arg,
        Int8 changedCalendars,
        Int8 changedEvents,
        Int8 changedSuggestedEvents,
        Int8 changedReminders,
        Int8 changedNotifications,
        Pointer sourceIdentifiers,
        Pointer calendarIdentifiers,
        Pointer eventIdentifiers,
        Pointer reminderIdentifiers,
        Pointer otherChanges);
typedef _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_p_p_p_p_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int changedCalendars,
        int changedEvents,
        int changedSuggestedEvents,
        int changedReminders,
        int changedNotifications,
        Pointer sourceIdentifiers,
        Pointer calendarIdentifiers,
        Pointer eventIdentifiers,
        Pointer reminderIdentifiers,
        Pointer otherChanges);

final _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void_C,
            _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void_C
    = Void Function(
        Pointer _arg0,
        Pointer _arg1,
        Int8 arg,
        Int8 changedCalendars,
        Int8 changedEvents,
        Int8 changedSuggestedEvents,
        Int8 changedReminders,
        Int8 changedNotifications,
        Pointer otherChanges);
typedef _call_objc_p_p_Int8_Int8_Int8_Int8_Int8_Int8_p_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int changedCalendars,
        int changedEvents,
        int changedSuggestedEvents,
        int changedReminders,
        int changedNotifications,
        Pointer otherChanges);

final _call_objc_p_p_Int8_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_Int8_returns_p_C,
    _call_objc_p_p_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Int8 allowReminders);
typedef _call_objc_p_p_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int allowReminders);

final _call_objc_p_p_Int8_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Int8_returns_void_C,
        _call_objc_p_p_Int8_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Int8 shouldSave);
typedef _call_objc_p_p_Int8_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int shouldSave);

final _call_objc_p_p_Int8_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Uint64_p_returns_p_C,
        _call_objc_p_p_Int8_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Uint64 maxResults,
    Pointer withCalendarIdentifiers);
typedef _call_objc_p_p_Int8_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int maxResults,
    Pointer withCalendarIdentifiers);

final _call_objc_p_p_Int8_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Uint64_returns_p_C,
        _call_objc_p_p_Int8_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Uint64 maxResults);
typedef _call_objc_p_p_Int8_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int maxResults);

final _call_objc_p_p_Int8_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_Uint64_C,
    _call_objc_p_p_Int8_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_p_C,
    _call_objc_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_void_C,
    _call_objc_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int8_returns_p_C,
        _call_objc_p_p_Uint64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int8 includingPast);
typedef _call_objc_p_p_Uint64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int includingPast);

final _call_objc_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_p_returns_p_C,
    _call_objc_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer calendars);
typedef _call_objc_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer calendars);

final _call_objc_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer completion);
typedef _call_objc_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer completion);

final _call_objc_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_Int8_C,
    _call_objc_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_p_C,
    _call_objc_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_void_C,
    _call_objc_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_float64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_float64_returns_p_C,
    _call_objc_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_void_C,
        _call_objc_p_p_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_p_Int32_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int32_Int32_returns_void_C,
        _call_objc_p_p_p_Int32_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int32_Int32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int32 withOpenOptions,
    Int32 inView);
typedef _call_objc_p_p_p_Int32_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withOpenOptions, int inView);

final _call_objc_p_p_p_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int32_returns_void_C,
        _call_objc_p_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int32 withOpenOptions);
typedef _call_objc_p_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withOpenOptions);

final _call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 withStatus,
    Int8 notifyOrganizer,
    Int8 commit,
    Pointer error);
typedef _call_objc_p_p_p_Int64_Int8_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withStatus,
    int notifyOrganizer,
    int commit,
    Pointer error);

final _call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 withStatus,
    Int8 notifyOrganizer,
    Pointer placingInCalendar,
    Int8 commit,
    Pointer error);
typedef _call_objc_p_p_p_Int64_Int8_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withStatus,
    int notifyOrganizer,
    Pointer placingInCalendar,
    int commit,
    Pointer error);

final _call_objc_p_p_p_Int64_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 span,
    Int8 commit,
    Pointer error);
typedef _call_objc_p_p_p_Int64_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int span,
    int commit,
    Pointer error);

final _call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 withStatus,
    Pointer exceptForDates,
    Int8 notifyOrganizer,
    Pointer placingInCalendar,
    Pointer error);
typedef _call_objc_p_p_p_Int64_p_Int8_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withStatus,
    Pointer exceptForDates,
    int notifyOrganizer,
    Pointer placingInCalendar,
    Pointer error);

final _call_objc_p_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 span, Pointer error);
typedef _call_objc_p_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int span, Pointer error);

final _call_objc_p_p_p_Int64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int64_p_returns_p_C,
    _call_objc_p_p_p_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 sourceType,
    Pointer additionalSourceProperties);
typedef _call_objc_p_p_p_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int sourceType,
    Pointer additionalSourceProperties);

final _call_objc_p_p_p_Int64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_returns_Int8_C,
        _call_objc_p_p_p_Int64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 exclusionOptions);
typedef _call_objc_p_p_p_Int64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int exclusionOptions);

final _call_objc_p_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int64_returns_p_C,
    _call_objc_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 span);
typedef _call_objc_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int span);

final _call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void_C,
        _call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 synchronous,
    Int8 processEvents,
    Int8 processReminders,
    Pointer progressBlock,
    Pointer finishBlock);
typedef _call_objc_p_p_p_Int8_Int8_Int8_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int synchronous,
    int processEvents,
    int processReminders,
    Pointer progressBlock,
    Pointer finishBlock);

final _call_objc_p_p_p_Int8_Int8_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_p_p_returns_p_C,
        _call_objc_p_p_p_Int8_Int8_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 createPartialBackingObject,
    Int8 keepBackingObject,
    Pointer preFrozenRelationshipObjects,
    Pointer additionalFrozenProperties);
typedef _call_objc_p_p_p_Int8_Int8_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int createPartialBackingObject,
    int keepBackingObject,
    Pointer preFrozenRelationshipObjects,
    Pointer additionalFrozenProperties);

final _call_objc_p_p_p_Int8_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_p_returns_p_C,
        _call_objc_p_p_p_Int8_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 createPartialBackingObject,
    Int8 keepBackingObject,
    Pointer preFrozenRelationshipObjects);
typedef _call_objc_p_p_p_Int8_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int createPartialBackingObject,
    int keepBackingObject,
    Pointer preFrozenRelationshipObjects);

final _call_objc_p_p_p_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_returns_p_C,
        _call_objc_p_p_p_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 createPartialBackingObject,
    Int8 keepBackingObject);
typedef _call_objc_p_p_p_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int createPartialBackingObject,
    int keepBackingObject);

final _call_objc_p_p_p_Int8_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_p_returns_void_C,
        _call_objc_p_p_p_Int8_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 synchronous,
    Pointer progressBlock,
    Pointer finishBlock);
typedef _call_objc_p_p_p_Int8_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int synchronous,
    Pointer progressBlock,
    Pointer finishBlock);

final _call_objc_p_p_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 commit, Pointer error);
typedef _call_objc_p_p_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int commit, Pointer error);

final _call_objc_p_p_p_Int8_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_p_returns_p_C,
    _call_objc_p_p_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 sharedSchedulingSupported,
    Pointer additionalEventProperties);
typedef _call_objc_p_p_p_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int sharedSchedulingSupported,
    Pointer additionalEventProperties);

final _call_objc_p_p_p_Int8_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_returns_Int64_C,
        _call_objc_p_p_p_Int8_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 includePast);
typedef _call_objc_p_p_p_Int8_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int includePast);

final _call_objc_p_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_Int8_C,
    _call_objc_p_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 commit);
typedef _call_objc_p_p_p_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int commit);

final _call_objc_p_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_p_C,
    _call_objc_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 sharedSchedulingSupported);
typedef _call_objc_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int sharedSchedulingSupported);

final _call_objc_p_p_p_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_void_C,
    _call_objc_p_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 preserveConferenceRooms);
typedef _call_objc_p_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int preserveConferenceRooms);

final _call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Int8 accessRequestedForEvents,
    Int8 accessRequestedForReminders,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore);
typedef _call_objc_p_p_p_Uint64_Int8_Int8_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    int accessRequestedForEvents,
    int accessRequestedForReminders,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore);

final _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p_C,
        _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Int8 accessRequestedForEvents,
    Int8 accessRequestedForReminders,
    Pointer asyncWithCompletion);
typedef _call_objc_p_p_p_Uint64_Int8_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    int accessRequestedForEvents,
    int accessRequestedForReminders,
    Pointer asyncWithCompletion);

final _call_objc_p_p_p_Uint64_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Uint64_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 withStatus,
    Int8 commit,
    Pointer error);
typedef _call_objc_p_p_p_Uint64_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withStatus,
    int commit,
    Pointer error);

final _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void_C,
            _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void_C
    = Void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 insertOptions,
        Uint64 updateOptions,
        Int8 synchronous,
        Int8 processEvents,
        Int8 processReminders,
        Pointer progressBlock,
        Pointer finishBlock);
typedef _call_objc_p_p_p_Uint64_Uint64_Int8_Int8_Int8_p_p_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int insertOptions,
        int updateOptions,
        int synchronous,
        int processEvents,
        int processReminders,
        Pointer progressBlock,
        Pointer finishBlock);

final _call_objc_p_p_p_Uint64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore);
typedef _call_objc_p_p_p_Uint64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer asyncWithCompletion,
    Pointer orWithExistingStore);

final _call_objc_p_p_p_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_Int8_C,
        _call_objc_p_p_p_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Uint64 withStatus, Pointer error);
typedef _call_objc_p_p_p_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withStatus, Pointer error);

final _call_objc_p_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Uint64 options, Pointer asyncWithCompletion);
typedef _call_objc_p_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer asyncWithCompletion);

final _call_objc_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Uint64_returns_p_C,
    _call_objc_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 type);
typedef _call_objc_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int type);

final _call_objc_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 withModificationType);
typedef _call_objc_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withModificationType);

final _call_objc_p_p_p_float64_float64_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float64_float64_returns_p_C,
            _call_objc_p_p_p_float64_float64_float64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_float64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float conservativeTravelTime,
    Float estimatedTravelTime,
    Float aggressiveTravelTime);
typedef _call_objc_p_p_p_float64_float64_float64_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        double conservativeTravelTime,
        double estimatedTravelTime,
        double aggressiveTravelTime);

final _call_objc_p_p_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_Int32_returns_p_C,
    _call_objc_p_p_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int32_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer calendars, Int32 sortOrder);
typedef _call_objc_p_p_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer calendars,
    int sortOrder);

final _call_objc_p_p_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer fromCalendar,
    Int64 allowedRequirements,
    Pointer error);
typedef _call_objc_p_p_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer fromCalendar,
    int allowedRequirements,
    Pointer error);

final _call_objc_p_p_p_p_Int64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_p_returns_p_C,
        _call_objc_p_p_p_p_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toCalendar,
    Int64 withOptions,
    Pointer error);
typedef _call_objc_p_p_p_p_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toCalendar,
    int withOptions,
    Pointer error);

final _call_objc_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_Int64_returns_p_C,
    _call_objc_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer inRange, Int64 exclusionOptions);
typedef _call_objc_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer inRange,
    int exclusionOptions);

final _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p_C,
            _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer listTitle,
        Int8 limitToCompletedOrIncomplete,
        Int8 completed,
        Pointer dueAfter,
        Pointer dueBefore,
        Pointer searchTerm,
        Int32 sortOrder,
        Uint64 maxResults,
        Int8 hasContactIdentifier,
        Pointer contactIdentifier);
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_Int8_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer listTitle,
        int limitToCompletedOrIncomplete,
        int completed,
        Pointer dueAfter,
        Pointer dueBefore,
        Pointer searchTerm,
        int sortOrder,
        int maxResults,
        int hasContactIdentifier,
        Pointer contactIdentifier);

final _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p_C,
            _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer listTitle,
        Int8 limitToCompletedOrIncomplete,
        Int8 completed,
        Pointer dueAfter,
        Pointer dueBefore,
        Pointer searchTerm,
        Int32 sortOrder,
        Uint64 maxResults);
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_Uint64_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer listTitle,
        int limitToCompletedOrIncomplete,
        int completed,
        Pointer dueAfter,
        Pointer dueBefore,
        Pointer searchTerm,
        int sortOrder,
        int maxResults);

final _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p_C,
            _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer listTitle,
    Int8 limitToCompletedOrIncomplete,
    Int8 completed,
    Pointer dueAfter,
    Pointer dueBefore,
    Pointer searchTerm,
    Int32 sortOrder);
typedef _call_objc_p_p_p_p_Int8_Int8_p_p_p_Int32_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer listTitle,
        int limitToCompletedOrIncomplete,
        int completed,
        Pointer dueAfter,
        Pointer dueBefore,
        Pointer searchTerm,
        int sortOrder);

final _call_objc_p_p_p_p_Int8_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_Int8_returns_void_C,
        _call_objc_p_p_p_p_Int8_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer cancelCallback,
    Int8 synchronous,
    Int8 batchCompletion);
typedef _call_objc_p_p_p_p_Int8_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer cancelCallback,
    int synchronous,
    int batchCompletion);

final _call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer exceptForDates,
    Int8 notifyOrganizer,
    Pointer placingInCalendar,
    Int8 commit,
    Pointer error);
typedef _call_objc_p_p_p_p_Int8_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer exceptForDates,
    int notifyOrganizer,
    Pointer placingInCalendar,
    int commit,
    Pointer error);

final _call_objc_p_p_p_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer comparingKeys,
    Int8 compareImmutableKeys,
    Pointer ignoringProperties);
typedef _call_objc_p_p_p_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer comparingKeys,
    int compareImmutableKeys,
    Pointer ignoringProperties);

final _call_objc_p_p_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_returns_Int8_C,
        _call_objc_p_p_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer normalRange, Int8 checkProposed);
typedef _call_objc_p_p_p_p_Int8_returns_Int8_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer normalRange, int checkProposed);

final _call_objc_p_p_p_p_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_returns_void_C,
        _call_objc_p_p_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withIdentifier, Int8 appliesToSeries);
typedef _call_objc_p_p_p_p_Int8_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withIdentifier, int appliesToSeries);

final _call_objc_p_p_p_p_p_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int64_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_Int64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer calendarIdentifiers,
    Int64 prefetchHint,
    Int64 exclusionOptions);
typedef _call_objc_p_p_p_p_p_Int64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer calendarIdentifiers,
    int prefetchHint,
    int exclusionOptions);

final _call_objc_p_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer calendarIdentifiers,
    Int64 prefetchHint);
typedef _call_objc_p_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer calendarIdentifiers,
    int prefetchHint);

final _call_objc_p_p_p_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_returns_Int8_C,
        _call_objc_p_p_p_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withManagedObject,
    Pointer toAddedEvents,
    Int8 alwaysAddObjectsToCache);
typedef _call_objc_p_p_p_p_p_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withManagedObject,
    Pointer toAddedEvents,
    int alwaysAddObjectsToCache);

final _call_objc_p_p_p_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer conflictingEvents,
    Pointer needsActionEvents,
    Uint64 totalOccurrencesInSeries,
    Pointer conflictPeriodForSeries);
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer conflictingEvents,
    Pointer needsActionEvents,
    int totalOccurrencesInSeries,
    Pointer conflictPeriodForSeries);

final _call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p_C,
            _call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    Int64 prefetchHint,
    Int64 exclusionOptions,
    Int64 faultingOption);
typedef _call_objc_p_p_p_p_p_p_Int64_Int64_Int64_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer endDate,
        Pointer timeZone,
        Pointer calendars,
        int prefetchHint,
        int exclusionOptions,
        int faultingOption);

final _call_objc_p_p_p_p_p_p_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_Int64_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_p_Int64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    Int64 prefetchHint,
    Int64 exclusionOptions);
typedef _call_objc_p_p_p_p_p_p_Int64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    int prefetchHint,
    int exclusionOptions);

final _call_objc_p_p_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    Int64 prefetchHint);
typedef _call_objc_p_p_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    int prefetchHint);

final _call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    Pointer calendarIdentifiers,
    Int64 prefetchHint,
    Int64 exclusionOptions);
typedef _call_objc_p_p_p_p_p_p_p_Int64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer calendars,
    Pointer calendarIdentifiers,
    int prefetchHint,
    int exclusionOptions);

final _call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Pointer email,
    Pointer phoneNumber,
    Pointer encodedLikenessData,
    Int8 isCurrentUserForScheduling,
    Int8 isCurrentUserForSharing);
typedef _call_objc_p_p_p_p_p_p_p_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Pointer email,
    Pointer phoneNumber,
    Pointer encodedLikenessData,
    int isCurrentUserForScheduling,
    int isCurrentUserForSharing);

final _call_objc_p_p_p_p_p_p_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_Int8_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Pointer emailAddress,
    Pointer phoneNumber,
    Pointer encodedLikenessData,
    Int8 isCurrentUserForScheduling);
typedef _call_objc_p_p_p_p_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Pointer emailAddress,
    Pointer phoneNumber,
    Pointer encodedLikenessData,
    int isCurrentUserForScheduling);

final _call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Pointer emailAddress,
    Pointer phoneNumber,
    Pointer role,
    Pointer status,
    Int32 type,
    Pointer encodedLikenessData,
    Int8 isCurrentUser);
typedef _call_objc_p_p_p_p_p_p_p_p_Int32_p_Int8_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer url,
        Pointer emailAddress,
        Pointer phoneNumber,
        Pointer role,
        Pointer status,
        int type,
        Pointer encodedLikenessData,
        int isCurrentUser);

final _call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer title,
    Pointer location,
    Pointer notes,
    Int64 limit,
    Pointer calendars,
    Pointer participants);
typedef _call_objc_p_p_p_p_p_p_p_p_Int64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer timeZone,
    Pointer title,
    Pointer location,
    Pointer notes,
    int limit,
    Pointer calendars,
    Pointer participants);

final _call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer startDate,
    Pointer endDate,
    Pointer title,
    Pointer location,
    Pointer notes,
    Pointer participants,
    Pointer calendars,
    Int64 limit);
typedef _call_objc_p_p_p_p_p_p_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer startDate,
    Pointer endDate,
    Pointer title,
    Pointer location,
    Pointer notes,
    Pointer participants,
    Pointer calendars,
    int limit);

final _call_objc_p_p_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_p_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer queue,
    Pointer lookupCachedBlock,
    Pointer calendarsBlock,
    Pointer fetchBlock,
    Pointer updateBlock,
    Pointer fetchedMasters);
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer queue,
    Pointer lookupCachedBlock,
    Pointer calendarsBlock,
    Pointer fetchBlock,
    Pointer updateBlock,
    Pointer fetchedMasters);

final _call_objc_p_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer startDate,
    Pointer endDate,
    Pointer ignoredEventID,
    Pointer addresses,
    Pointer resultsBlock);
typedef _call_objc_p_p_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer startDate,
    Pointer endDate,
    Pointer ignoredEventID,
    Pointer addresses,
    Pointer resultsBlock);

final _call_objc_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer location,
    Pointer notes,
    Pointer participantNames,
    Pointer calendars);
typedef _call_objc_p_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer location,
    Pointer notes,
    Pointer participantNames,
    Pointer calendars);

final _call_objc_p_p_p_p_p_p_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_returns_Int64_C,
        _call_objc_p_p_p_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer shouldHandleInaccessibleFault,
    Pointer forObjectID,
    Pointer andTrigger);
typedef _call_objc_p_p_p_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer shouldHandleInaccessibleFault,
    Pointer forObjectID,
    Pointer andTrigger);

final _call_objc_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer opaqueKey,
    Pointer calendars);
typedef _call_objc_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer endDate,
    Pointer opaqueKey,
    Pointer calendars);

final _call_objc_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andExceptions,
    Pointer toSeries,
    Pointer afterDate);
typedef _call_objc_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andExceptions,
    Pointer toSeries,
    Pointer afterDate);

final _call_objc_p_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer fromCalendar, Pointer error);
typedef _call_objc_p_p_p_p_p_returns_Int8_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer fromCalendar, Pointer error);

final _call_objc_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer detachedEvents, Pointer exceptionDates);
typedef _call_objc_p_p_p_p_p_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer detachedEvents, Pointer exceptionDates);

final _call_objc_p_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer toSeries, Pointer sliceDate);
typedef _call_objc_p_p_p_p_p_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer toSeries, Pointer sliceDate);

final _call_objc_p_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer toCalendar);
typedef _call_objc_p_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer toCalendar);

final _call_objc_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer substitutionVariables);
typedef _call_objc_p_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer substitutionVariables);

final _call_objc_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer uniqueKey);
typedef _call_objc_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer uniqueKey);

final _call_objc_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer usedSelectedText);
typedef _call_objc_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer usedSelectedText);

final _call_objc_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Uint64_C,
    _call_objc_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_p_C,
    _call_objc_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_void_C,
    _call_objc_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int32_C,
    _call_objc_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int64_C,
    _call_objc_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int8_C,
    _call_objc_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint64_C,
    _call_objc_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_float64_C,
    _call_objc_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_returns_p_C, _call_objc_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_void_C,
    _call_objc_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1);
