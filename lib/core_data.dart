// AUTOMATICALLY GENERATED. DO NOT EDIT.

/// Automatically generated API for [Core Data](https://developer.apple.com/documentation/coredata?language=objc).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
library cupertino_ffi.foundation;

import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';
import 'package:cupertino_ffi/objective_c.dart' as _objc;
export 'package:cupertino_ffi/core_foundation.dart'
    show arcPush, arcPop, arcReturn, arcFieldGet, arcFieldSet;

bool _isDynamicLibraryOpened = false;

/// Ensures that the Objective-C library has been loaded.
void _openDynamicLibrary() {
  if (!_isDynamicLibraryOpened) {
    _isDynamicLibraryOpened = true;
    DynamicLibrary.open(
        "/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData");
  }
}

@unsized
class NSAsynchronousFetchRequest extends Struct<NSAsynchronousFetchRequest> {
  factory NSAsynchronousFetchRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSAsynchronousFetchRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAsynchronousFetchRequest")
        .cast<NSAsynchronousFetchRequest>();
  }

  static Pointer completionBlock(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("completionBlock"),
    );
  }

  static void dealloc(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int estimatedResultCount(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("estimatedResultCount"),
    );
  }

  static Pointer fetchRequest(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static Pointer initWithFetchRequest(
    Pointer<NSAsynchronousFetchRequest> _self,
    Pointer arg, {
    @required Pointer completionBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchRequest:completionBlock:"),
      arg,
      completionBlock,
    );
  }

  static int requestType(
    Pointer<NSAsynchronousFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static void setEstimatedResultCount(
    Pointer<NSAsynchronousFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setEstimatedResultCount:"),
      arg,
    );
  }
}

@unsized
class NSAsynchronousFetchResult extends Struct<NSAsynchronousFetchResult> {
  factory NSAsynchronousFetchResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSAsynchronousFetchResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAsynchronousFetchResult")
        .cast<NSAsynchronousFetchResult>();
  }

  static void dealloc(
    Pointer<NSAsynchronousFetchResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer fetchRequest(
    Pointer<NSAsynchronousFetchResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static Pointer finalResult(
    Pointer<NSAsynchronousFetchResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finalResult"),
    );
  }

  static Pointer initForFetchRequest(
    Pointer<NSAsynchronousFetchResult> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer andProgress,
    @required Pointer completetionBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initForFetchRequest:withContext:andProgress:completetionBlock:"),
      arg,
      withContext,
      andProgress,
      completetionBlock,
    );
  }

  static Pointer intermediateResultCallback(
    Pointer<NSAsynchronousFetchResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("intermediateResultCallback"),
    );
  }

  static void setFinalResult(
    Pointer<NSAsynchronousFetchResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFinalResult:"),
      arg,
    );
  }

  static void setIntermediateResultCallback(
    Pointer<NSAsynchronousFetchResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIntermediateResultCallback:"),
      arg,
    );
  }
}

@unsized
class NSAtomicStore extends Struct<NSAtomicStore> {
  factory NSAtomicStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSAtomicStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAtomicStore").cast<NSAtomicStore>();
  }

  static void addCacheNodes(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addCacheNodes:"),
      arg,
    );
  }

  static Pointer cacheNodeForObjectID(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheNodeForObjectID:"),
      arg,
    );
  }

  static Pointer cacheNodes(
    Pointer<NSAtomicStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheNodes"),
    );
  }

  static void dealloc(
    Pointer<NSAtomicStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer executeCountRequest(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeCountRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer executeFetchRequest(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeFetchRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer executeRefreshRequest(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRefreshRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer executeRequest(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeSaveChangesRequest(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeSaveChangesRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer init(
    Pointer<NSAtomicStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static int load(
    Pointer<NSAtomicStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidRegisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidUnregisterObjectsWithIDs:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<NSAtomicStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer newCacheNodeForManagedObject(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCacheNodeForManagedObject:"),
      arg,
    );
  }

  static Pointer newReferenceObjectForManagedObject(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newReferenceObjectForManagedObject:"),
      arg,
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer objectIDForEntity(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer referenceObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDForEntity:referenceObject:"),
      arg,
      referenceObject,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer referenceObjectForObjectID(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("referenceObjectForObjectID:"),
      arg,
    );
  }

  static int save(
    Pointer<NSAtomicStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("save:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static void updateCacheNode(
    Pointer<NSAtomicStore> _self,
    Pointer arg, {
    @required Pointer fromManagedObject,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateCacheNode:fromManagedObject:"),
      arg,
      fromManagedObject,
    );
  }

  static void willRemoveCacheNodes(
    Pointer<NSAtomicStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveCacheNodes:"),
      arg,
    );
  }
}

@unsized
class NSAtomicStoreCacheNode extends Struct<NSAtomicStoreCacheNode> {
  factory NSAtomicStoreCacheNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSAtomicStoreCacheNode> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAtomicStoreCacheNode")
        .cast<NSAtomicStoreCacheNode>();
  }

  static void dealloc(
    Pointer<NSAtomicStoreCacheNode> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSAtomicStoreCacheNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithObjectID(
    Pointer<NSAtomicStoreCacheNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAtomicStoreCacheNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSAtomicStoreCacheNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static Pointer objectID(
    Pointer<NSAtomicStoreCacheNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static Pointer propertyCache(
    Pointer<NSAtomicStoreCacheNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyCache"),
    );
  }

  static void setPropertyCache(
    Pointer<NSAtomicStoreCacheNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertyCache:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSAtomicStoreCacheNode> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer valueForKey(
    Pointer<NSAtomicStoreCacheNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }
}

@unsized
class NSAttributeDescription extends Struct<NSAttributeDescription> {
  factory NSAttributeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSAttributeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAttributeDescription")
        .cast<NSAttributeDescription>();
  }

  static int allowsExternalBinaryDataStorage(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("allowsExternalBinaryDataStorage"),
    );
  }

  static int attributeType(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("attributeType"),
    );
  }

  static Pointer attributeValueClassName(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeValueClassName"),
    );
  }

  static void dealloc(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer defaultValue(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("defaultValue"),
    );
  }

  static Pointer description(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isFileBackedFuture(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFileBackedFuture"),
    );
  }

  static int isIndexed(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexed"),
    );
  }

  static int preserveValueOnDeletionInPersistentHistory(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("preserveValueOnDeletionInPersistentHistory"),
    );
  }

  static void setAllowsExternalBinaryDataStorage(
    Pointer<NSAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsExternalBinaryDataStorage:"),
      arg,
    );
  }

  static void setAttributeType(
    Pointer<NSAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setAttributeType:"),
      arg,
    );
  }

  static void setAttributeValueClassName(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAttributeValueClassName:"),
      arg,
    );
  }

  static void setDefaultValue(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDefaultValue:"),
      arg,
    );
  }

  static void setIsFileBackedFuture(
    Pointer<NSAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFileBackedFuture:"),
      arg,
    );
  }

  static void setPreserveValueOnDeletionInPersistentHistory(
    Pointer<NSAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setPreserveValueOnDeletionInPersistentHistory:"),
      arg,
    );
  }

  static void setStoresBinaryDataExternally(
    Pointer<NSAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setStoresBinaryDataExternally:"),
      arg,
    );
  }

  static void setValueTransformerName(
    Pointer<NSAttributeDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValueTransformerName:"),
      arg,
    );
  }

  static int storesBinaryDataExternally(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("storesBinaryDataExternally"),
    );
  }

  static Pointer validationPredicates(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validationPredicates"),
    );
  }

  static Pointer validationWarnings(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validationWarnings"),
    );
  }

  static Pointer valueTransformerName(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueTransformerName"),
    );
  }

  static Pointer versionHash(
    Pointer<NSAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHash"),
    );
  }
}

@unsized
class NSAttributeStoreMapping extends Struct<NSAttributeStoreMapping> {
  factory NSAttributeStoreMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSAttributeStoreMapping> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAttributeStoreMapping")
        .cast<NSAttributeStoreMapping>();
  }

  static Pointer attribute(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attribute"),
    );
  }

  static Pointer columnDefinition(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnDefinition"),
    );
  }

  static int externalPrecision(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("externalPrecision"),
    );
  }

  static int externalScale(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("externalScale"),
    );
  }

  static int externalType(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("externalType"),
    );
  }

  static Pointer initWithProperty(
    Pointer<NSAttributeStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithProperty:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAttributeStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setExternalPrecision(
    Pointer<NSAttributeStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setExternalPrecision:"),
      arg,
    );
  }

  static void setExternalScale(
    Pointer<NSAttributeStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setExternalScale:"),
      arg,
    );
  }

  static void setExternalType(
    Pointer<NSAttributeStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setExternalType:"),
      arg,
    );
  }

  static Pointer sqlType(
    Pointer<NSAttributeStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlType"),
    );
  }
}

@unsized
class NSBasicObjectID extends Struct<NSBasicObjectID> {
  factory NSBasicObjectID._() {
    throw UnimplementedError();
  }
  static Pointer<NSBasicObjectID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBasicObjectID").cast<NSBasicObjectID>();
  }

  static void dealloc(
    Pointer<NSBasicObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithObject(
    Pointer<NSBasicObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }
}

@unsized
class NSBatchDeleteRequest extends Struct<NSBatchDeleteRequest> {
  factory NSBatchDeleteRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSBatchDeleteRequest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBatchDeleteRequest").cast<NSBatchDeleteRequest>();
  }

  static void dealloc(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer encodeForXPC(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("encodeForXPC"),
    );
  }

  static Pointer fetchRequest(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static Pointer initWithFetchRequest(
    Pointer<NSBatchDeleteRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchRequest:"),
      arg,
    );
  }

  static Pointer initWithObjectIDs(
    Pointer<NSBatchDeleteRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectIDs:"),
      arg,
    );
  }

  static int requestType(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int resultType(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static void setResultType(
    Pointer<NSBatchDeleteRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultType:"),
      arg,
    );
  }

  static void setShouldPerformSecureOperation(
    Pointer<NSBatchDeleteRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldPerformSecureOperation:"),
      arg,
    );
  }

  static int shouldPerformSecureOperation(
    Pointer<NSBatchDeleteRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldPerformSecureOperation"),
    );
  }
}

@unsized
class NSBatchDeleteRequestEncodingToken
    extends Struct<NSBatchDeleteRequestEncodingToken> {
  factory NSBatchDeleteRequestEncodingToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSBatchDeleteRequestEncodingToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBatchDeleteRequestEncodingToken")
        .cast<NSBatchDeleteRequestEncodingToken>();
  }

  static void dealloc(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer fetchData(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchData"),
    );
  }

  static Pointer initForRequest(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForRequest:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int secure(
    Pointer<NSBatchDeleteRequestEncodingToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("secure"),
    );
  }
}

@unsized
class NSBatchDeleteResult extends Struct<NSBatchDeleteResult> {
  factory NSBatchDeleteResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSBatchDeleteResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBatchDeleteResult").cast<NSBatchDeleteResult>();
  }

  static void dealloc(
    Pointer<NSBatchDeleteResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithResultType(
    Pointer<NSBatchDeleteResult> _self,
    int arg, {
    @required Pointer andObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithResultType:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer initWithSubresults(
    Pointer<NSBatchDeleteResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSubresults:"),
      arg,
    );
  }

  static Pointer result(
    Pointer<NSBatchDeleteResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("result"),
    );
  }

  static int resultType(
    Pointer<NSBatchDeleteResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

@unsized
class NSBatchUpdateRequest extends Struct<NSBatchUpdateRequest> {
  factory NSBatchUpdateRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSBatchUpdateRequest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBatchUpdateRequest").cast<NSBatchUpdateRequest>();
  }

  static void dealloc(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer entityName(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static int includesSubentities(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesSubentities"),
    );
  }

  static Pointer init(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSBatchUpdateRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static Pointer initWithEntityName(
    Pointer<NSBatchUpdateRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntityName:"),
      arg,
    );
  }

  static Pointer predicate(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer propertiesToUpdate(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToUpdate"),
    );
  }

  static int requestType(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int resultType(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static void setIncludesSubentities(
    Pointer<NSBatchUpdateRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesSubentities:"),
      arg,
    );
  }

  static void setPredicate(
    Pointer<NSBatchUpdateRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static void setPropertiesToUpdate(
    Pointer<NSBatchUpdateRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertiesToUpdate:"),
      arg,
    );
  }

  static void setResultType(
    Pointer<NSBatchUpdateRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultType:"),
      arg,
    );
  }

  static void setShouldPerformSecureOperation(
    Pointer<NSBatchUpdateRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldPerformSecureOperation:"),
      arg,
    );
  }

  static int shouldPerformSecureOperation(
    Pointer<NSBatchUpdateRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldPerformSecureOperation"),
    );
  }
}

@unsized
class NSBatchUpdateResult extends Struct<NSBatchUpdateResult> {
  factory NSBatchUpdateResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSBatchUpdateResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBatchUpdateResult").cast<NSBatchUpdateResult>();
  }

  static void dealloc(
    Pointer<NSBatchUpdateResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithResult(
    Pointer<NSBatchUpdateResult> _self,
    Pointer arg, {
    @required int type,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithResult:type:"),
      arg,
      type,
    );
  }

  static Pointer result(
    Pointer<NSBatchUpdateResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("result"),
    );
  }

  static int resultType(
    Pointer<NSBatchUpdateResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

@unsized
class NSBinaryObjectStore extends Struct<NSBinaryObjectStore> {
  factory NSBinaryObjectStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSBinaryObjectStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBinaryObjectStore").cast<NSBinaryObjectStore>();
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSBinaryObjectStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static void saveDocumentToPath(
    Pointer<NSBinaryObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveDocumentToPath:"),
      arg,
    );
  }

  static Pointer type(
    Pointer<NSBinaryObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSBinaryObjectStoreFile extends Struct<NSBinaryObjectStoreFile> {
  factory NSBinaryObjectStoreFile._() {
    throw UnimplementedError();
  }
  static Pointer<NSBinaryObjectStoreFile> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBinaryObjectStoreFile")
        .cast<NSBinaryObjectStoreFile>();
  }

  static void clearCurrentValues(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearCurrentValues"),
    );
  }

  static int databaseVersion(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("databaseVersion"),
    );
  }

  static void dealloc(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer fullMetadata(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fullMetadata"),
    );
  }

  static Pointer mapData(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mapData"),
    );
  }

  static int primaryKeyGeneration(
    Pointer<NSBinaryObjectStoreFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("primaryKeyGeneration"),
    );
  }

  static int readBinaryStoreFromData(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg, {
    @required Pointer originalPath,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("readBinaryStoreFromData:originalPath:error:"),
      arg,
      originalPath,
      error,
    );
  }

  static int readFromFile(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("readFromFile:error:"),
      arg,
      error,
    );
  }

  static int readMetadataFromFile(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg, {
    @required int securely,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("readMetadataFromFile:securely:error:"),
      arg,
      securely,
      error,
    );
  }

  static void setDatabaseVersion(
    Pointer<NSBinaryObjectStoreFile> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setDatabaseVersion:"),
      arg,
    );
  }

  static void setFullMetadata(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFullMetadata:"),
      arg,
    );
  }

  static void setMapData(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMapData:"),
      arg,
    );
  }

  static void setPrimaryKeyGeneration(
    Pointer<NSBinaryObjectStoreFile> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setPrimaryKeyGeneration:"),
      arg,
    );
  }

  static int writeMetadataToFile(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeMetadataToFile:error:"),
      arg,
      error,
    );
  }

  static int writeToFile(
    Pointer<NSBinaryObjectStoreFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeToFile:error:"),
      arg,
      error,
    );
  }
}

@unsized
class NSCKExportMetadata extends Struct<NSCKExportMetadata> {
  factory NSCKExportMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKExportMetadata> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCKExportMetadata").cast<NSCKExportMetadata>();
  }
}

@unsized
class NSCKExportOperation extends Struct<NSCKExportOperation> {
  factory NSCKExportOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKExportOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCKExportOperation").cast<NSCKExportOperation>();
  }

  static void setStatus(
    Pointer<NSCKExportOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static int status(
    Pointer<NSCKExportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("status"),
    );
  }
}

@unsized
class NSCKExportedObject extends Struct<NSCKExportedObject> {
  factory NSCKExportedObject._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKExportedObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCKExportedObject").cast<NSCKExportedObject>();
  }

  static int changeType(
    Pointer<NSCKExportedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static void setChangeType(
    Pointer<NSCKExportedObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setChangeType:"),
      arg,
    );
  }

  static void setType(
    Pointer<NSCKExportedObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static int type(
    Pointer<NSCKExportedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSCKImportOperation extends Struct<NSCKImportOperation> {
  factory NSCKImportOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKImportOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCKImportOperation").cast<NSCKImportOperation>();
  }

  static Pointer changeTokenBytes(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeTokenBytes"),
    );
  }

  static void dealloc(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer importDate(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("importDate"),
    );
  }

  static Pointer init(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithFetchResult(
    Pointer<NSCKImportOperation> _self,
    Pointer arg, {
    @required Pointer andSQLEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchResult:andSQLEntity:"),
      arg,
      andSQLEntity,
    );
  }

  static Pointer mirroredRelationships(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroredRelationships"),
    );
  }

  static Pointer operationUUID(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operationUUID"),
    );
  }

  static Pointer pendingRelationships(
    Pointer<NSCKImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("pendingRelationships"),
    );
  }

  static void setBindValue(
    Pointer<NSCKImportOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBindValue:"),
      arg,
    );
  }

  static void setChangeToken(
    Pointer<NSCKImportOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setChangeToken:"),
      arg,
    );
  }
}

@unsized
class NSCKImportPendingRelationship
    extends Struct<NSCKImportPendingRelationship> {
  factory NSCKImportPendingRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKImportPendingRelationship> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCKImportPendingRelationship")
        .cast<NSCKImportPendingRelationship>();
  }

  static void dealloc(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entityName(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer fetchedPKNum(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchedPKNum"),
    );
  }

  static Pointer initWithFailedRelationship(
    Pointer<NSCKImportPendingRelationship> _self,
    Pointer arg, {
    @required Pointer andOperation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFailedRelationship:andOperation:"),
      arg,
      andOperation,
    );
  }

  static Pointer initWithFetchResult(
    Pointer<NSCKImportPendingRelationship> _self,
    Pointer arg, {
    @required Pointer operationsByPk,
    @required Pointer andSQLEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchResult:operationsByPk:andSQLEntity:"),
      arg,
      operationsByPk,
      andSQLEntity,
    );
  }

  static int isDeleted(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static Pointer operation(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operation"),
    );
  }

  static Pointer recordName(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordName"),
    );
  }

  static Pointer relatedEntityName(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedEntityName"),
    );
  }

  static Pointer relatedRecordName(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedRecordName"),
    );
  }

  static Pointer relationshipName(
    Pointer<NSCKImportPendingRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipName"),
    );
  }

  static void setBindValue(
    Pointer<NSCKImportPendingRelationship> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBindValue:"),
      arg,
    );
  }
}

@unsized
class NSCKMirroredRelationship extends Struct<NSCKMirroredRelationship> {
  factory NSCKMirroredRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<NSCKMirroredRelationship> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCKMirroredRelationship")
        .cast<NSCKMirroredRelationship>();
  }

  static Pointer ckRecordID(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckRecordID"),
    );
  }

  static Pointer ckRecordSystemFields(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckRecordSystemFields"),
    );
  }

  static void dealloc(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entityName(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer fetchedPKNum(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchedPKNum"),
    );
  }

  static Pointer initWithFetchResult(
    Pointer<NSCKMirroredRelationship> _self,
    Pointer arg, {
    @required Pointer andSQLEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchResult:andSQLEntity:"),
      arg,
      andSQLEntity,
    );
  }

  static Pointer initWithMirroredManyToMany(
    Pointer<NSCKMirroredRelationship> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithMirroredManyToMany:"),
      arg,
    );
  }

  static int isDeleted(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static int isPending(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isPending"),
    );
  }

  static int isUploaded(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUploaded"),
    );
  }

  static Pointer recordName(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordName"),
    );
  }

  static Pointer relatedEntityName(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedEntityName"),
    );
  }

  static Pointer relatedRecordName(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedRecordName"),
    );
  }

  static Pointer relationshipName(
    Pointer<NSCKMirroredRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipName"),
    );
  }

  static void setBindValue(
    Pointer<NSCKMirroredRelationship> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBindValue:"),
      arg,
    );
  }

  static void setPending(
    Pointer<NSCKMirroredRelationship> _self,
    int arg, {
    @required int deleted,
    @required int uploaded,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_Int8_Int8_returns_void(
      _self,
      _objc.getSelector("setPending:deleted:uploaded:"),
      arg,
      deleted,
      uploaded,
    );
  }

  static void updatePKNumFromInsert(
    Pointer<NSCKMirroredRelationship> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("updatePKNumFromInsert:"),
      arg,
    );
  }

  static int updateRelationshipValueUsingImportContext(
    Pointer<NSCKMirroredRelationship> _self,
    Pointer arg, {
    @required Pointer andManagedObjectContext,
    @required int isDelete,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "updateRelationshipValueUsingImportContext:andManagedObjectContext:isDelete:error:"),
      arg,
      andManagedObjectContext,
      isDelete,
      error,
    );
  }
}

@unsized
class NSCachedFetchRequestInfo extends Struct<NSCachedFetchRequestInfo> {
  factory NSCachedFetchRequestInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSCachedFetchRequestInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCachedFetchRequestInfo")
        .cast<NSCachedFetchRequestInfo>();
  }

  static void dealloc(
    Pointer<NSCachedFetchRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void setSubstitutionBindIntarrayOrder(
    Pointer<NSCachedFetchRequestInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubstitutionBindIntarrayOrder:"),
      arg,
    );
  }

  static void setSubstitutionBindVariableOrder(
    Pointer<NSCachedFetchRequestInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubstitutionBindVariableOrder:"),
      arg,
    );
  }

  static Pointer substitutionBindIntarrayOrder(
    Pointer<NSCachedFetchRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("substitutionBindIntarrayOrder"),
    );
  }

  static Pointer substitutionBindVariableOrder(
    Pointer<NSCachedFetchRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("substitutionBindVariableOrder"),
    );
  }
}

@unsized
class NSCachedFetchRequestThunk extends Struct<NSCachedFetchRequestThunk> {
  factory NSCachedFetchRequestThunk._() {
    throw UnimplementedError();
  }
  static Pointer<NSCachedFetchRequestThunk> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCachedFetchRequestThunk")
        .cast<NSCachedFetchRequestThunk>();
  }

  static void clearCaches(
    Pointer<NSCachedFetchRequestThunk> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearCaches"),
    );
  }

  static void dealloc(
    Pointer<NSCachedFetchRequestThunk> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initForConnection(
    Pointer<NSCachedFetchRequestThunk> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForConnection:"),
      arg,
    );
  }

  static Pointer limitedStatement(
    Pointer<NSCachedFetchRequestThunk> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("limitedStatement"),
    );
  }

  static void setLimitedStatement(
    Pointer<NSCachedFetchRequestThunk> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLimitedStatement:"),
      arg,
    );
  }

  static void setUnlimitedStatement(
    Pointer<NSCachedFetchRequestThunk> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUnlimitedStatement:"),
      arg,
    );
  }

  static Pointer unlimitedStatement(
    Pointer<NSCachedFetchRequestThunk> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("unlimitedStatement"),
    );
  }
}

@unsized
class NSCachingFetchRequest extends Struct<NSCachingFetchRequest> {
  factory NSCachingFetchRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCachingFetchRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCachingFetchRequest")
        .cast<NSCachingFetchRequest>();
  }

  static void dealloc(
    Pointer<NSCachingFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSCachingFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setSubstitutionVariables(
    Pointer<NSCachingFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubstitutionVariables:"),
      arg,
    );
  }

  static Pointer substitutionVariables(
    Pointer<NSCachingFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("substitutionVariables"),
    );
  }
}

@unsized
class NSCloudKitMirroringDelegate extends Struct<NSCloudKitMirroringDelegate> {
  factory NSCloudKitMirroringDelegate._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringDelegate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringDelegate")
        .cast<NSCloudKitMirroringDelegate>();
  }

  static void checkForNewChanges(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkForNewChanges"),
    );
  }

  static void ckAccountChanged(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("ckAccountChanged:"),
      arg,
    );
  }

  static Pointer ckDatabaseName(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckDatabaseName"),
    );
  }

  static void ckIdentityChanged(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("ckIdentityChanged:"),
      arg,
    );
  }

  static Pointer cloudKitQueue(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloudKitQueue"),
    );
  }

  static Pointer cloudKitQueueSemaphore(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloudKitQueueSemaphore"),
    );
  }

  static Pointer container(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("container"),
    );
  }

  static void coordinatorWillRemoveStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("coordinatorWillRemoveStore:"),
      arg,
    );
  }

  static Pointer database(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("database"),
    );
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer executeMirroringRequest(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeMirroringRequest:error:"),
      arg,
      error,
    );
  }

  static void exporter(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer willScheduleOperations,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("exporter:willScheduleOperations:"),
      arg,
      willScheduleOperations,
    );
  }

  static Pointer exporterOptions(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exporterOptions"),
    );
  }

  static void fetchChangesAndUpdateObservedStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fetchChangesAndUpdateObservedStore"),
    );
  }

  static int hadObservedStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hadObservedStore"),
    );
  }

  static void handleErrorInResult(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("handleErrorInResult:"),
      arg,
    );
  }

  static Pointer initWithOptions(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static int isPrivateContextSave(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isPrivateContextSave:"),
      arg,
    );
  }

  static Pointer lastInitializationError(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("lastInitializationError"),
    );
  }

  static void logMessage(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logMessage:"),
      arg,
    );
  }

  static void observeChangesForStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer inPersistentStoreCoordinator,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("observeChangesForStore:inPersistentStoreCoordinator:"),
      arg,
      inPersistentStoreCoordinator,
    );
  }

  static Pointer observedCoordinator(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("observedCoordinator"),
    );
  }

  static Pointer observedStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("observedStore"),
    );
  }

  static Pointer options(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static void persistentStoreCoordinator(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer didSuccessfullyAddPersistentStore,
    @required Pointer withDescription,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "persistentStoreCoordinator:didSuccessfullyAddPersistentStore:withDescription:"),
      arg,
      didSuccessfullyAddPersistentStore,
      withDescription,
    );
  }

  static void postDidResetNotificationForError(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("postDidResetNotificationForError:"),
      arg,
    );
  }

  static void postWillResetNotificationForError(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("postWillResetNotificationForError:"),
      arg,
    );
  }

  static int pruneExternalAssetFileAtURL(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("pruneExternalAssetFileAtURL:error:"),
      arg,
      error,
    );
  }

  static int recoverFromError(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("recoverFromError:"),
      arg,
    );
  }

  static void resetAfterError$andKeepContainer(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required int andKeepContainer,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("resetAfterError:andKeepContainer:"),
      arg,
      andKeepContainer,
    );
  }

  static void resetAfterError(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetAfterError:"),
      arg,
    );
  }

  static Pointer resetNotificationUserInfoForError(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("resetNotificationUserInfoForError:"),
      arg,
    );
  }

  static void storesDidChange(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("storesDidChange:"),
      arg,
    );
  }

  static int successfullyInitialized(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("successfullyInitialized"),
    );
  }

  static void tearDown(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("tearDown"),
    );
  }

  static int validateManagedObjectModel(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer forUseWithStoreWithDescription,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "validateManagedObjectModel:forUseWithStoreWithDescription:error:"),
      arg,
      forUseWithStoreWithDescription,
      error,
    );
  }

  static int wipeAllCloudDataAndPurgeHistoryToken(
    Pointer<NSCloudKitMirroringDelegate> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeAllCloudDataAndPurgeHistoryToken:error:"),
      arg,
      error,
    );
  }

  static int wipeCachedIdentityInformationFromStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeCachedIdentityInformationFromStore:error:"),
      arg,
      error,
    );
  }

  static int wipeCachedZoneMetadataFromStore(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeCachedZoneMetadataFromStore:error:"),
      arg,
      error,
    );
  }

  static int wipeCloudMetadataFromMirroredObjects(
    Pointer<NSCloudKitMirroringDelegate> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeCloudMetadataFromMirroredObjects:"),
      arg,
    );
  }

  static Pointer zone(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }

  static Pointer zoneSubscription(
    Pointer<NSCloudKitMirroringDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zoneSubscription"),
    );
  }
}

@unsized
class NSCloudKitMirroringDelegateMetadata
    extends Struct<NSCloudKitMirroringDelegateMetadata> {
  factory NSCloudKitMirroringDelegateMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringDelegateMetadata> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringDelegateMetadata")
        .cast<NSCloudKitMirroringDelegateMetadata>();
  }

  static Pointer changeTokenForDatabase(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeTokenForDatabase:"),
      arg,
    );
  }

  static Pointer changeTokenForZoneWithID(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg, {
    @required Pointer inDatabase,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeTokenForZoneWithID:inDatabase:"),
      arg,
      inDatabase,
    );
  }

  static Pointer ckIdentityRecordName(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckIdentityRecordName"),
    );
  }

  static Pointer cliDescription(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cliDescription"),
    );
  }

  static int countChangeTokens(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("countChangeTokens"),
    );
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hasChanges(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static int hasCheckedCKIdentity(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasCheckedCKIdentity"),
    );
  }

  static int hasInitializedZone(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasInitializedZone"),
    );
  }

  static int hasInitializedZoneSubscription(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasInitializedZoneSubscription"),
    );
  }

  static Pointer initWithStore(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer keyToPreviousServerChangeToken(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keyToPreviousServerChangeToken"),
    );
  }

  static Pointer lastHistoryToken(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("lastHistoryToken"),
    );
  }

  static int load(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static int loaded(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loaded"),
    );
  }

  static void purgeCachedChangeTokens(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("purgeCachedChangeTokens"),
    );
  }

  static int safeDictionary(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg, {
    @required Pointer isEqualToDictionary,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("safeDictionary:isEqualToDictionary:"),
      arg,
      isEqualToDictionary,
    );
  }

  static int safeString(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg, {
    @required Pointer isEqualToString,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("safeString:isEqualToString:"),
      arg,
      isEqualToString,
    );
  }

  static int save(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("save:"),
      arg,
    );
  }

  static void setCKIdentityRecordName(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCKIdentityRecordName:"),
      arg,
    );
  }

  static void setChangeToken$forZoneWithID$inDatabase(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg, {
    @required Pointer forZoneWithID,
    @required Pointer inDatabase,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setChangeToken:forZoneWithID:inDatabase:"),
      arg,
      forZoneWithID,
      inDatabase,
    );
  }

  static void setChangeToken$forDatabase(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg, {
    @required Pointer forDatabase,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setChangeToken:forDatabase:"),
      arg,
      forDatabase,
    );
  }

  static void setHasCheckedCKIdentity(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setHasCheckedCKIdentity:"),
      arg,
    );
  }

  static void setHasInitializedZone(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setHasInitializedZone:"),
      arg,
    );
  }

  static void setHasInitializedZoneSubscription(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setHasInitializedZoneSubscription:"),
      arg,
    );
  }

  static void setLastHistoryToken(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLastHistoryToken:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static int updateStoreMetadata(
    Pointer<NSCloudKitMirroringDelegateMetadata> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("updateStoreMetadata:"),
      arg,
    );
  }
}

@unsized
class NSCloudKitMirroringDelegateOptions
    extends Struct<NSCloudKitMirroringDelegateOptions> {
  factory NSCloudKitMirroringDelegateOptions._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringDelegateOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringDelegateOptions")
        .cast<NSCloudKitMirroringDelegateOptions>();
  }

  static int automaticallyDownloadFileBackedFutures(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("automaticallyDownloadFileBackedFutures"),
    );
  }

  static Pointer ckAssetThresholdBytes(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckAssetThresholdBytes"),
    );
  }

  static Pointer containerIdentifier(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static Pointer containerOptions(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("containerOptions"),
    );
  }

  static Pointer copy(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithContainerIdentifier(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContainerIdentifier:"),
      arg,
    );
  }

  static int initializeSchema(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeSchema"),
    );
  }

  static Pointer operationMemoryThresholdBytes(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operationMemoryThresholdBytes"),
    );
  }

  static void setAutomaticallyDownloadFileBackedFutures(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticallyDownloadFileBackedFutures:"),
      arg,
    );
  }

  static void setCkAssetThresholdBytes(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCkAssetThresholdBytes:"),
      arg,
    );
  }

  static void setContainerIdentifier(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContainerIdentifier:"),
      arg,
    );
  }

  static void setContainerOptions(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContainerOptions:"),
      arg,
    );
  }

  static void setInitializeSchema(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setInitializeSchema:"),
      arg,
    );
  }

  static void setOperationMemoryThresholdBytes(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOperationMemoryThresholdBytes:"),
      arg,
    );
  }

  static void setUseEncryptedStorage(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseEncryptedStorage:"),
      arg,
    );
  }

  static int useEncryptedStorage(
    Pointer<NSCloudKitMirroringDelegateOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useEncryptedStorage"),
    );
  }
}

@unsized
class NSCloudKitMirroringExportRequest
    extends Struct<NSCloudKitMirroringExportRequest> {
  factory NSCloudKitMirroringExportRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringExportRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringExportRequest")
        .cast<NSCloudKitMirroringExportRequest>();
  }
}

@unsized
class NSCloudKitMirroringFetchRecordsRequest
    extends Struct<NSCloudKitMirroringFetchRecordsRequest> {
  factory NSCloudKitMirroringFetchRecordsRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringFetchRecordsRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringFetchRecordsRequest")
        .cast<NSCloudKitMirroringFetchRecordsRequest>();
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entityNameToAttributesToFetch(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNameToAttributesToFetch"),
    );
  }

  static Pointer initWithOptions(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg, {
    @required Pointer completionBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:completionBlock:"),
      arg,
      completionBlock,
    );
  }

  static Pointer objectIDsToFetch(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDsToFetch"),
    );
  }

  static void setEntityNameToAttributeNamesToFetch(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntityNameToAttributeNamesToFetch:"),
      arg,
    );
  }

  static void setEntityNameToAttributesToFetch(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntityNameToAttributesToFetch:"),
      arg,
    );
  }

  static void setObjectIDsToFetch(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setObjectIDsToFetch:"),
      arg,
    );
  }

  static void throwNotEditable(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("throwNotEditable:"),
      arg,
    );
  }

  static int validateForUseWithStore(
    Pointer<NSCloudKitMirroringFetchRecordsRequest> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateForUseWithStore:error:"),
      arg,
      error,
    );
  }
}

@unsized
class NSCloudKitMirroringImportRequest
    extends Struct<NSCloudKitMirroringImportRequest> {
  factory NSCloudKitMirroringImportRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringImportRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringImportRequest")
        .cast<NSCloudKitMirroringImportRequest>();
  }
}

@unsized
class NSCloudKitMirroringRequest extends Struct<NSCloudKitMirroringRequest> {
  factory NSCloudKitMirroringRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringRequest")
        .cast<NSCloudKitMirroringRequest>();
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithOptions(
    Pointer<NSCloudKitMirroringRequest> _self,
    Pointer arg, {
    @required Pointer completionBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:completionBlock:"),
      arg,
      completionBlock,
    );
  }

  static Pointer options(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer requestCompletionBlock(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("requestCompletionBlock"),
    );
  }

  static Pointer requestIdentifier(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("requestIdentifier"),
    );
  }

  static int requestType(
    Pointer<NSCloudKitMirroringRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int validateForUseWithStore(
    Pointer<NSCloudKitMirroringRequest> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateForUseWithStore:error:"),
      arg,
      error,
    );
  }
}

@unsized
class NSCloudKitMirroringRequestOptions
    extends Struct<NSCloudKitMirroringRequestOptions> {
  factory NSCloudKitMirroringRequestOptions._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringRequestOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringRequestOptions")
        .cast<NSCloudKitMirroringRequestOptions>();
  }

  static int allowsCellularAccess(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static void applyToOperation(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("applyToOperation:"),
      arg,
    );
  }

  static Pointer copy(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer operationConfiguration(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operationConfiguration"),
    );
  }

  static int qualityOfService(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static void resetOperationConfiguration(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetOperationConfiguration"),
    );
  }

  static void setAllowsCellularAccess(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsCellularAccess:"),
      arg,
    );
  }

  static void setOperationConfiguration(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOperationConfiguration:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSCloudKitMirroringRequestOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }
}

@unsized
class NSCloudKitMirroringResetZoneRequest
    extends Struct<NSCloudKitMirroringResetZoneRequest> {
  factory NSCloudKitMirroringResetZoneRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringResetZoneRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringResetZoneRequest")
        .cast<NSCloudKitMirroringResetZoneRequest>();
  }
}

@unsized
class NSCloudKitMirroringResult extends Struct<NSCloudKitMirroringResult> {
  factory NSCloudKitMirroringResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloudKitMirroringResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCloudKitMirroringResult")
        .cast<NSCloudKitMirroringResult>();
  }

  static Pointer changeToken(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeToken"),
    );
  }

  static void dealloc(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer error(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer historyToken(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("historyToken"),
    );
  }

  static Pointer initWithRequest(
    Pointer<NSCloudKitMirroringResult> _self,
    Pointer arg, {
    @required int success,
    @required int madeChanges,
    @required Pointer error,
    @required Pointer changeToken,
    @required Pointer historyToken,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithRequest:success:madeChanges:error:changeToken:historyToken:"),
      arg,
      success,
      madeChanges,
      error,
      changeToken,
      historyToken,
    );
  }

  static int madeChanges(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("madeChanges"),
    );
  }

  static Pointer request(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static int success(
    Pointer<NSCloudKitMirroringResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("success"),
    );
  }
}

@unsized
class NSConstraintCache extends Struct<NSConstraintCache> {
  factory NSConstraintCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstraintCache> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConstraintCache").cast<NSConstraintCache>();
  }

  static Pointer children(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("children"),
    );
  }

  static Pointer constraint(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("constraint"),
    );
  }

  static void dealloc(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static void extendConstraint(
    Pointer<NSConstraintCache> _self,
    Pointer arg, {
    @required Pointer onParentEntity,
    @required Pointer parentCache,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("extendConstraint:onParentEntity:parentCache:"),
      arg,
      onParentEntity,
      parentCache,
    );
  }

  static Pointer extension(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("extension"),
    );
  }

  static Pointer initForEntity(
    Pointer<NSConstraintCache> _self,
    Pointer arg, {
    @required Pointer constraint,
    @required Pointer extension,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForEntity:constraint:extension:"),
      arg,
      constraint,
      extension,
    );
  }

  static Pointer keyForValues(
    Pointer<NSConstraintCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keyForValues:"),
      arg,
    );
  }

  static void registerObject$forValues(
    Pointer<NSConstraintCache> _self,
    Pointer arg, {
    @required Pointer forValues,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerObject:forValues:"),
      arg,
      forValues,
    );
  }

  static void registerObject(
    Pointer<NSConstraintCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerObject:"),
      arg,
    );
  }

  static void reset(
    Pointer<NSConstraintCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static Pointer validateForSave(
    Pointer<NSConstraintCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validateForSave:"),
      arg,
    );
  }
}

@unsized
class NSConstraintCacheKey extends Struct<NSConstraintCacheKey> {
  factory NSConstraintCacheKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstraintCacheKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConstraintCacheKey").cast<NSConstraintCacheKey>();
  }

  static void dealloc(
    Pointer<NSConstraintCacheKey> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSConstraintCacheKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSConstraintCacheKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithValues(
    Pointer<NSConstraintCacheKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithValues:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSConstraintCacheKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }
}

@unsized
class NSConstraintConflict extends Struct<NSConstraintConflict> {
  factory NSConstraintConflict._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstraintConflict> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConstraintConflict").cast<NSConstraintConflict>();
  }

  static Pointer conflictingObjects(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingObjects"),
    );
  }

  static Pointer conflictingSnapshots(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingSnapshots"),
    );
  }

  static Pointer constraint(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("constraint"),
    );
  }

  static Pointer constraintValues(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("constraintValues"),
    );
  }

  static Pointer databaseObject(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("databaseObject"),
    );
  }

  static Pointer databaseSnapshot(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("databaseSnapshot"),
    );
  }

  static void dealloc(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSConstraintConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConstraintConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSConstraintConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithConstraint(
    Pointer<NSConstraintConflict> _self,
    Pointer arg, {
    @required Pointer databaseObject,
    @required Pointer databaseSnapshot,
    @required Pointer conflictingObjects,
    @required Pointer conflictingSnapshots,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:"),
      arg,
      databaseObject,
      databaseSnapshot,
      conflictingObjects,
      conflictingSnapshots,
    );
  }
}

@unsized
class NSConstraintValidator extends Struct<NSConstraintValidator> {
  factory NSConstraintValidator._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstraintValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConstraintValidator")
        .cast<NSConstraintValidator>();
  }

  static void dealloc(
    Pointer<NSConstraintValidator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithManagedObjectContext(
    Pointer<NSConstraintValidator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithManagedObjectContext:"),
      arg,
    );
  }

  static void registerObject(
    Pointer<NSConstraintValidator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerObject:"),
      arg,
    );
  }

  static void registerObjects(
    Pointer<NSConstraintValidator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerObjects:"),
      arg,
    );
  }

  static void reset(
    Pointer<NSConstraintValidator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static Pointer validateCaches(
    Pointer<NSConstraintValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validateCaches"),
    );
  }

  static Pointer validateForSave(
    Pointer<NSConstraintValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validateForSave"),
    );
  }
}

@unsized
class NSCoreDataCoreSpotlightDelegate
    extends Struct<NSCoreDataCoreSpotlightDelegate> {
  factory NSCoreDataCoreSpotlightDelegate._() {
    throw UnimplementedError();
  }
  static Pointer<NSCoreDataCoreSpotlightDelegate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCoreDataCoreSpotlightDelegate")
        .cast<NSCoreDataCoreSpotlightDelegate>();
  }

  static Pointer attributeSetForObject(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeSetForObject:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer domainIdentifier(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("domainIdentifier"),
    );
  }

  static Pointer indexName(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexName"),
    );
  }

  static Pointer initForStoreWithDescription(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
    Pointer arg, {
    @required Pointer model,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStoreWithDescription:model:"),
      arg,
      model,
    );
  }

  static void
      searchableIndex$reindexAllSearchableItemsWithAcknowledgementHandler(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
    Pointer arg, {
    @required Pointer reindexAllSearchableItemsWithAcknowledgementHandler,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:"),
      arg,
      reindexAllSearchableItemsWithAcknowledgementHandler,
    );
  }

  static void
      searchableIndex$reindexSearchableItemsWithIdentifiers$acknowledgementHandler(
    Pointer<NSCoreDataCoreSpotlightDelegate> _self,
    Pointer arg, {
    @required Pointer reindexSearchableItemsWithIdentifiers,
    @required Pointer acknowledgementHandler,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:"),
      arg,
      reindexSearchableItemsWithIdentifiers,
      acknowledgementHandler,
    );
  }
}

@unsized
class NSCoreDataXPCMessage extends Struct<NSCoreDataXPCMessage> {
  factory NSCoreDataXPCMessage._() {
    throw UnimplementedError();
  }
  static Pointer<NSCoreDataXPCMessage> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCoreDataXPCMessage").cast<NSCoreDataXPCMessage>();
  }

  static Pointer contextName(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("contextName"),
    );
  }

  static Pointer contextTransactionAuthor(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("contextTransactionAuthor"),
    );
  }

  static void dealloc(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer messageBody(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("messageBody"),
    );
  }

  static int messageCode(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("messageCode"),
    );
  }

  static Pointer processName(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processName"),
    );
  }

  static void setContextName(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContextName:"),
      arg,
    );
  }

  static void setContextTransactionAuthor(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContextTransactionAuthor:"),
      arg,
    );
  }

  static void setMessageBody(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMessageBody:"),
      arg,
    );
  }

  static void setMessageCode(
    Pointer<NSCoreDataXPCMessage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setMessageCode:"),
      arg,
    );
  }

  static void setProcessName(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setProcessName:"),
      arg,
    );
  }

  static void setToken(
    Pointer<NSCoreDataXPCMessage> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setToken:"),
      arg,
    );
  }

  static Pointer token(
    Pointer<NSCoreDataXPCMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("token"),
    );
  }
}

@unsized
class NSDictionaryMapNode extends Struct<NSDictionaryMapNode> {
  factory NSDictionaryMapNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSDictionaryMapNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDictionaryMapNode").cast<NSDictionaryMapNode>();
  }

  static Pointer<Pointer> attributeValues(
    Pointer<NSDictionaryMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeValues"),
    );
  }

  static void dealloc(
    Pointer<NSDictionaryMapNode> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDictionaryMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSDictionaryMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithValues(
    Pointer<NSDictionaryMapNode> _self,
    Pointer<Pointer> arg, {
    @required Pointer objectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithValues:objectID:"),
      arg,
      objectID,
    );
  }

  static Pointer valueForKey(
    Pointer<NSDictionaryMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }
}

@unsized
class NSDictionaryStoreMap extends Struct<NSDictionaryStoreMap> {
  factory NSDictionaryStoreMap._() {
    throw UnimplementedError();
  }
  static Pointer<NSDictionaryStoreMap> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDictionaryStoreMap").cast<NSDictionaryStoreMap>();
  }

  static void addObject(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static Pointer dataForKey(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dataForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSDictionaryStoreMap> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer handleFetchRequest(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleFetchRequest:"),
      arg,
    );
  }

  static Pointer initWithStore$fromPath(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer fromPath,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:fromPath:"),
      arg,
      fromPath,
    );
  }

  static Pointer initWithStore$fromArchivedData(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer fromArchivedData,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:fromArchivedData:"),
      arg,
      fromArchivedData,
    );
  }

  static Pointer initWithStore(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:"),
      arg,
    );
  }

  static void removeObject(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static Pointer retainedObjectIDsForRelationship(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer forObjectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedObjectIDsForRelationship:forObjectID:"),
      arg,
      forObjectID,
    );
  }

  static void saveToPath(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveToPath:"),
      arg,
    );
  }

  static void updateObject(
    Pointer<NSDictionaryStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }
}

@unsized
class NSEntityDescription extends Struct<NSEntityDescription> {
  factory NSEntityDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSEntityDescription> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSEntityDescription").cast<NSEntityDescription>();
  }

  static Pointer attributeKeys(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeKeys"),
    );
  }

  static Pointer attributesByName(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributesByName"),
    );
  }

  static Pointer compoundIndexes(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("compoundIndexes"),
    );
  }

  static Pointer coreSpotlightDisplayNameExpression(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("coreSpotlightDisplayNameExpression"),
    );
  }

  static void dealloc(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer elementID(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("elementID"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer indexes(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexes"),
    );
  }

  static Pointer init(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer inverseForRelationshipKey(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseForRelationshipKey:"),
      arg,
    );
  }

  static int isAbstract(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isAbstract"),
    );
  }

  static int isEqual(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isKindOfEntity(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isKindOfEntity:"),
      arg,
    );
  }

  static Pointer keypathsToPrefetchForDeletePropagation(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keypathsToPrefetchForDeletePropagation"),
    );
  }

  static Pointer knownKeysMappingStrategy(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeysMappingStrategy"),
    );
  }

  static Pointer managedObjectClassName(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectClassName"),
    );
  }

  static Pointer managedObjectModel(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectModel"),
    );
  }

  static Pointer name(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer properties(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("properties"),
    );
  }

  static Pointer propertiesByName(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesByName"),
    );
  }

  static Pointer relationshipsByName(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipsByName"),
    );
  }

  static Pointer relationshipsWithDestinationEntity(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipsWithDestinationEntity:"),
      arg,
    );
  }

  static void release(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer renamingIdentifier(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("renamingIdentifier"),
    );
  }

  static Pointer retain(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setAbstract(
    Pointer<NSEntityDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAbstract:"),
      arg,
    );
  }

  static void setCompoundIndexes(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCompoundIndexes:"),
      arg,
    );
  }

  static void setCoreSpotlightDisplayNameExpression(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCoreSpotlightDisplayNameExpression:"),
      arg,
    );
  }

  static void setElementID(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setElementID:"),
      arg,
    );
  }

  static void setIndexes(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIndexes:"),
      arg,
    );
  }

  static void setManagedObjectClassName(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setManagedObjectClassName:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setProperties(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setProperties:"),
      arg,
    );
  }

  static void setRenamingIdentifier(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRenamingIdentifier:"),
      arg,
    );
  }

  static void setSubentities(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubentities:"),
      arg,
    );
  }

  static void setUniquenessConstraints(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUniquenessConstraints:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void setVersionHashModifier(
    Pointer<NSEntityDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setVersionHashModifier:"),
      arg,
    );
  }

  static Pointer subentities(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subentities"),
    );
  }

  static Pointer subentitiesByName(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subentitiesByName"),
    );
  }

  static Pointer superentity(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("superentity"),
    );
  }

  static Pointer toManyRelationshipKeys(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyRelationshipKeys"),
    );
  }

  static Pointer toOneRelationshipKeys(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toOneRelationshipKeys"),
    );
  }

  static Pointer uniquenessConstraints(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("uniquenessConstraints"),
    );
  }

  static Pointer userInfo(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer versionHash(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHash"),
    );
  }

  static Pointer versionHashModifier(
    Pointer<NSEntityDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHashModifier"),
    );
  }
}

@unsized
class NSEntityMapping extends Struct<NSEntityMapping> {
  factory NSEntityMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSEntityMapping> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSEntityMapping").cast<NSEntityMapping>();
  }

  static Pointer attributeMappings(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeMappings"),
    );
  }

  static void dealloc(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer destinationEntityName(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntityName"),
    );
  }

  static Pointer destinationEntityVersionHash(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntityVersionHash"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entityMigrationPolicyClassName(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityMigrationPolicyClassName"),
    );
  }

  static Pointer init(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEditable(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEqual(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int mappingType(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("mappingType"),
    );
  }

  static Pointer name(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer relationshipMappings(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipMappings"),
    );
  }

  static void setAttributeMappings(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAttributeMappings:"),
      arg,
    );
  }

  static void setDestinationEntityName(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationEntityName:"),
      arg,
    );
  }

  static void setDestinationEntityVersionHash(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationEntityVersionHash:"),
      arg,
    );
  }

  static void setEntityMigrationPolicyClassName(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntityMigrationPolicyClassName:"),
      arg,
    );
  }

  static void setMappingType(
    Pointer<NSEntityMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setMappingType:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setRelationshipMappings(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRelationshipMappings:"),
      arg,
    );
  }

  static void setSourceEntityName(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceEntityName:"),
      arg,
    );
  }

  static void setSourceEntityVersionHash(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceEntityVersionHash:"),
      arg,
    );
  }

  static void setSourceExpression(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceExpression:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSEntityMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static Pointer sourceEntityName(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceEntityName"),
    );
  }

  static Pointer sourceEntityVersionHash(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceEntityVersionHash"),
    );
  }

  static Pointer sourceExpression(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceExpression"),
    );
  }

  static Pointer userInfo(
    Pointer<NSEntityMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

@unsized
class NSEntityMigrationPolicy extends Struct<NSEntityMigrationPolicy> {
  factory NSEntityMigrationPolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSEntityMigrationPolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEntityMigrationPolicy")
        .cast<NSEntityMigrationPolicy>();
  }

  static int beginEntityMapping(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("beginEntityMapping:manager:error:"),
      arg,
      manager,
      error,
    );
  }

  static int createDestinationInstancesForSourceInstance(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer entityMapping,
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "createDestinationInstancesForSourceInstance:entityMapping:manager:error:"),
      arg,
      entityMapping,
      manager,
      error,
    );
  }

  static int createRelationshipsForDestinationInstance(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer entityMapping,
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "createRelationshipsForDestinationInstance:entityMapping:manager:error:"),
      arg,
      entityMapping,
      manager,
      error,
    );
  }

  static int endEntityMapping(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("endEntityMapping:manager:error:"),
      arg,
      manager,
      error,
    );
  }

  static int endInstanceCreationForEntityMapping(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("endInstanceCreationForEntityMapping:manager:error:"),
      arg,
      manager,
      error,
    );
  }

  static int endRelationshipCreationForEntityMapping(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "endRelationshipCreationForEntityMapping:manager:error:"),
      arg,
      manager,
      error,
    );
  }

  static int performCustomValidationForEntityMapping(
    Pointer<NSEntityMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer manager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "performCustomValidationForEntityMapping:manager:error:"),
      arg,
      manager,
      error,
    );
  }
}

@unsized
class NSEntityStoreMapping extends Struct<NSEntityStoreMapping> {
  factory NSEntityStoreMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSEntityStoreMapping> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSEntityStoreMapping").cast<NSEntityStoreMapping>();
  }

  static Pointer attributeColumnDefinitions(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeColumnDefinitions"),
    );
  }

  static Pointer attributeMappings(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeMappings"),
    );
  }

  static Pointer createTableStatement(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createTableStatement"),
    );
  }

  static void dealloc(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer foreignKeyColumnDefinitions(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKeyColumnDefinitions"),
    );
  }

  static Pointer foreignKeyConstraintDefinitions(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKeyConstraintDefinitions"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isSingleTableEntity(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isSingleTableEntity"),
    );
  }

  static Pointer primaryKeyColumnDefinitions(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKeyColumnDefinitions"),
    );
  }

  static Pointer primaryKeys(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKeys"),
    );
  }

  static Pointer propertyMappings(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyMappings"),
    );
  }

  static Pointer relationshipMappings(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipMappings"),
    );
  }

  static void setEntity(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntity:"),
      arg,
    );
  }

  static void setPrimaryKeys(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPrimaryKeys:"),
      arg,
    );
  }

  static void setPropertyMappings(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertyMappings:"),
      arg,
    );
  }

  static void setSingleTableEntity(
    Pointer<NSEntityStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setSingleTableEntity:"),
      arg,
    );
  }

  static void setSubentityColumn(
    Pointer<NSEntityStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubentityColumn:"),
      arg,
    );
  }

  static void setSubentityID(
    Pointer<NSEntityStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setSubentityID:"),
      arg,
    );
  }

  static Pointer subentityColumn(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subentityColumn"),
    );
  }

  static int subentityID(
    Pointer<NSEntityStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("subentityID"),
    );
  }
}

@unsized
class NSExpressionDescription extends Struct<NSExpressionDescription> {
  factory NSExpressionDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSExpressionDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSExpressionDescription")
        .cast<NSExpressionDescription>();
  }

  static void dealloc(
    Pointer<NSExpressionDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSExpressionDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSExpressionDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer expression(
    Pointer<NSExpressionDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("expression"),
    );
  }

  static int expressionResultType(
    Pointer<NSExpressionDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("expressionResultType"),
    );
  }

  static Pointer init(
    Pointer<NSExpressionDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSExpressionDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setExpression(
    Pointer<NSExpressionDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExpression:"),
      arg,
    );
  }

  static void setExpressionResultType(
    Pointer<NSExpressionDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setExpressionResultType:"),
      arg,
    );
  }
}

@unsized
class NSFaultHandler extends Struct<NSFaultHandler> {
  factory NSFaultHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSFaultHandler> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFaultHandler").cast<NSFaultHandler>();
  }

  static Pointer fulfillFault$withContext$error(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fulfillFault:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static void fulfillFault$withContext(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fulfillFault:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer fulfillFault$withContext$forIndex(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required int forIndex,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("fulfillFault:withContext:forIndex:"),
      arg,
      withContext,
      forIndex,
    );
  }

  static Pointer initWithPersistenceStore(
    Pointer<NSFaultHandler> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPersistenceStore:"),
      arg,
    );
  }

  static Pointer retainedFulfillAggregateFaultForObject(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer andRelationship,
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "retainedFulfillAggregateFaultForObject:andRelationship:withContext:"),
      arg,
      andRelationship,
      withContext,
    );
  }

  static Pointer retainedOrderedFaultInformationForAggregateFaultForObject(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer andRelationship,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "retainedOrderedFaultInformationForAggregateFaultForObject:andRelationship:withContext:error:"),
      arg,
      andRelationship,
      withContext,
      error,
    );
  }

  static void turnObject(
    Pointer<NSFaultHandler> _self,
    Pointer arg, {
    @required Pointer intoFaultWithContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("turnObject:intoFaultWithContext:"),
      arg,
      intoFaultWithContext,
    );
  }
}

@unsized
class NSFetchIndexDescription extends Struct<NSFetchIndexDescription> {
  factory NSFetchIndexDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchIndexDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFetchIndexDescription")
        .cast<NSFetchIndexDescription>();
  }

  static void dealloc(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer elements(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("elements"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static int hash(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithName$elements(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg, {
    @required Pointer elements,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithName:elements:"),
      arg,
      elements,
    );
  }

  static Pointer initWithName$predicate$elements$entity(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg, {
    @required Pointer predicate,
    @required Pointer elements,
    @required Pointer entity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithName:predicate:elements:entity:"),
      arg,
      predicate,
      elements,
      entity,
    );
  }

  static int isEqual(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer name(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer partialIndexPredicate(
    Pointer<NSFetchIndexDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("partialIndexPredicate"),
    );
  }

  static void setElements(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setElements:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setPartialIndexPredicate(
    Pointer<NSFetchIndexDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPartialIndexPredicate:"),
      arg,
    );
  }
}

@unsized
class NSFetchIndexElementDescription
    extends Struct<NSFetchIndexElementDescription> {
  factory NSFetchIndexElementDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchIndexElementDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFetchIndexElementDescription")
        .cast<NSFetchIndexElementDescription>();
  }

  static int collationType(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("collationType"),
    );
  }

  static void dealloc(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer indexDescription(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexDescription"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithProperty(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg, {
    @required int collationType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithProperty:collationType:"),
      arg,
      collationType,
    );
  }

  static Pointer initWithPropertyName$collationType(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg, {
    @required int collationType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithPropertyName:collationType:"),
      arg,
      collationType,
    );
  }

  static Pointer initWithPropertyName$property$collationType$ascending(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg, {
    @required Pointer property,
    @required int collationType,
    @required int ascending,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPropertyName:property:collationType:ascending:"),
      arg,
      property,
      collationType,
      ascending,
    );
  }

  static int isAscending(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isAscending"),
    );
  }

  static int isEqual(
    Pointer<NSFetchIndexElementDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer property(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("property"),
    );
  }

  static Pointer propertyName(
    Pointer<NSFetchIndexElementDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyName"),
    );
  }

  static void setAscending(
    Pointer<NSFetchIndexElementDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAscending:"),
      arg,
    );
  }

  static void setCollationType(
    Pointer<NSFetchIndexElementDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setCollationType:"),
      arg,
    );
  }
}

@unsized
class NSFetchRequest extends Struct<NSFetchRequest> {
  factory NSFetchRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchRequest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFetchRequest").cast<NSFetchRequest>();
  }

  static Pointer affectedStores(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("affectedStores"),
    );
  }

  static void dealloc(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer encodeForXPC(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("encodeForXPC"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer entityName(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static int excludesPendingChanges(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("excludesPendingChanges"),
    );
  }

  static Pointer execute(
    Pointer<NSFetchRequest> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("execute:"),
      arg,
    );
  }

  static int fetchBatchSize(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchBatchSize"),
    );
  }

  static int fetchLimit(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchLimit"),
    );
  }

  static int fetchOffset(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchOffset"),
    );
  }

  static Pointer groupByProperties(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("groupByProperties"),
    );
  }

  static int hasChanges(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static int hash(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer havingPredicate(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("havingPredicate"),
    );
  }

  static int includeRowData(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includeRowData"),
    );
  }

  static int includesPendingChanges(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesPendingChanges"),
    );
  }

  static int includesPropertyValues(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesPropertyValues"),
    );
  }

  static int includesSubentities(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesSubentities"),
    );
  }

  static Pointer init(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithEntityName(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntityName:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicate(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer prefetchRelationshipKeys(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("prefetchRelationshipKeys"),
    );
  }

  static int prepopulateObjects(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("prepopulateObjects"),
    );
  }

  static Pointer propertiesToFetch(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToFetch"),
    );
  }

  static Pointer propertiesToGroupBy(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToGroupBy"),
    );
  }

  static Pointer relationshipKeyPathsForPrefetching(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipKeyPathsForPrefetching"),
    );
  }

  static int requestType(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int resultType(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int resultsAsObjectIDs(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resultsAsObjectIDs"),
    );
  }

  static int returnsDistinctResults(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("returnsDistinctResults"),
    );
  }

  static int returnsObjectsAsFaults(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("returnsObjectsAsFaults"),
    );
  }

  static void setAffectedStores(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAffectedStores:"),
      arg,
    );
  }

  static void setEntity(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntity:"),
      arg,
    );
  }

  static void setExcludesPendingChanges(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExcludesPendingChanges:"),
      arg,
    );
  }

  static void setFetchBatchSize(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setFetchBatchSize:"),
      arg,
    );
  }

  static void setFetchLimit(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setFetchLimit:"),
      arg,
    );
  }

  static void setFetchOffset(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setFetchOffset:"),
      arg,
    );
  }

  static void setGroupByProperties(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGroupByProperties:"),
      arg,
    );
  }

  static void setHavingPredicate(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setHavingPredicate:"),
      arg,
    );
  }

  static void setIncludeRowData(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludeRowData:"),
      arg,
    );
  }

  static void setIncludesPendingChanges(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesPendingChanges:"),
      arg,
    );
  }

  static void setIncludesPropertyValues(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesPropertyValues:"),
      arg,
    );
  }

  static void setIncludesSubentities(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesSubentities:"),
      arg,
    );
  }

  static void setPredicate(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static void setPrefetchRelationshipKeys(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPrefetchRelationshipKeys:"),
      arg,
    );
  }

  static void setPrepopulateObjects(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setPrepopulateObjects:"),
      arg,
    );
  }

  static void setPropertiesToFetch(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertiesToFetch:"),
      arg,
    );
  }

  static void setPropertiesToGroupBy(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertiesToGroupBy:"),
      arg,
    );
  }

  static void setRelationshipKeyPathsForPrefetching(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRelationshipKeyPathsForPrefetching:"),
      arg,
    );
  }

  static void setResultType(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultType:"),
      arg,
    );
  }

  static void setResultsAsObjectIDs(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setResultsAsObjectIDs:"),
      arg,
    );
  }

  static void setReturnsDistinctResults(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReturnsDistinctResults:"),
      arg,
    );
  }

  static void setReturnsObjectsAsFaults(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReturnsObjectsAsFaults:"),
      arg,
    );
  }

  static void setShallowInheritance(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShallowInheritance:"),
      arg,
    );
  }

  static void setShouldRefreshRefetchedObjects(
    Pointer<NSFetchRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldRefreshRefetchedObjects:"),
      arg,
    );
  }

  static void setSortDescriptors(
    Pointer<NSFetchRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSortDescriptors:"),
      arg,
    );
  }

  static int shallowInheritance(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shallowInheritance"),
    );
  }

  static int shouldRefreshRefetchedObjects(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldRefreshRefetchedObjects"),
    );
  }

  static Pointer sortDescriptors(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sortDescriptors"),
    );
  }

  static Pointer stores(
    Pointer<NSFetchRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("stores"),
    );
  }
}

@unsized
class NSFetchRequestExpression extends Struct<NSFetchRequestExpression> {
  factory NSFetchRequestExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchRequestExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFetchRequestExpression")
        .cast<NSFetchRequestExpression>();
  }

  static void acceptVisitor(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer contextExpression(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("contextExpression"),
    );
  }

  static void dealloc(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int expressionType(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("expressionType"),
    );
  }

  static Pointer expressionValueWithObject(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg, {
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initForFetch(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg, {
    @required Pointer context,
    @required int countOnly,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("initForFetch:context:countOnly:"),
      arg,
      context,
      countOnly,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isCountOnlyRequest(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isCountOnlyRequest"),
    );
  }

  static int isEqual(
    Pointer<NSFetchRequestExpression> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer predicateFormat(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer requestExpression(
    Pointer<NSFetchRequestExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("requestExpression"),
    );
  }
}

@unsized
class NSFetchedPropertyDescription
    extends Struct<NSFetchedPropertyDescription> {
  factory NSFetchedPropertyDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchedPropertyDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFetchedPropertyDescription")
        .cast<NSFetchedPropertyDescription>();
  }

  static void dealloc(
    Pointer<NSFetchedPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSFetchedPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFetchedPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer fetchRequest(
    Pointer<NSFetchedPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSFetchedPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSFetchedPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isReadOnly(
    Pointer<NSFetchedPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReadOnly"),
    );
  }

  static int isTransient(
    Pointer<NSFetchedPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTransient"),
    );
  }

  static void setFetchRequest(
    Pointer<NSFetchedPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFetchRequest:"),
      arg,
    );
  }
}

@unsized
class NSFetchedResultsController extends Struct<NSFetchedResultsController> {
  factory NSFetchedResultsController._() {
    throw UnimplementedError();
  }
  static Pointer<NSFetchedResultsController> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFetchedResultsController")
        .cast<NSFetchedResultsController>();
  }

  static Pointer cacheName(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheName"),
    );
  }

  static void dealloc(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer fetchRequest(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static Pointer fetchedObjects(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchedObjects"),
    );
  }

  static Pointer indexPathForObject(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexPathForObject:"),
      arg,
    );
  }

  static Pointer initWithFetchRequest(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg, {
    @required Pointer managedObjectContext,
    @required Pointer sectionNameKeyPath,
    @required Pointer cacheName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:"),
      arg,
      managedObjectContext,
      sectionNameKeyPath,
      cacheName,
    );
  }

  static Pointer managedObjectContext(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer objectAtIndexPath(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectAtIndexPath:"),
      arg,
    );
  }

  static int performFetch(
    Pointer<NSFetchedResultsController> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("performFetch:"),
      arg,
    );
  }

  static int sectionForSectionIndexTitle(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_returns_Int64(
      _self,
      _objc.getSelector("sectionForSectionIndexTitle:atIndex:"),
      arg,
      atIndex,
    );
  }

  static Pointer sectionIndexTitleForSectionName(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sectionIndexTitleForSectionName:"),
      arg,
    );
  }

  static Pointer sectionIndexTitles(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sectionIndexTitles"),
    );
  }

  static Pointer sectionNameKeyPath(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sectionNameKeyPath"),
    );
  }

  static Pointer sections(
    Pointer<NSFetchedResultsController> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sections"),
    );
  }

  static void setDelegate(
    Pointer<NSFetchedResultsController> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

@unsized
class NSGenerationToken extends Struct<NSGenerationToken> {
  factory NSGenerationToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSGenerationToken> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSGenerationToken").cast<NSGenerationToken>();
  }

  static void dealloc(
    Pointer<NSGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int generation(
    Pointer<NSGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("generation"),
    );
  }

  static Pointer initForStore(
    Pointer<NSGenerationToken> _self,
    Pointer arg, {
    @required int origin,
    @required int generation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_Int64_returns_ptr(
      _self,
      _objc.getSelector("initForStore:origin:generation:"),
      arg,
      origin,
      generation,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithStoreIdentifier(
    Pointer<NSGenerationToken> _self,
    Pointer arg, {
    @required int origin,
    @required int generation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_Int64_returns_ptr(
      _self,
      _objc.getSelector("initWithStoreIdentifier:origin:generation:"),
      arg,
      origin,
      generation,
    );
  }

  static int isEqual(
    Pointer<NSGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isReferencingStore(
    Pointer<NSGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReferencingStore:"),
      arg,
    );
  }

  static int origin(
    Pointer<NSGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("origin"),
    );
  }

  static Pointer storeIdentifier(
    Pointer<NSGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeIdentifier"),
    );
  }
}

@unsized
class NSGenerationalRowCache extends Struct<NSGenerationalRowCache> {
  factory NSGenerationalRowCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSGenerationalRowCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSGenerationalRowCache")
        .cast<NSGenerationalRowCache>();
  }

  static void dealloc(
    Pointer<NSGenerationalRowCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void forgetAllExternalData(
    Pointer<NSGenerationalRowCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("forgetAllExternalData"),
    );
  }

  static Pointer initWithStore(
    Pointer<NSGenerationalRowCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:"),
      arg,
    );
  }

  static void removeRowCacheForGeneration(
    Pointer<NSGenerationalRowCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeRowCacheForGeneration:"),
      arg,
    );
  }

  static void removeRowCacheForGenerationWithIdentifier(
    Pointer<NSGenerationalRowCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeRowCacheForGenerationWithIdentifier:"),
      arg,
    );
  }

  static Pointer rowCacheForGeneration(
    Pointer<NSGenerationalRowCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowCacheForGeneration:"),
      arg,
    );
  }
}

@unsized
class NSIncrementalStore extends Struct<NSIncrementalStore> {
  factory NSIncrementalStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSIncrementalStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSIncrementalStore").cast<NSIncrementalStore>();
  }

  static void dealloc(
    Pointer<NSIncrementalStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer executeRequest(
    Pointer<NSIncrementalStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static int load(
    Pointer<NSIncrementalStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static int loadMetadata(
    Pointer<NSIncrementalStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadMetadata:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSIncrementalStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidRegisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSIncrementalStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidUnregisterObjectsWithIDs:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<NSIncrementalStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer newObjectIDForEntity(
    Pointer<NSIncrementalStore> _self,
    Pointer arg, {
    @required Pointer referenceObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newObjectIDForEntity:referenceObject:"),
      arg,
      referenceObject,
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSIncrementalStore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSIncrementalStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSIncrementalStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer referenceObjectForObjectID(
    Pointer<NSIncrementalStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("referenceObjectForObjectID:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSIncrementalStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }
}

@unsized
class NSIncrementalStoreNode extends Struct<NSIncrementalStoreNode> {
  factory NSIncrementalStoreNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSIncrementalStoreNode> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSIncrementalStoreNode")
        .cast<NSIncrementalStoreNode>();
  }

  static void dealloc(
    Pointer<NSIncrementalStoreNode> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSIncrementalStoreNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithObjectID$fromSQLRow(
    Pointer<NSIncrementalStoreNode> _self,
    Pointer arg, {
    @required Pointer fromSQLRow,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:fromSQLRow:"),
      arg,
      fromSQLRow,
    );
  }

  static Pointer initWithObjectID$withValues$version(
    Pointer<NSIncrementalStoreNode> _self,
    Pointer arg, {
    @required Pointer withValues,
    @required int version,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:withValues:version:"),
      arg,
      withValues,
      version,
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSIncrementalStoreNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static Pointer objectID(
    Pointer<NSIncrementalStoreNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static void updateFromSQLRow(
    Pointer<NSIncrementalStoreNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateFromSQLRow:"),
      arg,
    );
  }

  static void updateWithValues(
    Pointer<NSIncrementalStoreNode> _self,
    Pointer arg, {
    @required int version,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("updateWithValues:version:"),
      arg,
      version,
    );
  }

  static Pointer valueForPropertyDescription(
    Pointer<NSIncrementalStoreNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForPropertyDescription:"),
      arg,
    );
  }

  static int version(
    Pointer<NSIncrementalStoreNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("version"),
    );
  }
}

@unsized
class NSJoin extends Struct<NSJoin> {
  factory NSJoin._() {
    throw UnimplementedError();
  }
  static Pointer<NSJoin> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSJoin").cast<NSJoin>();
  }

  static void dealloc(
    Pointer<NSJoin> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationAttributeName(
    Pointer<NSJoin> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationAttributeName"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSJoin> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSJoin> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSJoin> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithSourceAttributeName(
    Pointer<NSJoin> _self,
    Pointer arg, {
    @required Pointer destinationAttributeName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initWithSourceAttributeName:destinationAttributeName:"),
      arg,
      destinationAttributeName,
    );
  }

  static int isEqual(
    Pointer<NSJoin> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer sourceAttributeName(
    Pointer<NSJoin> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceAttributeName"),
    );
  }
}

@unsized
class NSKnownKeysDictionary extends Struct<NSKnownKeysDictionary> {
  factory NSKnownKeysDictionary._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysDictionary> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysDictionary")
        .cast<NSKnownKeysDictionary>();
  }

  static void getKeys(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getKeys:"),
      arg,
    );
  }

  static void getObjects(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getObjects:"),
      arg,
    );
  }

  static void getObjects$andKeys(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer<Pointer> arg, {
    @required Pointer<Pointer> andKeys,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getObjects:andKeys:"),
      arg,
      andKeys,
    );
  }

  static Pointer initForKeys(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:"),
      arg,
    );
  }

  static Pointer initWithSearchStrategy(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSearchStrategy:"),
      arg,
    );
  }

  static Pointer mapping(
    Pointer<NSKnownKeysDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mapping"),
    );
  }

  static void setValue(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setValue:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void setValues(
    Pointer<NSKnownKeysDictionary> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValues:"),
      arg,
    );
  }

  static Pointer valueAtIndex(
    Pointer<NSKnownKeysDictionary> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("valueAtIndex:"),
      arg,
    );
  }

  static Pointer<Pointer> values(
    Pointer<NSKnownKeysDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("values"),
    );
  }
}

@unsized
class NSKnownKeysDictionary1 extends Struct<NSKnownKeysDictionary1> {
  factory NSKnownKeysDictionary1._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysDictionary1> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysDictionary1")
        .cast<NSKnownKeysDictionary1>();
  }

  static void addEntriesFromDictionary(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addEntriesFromDictionary:"),
      arg,
    );
  }

  static Pointer allKeys(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer allValues(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allValues"),
    );
  }

  static Pointer classForArchiver(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("classForArchiver"),
    );
  }

  static Pointer classForCoder(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int count(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getKeys(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getKeys:"),
      arg,
    );
  }

  static void getObjects(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getObjects:"),
      arg,
    );
  }

  static void getObjects$andKeys(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer<Pointer> arg, {
    @required Pointer<Pointer> andKeys,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("getObjects:andKeys:"),
      arg,
      andKeys,
    );
  }

  static int isEqualToDictionary(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqualToDictionary:"),
      arg,
    );
  }

  static Pointer keyEnumerator(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static Pointer mapping(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mapping"),
    );
  }

  static Pointer objectEnumerator(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static Pointer objectForKey(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void release(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeAllObjects(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObjectForKey(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static Pointer retain(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setObject(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setValue(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setValue:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void setValues(
    Pointer<NSKnownKeysDictionary1> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValues:"),
      arg,
    );
  }

  static Pointer valueAtIndex(
    Pointer<NSKnownKeysDictionary1> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("valueAtIndex:"),
      arg,
    );
  }

  static Pointer<Pointer> values(
    Pointer<NSKnownKeysDictionary1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("values"),
    );
  }
}

@unsized
class NSKnownKeysDictionary2 extends Struct<NSKnownKeysDictionary2> {
  factory NSKnownKeysDictionary2._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysDictionary2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysDictionary2")
        .cast<NSKnownKeysDictionary2>();
  }
}

@unsized
class NSKnownKeysMappingStrategy extends Struct<NSKnownKeysMappingStrategy> {
  factory NSKnownKeysMappingStrategy._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysMappingStrategy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysMappingStrategy")
        .cast<NSKnownKeysMappingStrategy>();
  }

  static void encodeWithCoder(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fastIndexForKnownKey(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fastIndexForKnownKey:"),
      arg,
    );
  }

  static int indexForKey(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("indexForKey:"),
      arg,
    );
  }

  static Pointer initForKeys$count(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer<Pointer> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:count:"),
      arg,
      count,
    );
  }

  static Pointer initForKeys(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSKnownKeysMappingStrategy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Pointer> keys(
    Pointer<NSKnownKeysMappingStrategy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keys"),
    );
  }

  static int length(
    Pointer<NSKnownKeysMappingStrategy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

@unsized
class NSKnownKeysMappingStrategy1 extends Struct<NSKnownKeysMappingStrategy1> {
  factory NSKnownKeysMappingStrategy1._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysMappingStrategy1> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysMappingStrategy1")
        .cast<NSKnownKeysMappingStrategy1>();
  }

  static Pointer allKeys(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer classForArchiver(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("classForArchiver"),
    );
  }

  static Pointer classForCoder(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void dealloc(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fastIndexForKnownKey(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fastIndexForKnownKey:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indexForKey(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("indexForKey:"),
      arg,
    );
  }

  static Pointer initForKeys$count(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer<Pointer> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:count:"),
      arg,
      count,
    );
  }

  static Pointer initForKeys(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSKnownKeysMappingStrategy1> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Pointer> keys(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keys"),
    );
  }

  static int length(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void release(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer retain(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSKnownKeysMappingStrategy1> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

@unsized
class NSKnownKeysMappingStrategy2 extends Struct<NSKnownKeysMappingStrategy2> {
  factory NSKnownKeysMappingStrategy2._() {
    throw UnimplementedError();
  }
  static Pointer<NSKnownKeysMappingStrategy2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKnownKeysMappingStrategy2")
        .cast<NSKnownKeysMappingStrategy2>();
  }

  static void dealloc(
    Pointer<NSKnownKeysMappingStrategy2> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSKnownKeysMappingStrategy2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initForKeys$count(
    Pointer<NSKnownKeysMappingStrategy2> _self,
    Pointer<Pointer> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:count:"),
      arg,
      count,
    );
  }

  static Pointer initForKeys(
    Pointer<NSKnownKeysMappingStrategy2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForKeys:"),
      arg,
    );
  }

  static void release(
    Pointer<NSKnownKeysMappingStrategy2> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer retain(
    Pointer<NSKnownKeysMappingStrategy2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSKnownKeysMappingStrategy2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

@unsized
class NSManagedImmutableObject extends Struct<NSManagedImmutableObject> {
  factory NSManagedImmutableObject._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedImmutableObject> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSManagedImmutableObject")
        .cast<NSManagedImmutableObject>();
  }

  static int implementsSelector(
    Pointer<NSManagedImmutableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("implementsSelector:"),
      arg,
    );
  }

  static Pointer methodSignatureForSelector(
    Pointer<NSManagedImmutableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static int respondsToSelector(
    Pointer<NSManagedImmutableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("respondsToSelector:"),
      arg,
    );
  }

  static Pointer valueForKey(
    Pointer<NSManagedImmutableObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }
}

@unsized
class NSManagedObject extends Struct<NSManagedObject> {
  factory NSManagedObject._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSManagedObject").cast<NSManagedObject>();
  }

  static Pointer abElementForAttribute(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer nodeName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("abElementForAttribute:nodeName:"),
      arg,
      nodeName,
    );
  }

  static int abHasAddressBookContent(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("abHasAddressBookContent"),
    );
  }

  static void awakeFromFetch(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("awakeFromFetch"),
    );
  }

  static void awakeFromInsert(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("awakeFromInsert"),
    );
  }

  static void awakeFromSnapshotEvents(
    Pointer<NSManagedObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("awakeFromSnapshotEvents:"),
      arg,
    );
  }

  static Pointer changedValues(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changedValues"),
    );
  }

  static Pointer changedValuesForCurrentEvent(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changedValuesForCurrentEvent"),
    );
  }

  static Pointer committedValuesForKeys(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("committedValuesForKeys:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer dictionaryWithPropertyValues(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dictionaryWithPropertyValues"),
    );
  }

  static Pointer dictionaryWithValuesForKeys(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dictionaryWithValuesForKeys:"),
      arg,
    );
  }

  static void didAccessValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didAccessValueForKey:"),
      arg,
    );
  }

  static void didChange(
    Pointer<NSManagedObject> _self,
    int arg, {
    @required Pointer valuesAtIndexes,
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didChange:valuesAtIndexes:forKey:"),
      arg,
      valuesAtIndexes,
      forKey,
    );
  }

  static void didChangeValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didChangeValueForKey:"),
      arg,
    );
  }

  static void didChangeValueForKey$withSetMutation$usingObjects(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required int withSetMutation,
    @required Pointer usingObjects,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_ptr_returns_void(
      _self,
      _objc.getSelector("didChangeValueForKey:withSetMutation:usingObjects:"),
      arg,
      withSetMutation,
      usingObjects,
    );
  }

  static void didFireFault(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didFireFault"),
    );
  }

  static void didRefresh(
    Pointer<NSManagedObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("didRefresh:"),
      arg,
    );
  }

  static void didSave(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didSave"),
    );
  }

  static void didTurnIntoFault(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didTurnIntoFault"),
    );
  }

  static void diffOrderedSets(
    Pointer<NSManagedObject> _self,
    Pointer _arg2,
    Pointer _arg3,
    Pointer<Pointer> _arg4,
    Pointer<Pointer> _arg5,
    Pointer<Pointer> _arg6,
    Pointer<Pointer> _arg7,
    Pointer<Pointer> _arg8,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("diffOrderedSets:::::::"),
      _arg2,
      _arg3,
      _arg4,
      _arg5,
      _arg6,
      _arg7,
      _arg8,
    );
  }

  static void encodeWithCoder(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static int faultingState(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("faultingState"),
    );
  }

  static int hasChanges(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static int hasFaultForRelationshipNamed(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasFaultForRelationshipNamed:"),
      arg,
    );
  }

  static int hasPersistentChangedValues(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasPersistentChangedValues"),
    );
  }

  static int hash(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int implementsSelector(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("implementsSelector:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithContext(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContext:"),
      arg,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer insertIntoManagedObjectContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:insertIntoManagedObjectContext:"),
      arg,
      insertIntoManagedObjectContext,
    );
  }

  static int isDeleted(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static int isEqual(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isFault(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFault"),
    );
  }

  static int isInserted(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isInserted"),
    );
  }

  static int isRelationshipForKeyFault(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRelationshipForKeyFault:"),
      arg,
    );
  }

  static int isUpdated(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUpdated"),
    );
  }

  static Pointer managedObjectContext(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer methodSignatureForSelector(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static Pointer mutableArrayValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mutableArrayValueForKey:"),
      arg,
    );
  }

  static Pointer mutableOrderedSetValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mutableOrderedSetValueForKey:"),
      arg,
    );
  }

  static Pointer mutableSetValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mutableSetValueForKey:"),
      arg,
    );
  }

  static Pointer objectID(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static Pointer objectIDsForRelationshipNamed(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDsForRelationshipNamed:"),
      arg,
    );
  }

  static Pointer observationInfo(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("observationInfo"),
    );
  }

  static void prepareForDeletion(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareForDeletion"),
    );
  }

  static Pointer primitiveValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primitiveValueForKey:"),
      arg,
    );
  }

  static void release(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static int respondsToSelector(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("respondsToSelector:"),
      arg,
    );
  }

  static Pointer retain(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setNilValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setNilValueForKey:"),
      arg,
    );
  }

  static void setObservationInfo(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setObservationInfo:"),
      arg,
    );
  }

  static void setPrimitiveValue(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPrimitiveValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setValue$forKey(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setValue$forUndefinedKey(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer forUndefinedKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forUndefinedKey:"),
      arg,
      forUndefinedKey,
    );
  }

  static void setValuesForKeysWithDictionary(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValuesForKeysWithDictionary:"),
      arg,
    );
  }

  static void setValuesWithObject(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValuesWithObject:"),
      arg,
    );
  }

  static int validateForDelete(
    Pointer<NSManagedObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateForDelete:"),
      arg,
    );
  }

  static int validateForInsert(
    Pointer<NSManagedObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateForInsert:"),
      arg,
    );
  }

  static int validateForUpdate(
    Pointer<NSManagedObject> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateForUpdate:"),
      arg,
    );
  }

  static int validateRequiredAttributesForObject(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateRequiredAttributesForObject:error:"),
      arg,
      error,
    );
  }

  static int validateValue(
    Pointer<NSManagedObject> _self,
    Pointer<Pointer> arg, {
    @required Pointer forKey,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateValue:forKey:error:"),
      arg,
      forKey,
      error,
    );
  }

  static Pointer valueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static Pointer valueForUndefinedKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForUndefinedKey:"),
      arg,
    );
  }

  static int wasForgotten(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("wasForgotten"),
    );
  }

  static void willAccessValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willAccessValueForKey:"),
      arg,
    );
  }

  static void willChange(
    Pointer<NSManagedObject> _self,
    int arg, {
    @required Pointer valuesAtIndexes,
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willChange:valuesAtIndexes:forKey:"),
      arg,
      valuesAtIndexes,
      forKey,
    );
  }

  static void willChangeValueForKey(
    Pointer<NSManagedObject> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willChangeValueForKey:"),
      arg,
    );
  }

  static void willChangeValueForKey$withSetMutation$usingObjects(
    Pointer<NSManagedObject> _self,
    Pointer arg, {
    @required int withSetMutation,
    @required Pointer usingObjects,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_ptr_returns_void(
      _self,
      _objc.getSelector("willChangeValueForKey:withSetMutation:usingObjects:"),
      arg,
      withSetMutation,
      usingObjects,
    );
  }

  static void willFireFault(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willFireFault"),
    );
  }

  static void willRefresh(
    Pointer<NSManagedObject> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("willRefresh:"),
      arg,
    );
  }

  static void willSave(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willSave"),
    );
  }

  static void willTurnIntoFault(
    Pointer<NSManagedObject> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willTurnIntoFault"),
    );
  }
}

@unsized
class NSManagedObjectContext extends Struct<NSManagedObjectContext> {
  factory NSManagedObjectContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedObjectContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSManagedObjectContext")
        .cast<NSManagedObjectContext>();
  }

  static void abClearLastImportGroup(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("abClearLastImportGroup"),
    );
  }

  static Pointer abCreateObjectWithEntityName(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("abCreateObjectWithEntityName:"),
      arg,
    );
  }

  static int abHasCommonStoreWithContext(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("abHasCommonStoreWithContext:"),
      arg,
    );
  }

  static void abPruneEmptyRelationships(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("abPruneEmptyRelationships"),
    );
  }

  static void abPurgeManagedObjectContext(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("abPurgeManagedObjectContext"),
    );
  }

  static void abPurgeManagedObjectContextUsingPredicate(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("abPurgeManagedObjectContextUsingPredicate:"),
      arg,
    );
  }

  static void abSuperMergeChangesFromContextDidSaveNotification(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("abSuperMergeChangesFromContextDidSaveNotification:"),
      arg,
    );
  }

  static int abUsesStoreWithURL(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("abUsesStoreWithURL:"),
      arg,
    );
  }

  static void assertOnImproperDealloc(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("assertOnImproperDealloc"),
    );
  }

  static void assignObject(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer toPersistentStore,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("assignObject:toPersistentStore:"),
      arg,
      toPersistentStore,
    );
  }

  static int automaticallyMergesChangesFromParent(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("automaticallyMergesChangesFromParent"),
    );
  }

  static Pointer changeTrackingToken(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeTrackingToken"),
    );
  }

  static int commitEditing(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("commitEditing"),
    );
  }

  static int commitEditingAndReturnError(
    Pointer<NSManagedObjectContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("commitEditingAndReturnError:"),
      arg,
    );
  }

  static void commitEditingWithDelegate(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer didCommitSelector,
    @required Pointer contextInfo,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "commitEditingWithDelegate:didCommitSelector:contextInfo:"),
      arg,
      didCommitSelector,
      contextInfo,
    );
  }

  static int concurrencyType(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("concurrencyType"),
    );
  }

  static int countForFetchRequest(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("countForFetchRequest:error:"),
      arg,
      error,
    );
  }

  static void dealloc(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void deleteObject(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("deleteObject:"),
      arg,
    );
  }

  static Pointer deletedObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedObjects"),
    );
  }

  static Pointer description(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void detectConflictsForObject(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("detectConflictsForObject:"),
      arg,
    );
  }

  static void discardEditing(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("discardEditing"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer executeFetchRequest(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeFetchRequest:error:"),
      arg,
      error,
    );
  }

  static Pointer executeRequest$withContext$error(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeRequest$error(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:error:"),
      arg,
      error,
    );
  }

  static Pointer existingObjectWithID(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("existingObjectWithID:error:"),
      arg,
      error,
    );
  }

  static void finalize(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static void handlePeerContextDidSaveNotification(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("handlePeerContextDidSaveNotification:"),
      arg,
    );
  }

  static int hasChanges(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static Pointer init(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithConcurrencyType(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithConcurrencyType:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("insertObject:"),
      arg,
    );
  }

  static Pointer insertedObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertedObjects"),
    );
  }

  static int isEditing(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEditing"),
    );
  }

  static void lock(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static void lockObjectStore(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("lockObjectStore"),
    );
  }

  static void logDetailedValidationError(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logDetailedValidationError:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidRegisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidUnregisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void mergeChangesFromContextDidSaveNotification(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("mergeChangesFromContextDidSaveNotification:"),
      arg,
    );
  }

  static Pointer mergePolicy(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mergePolicy"),
    );
  }

  static Pointer name(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static void objectDidBeginEditing(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("objectDidBeginEditing:"),
      arg,
    );
  }

  static void objectDidEndEditing(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("objectDidEndEditing:"),
      arg,
    );
  }

  static Pointer objectRegisteredForID(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectRegisteredForID:"),
      arg,
    );
  }

  static void objectWillChange(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("objectWillChange:"),
      arg,
    );
  }

  static Pointer objectWithID(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectWithID:"),
      arg,
    );
  }

  static void observeValueForKeyPath(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer ofObject,
    @required Pointer change,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("observeValueForKeyPath:ofObject:change:context:"),
      arg,
      ofObject,
      change,
      context,
    );
  }

  static int obtainPermanentIDsForObjects(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer parentContext(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("parentContext"),
    );
  }

  static void performBlock(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBlock:"),
      arg,
    );
  }

  static void performBlockAndWait(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBlockAndWait:"),
      arg,
    );
  }

  static Pointer performBlockWithResult(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("performBlockWithResult:"),
      arg,
    );
  }

  static Pointer performFetch(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("performFetch:error:"),
      arg,
      error,
    );
  }

  static void performWithOptions(
    Pointer<NSManagedObjectContext> _self,
    int arg, {
    @required Pointer andBlock,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_ptr_returns_void(
      _self,
      _objc.getSelector("performWithOptions:andBlock:"),
      arg,
      andBlock,
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static void processPendingChanges(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processPendingChanges"),
    );
  }

  static int propagatesDeletesAtEndOfEvent(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("propagatesDeletesAtEndOfEvent"),
    );
  }

  static Pointer queryGenerationToken(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("queryGenerationToken"),
    );
  }

  static void redo(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("redo"),
    );
  }

  static void refreshAllObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("refreshAllObjects"),
    );
  }

  static void refreshObject(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required int mergeChanges,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("refreshObject:mergeChanges:"),
      arg,
      mergeChanges,
    );
  }

  static Pointer registeredObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("registeredObjects"),
    );
  }

  static void release(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void reset(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static Pointer retain(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainsRegisteredObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("retainsRegisteredObjects"),
    );
  }

  static void rollback(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("rollback"),
    );
  }

  static int save(
    Pointer<NSManagedObjectContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("save:"),
      arg,
    );
  }

  static void setAutomaticallyMergesChangesFromParent(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticallyMergesChangesFromParent:"),
      arg,
    );
  }

  static void setMergePolicy(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMergePolicy:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setParentContext(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setParentContext:"),
      arg,
    );
  }

  static void setPersistentStoreCoordinator(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPersistentStoreCoordinator:"),
      arg,
    );
  }

  static void setPropagatesDeletesAtEndOfEvent(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setPropagatesDeletesAtEndOfEvent:"),
      arg,
    );
  }

  static int setQueryGenerationFromToken(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("setQueryGenerationFromToken:error:"),
      arg,
      error,
    );
  }

  static void setRetainsRegisteredObjects(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setRetainsRegisteredObjects:"),
      arg,
    );
  }

  static void setShouldDeleteInaccessibleFaults(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldDeleteInaccessibleFaults:"),
      arg,
    );
  }

  static void setShouldPerformSecureOperation(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldPerformSecureOperation:"),
      arg,
    );
  }

  static void setShouldRefreshAfterSave(
    Pointer<NSManagedObjectContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldRefreshAfterSave:"),
      arg,
    );
  }

  static void setStalenessInterval(
    Pointer<NSManagedObjectContext> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_returns_void(
      _self,
      _objc.getSelector("setStalenessInterval:"),
      arg,
    );
  }

  static void setTransactionAuthor(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionAuthor:"),
      arg,
    );
  }

  static void setUndoManager(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUndoManager:"),
      arg,
    );
  }

  static int shouldDeleteInaccessibleFaults(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldDeleteInaccessibleFaults"),
    );
  }

  static int shouldHandleInaccessibleFault(
    Pointer<NSManagedObjectContext> _self,
    Pointer arg, {
    @required Pointer forObjectID,
    @required Pointer triggeredByProperty,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:"),
      arg,
      forObjectID,
      triggeredByProperty,
    );
  }

  static int shouldPerformSecureOperation(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldPerformSecureOperation"),
    );
  }

  static int shouldRefreshAfterSave(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldRefreshAfterSave"),
    );
  }

  static double stalenessInterval(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_float64(
      _self,
      _objc.getSelector("stalenessInterval"),
    );
  }

  static Pointer transactionAuthor(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionAuthor"),
    );
  }

  static int tryLock(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static void undo(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("undo"),
    );
  }

  static Pointer undoManager(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("undoManager"),
    );
  }

  static void unlock(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }

  static void unlockObjectStore(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unlockObjectStore"),
    );
  }

  static Pointer updatedObjects(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedObjects"),
    );
  }

  static Pointer userInfo(
    Pointer<NSManagedObjectContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

@unsized
class NSManagedObjectID extends Struct<NSManagedObjectID> {
  factory NSManagedObjectID._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedObjectID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSManagedObjectID").cast<NSManagedObjectID>();
  }

  static Pointer URIRepresentation(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URIRepresentation"),
    );
  }

  static Pointer description(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSManagedObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer entityName(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSManagedObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isTemporaryID(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTemporaryID"),
    );
  }

  static Pointer persistentStore(
    Pointer<NSManagedObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStore"),
    );
  }
}

@unsized
class NSManagedObjectModel extends Struct<NSManagedObjectModel> {
  factory NSManagedObjectModel._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedObjectModel> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSManagedObjectModel").cast<NSManagedObjectModel>();
  }

  static Pointer configurations(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurations"),
    );
  }

  static void dealloc(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entities(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entities"),
    );
  }

  static Pointer entitiesByName(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesByName"),
    );
  }

  static Pointer entitiesForConfiguration(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesForConfiguration:"),
      arg,
    );
  }

  static Pointer entityVersionHashesByName(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityVersionHashesByName"),
    );
  }

  static Pointer fetchRequestFromTemplateWithName(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg, {
    @required Pointer substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "fetchRequestFromTemplateWithName:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static Pointer fetchRequestTemplateForName(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestTemplateForName:"),
      arg,
    );
  }

  static Pointer fetchRequestTemplatesByName(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestTemplatesByName"),
    );
  }

  static int hash(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer immutableCopy(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("immutableCopy"),
    );
  }

  static Pointer init(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithContentsOfOptimizedURL(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContentsOfOptimizedURL:"),
      arg,
    );
  }

  static Pointer initWithContentsOfURL(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContentsOfURL:"),
      arg,
    );
  }

  static Pointer initWithContentsOfURL$forStoreMetadata(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg, {
    @required Pointer forStoreMetadata,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContentsOfURL:forStoreMetadata:"),
      arg,
      forStoreMetadata,
    );
  }

  static int isConfiguration(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg, {
    @required Pointer compatibleWithStoreMetadata,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isConfiguration:compatibleWithStoreMetadata:"),
      arg,
      compatibleWithStoreMetadata,
    );
  }

  static int isEditable(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEqual(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer localizationDictionary(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localizationDictionary"),
    );
  }

  static void setEntities(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntities:"),
      arg,
    );
  }

  static void setEntities$forConfiguration(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg, {
    @required Pointer forConfiguration,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntities:forConfiguration:"),
      arg,
      forConfiguration,
    );
  }

  static void setFetchRequestTemplate(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg, {
    @required Pointer forName,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFetchRequestTemplate:forName:"),
      arg,
      forName,
    );
  }

  static void setLocalizationDictionary(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLocalizationDictionary:"),
      arg,
    );
  }

  static void setVersionIdentifiers(
    Pointer<NSManagedObjectModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setVersionIdentifiers:"),
      arg,
    );
  }

  static Pointer versionHash(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHash"),
    );
  }

  static Pointer versionIdentifiers(
    Pointer<NSManagedObjectModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionIdentifiers"),
    );
  }
}

@unsized
class NSManagedObjectModelBundle extends Struct<NSManagedObjectModelBundle> {
  factory NSManagedObjectModelBundle._() {
    throw UnimplementedError();
  }
  static Pointer<NSManagedObjectModelBundle> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSManagedObjectModelBundle")
        .cast<NSManagedObjectModelBundle>();
  }

  static Pointer bundle(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bundle"),
    );
  }

  static Pointer currentVersion(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentVersion"),
    );
  }

  static Pointer currentVersionURL(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentVersionURL"),
    );
  }

  static void dealloc(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithPath(
    Pointer<NSManagedObjectModelBundle> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static Pointer modelVersions(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersions"),
    );
  }

  static Pointer optimizedVersionURL(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("optimizedVersionURL"),
    );
  }

  static Pointer urlForModelVersionWithName(
    Pointer<NSManagedObjectModelBundle> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("urlForModelVersionWithName:"),
      arg,
    );
  }

  static Pointer versionHashInfo(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHashInfo"),
    );
  }

  static Pointer versionInfoDictionary(
    Pointer<NSManagedObjectModelBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionInfoDictionary"),
    );
  }
}

@unsized
class NSMappedObjectStore extends Struct<NSMappedObjectStore> {
  factory NSMappedObjectStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSMappedObjectStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMappedObjectStore").cast<NSMappedObjectStore>();
  }

  static Pointer dataForKey(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dataForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSMappedObjectStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer executeCountRequest(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeCountRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer executeFetchRequest(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeFetchRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer executeRequest(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeSaveChangesRequest(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeSaveChangesRequest:withContext:"),
      arg,
      withContext,
    );
  }

  static Pointer getNewIDForObject(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getNewIDForObject:"),
      arg,
    );
  }

  static Pointer identifier(
    Pointer<NSMappedObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer init(
    Pointer<NSMappedObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidRegisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidUnregisterObjectsWithIDs:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<NSMappedObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static void save(
    Pointer<NSMappedObjectStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("save"),
    );
  }

  static void saveDocumentToPath(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveDocumentToPath:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSMappedObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }
}

@unsized
class NSMappingModel extends Struct<NSMappingModel> {
  factory NSMappingModel._() {
    throw UnimplementedError();
  }
  static Pointer<NSMappingModel> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMappingModel").cast<NSMappingModel>();
  }

  static void dealloc(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMappingModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entityMappings(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityMappings"),
    );
  }

  static Pointer entityMappingsByName(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityMappingsByName"),
    );
  }

  static Pointer init(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSMappingModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithContentsOfURL(
    Pointer<NSMappingModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContentsOfURL:"),
      arg,
    );
  }

  static int isEditable(
    Pointer<NSMappingModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEqual(
    Pointer<NSMappingModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setEntityMappings(
    Pointer<NSMappingModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntityMappings:"),
      arg,
    );
  }
}

@unsized
class NSMemoryObjectStore extends Struct<NSMemoryObjectStore> {
  factory NSMemoryObjectStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSMemoryObjectStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMemoryObjectStore").cast<NSMemoryObjectStore>();
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSMemoryObjectStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static void saveDocumentToPath(
    Pointer<NSMemoryObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveDocumentToPath:"),
      arg,
    );
  }

  static Pointer type(
    Pointer<NSMemoryObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSMemoryStoreEqualityPredicateOperator
    extends Struct<NSMemoryStoreEqualityPredicateOperator> {
  factory NSMemoryStoreEqualityPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSMemoryStoreEqualityPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMemoryStoreEqualityPredicateOperator")
        .cast<NSMemoryStoreEqualityPredicateOperator>();
  }

  static void dealloc(
    Pointer<NSMemoryStoreEqualityPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSMemoryStoreEqualityPredicateOperator> _self,
    Pointer arg, {
    @required Pointer andObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static void setContext(
    Pointer<NSMemoryStoreEqualityPredicateOperator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContext:"),
      arg,
    );
  }
}

@unsized
class NSMemoryStoreInPredicateOperator
    extends Struct<NSMemoryStoreInPredicateOperator> {
  factory NSMemoryStoreInPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSMemoryStoreInPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMemoryStoreInPredicateOperator")
        .cast<NSMemoryStoreInPredicateOperator>();
  }

  static void dealloc(
    Pointer<NSMemoryStoreInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSMemoryStoreInPredicateOperator> _self,
    Pointer arg, {
    @required Pointer andObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static void setContext(
    Pointer<NSMemoryStoreInPredicateOperator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setContext:"),
      arg,
    );
  }
}

@unsized
class NSMergeConflict extends Struct<NSMergeConflict> {
  factory NSMergeConflict._() {
    throw UnimplementedError();
  }
  static Pointer<NSMergeConflict> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMergeConflict").cast<NSMergeConflict>();
  }

  static Pointer ancestorSnapshot(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancestorSnapshot"),
    );
  }

  static Pointer cachedSnapshot(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedSnapshot"),
    );
  }

  static void dealloc(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMergeConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSMergeConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer
      initWithSource$newVersion$oldVersion$snapshot1$snapshot2$snapshot3(
    Pointer<NSMergeConflict> _self,
    Pointer arg, {
    @required int newVersion,
    @required int oldVersion,
    @required Pointer snapshot1,
    @required Pointer snapshot2,
    @required Pointer snapshot3,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithSource:newVersion:oldVersion:snapshot1:snapshot2:snapshot3:"),
      arg,
      newVersion,
      oldVersion,
      snapshot1,
      snapshot2,
      snapshot3,
    );
  }

  static Pointer
      initWithSource$newVersion$oldVersion$cachedSnapshot$persistedSnapshot(
    Pointer<NSMergeConflict> _self,
    Pointer arg, {
    @required int newVersion,
    @required int oldVersion,
    @required Pointer cachedSnapshot,
    @required Pointer persistedSnapshot,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:"),
      arg,
      newVersion,
      oldVersion,
      cachedSnapshot,
      persistedSnapshot,
    );
  }

  static int newVersionNumber(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("newVersionNumber"),
    );
  }

  static Pointer objectForKey(
    Pointer<NSMergeConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static Pointer objectSnapshot(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectSnapshot"),
    );
  }

  static int oldVersionNumber(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("oldVersionNumber"),
    );
  }

  static Pointer persistedSnapshot(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistedSnapshot"),
    );
  }

  static Pointer sourceObject(
    Pointer<NSMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceObject"),
    );
  }

  static Pointer valueForKey(
    Pointer<NSMergeConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }
}

@unsized
class NSMergePolicy extends Struct<NSMergePolicy> {
  factory NSMergePolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSMergePolicy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMergePolicy").cast<NSMergePolicy>();
  }

  static void dealloc(
    Pointer<NSMergePolicy> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMergePolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSMergePolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSMergePolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithMergeType(
    Pointer<NSMergePolicy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithMergeType:"),
      arg,
    );
  }

  static Pointer initWithType(
    Pointer<NSMergePolicy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initWithType:"),
      arg,
    );
  }

  static void mergeToManyRelationshipForSourceObject(
    Pointer<NSMergePolicy> _self,
    Pointer arg, {
    @required Pointer withOldSnapshot,
    @required Pointer newSnapshot,
    @required Pointer andAncestor,
    @required int andLegacyPath,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector(
          "mergeToManyRelationshipForSourceObject:withOldSnapshot:newSnapshot:andAncestor:andLegacyPath:"),
      arg,
      withOldSnapshot,
      newSnapshot,
      andAncestor,
      andLegacyPath,
    );
  }

  static int mergeType(
    Pointer<NSMergePolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("mergeType"),
    );
  }

  static int resolveConflict(
    Pointer<NSMergePolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConflict:"),
      arg,
    );
  }

  static int resolveConflicts(
    Pointer<NSMergePolicy> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConflicts:error:"),
      arg,
      error,
    );
  }

  static int resolveConstraintConflict(
    Pointer<NSMergePolicy> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConstraintConflict:error:"),
      arg,
      error,
    );
  }

  static int resolveConstraintConflicts(
    Pointer<NSMergePolicy> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConstraintConflicts:error:"),
      arg,
      error,
    );
  }

  static int resolveOptimisticLockingVersionConflicts(
    Pointer<NSMergePolicy> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveOptimisticLockingVersionConflicts:error:"),
      arg,
      error,
    );
  }

  static int type(
    Pointer<NSMergePolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSMergedPolicyLocalizationPolicy
    extends Struct<NSMergedPolicyLocalizationPolicy> {
  factory NSMergedPolicyLocalizationPolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSMergedPolicyLocalizationPolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMergedPolicyLocalizationPolicy")
        .cast<NSMergedPolicyLocalizationPolicy>();
  }

  static void addPolicy(
    Pointer<NSMergedPolicyLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPolicy:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSMergedPolicyLocalizationPolicy> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSMergedPolicyLocalizationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }
}

@unsized
class NSMigrationContext extends Struct<NSMigrationContext> {
  factory NSMigrationContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSMigrationContext> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMigrationContext").cast<NSMigrationContext>();
  }

  static void associateSourceInstance(
    Pointer<NSMigrationContext> _self,
    Pointer arg, {
    @required Pointer withDestinationInstance,
    @required Pointer forEntityMapping,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "associateSourceInstance:withDestinationInstance:forEntityMapping:"),
      arg,
      withDestinationInstance,
      forEntityMapping,
    );
  }

  static void clearAssociationTables(
    Pointer<NSMigrationContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearAssociationTables"),
    );
  }

  static Pointer currentEntityMapping(
    Pointer<NSMigrationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentEntityMapping"),
    );
  }

  static int currentMigrationStep(
    Pointer<NSMigrationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("currentMigrationStep"),
    );
  }

  static Pointer currentPropertyMapping(
    Pointer<NSMigrationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentPropertyMapping"),
    );
  }

  static void dealloc(
    Pointer<NSMigrationContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationInstancesForEntityMapping(
    Pointer<NSMigrationContext> _self,
    Pointer arg, {
    @required Pointer sourceInstance,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationInstancesForEntityMapping:sourceInstance:"),
      arg,
      sourceInstance,
    );
  }

  static Pointer initWithMigrationManager(
    Pointer<NSMigrationContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithMigrationManager:"),
      arg,
    );
  }

  static void setCurrentEntityMapping(
    Pointer<NSMigrationContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentEntityMapping:"),
      arg,
    );
  }

  static void setCurrentMigrationStep(
    Pointer<NSMigrationContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setCurrentMigrationStep:"),
      arg,
    );
  }

  static void setCurrentPropertyMapping(
    Pointer<NSMigrationContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentPropertyMapping:"),
      arg,
    );
  }

  static Pointer sourceInstancesForEntityMapping(
    Pointer<NSMigrationContext> _self,
    Pointer arg, {
    @required Pointer destinationInstance,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceInstancesForEntityMapping:destinationInstance:"),
      arg,
      destinationInstance,
    );
  }
}

@unsized
class NSMigrationManager extends Struct<NSMigrationManager> {
  factory NSMigrationManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSMigrationManager> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMigrationManager").cast<NSMigrationManager>();
  }

  static void associateSourceInstance(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer withDestinationInstance,
    @required Pointer forEntityMapping,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "associateSourceInstance:withDestinationInstance:forEntityMapping:"),
      arg,
      withDestinationInstance,
      forEntityMapping,
    );
  }

  static void cancelMigrationWithError(
    Pointer<NSMigrationManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cancelMigrationWithError:"),
      arg,
    );
  }

  static Pointer currentEntityMapping(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentEntityMapping"),
    );
  }

  static Pointer currentPropertyMapping(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentPropertyMapping"),
    );
  }

  static void dealloc(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationContext(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationContext"),
    );
  }

  static Pointer destinationEntityForEntityMapping(
    Pointer<NSMigrationManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntityForEntityMapping:"),
      arg,
    );
  }

  static Pointer destinationInstancesForEntityMappingNamed(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer sourceInstances,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "destinationInstancesForEntityMappingNamed:sourceInstances:"),
      arg,
      sourceInstances,
    );
  }

  static Pointer destinationInstancesForSourceRelationshipNamed(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer sourceInstances,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "destinationInstancesForSourceRelationshipNamed:sourceInstances:"),
      arg,
      sourceInstances,
    );
  }

  static Pointer destinationModel(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationModel"),
    );
  }

  static Pointer
      fetchRequestForSourceEntityNamed$predicateString$includesSubentities(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer predicateString,
    @required int includesSubentities,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "fetchRequestForSourceEntityNamed:predicateString:includesSubentities:"),
      arg,
      predicateString,
      includesSubentities,
    );
  }

  static Pointer fetchRequestForSourceEntityNamed$predicateString(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer predicateString,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestForSourceEntityNamed:predicateString:"),
      arg,
      predicateString,
    );
  }

  static Pointer initWithSourceModel(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer destinationModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSourceModel:destinationModel:"),
      arg,
      destinationModel,
    );
  }

  static Pointer mappingModel(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingModel"),
    );
  }

  static int migrateStoreFromURL(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer type,
    @required Pointer options,
    @required Pointer withMappingModel,
    @required Pointer toDestinationURL,
    @required Pointer destinationType,
    @required Pointer destinationOptions,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:"),
      arg,
      type,
      options,
      withMappingModel,
      toDestinationURL,
      destinationType,
      destinationOptions,
      error,
    );
  }

  static double migrationProgress(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_float32(
      _self,
      _objc.getSelector("migrationProgress"),
    );
  }

  static void reset(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void setUserInfo(
    Pointer<NSMigrationManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void setUsesStoreSpecificMigrationManager(
    Pointer<NSMigrationManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesStoreSpecificMigrationManager:"),
      arg,
    );
  }

  static Pointer sourceContext(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceContext"),
    );
  }

  static Pointer sourceEntityForEntityMapping(
    Pointer<NSMigrationManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceEntityForEntityMapping:"),
      arg,
    );
  }

  static Pointer sourceInstancesForEntityMappingNamed(
    Pointer<NSMigrationManager> _self,
    Pointer arg, {
    @required Pointer destinationInstances,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "sourceInstancesForEntityMappingNamed:destinationInstances:"),
      arg,
      destinationInstances,
    );
  }

  static Pointer sourceModel(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceModel"),
    );
  }

  static Pointer userInfo(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static int usesStoreSpecificMigrationManager(
    Pointer<NSMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesStoreSpecificMigrationManager"),
    );
  }
}

@unsized
class NSPersistentCacheRow extends Struct<NSPersistentCacheRow> {
  factory NSPersistentCacheRow._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentCacheRow> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPersistentCacheRow").cast<NSPersistentCacheRow>();
  }

  static Pointer ancillaryOrderKeysForProperty(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillaryOrderKeysForProperty:"),
      arg,
    );
  }

  static void copyRelationshipCachesFrom(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyRelationshipCachesFrom:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int decrementRefCount(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("decrementRefCount"),
    );
  }

  static int externalReferenceCount(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("externalReferenceCount"),
    );
  }

  static void incrementExternalReferenceCount(
    Pointer<NSPersistentCacheRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("incrementExternalReferenceCount:"),
      arg,
    );
  }

  static void incrementRefCount(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("incrementRefCount"),
    );
  }

  static Pointer initWithOptions(
    Pointer<NSPersistentCacheRow> _self,
    int arg, {
    @required double andTimestamp,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_float64_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:andTimestamp:"),
      arg,
      andTimestamp,
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static Pointer objectID(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static int options(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer relatedObjectIDsForProperty(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedObjectIDsForProperty:"),
      arg,
    );
  }

  static void release(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void releaseRelationshipCaches(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseRelationshipCaches"),
    );
  }

  static Pointer retain(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setAncillaryOrderKeys(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg, {
    @required Pointer forProperty,
    @required int options,
    @required double andTimestamp,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void(
      _self,
      _objc.getSelector(
          "setAncillaryOrderKeys:forProperty:options:andTimestamp:"),
      arg,
      forProperty,
      options,
      andTimestamp,
    );
  }

  static void setRelatedObjectIDs(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg, {
    @required Pointer forProperty,
    @required int options,
    @required double andTimestamp,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void(
      _self,
      _objc
          .getSelector("setRelatedObjectIDs:forProperty:options:andTimestamp:"),
      arg,
      forProperty,
      options,
      andTimestamp,
    );
  }

  static void setTimestamp(
    Pointer<NSPersistentCacheRow> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_returns_void(
      _self,
      _objc.getSelector("setTimestamp:"),
      arg,
    );
  }

  static double timestamp(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_float64(
      _self,
      _objc.getSelector("timestamp"),
    );
  }

  static double timestampForProperty(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_float64(
      _self,
      _objc.getSelector("timestampForProperty:"),
      arg,
    );
  }

  static int toManyOffsetForProperty(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("toManyOffsetForProperty:"),
      arg,
    );
  }

  static void updateMissingRelationshipCachesFromOriginal(
    Pointer<NSPersistentCacheRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateMissingRelationshipCachesFromOriginal:"),
      arg,
    );
  }

  static int version(
    Pointer<NSPersistentCacheRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("version"),
    );
  }
}

@unsized
class NSPersistentContainer extends Struct<NSPersistentContainer> {
  factory NSPersistentContainer._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentContainer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentContainer")
        .cast<NSPersistentContainer>();
  }

  static void dealloc(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithName(
    Pointer<NSPersistentContainer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithName:"),
      arg,
    );
  }

  static Pointer initWithName$managedObjectModel(
    Pointer<NSPersistentContainer> _self,
    Pointer arg, {
    @required Pointer managedObjectModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithName:managedObjectModel:"),
      arg,
      managedObjectModel,
    );
  }

  static int load(
    Pointer<NSPersistentContainer> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static void loadPersistentStoresWithCompletionHandler(
    Pointer<NSPersistentContainer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("loadPersistentStoresWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer managedObjectModel(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectModel"),
    );
  }

  static Pointer name(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer newBackgroundContext(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newBackgroundContext"),
    );
  }

  static void performBackgroundTask(
    Pointer<NSPersistentContainer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBackgroundTask:"),
      arg,
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static Pointer persistentStoreDescriptions(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreDescriptions"),
    );
  }

  static void setPersistentStoreDescriptions(
    Pointer<NSPersistentContainer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPersistentStoreDescriptions:"),
      arg,
    );
  }

  static Pointer viewContext(
    Pointer<NSPersistentContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("viewContext"),
    );
  }
}

@unsized
class NSPersistentHistoryChange extends Struct<NSPersistentHistoryChange> {
  factory NSPersistentHistoryChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryChange> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryChange")
        .cast<NSPersistentHistoryChange>();
  }

  static int changeID(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("changeID"),
    );
  }

  static int changeType(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static Pointer changedObjectID(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changedObjectID"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPersistentHistoryChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPersistentHistoryChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPersistentHistoryChange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer tombstone(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tombstone"),
    );
  }

  static Pointer transaction(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transaction"),
    );
  }

  static Pointer updatedProperties(
    Pointer<NSPersistentHistoryChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedProperties"),
    );
  }
}

@unsized
class NSPersistentHistoryChangeRequest
    extends Struct<NSPersistentHistoryChangeRequest> {
  factory NSPersistentHistoryChangeRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryChangeRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryChangeRequest")
        .cast<NSPersistentHistoryChangeRequest>();
  }

  static Pointer date(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("date"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer debugDescription(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer encodeForXPC(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("encodeForXPC"),
    );
  }

  static Pointer entityNameToFetch(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNameToFetch"),
    );
  }

  static int fetchBatchSize(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchBatchSize"),
    );
  }

  static int fetchLimit(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchLimit"),
    );
  }

  static int fetchOffset(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchOffset"),
    );
  }

  static int includesPropertyValues(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesPropertyValues"),
    );
  }

  static int includesSubentities(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesSubentities"),
    );
  }

  static Pointer init(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithDate$delete(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg, {
    @required int delete,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("initWithDate:delete:"),
      arg,
      delete,
    );
  }

  static Pointer initWithDate(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithDate:"),
      arg,
    );
  }

  static Pointer initWithToken$delete(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg, {
    @required int delete,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("initWithToken:delete:"),
      arg,
      delete,
    );
  }

  static Pointer initWithToken(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithToken:"),
      arg,
    );
  }

  static Pointer initWithTransactionID(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg, {
    @required int delete,
    @required int transactionOnly,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Int8_returns_ptr(
      _self,
      _objc.getSelector("initWithTransactionID:delete:transactionOnly:"),
      arg,
      delete,
      transactionOnly,
    );
  }

  static Pointer initWithTransactionIDs(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithTransactionIDs:"),
      arg,
    );
  }

  static Pointer initWithTransactionToken(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithTransactionToken:"),
      arg,
    );
  }

  static int isDelete(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDelete"),
    );
  }

  static int isFetchTransactionForToken(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFetchTransactionForToken"),
    );
  }

  static Pointer predicate(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer propertiesToFetch(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToFetch"),
    );
  }

  static Pointer propertiesToFetchForEntity$includeTransactionStrings(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg, {
    @required int includeTransactionStrings,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc
          .getSelector("propertiesToFetchForEntity:includeTransactionStrings:"),
      arg,
      includeTransactionStrings,
    );
  }

  static Pointer propertiesToFetchForEntity(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToFetchForEntity:"),
      arg,
    );
  }

  static Pointer propertiesToGroupBy(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToGroupBy"),
    );
  }

  static int requestType(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int resultType(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int returnsDistinctResults(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("returnsDistinctResults"),
    );
  }

  static void setFetchBatchSize(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setFetchBatchSize:"),
      arg,
    );
  }

  static void setFetchLimit(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setFetchLimit:"),
      arg,
    );
  }

  static void setResultType(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setResultType:"),
      arg,
    );
  }

  static void setUseQueryGenerationToken(
    Pointer<NSPersistentHistoryChangeRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseQueryGenerationToken:"),
      arg,
    );
  }

  static Pointer sortDescriptors(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sortDescriptors"),
    );
  }

  static Pointer token(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("token"),
    );
  }

  static Pointer transactionNumber(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }

  static int useQueryGenerationToken(
    Pointer<NSPersistentHistoryChangeRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useQueryGenerationToken"),
    );
  }
}

@unsized
class NSPersistentHistoryChangeRequestToken
    extends Struct<NSPersistentHistoryChangeRequestToken> {
  factory NSPersistentHistoryChangeRequestToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryChangeRequestToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryChangeRequestToken")
        .cast<NSPersistentHistoryChangeRequestToken>();
  }

  static Pointer date(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("date"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int delete(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("delete"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchBatchSize(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchBatchSize"),
    );
  }

  static int fetchLimit(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchLimit"),
    );
  }

  static Pointer initForRequest(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForRequest:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static Pointer token(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("token"),
    );
  }

  static int transactionFromToken(
    Pointer<NSPersistentHistoryChangeRequestToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("transactionFromToken"),
    );
  }
}

@unsized
class NSPersistentHistoryResult extends Struct<NSPersistentHistoryResult> {
  factory NSPersistentHistoryResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryResult")
        .cast<NSPersistentHistoryResult>();
  }

  static void dealloc(
    Pointer<NSPersistentHistoryResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentHistoryResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithResultType(
    Pointer<NSPersistentHistoryResult> _self,
    int arg, {
    @required Pointer andResult,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithResultType:andResult:"),
      arg,
      andResult,
    );
  }

  static Pointer initWithSubresults(
    Pointer<NSPersistentHistoryResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSubresults:"),
      arg,
    );
  }

  static Pointer result(
    Pointer<NSPersistentHistoryResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("result"),
    );
  }

  static int resultType(
    Pointer<NSPersistentHistoryResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

@unsized
class NSPersistentHistoryToken extends Struct<NSPersistentHistoryToken> {
  factory NSPersistentHistoryToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryToken")
        .cast<NSPersistentHistoryToken>();
  }

  static void encodeWithCoder(
    Pointer<NSPersistentHistoryToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPersistentHistoryToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer storeTokens(
    Pointer<NSPersistentHistoryToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeTokens"),
    );
  }
}

@unsized
class NSPersistentHistoryTransaction
    extends Struct<NSPersistentHistoryTransaction> {
  factory NSPersistentHistoryTransaction._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentHistoryTransaction> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentHistoryTransaction")
        .cast<NSPersistentHistoryTransaction>();
  }

  static Pointer author(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("author"),
    );
  }

  static Pointer bundleID(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bundleID"),
    );
  }

  static Pointer changes(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changes"),
    );
  }

  static Pointer contextName(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("contextName"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPersistentHistoryTransaction> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPersistentHistoryTransaction> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initialQueryGenerationToken(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initialQueryGenerationToken"),
    );
  }

  static int isEqual(
    Pointer<NSPersistentHistoryTransaction> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer objectIDNotification(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDNotification"),
    );
  }

  static Pointer postQueryGenerationToken(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("postQueryGenerationToken"),
    );
  }

  static Pointer processID(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processID"),
    );
  }

  static Pointer storeID(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeID"),
    );
  }

  static Pointer timestamp(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("timestamp"),
    );
  }

  static Pointer token(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("token"),
    );
  }

  static int transactionNumber(
    Pointer<NSPersistentHistoryTransaction> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }
}

@unsized
class NSPersistentStore extends Struct<NSPersistentStore> {
  factory NSPersistentStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPersistentStore").cast<NSPersistentStore>();
  }

  static Pointer URL(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer ancillaryModels(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillaryModels"),
    );
  }

  static Pointer configurationName(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurationName"),
    );
  }

  static Pointer coreSpotlightExporter(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("coreSpotlightExporter"),
    );
  }

  static Pointer currentChangeToken(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentChangeToken"),
    );
  }

  static Pointer currentQueryGeneration(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentQueryGeneration"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void didAddToPersistentStoreCoordinator(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didAddToPersistentStoreCoordinator:"),
      arg,
    );
  }

  static void doFilesystemCleanupOnRemove(
    Pointer<NSPersistentStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("doFilesystemCleanupOnRemove:"),
      arg,
    );
  }

  static Pointer executeRequest(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer externalRecordsPath(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalRecordsPath"),
    );
  }

  static Pointer faultHandler(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultHandler"),
    );
  }

  static Pointer faultHandlerClass(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultHandlerClass"),
    );
  }

  static void freeQueryGenerationWithIdentifier(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("freeQueryGenerationWithIdentifier:"),
      arg,
    );
  }

  static Pointer identifier(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer init(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static int isReadOnly(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReadOnly"),
    );
  }

  static int load(
    Pointer<NSPersistentStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static int loadMetadata(
    Pointer<NSPersistentStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadMetadata:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidRegisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs$generation(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidRegisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidUnregisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs$generation(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidUnregisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static Pointer metadata(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer objectIDClassForEntity(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDClassForEntity:"),
      arg,
    );
  }

  static Pointer objectIDFactoryForEntity(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForEntity:"),
      arg,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer options(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static Pointer reopenQueryGenerationWithIdentifier(
    Pointer<NSPersistentStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("reopenQueryGenerationWithIdentifier:error:"),
      arg,
      error,
    );
  }

  static void setIdentifier(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static void setPersistentStoreCoordinator(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPersistentStoreCoordinator:"),
      arg,
    );
  }

  static void setReadOnly(
    Pointer<NSPersistentStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReadOnly:"),
      arg,
    );
  }

  static void setURL(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static int supportsConcurrentRequestHandling(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsConcurrentRequestHandling"),
    );
  }

  static int supportsGenerationalQuerying(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsGenerationalQuerying"),
    );
  }

  static Pointer type(
    Pointer<NSPersistentStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }

  static void willRemoveFromPersistentStoreCoordinator(
    Pointer<NSPersistentStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveFromPersistentStoreCoordinator:"),
      arg,
    );
  }
}

@unsized
class NSPersistentStoreAsynchronousResult
    extends Struct<NSPersistentStoreAsynchronousResult> {
  factory NSPersistentStoreAsynchronousResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreAsynchronousResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreAsynchronousResult")
        .cast<NSPersistentStoreAsynchronousResult>();
  }

  static void cancel(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithContext(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
    Pointer arg, {
    @required Pointer andProgress,
    @required Pointer completetionBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithContext:andProgress:completetionBlock:"),
      arg,
      andProgress,
      completetionBlock,
    );
  }

  static Pointer managedObjectContext(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer operationError(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operationError"),
    );
  }

  static Pointer progress(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("progress"),
    );
  }

  static Pointer requestCompletionBlock(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("requestCompletionBlock"),
    );
  }

  static void setOperationError(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOperationError:"),
      arg,
    );
  }

  static void setProgress(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setProgress:"),
      arg,
    );
  }

  static void setRequestCompletionBlock(
    Pointer<NSPersistentStoreAsynchronousResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRequestCompletionBlock:"),
      arg,
    );
  }
}

@unsized
class NSPersistentStoreCache extends Struct<NSPersistentStoreCache> {
  factory NSPersistentStoreCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreCache")
        .cast<NSPersistentStoreCache>();
  }

  static Pointer ancillaryOrderKeysForSourceObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer forProperty,
    @required double afterTimestamp,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_float64_returns_ptr(
      _self,
      _objc.getSelector(
          "ancillaryOrderKeysForSourceObjectID:forProperty:afterTimestamp:"),
      arg,
      forProperty,
      afterTimestamp,
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decrementRefCountForObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("decrementRefCountForObjectID:"),
      arg,
    );
  }

  static void forgetAllExternalData(
    Pointer<NSPersistentStoreCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("forgetAllExternalData"),
    );
  }

  static void forgetRowForObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("forgetRowForObjectID:"),
      arg,
    );
  }

  static void growRegistrationCollectionTo(
    Pointer<NSPersistentStoreCache> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("growRegistrationCollectionTo:"),
      arg,
    );
  }

  static void incrementRefCountForObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("incrementRefCountForObjectID:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSPersistentStoreCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPersistentStore:"),
      arg,
    );
  }

  static Pointer initWithValueCallbacks(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required int preserveToManyRelationships,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("initWithValueCallbacks:preserveToManyRelationships:"),
      arg,
      preserveToManyRelationships,
    );
  }

  static int refCountForObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("refCountForObjectID:"),
      arg,
    );
  }

  static void registerRow$forObjectID$options(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer forObjectID,
    @required int options,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("registerRow:forObjectID:options:"),
      arg,
      forObjectID,
      options,
    );
  }

  static void registerRow$forObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer forObjectID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerRow:forObjectID:"),
      arg,
      forObjectID,
    );
  }

  static void
      registerToMany$withOrderKeys$forSourceObjectID$forProperty$options$andTimestamp(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer withOrderKeys,
    @required Pointer forSourceObjectID,
    @required Pointer forProperty,
    @required int options,
    @required double andTimestamp,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void(
      _self,
      _objc.getSelector(
          "registerToMany:withOrderKeys:forSourceObjectID:forProperty:options:andTimestamp:"),
      arg,
      withOrderKeys,
      forSourceObjectID,
      forProperty,
      options,
      andTimestamp,
    );
  }

  static void
      registerToMany$withOrderKeys$forSourceObjectID$forProperty$andTimestamp(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer withOrderKeys,
    @required Pointer forSourceObjectID,
    @required Pointer forProperty,
    @required double andTimestamp,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void(
      _self,
      _objc.getSelector(
          "registerToMany:withOrderKeys:forSourceObjectID:forProperty:andTimestamp:"),
      arg,
      withOrderKeys,
      forSourceObjectID,
      forProperty,
      andTimestamp,
    );
  }

  static Pointer rowForObjectID$afterTimestamp(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required double afterTimestamp,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_float64_returns_ptr(
      _self,
      _objc.getSelector("rowForObjectID:afterTimestamp:"),
      arg,
      afterTimestamp,
    );
  }

  static Pointer rowForObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowForObjectID:"),
      arg,
    );
  }

  static Pointer toManyForSourceObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer forProperty,
    @required double afterTimestamp,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_float64_returns_ptr(
      _self,
      _objc.getSelector("toManyForSourceObjectID:forProperty:afterTimestamp:"),
      arg,
      forProperty,
      afterTimestamp,
    );
  }

  static Pointer toManyInformationForSourceObjectID(
    Pointer<NSPersistentStoreCache> _self,
    Pointer arg, {
    @required Pointer forProperty,
    @required double afterTimestamp,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_float64_returns_ptr(
      _self,
      _objc.getSelector(
          "toManyInformationForSourceObjectID:forProperty:afterTimestamp:"),
      arg,
      forProperty,
      afterTimestamp,
    );
  }
}

@unsized
class NSPersistentStoreCoordinator
    extends Struct<NSPersistentStoreCoordinator> {
  factory NSPersistentStoreCoordinator._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreCoordinator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreCoordinator")
        .cast<NSPersistentStoreCoordinator>();
  }

  static Pointer URLForPersistentStore(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URLForPersistentStore:"),
      arg,
    );
  }

  static void addPersistentStoreWithDescription(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer completionHandler,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPersistentStoreWithDescription:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer addPersistentStoreWithType(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer configuration,
    @required Pointer URL,
    @required Pointer options,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "addPersistentStoreWithType:configuration:URL:options:error:"),
      arg,
      configuration,
      URL,
      options,
      error,
    );
  }

  static Pointer currentPersistentHistoryTokenFromStores(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentPersistentHistoryTokenFromStores:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int destroyPersistentStoreAtURL(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer withType,
    @required Pointer options,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("destroyPersistentStoreAtURL:withType:options:error:"),
      arg,
      withType,
      options,
      error,
    );
  }

  static Pointer executeRequest(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer importStoreWithIdentifier(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer fromExternalRecordsDirectory,
    @required Pointer toURL,
    @required Pointer options,
    @required Pointer withType,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "importStoreWithIdentifier:fromExternalRecordsDirectory:toURL:options:withType:error:"),
      arg,
      fromExternalRecordsDirectory,
      toURL,
      options,
      withType,
      error,
    );
  }

  static Pointer init(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithManagedObjectModel(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithManagedObjectModel:"),
      arg,
    );
  }

  static int isCalendarStoreCoordinator(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isCalendarStoreCoordinator"),
    );
  }

  static void lock(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidRegisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidUnregisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static Pointer managedObjectIDForURIRepresentation$error(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectIDForURIRepresentation:error:"),
      arg,
      error,
    );
  }

  static Pointer managedObjectIDForURIRepresentation(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectIDForURIRepresentation:"),
      arg,
    );
  }

  static Pointer managedObjectIDFromUTF8String$length(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("managedObjectIDFromUTF8String:length:"),
      arg,
      length,
    );
  }

  static Pointer managedObjectIDFromUTF8String$length$error(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectIDFromUTF8String:length:error:"),
      arg,
      length,
      error,
    );
  }

  static Pointer managedObjectModel(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectModel"),
    );
  }

  static Pointer metadataForPersistentStore(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadataForPersistentStore:"),
      arg,
    );
  }

  static Pointer migratePersistentStore(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer toURL,
    @required Pointer options,
    @required Pointer withType,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("migratePersistentStore:toURL:options:withType:error:"),
      arg,
      toURL,
      options,
      withType,
      error,
    );
  }

  static Pointer modelMap(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelMap"),
    );
  }

  static Pointer name(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static int obtainPermanentIDsForObjects(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static void performBlock(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBlock:"),
      arg,
    );
  }

  static void performBlockAndWait(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBlockAndWait:"),
      arg,
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static Pointer persistentStoreForIdentifier(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreForIdentifier:"),
      arg,
    );
  }

  static Pointer persistentStoreForURL(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreForURL:"),
      arg,
    );
  }

  static Pointer persistentStores(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStores"),
    );
  }

  static int removePersistentStore(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("removePersistentStore:error:"),
      arg,
      error,
    );
  }

  static int replacePersistentStoreAtURL(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer destinationOptions,
    @required Pointer withPersistentStoreFromURL,
    @required Pointer sourceOptions,
    @required Pointer storeType,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:"),
      arg,
      destinationOptions,
      withPersistentStoreFromURL,
      sourceOptions,
      storeType,
      error,
    );
  }

  static Pointer safeManagedObjectIDForURIRepresentation(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("safeManagedObjectIDForURIRepresentation:"),
      arg,
    );
  }

  static Pointer safeManagedObjectIDFromString(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("safeManagedObjectIDFromString:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer forPersistentStore,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:forPersistentStore:"),
      arg,
      forPersistentStore,
    );
  }

  static void setName(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setStoresFastSyncDetailsAtURL(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer forPersistentStore,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoresFastSyncDetailsAtURL:forPersistentStore:"),
      arg,
      forPersistentStore,
    );
  }

  static int setURL(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer forPersistentStore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("setURL:forPersistentStore:"),
      arg,
      forPersistentStore,
    );
  }

  static int syncWithClient(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required int inBackground,
    @required Pointer handler,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("syncWithClient:inBackground:handler:error:"),
      arg,
      inBackground,
      handler,
      error,
    );
  }

  static void syncservices_storeWasRemoved(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("syncservices_storeWasRemoved:"),
      arg,
    );
  }

  static int tryLock(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static void unlock(
    Pointer<NSPersistentStoreCoordinator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }

  static int validateManagedObjectModel(
    Pointer<NSPersistentStoreCoordinator> _self,
    Pointer arg, {
    @required Pointer forHistoryTrackingWithOptions,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "validateManagedObjectModel:forHistoryTrackingWithOptions:error:"),
      arg,
      forHistoryTrackingWithOptions,
      error,
    );
  }
}

@unsized
class NSPersistentStoreDescription
    extends Struct<NSPersistentStoreDescription> {
  factory NSPersistentStoreDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreDescription")
        .cast<NSPersistentStoreDescription>();
  }

  static Pointer URL(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer configuration(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configuration"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithURL(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isReadOnly(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReadOnly"),
    );
  }

  static Pointer mirroringDelegate(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringDelegate"),
    );
  }

  static Pointer mirroringOptions(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringOptions"),
    );
  }

  static Pointer options(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static void setConfiguration(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConfiguration:"),
      arg,
    );
  }

  static void setMirroringDelegate(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMirroringDelegate:"),
      arg,
    );
  }

  static void setOption$forMirroringKey(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg, {
    @required Pointer forMirroringKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOption:forMirroringKey:"),
      arg,
      forMirroringKey,
    );
  }

  static void setOption$forKey(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOption:forKey:"),
      arg,
      forKey,
    );
  }

  static void setReadOnly(
    Pointer<NSPersistentStoreDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReadOnly:"),
      arg,
    );
  }

  static void setShouldAddStoreAsynchronously(
    Pointer<NSPersistentStoreDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldAddStoreAsynchronously:"),
      arg,
    );
  }

  static void setShouldInferMappingModelAutomatically(
    Pointer<NSPersistentStoreDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldInferMappingModelAutomatically:"),
      arg,
    );
  }

  static void setShouldInvokeCompletionHandlerConcurrently(
    Pointer<NSPersistentStoreDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldInvokeCompletionHandlerConcurrently:"),
      arg,
    );
  }

  static void setShouldMigrateStoreAutomatically(
    Pointer<NSPersistentStoreDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldMigrateStoreAutomatically:"),
      arg,
    );
  }

  static void setTimeout(
    Pointer<NSPersistentStoreDescription> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_returns_void(
      _self,
      _objc.getSelector("setTimeout:"),
      arg,
    );
  }

  static void setType(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static void setURL(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSPersistentStoreDescription> _self,
    Pointer arg, {
    @required Pointer forPragmaNamed,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forPragmaNamed:"),
      arg,
      forPragmaNamed,
    );
  }

  static int shouldAddStoreAsynchronously(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldAddStoreAsynchronously"),
    );
  }

  static int shouldInferMappingModelAutomatically(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldInferMappingModelAutomatically"),
    );
  }

  static int shouldInvokeCompletionHandlerConcurrently(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldInvokeCompletionHandlerConcurrently"),
    );
  }

  static int shouldMigrateStoreAutomatically(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldMigrateStoreAutomatically"),
    );
  }

  static Pointer sqlitePragmas(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlitePragmas"),
    );
  }

  static double timeout(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_float64(
      _self,
      _objc.getSelector("timeout"),
    );
  }

  static Pointer type(
    Pointer<NSPersistentStoreDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSPersistentStoreMap extends Struct<NSPersistentStoreMap> {
  factory NSPersistentStoreMap._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreMap> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPersistentStoreMap").cast<NSPersistentStoreMap>();
  }

  static void addObject(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static Pointer configurationName(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurationName"),
    );
  }

  static Pointer dataForKey(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dataForKey:"),
      arg,
    );
  }

  static Pointer databaseUUID(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("databaseUUID"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer externalMapping(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalMapping"),
    );
  }

  static Pointer handleFetchRequest(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleFetchRequest:"),
      arg,
    );
  }

  static Pointer initWithStore(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static int nextPK64(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("nextPK64"),
    );
  }

  static void removeObject(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static Pointer retainedObjectIDsForRelationship(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg, {
    @required Pointer forObjectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedObjectIDsForRelationship:forObjectID:"),
      arg,
      forObjectID,
    );
  }

  static void setDatabaseUUID(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDatabaseUUID:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<NSPersistentStoreMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static void updateObject(
    Pointer<NSPersistentStoreMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }
}

@unsized
class NSPersistentStoreRequest extends Struct<NSPersistentStoreRequest> {
  factory NSPersistentStoreRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreRequest")
        .cast<NSPersistentStoreRequest>();
  }

  static Pointer affectedStores(
    Pointer<NSPersistentStoreRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("affectedStores"),
    );
  }

  static void dealloc(
    Pointer<NSPersistentStoreRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int requestType(
    Pointer<NSPersistentStoreRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static void setAffectedStores(
    Pointer<NSPersistentStoreRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAffectedStores:"),
      arg,
    );
  }
}

@unsized
class NSPersistentStoreResult extends Struct<NSPersistentStoreResult> {
  factory NSPersistentStoreResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersistentStoreResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersistentStoreResult")
        .cast<NSPersistentStoreResult>();
  }
}

@unsized
class NSPrivateCoreDataClassForFindingBundle
    extends Struct<NSPrivateCoreDataClassForFindingBundle> {
  factory NSPrivateCoreDataClassForFindingBundle._() {
    throw UnimplementedError();
  }
  static Pointer<NSPrivateCoreDataClassForFindingBundle> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPrivateCoreDataClassForFindingBundle")
        .cast<NSPrivateCoreDataClassForFindingBundle>();
  }
}

@unsized
class NSPropertyDescription extends Struct<NSPropertyDescription> {
  factory NSPropertyDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertyDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPropertyDescription")
        .cast<NSPropertyDescription>();
  }

  static void dealloc(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer elementID(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("elementID"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static int hash(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isIndexed(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexed"),
    );
  }

  static int isIndexedBySpotlight(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexedBySpotlight"),
    );
  }

  static int isOptional(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOptional"),
    );
  }

  static int isReadOnly(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReadOnly"),
    );
  }

  static int isSpotlightIndexed(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isSpotlightIndexed"),
    );
  }

  static int isStoredInExternalRecord(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isStoredInExternalRecord"),
    );
  }

  static int isStoredInTruth(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isStoredInTruth"),
    );
  }

  static int isStoredInTruthFile(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isStoredInTruthFile"),
    );
  }

  static int isTransient(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTransient"),
    );
  }

  static Pointer name(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer renamingIdentifier(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("renamingIdentifier"),
    );
  }

  static void setElementID(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setElementID:"),
      arg,
    );
  }

  static void setIndexed(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIndexed:"),
      arg,
    );
  }

  static void setIndexedBySpotlight(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIndexedBySpotlight:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setOptional(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setOptional:"),
      arg,
    );
  }

  static void setReadOnly(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReadOnly:"),
      arg,
    );
  }

  static void setRenamingIdentifier(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRenamingIdentifier:"),
      arg,
    );
  }

  static void setSpotlightIndexed(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setSpotlightIndexed:"),
      arg,
    );
  }

  static void setStoredInExternalRecord(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setStoredInExternalRecord:"),
      arg,
    );
  }

  static void setStoredInTruth(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setStoredInTruth:"),
      arg,
    );
  }

  static void setStoredInTruthFile(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setStoredInTruthFile:"),
      arg,
    );
  }

  static void setTransient(
    Pointer<NSPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setTransient:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void setValidationPredicates(
    Pointer<NSPropertyDescription> _self,
    Pointer arg, {
    @required Pointer withValidationWarnings,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValidationPredicates:withValidationWarnings:"),
      arg,
      withValidationWarnings,
    );
  }

  static void setVersionHashModifier(
    Pointer<NSPropertyDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setVersionHashModifier:"),
      arg,
    );
  }

  static Pointer userInfo(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer validationPredicates(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validationPredicates"),
    );
  }

  static Pointer validationWarnings(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("validationWarnings"),
    );
  }

  static Pointer versionHash(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHash"),
    );
  }

  static Pointer versionHashModifier(
    Pointer<NSPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHashModifier"),
    );
  }
}

@unsized
class NSPropertyMapping extends Struct<NSPropertyMapping> {
  factory NSPropertyMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertyMapping> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPropertyMapping").cast<NSPropertyMapping>();
  }

  static void dealloc(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithName(
    Pointer<NSPropertyMapping> _self,
    Pointer arg, {
    @required Pointer valueExpression,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithName:valueExpression:"),
      arg,
      valueExpression,
    );
  }

  static int isEditable(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEditable"),
    );
  }

  static int isEqual(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer name(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void setValueExpression(
    Pointer<NSPropertyMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValueExpression:"),
      arg,
    );
  }

  static Pointer userInfo(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer valueExpression(
    Pointer<NSPropertyMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueExpression"),
    );
  }
}

@unsized
class NSPropertyStoreMapping extends Struct<NSPropertyStoreMapping> {
  factory NSPropertyStoreMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertyStoreMapping> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPropertyStoreMapping")
        .cast<NSPropertyStoreMapping>();
  }

  static void dealloc(
    Pointer<NSPropertyStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPropertyStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithProperty(
    Pointer<NSPropertyStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithProperty:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPropertyStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer property(
    Pointer<NSPropertyStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("property"),
    );
  }

  static void setProperty(
    Pointer<NSPropertyStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setProperty:"),
      arg,
    );
  }
}

@unsized
class NSPropertyTransform extends Struct<NSPropertyTransform> {
  factory NSPropertyTransform._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertyTransform> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPropertyTransform").cast<NSPropertyTransform>();
  }

  static void dealloc(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithPropertyName(
    Pointer<NSPropertyTransform> _self,
    Pointer arg, {
    @required Pointer valueExpression,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPropertyName:valueExpression:"),
      arg,
      valueExpression,
    );
  }

  static int isEqual(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer prerequisiteTransform(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("prerequisiteTransform"),
    );
  }

  static Pointer propertyName(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyName"),
    );
  }

  static int replaceMissingValueOnly(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("replaceMissingValueOnly"),
    );
  }

  static void setPrerequisiteTransform(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPrerequisiteTransform:"),
      arg,
    );
  }

  static void setPropertyName(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertyName:"),
      arg,
    );
  }

  static void setReplaceMissingValueOnly(
    Pointer<NSPropertyTransform> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setReplaceMissingValueOnly:"),
      arg,
    );
  }

  static void setValueExpression(
    Pointer<NSPropertyTransform> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValueExpression:"),
      arg,
    );
  }

  static Pointer valueExpression(
    Pointer<NSPropertyTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueExpression"),
    );
  }
}

@unsized
class NSPullChangeHistoryRequest extends Struct<NSPullChangeHistoryRequest> {
  factory NSPullChangeHistoryRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSPullChangeHistoryRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPullChangeHistoryRequest")
        .cast<NSPullChangeHistoryRequest>();
  }

  static void dealloc(
    Pointer<NSPullChangeHistoryRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSPullChangeHistoryRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer generationTokens(
    Pointer<NSPullChangeHistoryRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generationTokens"),
    );
  }

  static Pointer initWithGenerationTokens(
    Pointer<NSPullChangeHistoryRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithGenerationTokens:"),
      arg,
    );
  }

  static int requestType(
    Pointer<NSPullChangeHistoryRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static void setGenerationTokens(
    Pointer<NSPullChangeHistoryRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGenerationTokens:"),
      arg,
    );
  }
}

@unsized
class NSQueryGenerationToken extends Struct<NSQueryGenerationToken> {
  factory NSQueryGenerationToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSQueryGenerationToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSQueryGenerationToken")
        .cast<NSQueryGenerationToken>();
  }

  static Pointer description(
    Pointer<NSQueryGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSQueryGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSQueryGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSQueryGenerationToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSQueryGenerationToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }
}

@unsized
class NSRefreshRequest extends Struct<NSRefreshRequest> {
  factory NSRefreshRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSRefreshRequest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRefreshRequest").cast<NSRefreshRequest>();
  }

  static void dealloc(
    Pointer<NSRefreshRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSRefreshRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer refreshObjects(
    Pointer<NSRefreshRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("refreshObjects"),
    );
  }

  static int refreshType(
    Pointer<NSRefreshRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("refreshType"),
    );
  }

  static int requestType(
    Pointer<NSRefreshRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static void setRefreshObjects(
    Pointer<NSRefreshRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setRefreshObjects:"),
      arg,
    );
  }

  static void setRefreshType(
    Pointer<NSRefreshRequest> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setRefreshType:"),
      arg,
    );
  }
}

@unsized
class NSRelationshipDescription extends Struct<NSRelationshipDescription> {
  factory NSRelationshipDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSRelationshipDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSRelationshipDescription")
        .cast<NSRelationshipDescription>();
  }

  static void dealloc(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int deleteRule(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("deleteRule"),
    );
  }

  static Pointer description(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer destinationEntity(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntity"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSRelationshipDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSRelationshipDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer inverseRelationship(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseRelationship"),
    );
  }

  static int isEqual(
    Pointer<NSRelationshipDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isIndexed(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexed"),
    );
  }

  static int isOrdered(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOrdered"),
    );
  }

  static int isToMany(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isToMany"),
    );
  }

  static int maxCount(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("maxCount"),
    );
  }

  static int minCount(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("minCount"),
    );
  }

  static void setDeleteRule(
    Pointer<NSRelationshipDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setDeleteRule:"),
      arg,
    );
  }

  static void setDestinationEntity(
    Pointer<NSRelationshipDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationEntity:"),
      arg,
    );
  }

  static void setInverseRelationship(
    Pointer<NSRelationshipDescription> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setInverseRelationship:"),
      arg,
    );
  }

  static void setMaxCount(
    Pointer<NSRelationshipDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaxCount:"),
      arg,
    );
  }

  static void setMinCount(
    Pointer<NSRelationshipDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setMinCount:"),
      arg,
    );
  }

  static void setOrdered(
    Pointer<NSRelationshipDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setOrdered:"),
      arg,
    );
  }

  static Pointer versionHash(
    Pointer<NSRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("versionHash"),
    );
  }
}

@unsized
class NSRelationshipStoreMapping extends Struct<NSRelationshipStoreMapping> {
  factory NSRelationshipStoreMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSRelationshipStoreMapping> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSRelationshipStoreMapping")
        .cast<NSRelationshipStoreMapping>();
  }

  static Pointer columnDefinitions(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnDefinitions"),
    );
  }

  static Pointer constraintDefinitions(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("constraintDefinitions"),
    );
  }

  static void dealloc(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationEntityExternalName(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntityExternalName"),
    );
  }

  static Pointer foreignKeys(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKeys"),
    );
  }

  static int isEqual(
    Pointer<NSRelationshipStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int joinSemantic(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("joinSemantic"),
    );
  }

  static Pointer joins(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("joins"),
    );
  }

  static Pointer relationship(
    Pointer<NSRelationshipStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationship"),
    );
  }

  static void setDestinationEntityExternalName(
    Pointer<NSRelationshipStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationEntityExternalName:"),
      arg,
    );
  }

  static void setForeignKeys(
    Pointer<NSRelationshipStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setForeignKeys:"),
      arg,
    );
  }

  static void setJoinSemantic(
    Pointer<NSRelationshipStoreMapping> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setJoinSemantic:"),
      arg,
    );
  }

  static void setJoins(
    Pointer<NSRelationshipStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setJoins:"),
      arg,
    );
  }
}

@unsized
class NSSQLAliasGenerator extends Struct<NSSQLAliasGenerator> {
  factory NSSQLAliasGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLAliasGenerator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLAliasGenerator").cast<NSSQLAliasGenerator>();
  }

  static void dealloc(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSubqueryVariableAlias(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSubqueryVariableAlias"),
    );
  }

  static Pointer generateTableAlias(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateTableAlias"),
    );
  }

  static Pointer generateTempTableName(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateTempTableName"),
    );
  }

  static Pointer generateVariableAlias(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateVariableAlias"),
    );
  }

  static Pointer init(
    Pointer<NSSQLAliasGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithNestingLevel(
    Pointer<NSSQLAliasGenerator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_returns_ptr(
      _self,
      _objc.getSelector("initWithNestingLevel:"),
      arg,
    );
  }
}

@unsized
class NSSQLAttribute extends Struct<NSSQLAttribute> {
  factory NSSQLAttribute._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLAttribute> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLAttribute").cast<NSSQLAttribute>();
  }

  static void addKeyForTriggerOnRelationship(
    Pointer<NSSQLAttribute> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addKeyForTriggerOnRelationship:"),
      arg,
    );
  }

  static Pointer attributeDescription(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeDescription"),
    );
  }

  static void dealloc(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initForReadOnlyFetchWithExpression(
    Pointer<NSSQLAttribute> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchWithExpression:"),
      arg,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLAttribute> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static int isBackedByTrigger(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isBackedByTrigger"),
    );
  }

  static int isConstrained(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isConstrained"),
    );
  }

  static int isFileBackedFuture(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFileBackedFuture"),
    );
  }

  static int isUnique(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUnique"),
    );
  }

  static void setConstrained(
    Pointer<NSSQLAttribute> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setConstrained:"),
      arg,
    );
  }

  static int shouldIndex(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldIndex"),
    );
  }

  static Pointer triggerKeys(
    Pointer<NSSQLAttribute> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("triggerKeys"),
    );
  }
}

@unsized
class NSSQLAttributeExtensionFactory
    extends Struct<NSSQLAttributeExtensionFactory> {
  factory NSSQLAttributeExtensionFactory._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLAttributeExtensionFactory> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLAttributeExtensionFactory")
        .cast<NSSQLAttributeExtensionFactory>();
  }
}

@unsized
class NSSQLAttributeTrigger extends Struct<NSSQLAttributeTrigger> {
  factory NSSQLAttributeTrigger._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLAttributeTrigger> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLAttributeTrigger")
        .cast<NSSQLAttributeTrigger>();
  }

  static Pointer attribute(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attribute"),
    );
  }

  static Pointer bulkUpdateSQLStrings(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateSQLStrings"),
    );
  }

  static Pointer columnChangedClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnChangedClause"),
    );
  }

  static Pointer createSQLStrings(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSQLStrings:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationAttributes(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationAttributes"),
    );
  }

  static Pointer destinationEntity(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntity"),
    );
  }

  static Pointer dropSQLStrings(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropSQLStrings"),
    );
  }

  static Pointer entity(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer initWithObjectFromUserInfo(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer arg, {
    @required Pointer onAttributeNamed,
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initWithObjectFromUserInfo:onAttributeNamed:onEntity:"),
      arg,
      onAttributeNamed,
      onEntity,
    );
  }

  static Pointer insertSQLStrings(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertSQLStrings"),
    );
  }

  static Pointer inverseOperatorSymbolForOperator(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseOperatorSymbolForOperator:"),
      arg,
    );
  }

  static int isEqualToExtension(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqualToExtension:"),
      arg,
    );
  }

  static int isSupportedOperatorType(
    Pointer<NSSQLAttributeTrigger> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isSupportedOperatorType:"),
      arg,
    );
  }

  static Pointer newMatchingClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newMatchingClause"),
    );
  }

  static Pointer ofClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ofClause"),
    );
  }

  static Pointer oldMatchingClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("oldMatchingClause"),
    );
  }

  static int parseTriggerPredicateError(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("parseTriggerPredicateError:"),
      arg,
    );
  }

  static Pointer predicate(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer predicateString(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicateString"),
    );
  }

  static Pointer relationship(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationship"),
    );
  }

  static Pointer toManyDecrementWhenClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyDecrementWhenClause"),
    );
  }

  static Pointer toManyIncrementWhenClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyIncrementWhenClause"),
    );
  }

  static Pointer toManyInnerFetchWhereClause(
    Pointer<NSSQLAttributeTrigger> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyInnerFetchWhereClause"),
    );
  }

  static int validate(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateComparisonPredicate(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateComparisonPredicate:error:"),
      arg,
      error,
    );
  }

  static int validatePredicate(
    Pointer<NSSQLAttributeTrigger> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validatePredicate:error:"),
      arg,
      error,
    );
  }
}

@unsized
class NSSQLBatchDeleteRequestContext
    extends Struct<NSSQLBatchDeleteRequestContext> {
  factory NSSQLBatchDeleteRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBatchDeleteRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLBatchDeleteRequestContext")
        .cast<NSSQLBatchDeleteRequestContext>();
  }

  static Pointer affectedObjectIDs(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("affectedObjectIDs"),
    );
  }

  static void dealloc(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deleteStatements(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deleteStatements"),
    );
  }

  static void executePrologue(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executePrologue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer exernalDataReferenceStatements(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exernalDataReferenceStatements"),
    );
  }

  static Pointer externalDataReferencesToDelete(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesToDelete"),
    );
  }

  static Pointer fetchContext(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchContext"),
    );
  }

  static Pointer fetchRequestForObjectsToDelete(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestForObjectsToDelete"),
    );
  }

  static Pointer fileBackedFuturesToDelete(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesToDelete"),
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer request(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static void setAffectedObjectIDs(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAffectedObjectIDs:"),
      arg,
    );
  }

  static void setExernalDataReferenceStatements(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExernalDataReferenceStatements:"),
      arg,
    );
  }

  static void setExternalDataReferencesToDelete(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExternalDataReferencesToDelete:"),
      arg,
    );
  }

  static void setFileBackedFuturesToDelete(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFileBackedFuturesToDelete:"),
      arg,
    );
  }

  static void setTempTableName(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTempTableName:"),
      arg,
    );
  }

  static Pointer tempTableName(
    Pointer<NSSQLBatchDeleteRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tempTableName"),
    );
  }
}

@unsized
class NSSQLBatchUpdateRequestContext
    extends Struct<NSSQLBatchUpdateRequestContext> {
  factory NSSQLBatchUpdateRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBatchUpdateRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLBatchUpdateRequestContext")
        .cast<NSSQLBatchUpdateRequestContext>();
  }

  static Pointer createFetchRequestContextForObjectsToUpdate(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createFetchRequestContextForObjectsToUpdate"),
    );
  }

  static Pointer createObjectIDCaptureStatements(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createObjectIDCaptureStatements"),
    );
  }

  static void dealloc(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dropObjectIDCaptureStatements(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropObjectIDCaptureStatements"),
    );
  }

  static void executePrologue(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executePrologue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer fetchRequestDescribingObjectsToUpdate(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestDescribingObjectsToUpdate"),
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer request(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static Pointer updateStatement(
    Pointer<NSSQLBatchUpdateRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updateStatement"),
    );
  }
}

@unsized
class NSSQLBinaryIndex extends Struct<NSSQLBinaryIndex> {
  factory NSSQLBinaryIndex._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBinaryIndex> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLBinaryIndex").cast<NSSQLBinaryIndex>();
  }

  static Pointer bulkUpdateStatementsForStore(
    Pointer<NSSQLBinaryIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateStatementsForStore:"),
      arg,
    );
  }

  static Pointer createStatementsForStore(
    Pointer<NSSQLBinaryIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createStatementsForStore:"),
      arg,
    );
  }

  static Pointer dropStatementsForStore(
    Pointer<NSSQLBinaryIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropStatementsForStore:"),
      arg,
    );
  }
}

@unsized
class NSSQLBindIntarray extends Struct<NSSQLBindIntarray> {
  factory NSSQLBindIntarray._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBindIntarray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLBindIntarray").cast<NSSQLBindIntarray>();
  }

  static void dealloc(
    Pointer<NSSQLBindIntarray> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int index(
    Pointer<NSSQLBindIntarray> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("index"),
    );
  }

  static Pointer initWithValue(
    Pointer<NSSQLBindIntarray> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithValue:"),
      arg,
    );
  }

  static void setIndex(
    Pointer<NSSQLBindIntarray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setIndex:"),
      arg,
    );
  }

  static void setTableName(
    Pointer<NSSQLBindIntarray> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTableName:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSSQLBindIntarray> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static Pointer tableName(
    Pointer<NSSQLBindIntarray> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tableName"),
    );
  }

  static Pointer value(
    Pointer<NSSQLBindIntarray> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("value"),
    );
  }
}

@unsized
class NSSQLBindVariable extends Struct<NSSQLBindVariable> {
  factory NSSQLBindVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBindVariable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLBindVariable").cast<NSSQLBindVariable>();
  }

  static int allowsCoercion(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("allowsCoercion"),
    );
  }

  static Pointer attributeDescription(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeDescription"),
    );
  }

  static void dealloc(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int hasObjectValue(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasObjectValue"),
    );
  }

  static int index(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("index"),
    );
  }

  static Pointer initWithInt64(
    Pointer<NSSQLBindVariable> _self,
    int arg, {
    @required int sqlType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int64_Uint8_returns_ptr(
      _self,
      _objc.getSelector("initWithInt64:sqlType:"),
      arg,
      sqlType,
    );
  }

  static Pointer initWithUnsignedInt(
    Pointer<NSSQLBindVariable> _self,
    int arg, {
    @required int sqlType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_Uint8_returns_ptr(
      _self,
      _objc.getSelector("initWithUnsignedInt:sqlType:"),
      arg,
      sqlType,
    );
  }

  static Pointer initWithValue$sqlType$attributeDescription(
    Pointer<NSSQLBindVariable> _self,
    Pointer arg, {
    @required int sqlType,
    @required Pointer attributeDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint8_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithValue:sqlType:attributeDescription:"),
      arg,
      sqlType,
      attributeDescription,
    );
  }

  static Pointer initWithValue$sqlType$attributeDescription$allowCoercion(
    Pointer<NSSQLBindVariable> _self,
    Pointer arg, {
    @required int sqlType,
    @required Pointer attributeDescription,
    @required int allowCoercion,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithValue:sqlType:attributeDescription:allowCoercion:"),
      arg,
      sqlType,
      attributeDescription,
      allowCoercion,
    );
  }

  static int int64(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("int64"),
    );
  }

  static void release(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer retain(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setIndex(
    Pointer<NSSQLBindVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setIndex:"),
      arg,
    );
  }

  static void setInt64(
    Pointer<NSSQLBindVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setInt64:"),
      arg,
    );
  }

  static void setSQLType(
    Pointer<NSSQLBindVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint8_returns_void(
      _self,
      _objc.getSelector("setSQLType:"),
      arg,
    );
  }

  static void setUnsignedInt(
    Pointer<NSSQLBindVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setUnsignedInt:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSSQLBindVariable> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static int sqlType(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("sqlType"),
    );
  }

  static int unsignedInt(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("unsignedInt"),
    );
  }

  static Pointer value(
    Pointer<NSSQLBindVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("value"),
    );
  }
}

@unsized
class NSSQLBlockRequestContext extends Struct<NSSQLBlockRequestContext> {
  factory NSSQLBlockRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBlockRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLBlockRequestContext")
        .cast<NSSQLBlockRequestContext>();
  }

  static void dealloc(
    Pointer<NSSQLBlockRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLBlockRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer initWithBlock(
    Pointer<NSSQLBlockRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithBlock:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLBlockRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }
}

@unsized
class NSSQLBoundedByIntermediate extends Struct<NSSQLBoundedByIntermediate> {
  factory NSSQLBoundedByIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLBoundedByIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLBoundedByIntermediate")
        .cast<NSSQLBoundedByIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLBoundedByIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLBoundedByIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithWorkingEntity(
    Pointer<NSSQLBoundedByIntermediate> _self,
    Pointer arg, {
    @required Pointer target,
    @required Pointer bounds,
    @required Pointer scope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithWorkingEntity:target:bounds:scope:"),
      arg,
      target,
      bounds,
      scope,
    );
  }
}

@unsized
class NSSQLCKMetadataRequestContext
    extends Struct<NSSQLCKMetadataRequestContext> {
  factory NSSQLCKMetadataRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCKMetadataRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLCKMetadataRequestContext")
        .cast<NSSQLCKMetadataRequestContext>();
  }

  static int executeRequestUsingConnection(
    Pointer<NSSQLCKMetadataRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("executeRequestUsingConnection:"),
      arg,
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLCKMetadataRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLCKMetadataRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer request(
    Pointer<NSSQLCKMetadataRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }
}

@unsized
class NSSQLColumn extends Struct<NSSQLColumn> {
  factory NSSQLColumn._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLColumn> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLColumn").cast<NSSQLColumn>();
  }

  static int allowAliasing(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("allowAliasing"),
    );
  }

  static Pointer cloneForReadOnlyFetching(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloneForReadOnlyFetching"),
    );
  }

  static Pointer columnName(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnName"),
    );
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLColumn> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int fetchIndex(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("fetchIndex"),
    );
  }

  static Pointer initForReadOnlyFetching(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetching"),
    );
  }

  static Pointer initWithColumnName(
    Pointer<NSSQLColumn> _self,
    Pointer arg, {
    @required int sqlType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint8_returns_ptr(
      _self,
      _objc.getSelector("initWithColumnName:sqlType:"),
      arg,
      sqlType,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLColumn> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static int roughSizeEstimate(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("roughSizeEstimate"),
    );
  }

  static void setAllowAliasing(
    Pointer<NSSQLColumn> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowAliasing:"),
      arg,
    );
  }

  static int slot(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("slot"),
    );
  }

  static int sqlType(
    Pointer<NSSQLColumn> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("sqlType"),
    );
  }
}

@unsized
class NSSQLCompoundWhereIntermediate
    extends Struct<NSSQLCompoundWhereIntermediate> {
  factory NSSQLCompoundWhereIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCompoundWhereIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLCompoundWhereIntermediate")
        .cast<NSSQLCompoundWhereIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer disambiguatingEntity(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguatingEntity"),
    );
  }

  static Pointer disambiguationKeypath(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguationKeypath"),
    );
  }

  static int disambiguationKeypathHasToMany(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("disambiguationKeypathHasToMany"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithPredicate(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPredicate:inScope:inContext:"),
      arg,
      inScope,
      inContext,
    );
  }

  static int isOrScoped(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOrScoped"),
    );
  }

  static void setDisambiguatingEntity(
    Pointer<NSSQLCompoundWhereIntermediate> _self,
    Pointer arg, {
    @required Pointer withKeypath,
    @required int hasToMany,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDisambiguatingEntity:withKeypath:hasToMany:"),
      arg,
      withKeypath,
      hasToMany,
    );
  }
}

@unsized
class NSSQLConnectionManager extends Struct<NSSQLConnectionManager> {
  factory NSSQLConnectionManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLConnectionManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLConnectionManager")
        .cast<NSSQLConnectionManager>();
  }

  static void dealloc(
    Pointer<NSSQLConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnectAllConnections(
    Pointer<NSSQLConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnectAllConnections"),
    );
  }

  static Pointer filter(
    Pointer<NSSQLConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filter"),
    );
  }

  static int handleStoreRequest(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("handleStoreRequest:"),
      arg,
    );
  }

  static Pointer initWithSQLCore$seedConnection(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg, {
    @required Pointer seedConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:seedConnection:"),
      arg,
      seedConnection,
    );
  }

  static Pointer initWithSQLCore$priority$seedConnection(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg, {
    @required int priority,
    @required Pointer seedConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:priority:seedConnection:"),
      arg,
      priority,
      seedConnection,
    );
  }

  static Pointer initializationConnection(
    Pointer<NSSQLConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initializationConnection"),
    );
  }

  static void scheduleBarrierBlock(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleBarrierBlock:"),
      arg,
    );
  }

  static void scheduleConnectionsBarrier(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleConnectionsBarrier:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLConnectionManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }

  static void setFilter(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFilter:"),
      arg,
    );
  }

  static Pointer sqlCore(
    Pointer<NSSQLConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlCore"),
    );
  }

  static int willHandleStoreRequest(
    Pointer<NSSQLConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("willHandleStoreRequest:"),
      arg,
    );
  }
}

@unsized
class NSSQLConstantValueIntermediate
    extends Struct<NSSQLConstantValueIntermediate> {
  factory NSSQLConstantValueIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLConstantValueIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLConstantValueIntermediate")
        .cast<NSSQLConstantValueIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLConstantValueIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLConstantValueIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithConstantValue$inScope$context(
    Pointer<NSSQLConstantValueIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithConstantValue:inScope:context:"),
      arg,
      inScope,
      context,
    );
  }

  static Pointer initWithConstantValue$ofType$inScope$context(
    Pointer<NSSQLConstantValueIntermediate> _self,
    Pointer arg, {
    @required int ofType,
    @required Pointer inScope,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithConstantValue:ofType:inScope:context:"),
      arg,
      ofType,
      inScope,
      context,
    );
  }

  static Pointer propertyAtEndOfKeyPathExpression(
    Pointer<NSSQLConstantValueIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyAtEndOfKeyPathExpression:"),
      arg,
    );
  }

  static int sqlTypeForProperty(
    Pointer<NSSQLConstantValueIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("sqlTypeForProperty:"),
      arg,
    );
  }
}

@unsized
class NSSQLCore extends Struct<NSSQLCore> {
  factory NSSQLCore._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLCore").cast<NSSQLCore>();
  }

  static void accommodatePresentedItemDeletionWithCompletionHandler(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "accommodatePresentedItemDeletionWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer adapter(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("adapter"),
    );
  }

  static void addPeerRange(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPeerRange:"),
      arg,
    );
  }

  static void addPeerRangeForPeerID(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer rangeStart,
    @required Pointer rangeEnd,
    @required Pointer peerRangeStart,
    @required Pointer peerRangeEnd,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "addPeerRangeForPeerID:entityName:rangeStart:rangeEnd:peerRangeStart:peerRangeEnd:"),
      arg,
      entityName,
      rangeStart,
      rangeEnd,
      peerRangeStart,
      peerRangeEnd,
    );
  }

  static void addTransactionStringName(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer forPK,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addTransactionStringName:forPK:"),
      arg,
      forPK,
    );
  }

  static Pointer allPeerRanges(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allPeerRanges"),
    );
  }

  static Pointer ancillaryModels(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillaryModels"),
    );
  }

  static Pointer ancillarySQLModels(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillarySQLModels"),
    );
  }

  static Pointer cachedModelWithError(
    Pointer<NSSQLCore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedModelWithError:"),
      arg,
    );
  }

  static void configureUbiquityMetadataTable(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("configureUbiquityMetadataTable"),
    );
  }

  static Pointer connectionForMigration(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("connectionForMigration"),
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntities(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMapOfEntityNameToPKMaxForEntities:"),
      arg,
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntitiesFromPKTable(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMapOfEntityNameToPKMaxForEntitiesFromPKTable:"),
      arg,
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:"),
      arg,
    );
  }

  static Pointer currentChangeToken(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentChangeToken"),
    );
  }

  static Pointer currentQueryGeneration(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentQueryGeneration"),
    );
  }

  static Pointer dbKey(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dbKey"),
    );
  }

  static void dealloc(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dispatchManager(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dispatchManager"),
    );
  }

  static void dispatchRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required int withRetries,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("dispatchRequest:withRetries:"),
      arg,
      withRetries,
    );
  }

  static void dropUbiquityTables(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dropUbiquityTables"),
    );
  }

  static Pointer entitiesToExclude(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesToExclude"),
    );
  }

  static Pointer entitiesToInclude(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesToInclude"),
    );
  }

  static Pointer entityForEntityDescription(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForEntityDescription:"),
      arg,
    );
  }

  static Pointer entityForFetchRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForFetchRequest:"),
      arg,
    );
  }

  static Pointer entityForObject(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForObject:"),
      arg,
    );
  }

  static Pointer entityForObjectID(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForObjectID:"),
      arg,
    );
  }

  static void evictResolvedRelationships(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("evictResolvedRelationships:"),
      arg,
    );
  }

  static Pointer executeRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer externalDataLinksDirectory(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataLinksDirectory"),
    );
  }

  static Pointer externalDataReferencesDirectory(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesDirectory"),
    );
  }

  static Pointer externalLocationForFileWithUUID(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalLocationForFileWithUUID:"),
      arg,
    );
  }

  static Pointer fetchMirroredRelationshipsByCKRecordID(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchMirroredRelationshipsByCKRecordID:"),
      arg,
    );
  }

  static Pointer fetchMirroredRelationshipsWithRecordNames(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchMirroredRelationshipsWithRecordNames:"),
      arg,
    );
  }

  static Pointer fetchOutstandingImportOperations(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchOutstandingImportOperations"),
    );
  }

  static Pointer fetchTableNames(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchTableNames"),
    );
  }

  static Pointer fetchUbiquityKnowledgeVector(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchUbiquityKnowledgeVector"),
    );
  }

  static Pointer fileBackedFuturesDirectory(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesDirectory"),
    );
  }

  static int fileProtectionLevel(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("fileProtectionLevel"),
    );
  }

  static void freeQueryGenerationWithIdentifier(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("freeQueryGenerationWithIdentifier:"),
      arg,
    );
  }

  static int hasAncillaryModels(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasAncillaryModels"),
    );
  }

  static int hasCreatedAncillaryModelTables(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasCreatedAncillaryModelTables"),
    );
  }

  static int hasHistoryTracking(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasHistoryTracking"),
    );
  }

  static Pointer identifier(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static int isInMemory(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isInMemory"),
    );
  }

  static int isInitialized(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isInitialized"),
    );
  }

  static int isUbiquitized(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUbiquitized"),
    );
  }

  static int load(
    Pointer<NSSQLCore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static int loadMetadata(
    Pointer<NSSQLCore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadMetadata:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidRegisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs$generation(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidRegisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("managedObjectContextDidUnregisterObjectsWithIDs:"),
      arg,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs$generation(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidUnregisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static Pointer metadata(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer metadataToWrite(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadataToWrite"),
    );
  }

  static Pointer model(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer newFetchUUIDSForSubentitiesRootedAt(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newFetchUUIDSForSubentitiesRootedAt:"),
      arg,
    );
  }

  static Pointer newObjectIDFactoryForPersistentHistoryEntity(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newObjectIDFactoryForPersistentHistoryEntity:"),
      arg,
    );
  }

  static Pointer newObjectIDSetsForToManyPrefetchingRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer andSourceObjectIDs,
    @required Pointer orderColumnName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newObjectIDSetsForToManyPrefetchingRequest:andSourceObjectIDs:orderColumnName:"),
      arg,
      andSourceObjectIDs,
      orderColumnName,
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer notifyPostName(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("notifyPostName"),
    );
  }

  static Pointer objectIDFactoryForEntity(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForEntity:"),
      arg,
    );
  }

  static Pointer objectIDFactoryForSQLEntity(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForSQLEntity:"),
      arg,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer presentedItemOperationQueue(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemOperationQueue"),
    );
  }

  static Pointer presentedItemURL(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemURL"),
    );
  }

  static Pointer processBatchDelete(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processBatchDelete:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processBatchUpdate(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processBatchUpdate:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processChangeRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processChangeRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processCloudKitMirroringRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processCloudKitMirroringRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processCloudMetadataRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processCloudMetadataRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processCountRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processCountRequest:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer processFetchRequest(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processFetchRequest:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer processRefreshObjects(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processRefreshObjects:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer processSaveChanges(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer forContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processSaveChanges:forContext:"),
      arg,
      forContext,
    );
  }

  static void purgeCloudKitMetadataTables(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("purgeCloudKitMetadataTables"),
    );
  }

  static void recomputePrimaryKeyMaxForEntities(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("recomputePrimaryKeyMaxForEntities:"),
      arg,
    );
  }

  static void recordRemoteQueryGenerationDidChange(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("recordRemoteQueryGenerationDidChange"),
    );
  }

  static int remoteStoresDidChange(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("remoteStoresDidChange"),
    );
  }

  static void removeRowCacheForGenerationWithIdentifier(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeRowCacheForGenerationWithIdentifier:"),
      arg,
    );
  }

  static void removeUbiquityMetadata(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeUbiquityMetadata"),
    );
  }

  static Pointer reopenQueryGenerationWithIdentifier(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("reopenQueryGenerationWithIdentifier:error:"),
      arg,
      error,
    );
  }

  static void replaceUbiquityKnowledgeVector(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("replaceUbiquityKnowledgeVector:"),
      arg,
    );
  }

  static void resetExternalDataReferencesDirectories(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetExternalDataReferencesDirectories"),
    );
  }

  static Pointer rowCacheForContext(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowCacheForContext:"),
      arg,
    );
  }

  static Pointer rowCacheForGeneration(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowCacheForGeneration:"),
      arg,
    );
  }

  static Pointer safeguardLocationForFileWithUUID(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("safeguardLocationForFileWithUUID:"),
      arg,
    );
  }

  static Pointer schemaValidationConnection(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("schemaValidationConnection"),
    );
  }

  static void setConnectionsAreLocal(
    Pointer<NSSQLCore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setConnectionsAreLocal:"),
      arg,
    );
  }

  static void setCreatedAncillaryModelTables(
    Pointer<NSSQLCore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setCreatedAncillaryModelTables:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLCore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }

  static void setIdentifier(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static void setURL(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static void setUbiquityTableValue(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityTableValue:forKey:"),
      arg,
      forKey,
    );
  }

  static int shouldNotifyFOKChanges(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldNotifyFOKChanges"),
    );
  }

  static int supportsComplexFeatures(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsComplexFeatures"),
    );
  }

  static int supportsConcurrentRequestHandling(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsConcurrentRequestHandling"),
    );
  }

  static int supportsGenerationalQuerying(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsGenerationalQuerying"),
    );
  }

  static Pointer transactionStringPKForName(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionStringPKForName:"),
      arg,
    );
  }

  static Pointer type(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer ubiquityTableKeysAndValues(
    Pointer<NSSQLCore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityTableKeysAndValues"),
    );
  }

  static Pointer ubiquityTableValueForKey(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityTableValueForKey:"),
      arg,
    );
  }

  static void updateMirroredRelationshipsByAddingRelationships(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer updatingRelationships,
    @required Pointer andDeletingRelationships,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "updateMirroredRelationshipsByAddingRelationships:updatingRelationships:andDeletingRelationships:"),
      arg,
      updatingRelationships,
      andDeletingRelationships,
    );
  }

  static void updateUbiquityKnowledgeForPeerWithID(
    Pointer<NSSQLCore> _self,
    Pointer arg, {
    @required Pointer andTransactionNumber,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "updateUbiquityKnowledgeForPeerWithID:andTransactionNumber:"),
      arg,
      andTransactionNumber,
    );
  }

  static void updateUbiquityKnowledgeVector(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateUbiquityKnowledgeVector:"),
      arg,
    );
  }

  static void willRemoveFromPersistentStoreCoordinator(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveFromPersistentStoreCoordinator:"),
      arg,
    );
  }

  static void writeImportOperation(
    Pointer<NSSQLCore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeImportOperation:"),
      arg,
    );
  }
}

@unsized
class NSSQLCoreDispatchManager extends Struct<NSSQLCoreDispatchManager> {
  factory NSSQLCoreDispatchManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCoreDispatchManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLCoreDispatchManager")
        .cast<NSSQLCoreDispatchManager>();
  }

  static void dealloc(
    Pointer<NSSQLCoreDispatchManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnectAllConnections(
    Pointer<NSSQLCoreDispatchManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnectAllConnections"),
    );
  }

  static Pointer initWithSQLCore(
    Pointer<NSSQLCoreDispatchManager> _self,
    Pointer arg, {
    @required Pointer seedConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:seedConnection:"),
      arg,
      seedConnection,
    );
  }

  static int routeStoreRequest(
    Pointer<NSSQLCoreDispatchManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("routeStoreRequest:"),
      arg,
    );
  }

  static void scheduleBarrierBlock(
    Pointer<NSSQLCoreDispatchManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleBarrierBlock:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLCoreDispatchManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }
}

@unsized
class NSSQLCorrelationTableUpdateTracker
    extends Struct<NSSQLCorrelationTableUpdateTracker> {
  factory NSSQLCorrelationTableUpdateTracker._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCorrelationTableUpdateTracker> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLCorrelationTableUpdateTracker")
        .cast<NSSQLCorrelationTableUpdateTracker>();
  }

  static void dealloc(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void enumerateDeletesOIDsUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateDeletesOIDsUsingBlock:"),
      arg,
    );
  }

  static void enumerateDeletesUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateDeletesUsingBlock:"),
      arg,
    );
  }

  static void enumerateInsertsOIDsUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateInsertsOIDsUsingBlock:"),
      arg,
    );
  }

  static void enumerateInsertsUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateInsertsUsingBlock:"),
      arg,
    );
  }

  static void enumerateMasterReordersOIDsUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateMasterReordersOIDsUsingBlock:"),
      arg,
    );
  }

  static void enumerateMasterReordersPart2UsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateMasterReordersPart2UsingBlock:"),
      arg,
    );
  }

  static void enumerateMasterReordersUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateMasterReordersUsingBlock:"),
      arg,
    );
  }

  static void enumerateReordersOIDsUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateReordersOIDsUsingBlock:"),
      arg,
    );
  }

  static void enumerateReordersUsingBlock(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("enumerateReordersUsingBlock:"),
      arg,
    );
  }

  static int hasDeletes(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasDeletes"),
    );
  }

  static int hasInserts(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasInserts"),
    );
  }

  static int hasMasterReorders(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasMasterReorders"),
    );
  }

  static int hasReorders(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasReorders"),
    );
  }

  static Pointer initForRelationship(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForRelationship:"),
      arg,
    );
  }

  static Pointer relationship(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationship"),
    );
  }

  static void trackInserts(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg, {
    @required Pointer deletes,
    @required Pointer reorders,
    @required Pointer forObjectWithID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("trackInserts:deletes:reorders:forObjectWithID:"),
      arg,
      deletes,
      reorders,
      forObjectWithID,
    );
  }

  static void trackReorders(
    Pointer<NSSQLCorrelationTableUpdateTracker> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("trackReorders:forObjectWithID:"),
      arg,
      forObjectWithID,
    );
  }
}

@unsized
class NSSQLCountRequestContext extends Struct<NSSQLCountRequestContext> {
  factory NSSQLCountRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLCountRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLCountRequestContext")
        .cast<NSSQLCountRequestContext>();
  }

  static void executeRequestCore(
    Pointer<NSSQLCountRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }
}

@unsized
class NSSQLDefaultConnectionManager
    extends Struct<NSSQLDefaultConnectionManager> {
  factory NSSQLDefaultConnectionManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLDefaultConnectionManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLDefaultConnectionManager")
        .cast<NSSQLDefaultConnectionManager>();
  }

  static void dealloc(
    Pointer<NSSQLDefaultConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnectAllConnections(
    Pointer<NSSQLDefaultConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnectAllConnections"),
    );
  }

  static int handleStoreRequest(
    Pointer<NSSQLDefaultConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("handleStoreRequest:"),
      arg,
    );
  }

  static Pointer initWithSQLCore(
    Pointer<NSSQLDefaultConnectionManager> _self,
    Pointer arg, {
    @required int priority,
    @required Pointer seedConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:priority:seedConnection:"),
      arg,
      priority,
      seedConnection,
    );
  }

  static void scheduleBarrierBlock(
    Pointer<NSSQLDefaultConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleBarrierBlock:"),
      arg,
    );
  }

  static void scheduleConnectionsBarrier(
    Pointer<NSSQLDefaultConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleConnectionsBarrier:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLDefaultConnectionManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }
}

@unsized
class NSSQLEntity extends Struct<NSSQLEntity> {
  factory NSSQLEntity._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLEntity> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLEntity").cast<NSSQLEntity>();
  }

  static int addPropertiesForReadOnlyFetch(
    Pointer<NSSQLEntity> _self,
    Pointer arg, {
    @required Pointer keys,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("addPropertiesForReadOnlyFetch:keys:context:"),
      arg,
      keys,
      context,
    );
  }

  static void addUniqueAttribute(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addUniqueAttribute:"),
      arg,
    );
  }

  static Pointer attributeColumns(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeColumns"),
    );
  }

  static Pointer attributeNamed(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeNamed:"),
      arg,
    );
  }

  static Pointer attributes(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static Pointer binaryIndexForIndexDescription(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("binaryIndexForIndexDescription:"),
      arg,
    );
  }

  static Pointer columnsToCreate(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnsToCreate"),
    );
  }

  static Pointer columnsToFetch(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnsToFetch"),
    );
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entityDescription(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityDescription"),
    );
  }

  static int entityID(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("entityID"),
    );
  }

  static Pointer externalName(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalName"),
    );
  }

  static int fetchIndexForKey(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("fetchIndexForKey:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static Pointer foreignEntityKeyColumns(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignEntityKeyColumns"),
    );
  }

  static Pointer foreignKeyColumns(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKeyColumns"),
    );
  }

  static Pointer foreignOrderKeyColumns(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignOrderKeyColumns"),
    );
  }

  static int hasAttributesWithExternalDataReferences(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasAttributesWithExternalDataReferences"),
    );
  }

  static int hasAttributesWithFileBackedFutures(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasAttributesWithFileBackedFutures"),
    );
  }

  static int hasInheritance(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasInheritance"),
    );
  }

  static int hasSubentities(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasSubentities"),
    );
  }

  static Pointer indexForIndexDescription(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexForIndexDescription:"),
      arg,
    );
  }

  static Pointer initWithModel(
    Pointer<NSSQLEntity> _self,
    Pointer arg, {
    @required Pointer entityDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithModel:entityDescription:"),
      arg,
      entityDescription,
    );
  }

  static int isKindOfSQLEntity(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isKindOfSQLEntity:"),
      arg,
    );
  }

  static int isRootEntity(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRootEntity"),
    );
  }

  static Pointer manyToManyRelationships(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("manyToManyRelationships"),
    );
  }

  static Pointer mappingGenerator(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingGenerator"),
    );
  }

  static Pointer model(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer multicolumnUniquenessConstraints(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("multicolumnUniquenessConstraints"),
    );
  }

  static Pointer name(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer optLockKey(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("optLockKey"),
    );
  }

  static Pointer primaryKey(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKey"),
    );
  }

  static Pointer properties(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("properties"),
    );
  }

  static Pointer propertiesByName(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesByName"),
    );
  }

  static Pointer propertyMapping(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyMapping"),
    );
  }

  static Pointer propertyNamed(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyNamed:"),
      arg,
    );
  }

  static Pointer relationshipNamed(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipNamed:"),
      arg,
    );
  }

  static Pointer rootEntity(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rootEntity"),
    );
  }

  static Pointer rtreeIndexForIndexDescription(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rtreeIndexForIndexDescription:"),
      arg,
    );
  }

  static Pointer rtreeIndexForIndexNamed(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rtreeIndexForIndexNamed:"),
      arg,
    );
  }

  static Pointer rtreeIndexes(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rtreeIndexes"),
    );
  }

  static void setEntityID(
    Pointer<NSSQLEntity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setEntityID:"),
      arg,
    );
  }

  static void setSubentities(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSubentities:"),
      arg,
    );
  }

  static void setSuperentity(
    Pointer<NSSQLEntity> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSuperentity:"),
      arg,
    );
  }

  static Pointer subentities(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subentities"),
    );
  }

  static Pointer subentityKey(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subentityKey"),
    );
  }

  static int subentityMaxID(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("subentityMaxID"),
    );
  }

  static Pointer superentity(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("superentity"),
    );
  }

  static Pointer tableName(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tableName"),
    );
  }

  static Pointer tempTableName(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tempTableName"),
    );
  }

  static Pointer toManyRelationships(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyRelationships"),
    );
  }

  static Pointer uniqueAttributes(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("uniqueAttributes"),
    );
  }

  static Pointer virtualForeignKeyColumns(
    Pointer<NSSQLEntity> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("virtualForeignKeyColumns"),
    );
  }
}

@unsized
class NSSQLEntityKey extends Struct<NSSQLEntityKey> {
  factory NSSQLEntityKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLEntityKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLEntityKey").cast<NSSQLEntityKey>();
  }

  static Pointer initWithEntity(
    Pointer<NSSQLEntityKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer name(
    Pointer<NSSQLEntityKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }
}

@unsized
class NSSQLExpressionIntermediate extends Struct<NSSQLExpressionIntermediate> {
  factory NSSQLExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLExpressionIntermediate")
        .cast<NSSQLExpressionIntermediate>();
  }

  static Pointer initWithExpression(
    Pointer<NSSQLExpressionIntermediate> _self,
    Pointer arg, {
    @required int allowToMany,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithExpression:allowToMany:inScope:"),
      arg,
      allowToMany,
      inScope,
    );
  }
}

@unsized
class NSSQLFetchCountIntermediate extends Struct<NSSQLFetchCountIntermediate> {
  factory NSSQLFetchCountIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLFetchCountIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLFetchCountIntermediate")
        .cast<NSSQLFetchCountIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLFetchCountIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }
}

@unsized
class NSSQLFetchDictionaryCountIntermediate
    extends Struct<NSSQLFetchDictionaryCountIntermediate> {
  factory NSSQLFetchDictionaryCountIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLFetchDictionaryCountIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLFetchDictionaryCountIntermediate")
        .cast<NSSQLFetchDictionaryCountIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLFetchDictionaryCountIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLFetchDictionaryCountIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithFetchIntermediate(
    Pointer<NSSQLFetchDictionaryCountIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFetchIntermediate:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLFetchIntermediate extends Struct<NSSQLFetchIntermediate> {
  factory NSSQLFetchIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLFetchIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLFetchIntermediate")
        .cast<NSSQLFetchIntermediate>();
  }

  static void addGroupByKeypath(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addGroupByKeypath:"),
      arg,
    );
  }

  static void addJoinIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg, {
    @required Pointer atKeypathWithComponents,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addJoinIntermediate:atKeypathWithComponents:"),
      arg,
      atKeypathWithComponents,
    );
  }

  static void dealloc(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer fetchIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIntermediate"),
    );
  }

  static Pointer fetchIntermediateForKeypathExpression(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIntermediateForKeypathExpression:"),
      arg,
    );
  }

  static Pointer finalJoinForKeypathWithComponents(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finalJoinForKeypathWithComponents:"),
      arg,
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static int groupByClauseContainsKeypath(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("groupByClauseContainsKeypath:"),
      arg,
    );
  }

  static Pointer groupByIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("groupByIntermediate"),
    );
  }

  static Pointer havingIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("havingIntermediate"),
    );
  }

  static Pointer initWithScope(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithScope:"),
      arg,
    );
  }

  static int isDictionaryCountFetch(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDictionaryCountFetch"),
    );
  }

  static int isFunctionScoped(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFunctionScoped"),
    );
  }

  static Pointer joinIntermediates(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("joinIntermediates"),
    );
  }

  static void promoteToOuterJoinAtKeypathWithComponents(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("promoteToOuterJoinAtKeypathWithComponents:"),
      arg,
    );
  }

  static void promoteToOuterJoinsAlongKeypathWithComponents(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("promoteToOuterJoinsAlongKeypathWithComponents:"),
      arg,
    );
  }

  static void selectDistinct(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("selectDistinct"),
    );
  }

  static Pointer selectIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("selectIntermediate"),
    );
  }

  static void setDictionaryCountFetch(
    Pointer<NSSQLFetchIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDictionaryCountFetch:"),
      arg,
    );
  }

  static void setGroupByIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGroupByIntermediate:"),
      arg,
    );
  }

  static void setHavingIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setHavingIntermediate:"),
      arg,
    );
  }

  static void setOffsetIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOffsetIntermediate:"),
      arg,
    );
  }

  static void setSelectIntermediate(
    Pointer<NSSQLFetchIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSelectIntermediate:"),
      arg,
    );
  }
}

@unsized
class NSSQLFetchRequestContext extends Struct<NSSQLFetchRequestContext> {
  factory NSSQLFetchRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLFetchRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLFetchRequestContext")
        .cast<NSSQLFetchRequestContext>();
  }

  static void addFaultsThatWereFired(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addFaultsThatWereFired:"),
      arg,
    );
  }

  static void addObjectIDsToRegister(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObjectIDsToRegister:"),
      arg,
    );
  }

  static void addObjectsToAwaken(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObjectsToAwaken:"),
      arg,
    );
  }

  static void cacheStatement(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheStatement:"),
      arg,
    );
  }

  static Pointer cachedStatement(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedStatement"),
    );
  }

  static Pointer createChildContextForNestedFetchRequest(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createChildContextForNestedFetchRequest:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeEpilogue(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeEpilogue"),
    );
  }

  static void executePrologue(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executePrologue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer externalDataLinksDirectory(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataLinksDirectory"),
    );
  }

  static Pointer externalDataReferencesDirectory(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesDirectory"),
    );
  }

  static Pointer faultHandler(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultHandler"),
    );
  }

  static Pointer faultsThatWereFired(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultsThatWereFired"),
    );
  }

  static Pointer fetchPlan(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchPlan"),
    );
  }

  static Pointer fetchStatement(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchStatement"),
    );
  }

  static Pointer fileBackedFuturesDirectory(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesDirectory"),
    );
  }

  static int fileProtectionLevel(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("fileProtectionLevel"),
    );
  }

  static Pointer initWithRequest$context$sqlCore(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static Pointer initWithRequest$connection$context$sqlCore$parentContext(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer connection,
    @required Pointer context,
    @required Pointer sqlCore,
    @required Pointer parentContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithRequest:connection:context:sqlCore:parentContext:"),
      arg,
      connection,
      context,
      sqlCore,
      parentContext,
    );
  }

  static Pointer inverseIsToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "inverseIsToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static int isFaultRequest(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFaultRequest"),
    );
  }

  static int isUsingCachedStatement(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUsingCachedStatement"),
    );
  }

  static Pointer manyToManyPrefetchRequestsForRelationshipNamed(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToManyPrefetchRequestsForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer manyToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer objectIDFactoryForSQLEntity(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForSQLEntity:"),
      arg,
    );
  }

  static Pointer objectIDsToRegisterWithContext(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDsToRegisterWithContext"),
    );
  }

  static Pointer objectsToAwaken(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectsToAwaken"),
    );
  }

  static Pointer originalRequest(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("originalRequest"),
    );
  }

  static Pointer parentContext(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("parentContext"),
    );
  }

  static void persistRows(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("persistRows:"),
      arg,
    );
  }

  static Pointer prefetchingSubstitutionVariables(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("prefetchingSubstitutionVariables"),
    );
  }

  static Pointer request(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static void setFetchStatement(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFetchStatement:"),
      arg,
    );
  }

  static void setIsFaultRequest(
    Pointer<NSSQLFetchRequestContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFaultRequest:"),
      arg,
    );
  }

  static void setIsUsingCachedStatement(
    Pointer<NSSQLFetchRequestContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsUsingCachedStatement:"),
      arg,
    );
  }

  static void setPrefetchingSubstitutionVariables(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPrefetchingSubstitutionVariables:"),
      arg,
    );
  }

  static int shouldUseBatches(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldUseBatches"),
    );
  }

  static Pointer sqlEntityForFetchRequest(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlEntityForFetchRequest"),
    );
  }

  static Pointer sqlModel(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlModel"),
    );
  }

  static int storeIsUbiquitized(
    Pointer<NSSQLFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("storeIsUbiquitized"),
    );
  }

  static Pointer ubiquitousExternalReferenceLocationForUUID(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquitousExternalReferenceLocationForUUID:"),
      arg,
    );
  }

  static void visitPredicate(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicate:"),
      arg,
    );
  }

  static void visitPredicateExpression(
    Pointer<NSSQLFetchRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicateExpression:"),
      arg,
    );
  }
}

@unsized
class NSSQLForeignEntityKey extends Struct<NSSQLForeignEntityKey> {
  factory NSSQLForeignEntityKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLForeignEntityKey> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLForeignEntityKey")
        .cast<NSSQLForeignEntityKey>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLForeignEntityKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLForeignEntityKey> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer foreignKey(
    Pointer<NSSQLForeignEntityKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKey"),
    );
  }

  static Pointer initForReadOnlyFetchingOfEntity(
    Pointer<NSSQLForeignEntityKey> _self,
    Pointer arg, {
    @required Pointer toOneRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchingOfEntity:toOneRelationship:"),
      arg,
      toOneRelationship,
    );
  }

  static Pointer initWithEntity$propertyDescription(
    Pointer<NSSQLForeignEntityKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity$foreignKey(
    Pointer<NSSQLForeignEntityKey> _self,
    Pointer arg, {
    @required Pointer foreignKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:foreignKey:"),
      arg,
      foreignKey,
    );
  }

  static Pointer name(
    Pointer<NSSQLForeignEntityKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setFKForReadOnlyFetch(
    Pointer<NSSQLForeignEntityKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFKForReadOnlyFetch:"),
      arg,
    );
  }

  static Pointer toOneRelationship(
    Pointer<NSSQLForeignEntityKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toOneRelationship"),
    );
  }
}

@unsized
class NSSQLForeignKey extends Struct<NSSQLForeignKey> {
  factory NSSQLForeignKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLForeignKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLForeignKey").cast<NSSQLForeignKey>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLForeignKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLForeignKey> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initForReadOnlyFetchingOfEntity(
    Pointer<NSSQLForeignKey> _self,
    Pointer arg, {
    @required Pointer toOneRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchingOfEntity:toOneRelationship:"),
      arg,
      toOneRelationship,
    );
  }

  static Pointer initWithEntity$propertyDescription(
    Pointer<NSSQLForeignKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity$toOneRelationship(
    Pointer<NSSQLForeignKey> _self,
    Pointer arg, {
    @required Pointer toOneRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:toOneRelationship:"),
      arg,
      toOneRelationship,
    );
  }

  static Pointer name(
    Pointer<NSSQLForeignKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer toOneRelationship(
    Pointer<NSSQLForeignKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toOneRelationship"),
    );
  }
}

@unsized
class NSSQLForeignKeyIntermediate extends Struct<NSSQLForeignKeyIntermediate> {
  factory NSSQLForeignKeyIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLForeignKeyIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLForeignKeyIntermediate")
        .cast<NSSQLForeignKeyIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLForeignKeyIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithConstantValue(
    Pointer<NSSQLForeignKeyIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithConstantValue:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLForeignOrderKey extends Struct<NSSQLForeignOrderKey> {
  factory NSSQLForeignOrderKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLForeignOrderKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLForeignOrderKey").cast<NSSQLForeignOrderKey>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLForeignOrderKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLForeignOrderKey> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer foreignKey(
    Pointer<NSSQLForeignOrderKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKey"),
    );
  }

  static Pointer initForReadOnlyFetchingOfEntity(
    Pointer<NSSQLForeignOrderKey> _self,
    Pointer arg, {
    @required Pointer toOneRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchingOfEntity:toOneRelationship:"),
      arg,
      toOneRelationship,
    );
  }

  static Pointer initWithEntity$propertyDescription(
    Pointer<NSSQLForeignOrderKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity$foreignKey(
    Pointer<NSSQLForeignOrderKey> _self,
    Pointer arg, {
    @required Pointer foreignKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:foreignKey:"),
      arg,
      foreignKey,
    );
  }

  static Pointer name(
    Pointer<NSSQLForeignOrderKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setFKForReadOnlyFetch(
    Pointer<NSSQLForeignOrderKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFKForReadOnlyFetch:"),
      arg,
    );
  }

  static Pointer toOneRelationship(
    Pointer<NSSQLForeignOrderKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toOneRelationship"),
    );
  }
}

@unsized
class NSSQLFunctionExpressionIntermediate
    extends Struct<NSSQLFunctionExpressionIntermediate> {
  factory NSSQLFunctionExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLFunctionExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLFunctionExpressionIntermediate")
        .cast<NSSQLFunctionExpressionIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLFunctionExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer generateType1SQLString(
    Pointer<NSSQLFunctionExpressionIntermediate> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateType1SQLString:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer generateType2SQLString(
    Pointer<NSSQLFunctionExpressionIntermediate> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateType2SQLString:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer generateType3SQLString(
    Pointer<NSSQLFunctionExpressionIntermediate> _self,
    Pointer arg, {
    @required int keypathOnly,
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateType3SQLString:keypathOnly:inContext:"),
      arg,
      keypathOnly,
      inContext,
    );
  }

  static int isFunctionScoped(
    Pointer<NSSQLFunctionExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFunctionScoped"),
    );
  }
}

@unsized
class NSSQLGenerator extends Struct<NSSQLGenerator> {
  factory NSSQLGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLGenerator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLGenerator").cast<NSSQLGenerator>();
  }

  static void generateGroupByIntermediatesForProperties(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateGroupByIntermediatesForProperties:inContext:"),
      arg,
      inContext,
    );
  }

  static void generateHavingIntermediateForPredicate(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateHavingIntermediateForPredicate:inContext:"),
      arg,
      inContext,
    );
  }

  static void generateIntermediateForLimit(
    Pointer<NSSQLGenerator> _self,
    int arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_ptr_returns_void(
      _self,
      _objc.getSelector("generateIntermediateForLimit:inContext:"),
      arg,
      inContext,
    );
  }

  static void generateIntermediateForOffset(
    Pointer<NSSQLGenerator> _self,
    int arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_ptr_returns_void(
      _self,
      _objc.getSelector("generateIntermediateForOffset:inContext:"),
      arg,
      inContext,
    );
  }

  static Pointer generateIntermediatesForFetchInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required int countOnly,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("generateIntermediatesForFetchInContext:countOnly:"),
      arg,
      countOnly,
    );
  }

  static Pointer generateIntermediatesForUpdateInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateIntermediatesForUpdateInContext:"),
      arg,
    );
  }

  static void generateOrderIntermediateInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateOrderIntermediateInContext:"),
      arg,
    );
  }

  static void generateSelectIntermediateInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateSelectIntermediateInContext:"),
      arg,
    );
  }

  static Pointer generateUpdateColumnsIntermediateInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateUpdateColumnsIntermediateInContext:"),
      arg,
    );
  }

  static void generateWhereIntermediatesInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateWhereIntermediatesInContext:"),
      arg,
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPersistentStore:"),
      arg,
    );
  }

  static Pointer initializeContextForFetchRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required int ignoreInheritance,
    @required int nestingLevel,
    @required int nestIsWhereScoped,
    @required Pointer requestContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initializeContextForFetchRequest:ignoreInheritance:nestingLevel:nestIsWhereScoped:requestContext:"),
      arg,
      ignoreInheritance,
      nestingLevel,
      nestIsWhereScoped,
      requestContext,
    );
  }

  static Pointer initializeContextForIndexGeneration(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required Pointer inStore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initializeContextForIndexGeneration:inStore:"),
      arg,
      inStore,
    );
  }

  static Pointer initializeContextForRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required int ignoreInheritance,
    @required int nestingLevel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Uint32_returns_ptr(
      _self,
      _objc.getSelector(
          "initializeContextForRequest:ignoreInheritance:nestingLevel:"),
      arg,
      ignoreInheritance,
      nestingLevel,
    );
  }

  static Pointer initializeContextForUpdateRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initializeContextForUpdateRequest:"),
      arg,
    );
  }

  static Pointer newSQLStatementForChangeRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newSQLStatementForChangeRequest:"),
      arg,
    );
  }

  static Pointer newSQLStatementForFetchRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required int ignoreInheritance,
    @required int countOnly,
    @required int nestingLevel,
    @required int nestIsWhereScoped,
    @required Pointer requestContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newSQLStatementForFetchRequest:ignoreInheritance:countOnly:nestingLevel:nestIsWhereScoped:requestContext:"),
      arg,
      ignoreInheritance,
      countOnly,
      nestingLevel,
      nestIsWhereScoped,
      requestContext,
    );
  }

  static Pointer newSQLStatementForRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required int ignoreInheritance,
    @required int countOnly,
    @required int nestingLevel,
    @required int nestIsWhereScoped,
    @required Pointer requestContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newSQLStatementForRequest:ignoreInheritance:countOnly:nestingLevel:nestIsWhereScoped:requestContext:"),
      arg,
      ignoreInheritance,
      countOnly,
      nestingLevel,
      nestIsWhereScoped,
      requestContext,
    );
  }

  static Pointer newSQLStatementForUpdateRequest(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newSQLStatementForUpdateRequest:"),
      arg,
    );
  }

  static Pointer newSQLStatmentForBinaryIndex(
    Pointer<NSSQLGenerator> _self,
    Pointer arg, {
    @required Pointer inStore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newSQLStatmentForBinaryIndex:inStore:"),
      arg,
      inStore,
    );
  }

  static Pointer predicateForRequestInContext(
    Pointer<NSSQLGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicateForRequestInContext:"),
      arg,
    );
  }
}

@unsized
class NSSQLGroupByIntermediate extends Struct<NSSQLGroupByIntermediate> {
  factory NSSQLGroupByIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLGroupByIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLGroupByIntermediate")
        .cast<NSSQLGroupByIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLGroupByIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLGroupByIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithProperties(
    Pointer<NSSQLGroupByIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithProperties:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLHavingIntermediate extends Struct<NSSQLHavingIntermediate> {
  factory NSSQLHavingIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLHavingIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLHavingIntermediate")
        .cast<NSSQLHavingIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLHavingIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLHavingIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithPredicate(
    Pointer<NSSQLHavingIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPredicate:inScope:inContext:"),
      arg,
      inScope,
      inContext,
    );
  }

  static int isHavingScoped(
    Pointer<NSSQLHavingIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isHavingScoped"),
    );
  }
}

@unsized
class NSSQLIndex extends Struct<NSSQLIndex> {
  factory NSSQLIndex._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLIndex> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLIndex").cast<NSSQLIndex>();
  }

  static Pointer bulkUpdateStatementsForStore(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateStatementsForStore:"),
      arg,
    );
  }

  static Pointer createStatementsForStore(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createStatementsForStore:"),
      arg,
    );
  }

  static Pointer createTableStatements(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createTableStatements"),
    );
  }

  static void dealloc(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dropStatementsForStore(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropStatementsForStore:"),
      arg,
    );
  }

  static Pointer dropTableStatements(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropTableStatements"),
    );
  }

  static Pointer indexDescription(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("indexDescription"),
    );
  }

  static Pointer initForIndexDescription(
    Pointer<NSSQLIndex> _self,
    Pointer arg, {
    @required Pointer sqlEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForIndexDescription:sqlEntity:"),
      arg,
      sqlEntity,
    );
  }

  static int isEqual(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isUnique(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUnique"),
    );
  }

  static void setCreateTableStatements(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCreateTableStatements:"),
      arg,
    );
  }

  static void setDropTableStatements(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDropTableStatements:"),
      arg,
    );
  }

  static void setUpdateTableStatements(
    Pointer<NSSQLIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUpdateTableStatements:"),
      arg,
    );
  }

  static Pointer sqlEntity(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlEntity"),
    );
  }

  static Pointer updateTableStatements(
    Pointer<NSSQLIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updateTableStatements"),
    );
  }
}

@unsized
class NSSQLIndexIntermediate extends Struct<NSSQLIndexIntermediate> {
  factory NSSQLIndexIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLIndexIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLIndexIntermediate")
        .cast<NSSQLIndexIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLIndexIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLIndexIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer governingEntity(
    Pointer<NSSQLIndexIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntity"),
    );
  }

  static Pointer initForIndex(
    Pointer<NSSQLIndexIntermediate> _self,
    Pointer arg, {
    @required Pointer withScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForIndex:withScope:"),
      arg,
      withScope,
    );
  }

  static int isIndexExpressionScoped(
    Pointer<NSSQLIndexIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexExpressionScoped"),
    );
  }

  static int isIndexScoped(
    Pointer<NSSQLIndexIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexScoped"),
    );
  }
}

@unsized
class NSSQLIntermediate extends Struct<NSSQLIntermediate> {
  factory NSSQLIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLIntermediate").cast<NSSQLIntermediate>();
  }

  static Pointer disambiguatingEntity(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguatingEntity"),
    );
  }

  static Pointer disambiguationKeypath(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguationKeypath"),
    );
  }

  static int disambiguationKeypathHasToMany(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("disambiguationKeypathHasToMany"),
    );
  }

  static int expressionIsBasicKeypath(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("expressionIsBasicKeypath:"),
      arg,
    );
  }

  static Pointer fetchIntermediate(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIntermediate"),
    );
  }

  static Pointer fetchIntermediateForKeypathExpression(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIntermediateForKeypathExpression:"),
      arg,
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer governingAlias(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAlias"),
    );
  }

  static Pointer governingAliasForKeypathExpression(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAliasForKeypathExpression:"),
      arg,
    );
  }

  static Pointer governingEntity(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntity"),
    );
  }

  static Pointer governingEntityForKeypathExpression(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntityForKeypathExpression:"),
      arg,
    );
  }

  static Pointer initWithScope(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithScope:"),
      arg,
    );
  }

  static int isFunctionScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFunctionScoped"),
    );
  }

  static int isHavingScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isHavingScoped"),
    );
  }

  static int isIndexExpressionScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexExpressionScoped"),
    );
  }

  static int isIndexScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isIndexScoped"),
    );
  }

  static int isOrScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOrScoped"),
    );
  }

  static int isSimpleKeypath(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isSimpleKeypath:"),
      arg,
    );
  }

  static int isSimpleNoIndexFunction(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isSimpleNoIndexFunction:"),
      arg,
    );
  }

  static int isTargetColumnsScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTargetColumnsScoped"),
    );
  }

  static int isUpdateColumnsScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUpdateColumnsScoped"),
    );
  }

  static int isUpdateScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUpdateScoped"),
    );
  }

  static int isVariableBasedKeypathScopedBySubquery(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isVariableBasedKeypathScopedBySubquery:"),
      arg,
    );
  }

  static int isWhereScoped(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWhereScoped"),
    );
  }

  static int keypathExpressionIsSafeLHSForIn(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("keypathExpressionIsSafeLHSForIn:"),
      arg,
    );
  }

  static void promoteJoinsInKeypathsForExpression(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("promoteJoinsInKeypathsForExpression:"),
      arg,
    );
  }

  static Pointer scope(
    Pointer<NSSQLIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("scope"),
    );
  }

  static void setDisambiguatingEntity(
    Pointer<NSSQLIntermediate> _self,
    Pointer arg, {
    @required Pointer withKeypath,
    @required int hasToMany,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDisambiguatingEntity:withKeypath:hasToMany:"),
      arg,
      withKeypath,
      hasToMany,
    );
  }
}

@unsized
class NSSQLJoinIntermediate extends Struct<NSSQLJoinIntermediate> {
  factory NSSQLJoinIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLJoinIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLJoinIntermediate")
        .cast<NSSQLJoinIntermediate>();
  }

  static Pointer correlationAlias(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationAlias"),
    );
  }

  static void dealloc(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer destinationAlias(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationAlias"),
    );
  }

  static Pointer destinationEntity(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntity"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLJoinIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initForRelationship(
    Pointer<NSSQLJoinIntermediate> _self,
    Pointer arg, {
    @required Pointer sourceAlias,
    @required Pointer destinationAlias,
    @required Pointer correlationAlias,
    @required int direct,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initForRelationship:sourceAlias:destinationAlias:correlationAlias:direct:inScope:"),
      arg,
      sourceAlias,
      destinationAlias,
      correlationAlias,
      direct,
      inScope,
    );
  }

  static int isDirect(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDirect"),
    );
  }

  static int joinType(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("joinType"),
    );
  }

  static Pointer relationship(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationship"),
    );
  }

  static void setDestinationAlias(
    Pointer<NSSQLJoinIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationAlias:"),
      arg,
    );
  }

  static void setDirect(
    Pointer<NSSQLJoinIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDirect:"),
      arg,
    );
  }

  static void setJoinType(
    Pointer<NSSQLJoinIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setJoinType:"),
      arg,
    );
  }

  static void setSourceAlias(
    Pointer<NSSQLJoinIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceAlias:"),
      arg,
    );
  }

  static Pointer sourceAlias(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceAlias"),
    );
  }

  static Pointer sourceEntity(
    Pointer<NSSQLJoinIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceEntity"),
    );
  }
}

@unsized
class NSSQLKeypathExpressionIntermediate
    extends Struct<NSSQLKeypathExpressionIntermediate> {
  factory NSSQLKeypathExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLKeypathExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLKeypathExpressionIntermediate")
        .cast<NSSQLKeypathExpressionIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLKeypathExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static void setSubstitutePK(
    Pointer<NSSQLKeypathExpressionIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setSubstitutePK:"),
      arg,
    );
  }

  static int substitutePK(
    Pointer<NSSQLKeypathExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("substitutePK"),
    );
  }
}

@unsized
class NSSQLKeypathTriggerAttributeExtension
    extends Struct<NSSQLKeypathTriggerAttributeExtension> {
  factory NSSQLKeypathTriggerAttributeExtension._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLKeypathTriggerAttributeExtension> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLKeypathTriggerAttributeExtension")
        .cast<NSSQLKeypathTriggerAttributeExtension>();
  }

  static Pointer attribute(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attribute"),
    );
  }

  static Pointer bulkUpdateSQLStrings(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateSQLStrings"),
    );
  }

  static Pointer countedRelationship(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("countedRelationship"),
    );
  }

  static void dealloc(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer dropSQLStrings(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropSQLStrings"),
    );
  }

  static Pointer entity(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static void generateSQLStrings(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateSQLStrings"),
    );
  }

  static Pointer initWithObjectFromUserInfo(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer arg, {
    @required Pointer onAttributeNamed,
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initWithObjectFromUserInfo:onAttributeNamed:onEntity:"),
      arg,
      onAttributeNamed,
      onEntity,
    );
  }

  static Pointer insertSQLStrings(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertSQLStrings"),
    );
  }

  static int isEqualToExtension(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqualToExtension:"),
      arg,
    );
  }

  static Pointer keypath(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keypath"),
    );
  }

  static Pointer objectFromUserInfo(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectFromUserInfo"),
    );
  }

  static int validate(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateAttribute(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateAttribute:"),
      arg,
    );
  }

  static int validateExpression(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateExpression:error:"),
      arg,
      error,
    );
  }

  static int validateKeypath(
    Pointer<NSSQLKeypathTriggerAttributeExtension> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateKeypath:"),
      arg,
    );
  }
}

@unsized
class NSSQLLimitIntermediate extends Struct<NSSQLLimitIntermediate> {
  factory NSSQLLimitIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLLimitIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLLimitIntermediate")
        .cast<NSSQLLimitIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLLimitIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithLimit(
    Pointer<NSSQLLimitIntermediate> _self,
    int arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLimit:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLLocationAttributeRTreeExtension
    extends Struct<NSSQLLocationAttributeRTreeExtension> {
  factory NSSQLLocationAttributeRTreeExtension._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLLocationAttributeRTreeExtension> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLLocationAttributeRTreeExtension")
        .cast<NSSQLLocationAttributeRTreeExtension>();
  }

  static Pointer attributeDescription(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("attributeDescription"),
    );
  }

  static Pointer bulkUpdateSQLStrings(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateSQLStrings"),
    );
  }

  static Pointer components(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("components"),
    );
  }

  static void dealloc(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dropSQLStrings(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropSQLStrings"),
    );
  }

  static void generateSQLStrings(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateSQLStrings"),
    );
  }

  static Pointer initWithObjectFromUserInfo(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
    Pointer arg, {
    @required Pointer onAttributeNamed,
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initWithObjectFromUserInfo:onAttributeNamed:onEntity:"),
      arg,
      onAttributeNamed,
      onEntity,
    );
  }

  static Pointer insertSQLStrings(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertSQLStrings"),
    );
  }

  static int isEqualToExtension(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqualToExtension:"),
      arg,
    );
  }

  static Pointer latProp(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("latProp"),
    );
  }

  static Pointer longProp(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("longProp"),
    );
  }

  static Pointer rtreeTableName(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rtreeTableName"),
    );
  }

  static Pointer sqlEntity(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlEntity"),
    );
  }

  static Pointer userInfoObject(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfoObject"),
    );
  }

  static int validate(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validatePropertyWithDescription(
    Pointer<NSSQLLocationAttributeRTreeExtension> _self,
    Pointer arg, {
    @required Pointer andName,
    @required Pointer forUseAs,
    @required Pointer onAttributeNamed,
    @required Pointer onEntityNamed,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "validatePropertyWithDescription:andName:forUseAs:onAttributeNamed:onEntityNamed:error:"),
      arg,
      andName,
      forUseAs,
      onAttributeNamed,
      onEntityNamed,
      error,
    );
  }
}

@unsized
class NSSQLManyToMany extends Struct<NSSQLManyToMany> {
  factory NSSQLManyToMany._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLManyToMany> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLManyToMany").cast<NSSQLManyToMany>();
  }

  static Pointer columnName(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnName"),
    );
  }

  static int columnSQLType(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("columnSQLType"),
    );
  }

  static Pointer correlationTableName(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationTableName"),
    );
  }

  static void dealloc(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLManyToMany> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer inverseColumnName(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseColumnName"),
    );
  }

  static Pointer inverseManyToMany(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseManyToMany"),
    );
  }

  static Pointer inverseOrderColumnName(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseOrderColumnName"),
    );
  }

  static int isMaster(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isMaster"),
    );
  }

  static int isReflexive(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReflexive"),
    );
  }

  static int isTableSchemaEqual(
    Pointer<NSSQLManyToMany> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTableSchemaEqual:"),
      arg,
    );
  }

  static Pointer orderColumnName(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("orderColumnName"),
    );
  }

  static int orderColumnSQLType(
    Pointer<NSSQLManyToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("orderColumnSQLType"),
    );
  }
}

@unsized
class NSSQLModel extends Struct<NSSQLModel> {
  factory NSSQLModel._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLModel> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLModel").cast<NSSQLModel>();
  }

  static Pointer configurationName(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurationName"),
    );
  }

  static void dealloc(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entities(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entities"),
    );
  }

  static Pointer entitiesByName(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesByName"),
    );
  }

  static Pointer entityForID(
    Pointer<NSSQLModel> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("entityForID:"),
      arg,
    );
  }

  static int entityIDForName(
    Pointer<NSSQLModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("entityIDForName:"),
      arg,
    );
  }

  static Pointer entityNamed(
    Pointer<NSSQLModel> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNamed:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static Pointer initWithManagedObjectModel$configurationName$retainHashHack(
    Pointer<NSSQLModel> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required int retainHashHack,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithManagedObjectModel:configurationName:retainHashHack:"),
      arg,
      configurationName,
      retainHashHack,
    );
  }

  static Pointer initWithManagedObjectModel$configurationName$brokenHashVersion(
    Pointer<NSSQLModel> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required int brokenHashVersion,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithManagedObjectModel:configurationName:brokenHashVersion:"),
      arg,
      configurationName,
      brokenHashVersion,
    );
  }

  static Pointer initWithManagedObjectModel$configurationName(
    Pointer<NSSQLModel> _self,
    Pointer arg, {
    @required Pointer configurationName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithManagedObjectModel:configurationName:"),
      arg,
      configurationName,
    );
  }

  static Pointer
      initWithManagedObjectModel$configurationName$retainHashHack$brokenHashVersion(
    Pointer<NSSQLModel> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required int retainHashHack,
    @required int brokenHashVersion,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithManagedObjectModel:configurationName:retainHashHack:brokenHashVersion:"),
      arg,
      configurationName,
      retainHashHack,
      brokenHashVersion,
    );
  }

  static Pointer managedObjectModel(
    Pointer<NSSQLModel> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectModel"),
    );
  }
}

@unsized
class NSSQLObjectFaultRequestContext
    extends Struct<NSSQLObjectFaultRequestContext> {
  factory NSSQLObjectFaultRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLObjectFaultRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLObjectFaultRequestContext")
        .cast<NSSQLObjectFaultRequestContext>();
  }

  static Pointer createFetchRequestContext(
    Pointer<NSSQLObjectFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createFetchRequestContext"),
    );
  }

  static void dealloc(
    Pointer<NSSQLObjectFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLObjectFaultRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer fetchRequest(
    Pointer<NSSQLObjectFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequest"),
    );
  }

  static int forConflictAnalysis(
    Pointer<NSSQLObjectFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("forConflictAnalysis"),
    );
  }

  static Pointer initWithObjectID(
    Pointer<NSSQLObjectFaultRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static Pointer objectID(
    Pointer<NSSQLObjectFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static void setForConflictAnalysis(
    Pointer<NSSQLObjectFaultRequestContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setForConflictAnalysis:"),
      arg,
    );
  }
}

@unsized
class NSSQLObjectIDRequestContext extends Struct<NSSQLObjectIDRequestContext> {
  factory NSSQLObjectIDRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLObjectIDRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLObjectIDRequestContext")
        .cast<NSSQLObjectIDRequestContext>();
  }

  static void dealloc(
    Pointer<NSSQLObjectIDRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entitiesAndCounts(
    Pointer<NSSQLObjectIDRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitiesAndCounts"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLObjectIDRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer initForEntitiesAndCounts(
    Pointer<NSSQLObjectIDRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForEntitiesAndCounts:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLObjectIDRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer model(
    Pointer<NSSQLObjectIDRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }
}

@unsized
class NSSQLObjectIDSetFetchRequestContext
    extends Struct<NSSQLObjectIDSetFetchRequestContext> {
  factory NSSQLObjectIDSetFetchRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLObjectIDSetFetchRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLObjectIDSetFetchRequestContext")
        .cast<NSSQLObjectIDSetFetchRequestContext>();
  }

  static void dealloc(
    Pointer<NSSQLObjectIDSetFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeEpilogue(
    Pointer<NSSQLObjectIDSetFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeEpilogue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLObjectIDSetFetchRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLObjectIDSetFetchRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
    @required Pointer idSets,
    @required Pointer columnName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:idSets:columnName:"),
      arg,
      context,
      sqlCore,
      idSets,
      columnName,
    );
  }
}

@unsized
class NSSQLOffsetIntermediate extends Struct<NSSQLOffsetIntermediate> {
  factory NSSQLOffsetIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLOffsetIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLOffsetIntermediate")
        .cast<NSSQLOffsetIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLOffsetIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithOffset(
    Pointer<NSSQLOffsetIntermediate> _self,
    int arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOffset:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLOptLockKey extends Struct<NSSQLOptLockKey> {
  factory NSSQLOptLockKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLOptLockKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLOptLockKey").cast<NSSQLOptLockKey>();
  }

  static Pointer initWithEntity(
    Pointer<NSSQLOptLockKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer name(
    Pointer<NSSQLOptLockKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }
}

@unsized
class NSSQLOrderIntermediate extends Struct<NSSQLOrderIntermediate> {
  factory NSSQLOrderIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLOrderIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLOrderIntermediate")
        .cast<NSSQLOrderIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLOrderIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLOrderIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithSortDescriptors(
    Pointer<NSSQLOrderIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSortDescriptors:inScope:"),
      arg,
      inScope,
    );
  }
}

@unsized
class NSSQLPersistentHistoryChangeRequestContext
    extends Struct<NSSQLPersistentHistoryChangeRequestContext> {
  factory NSSQLPersistentHistoryChangeRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLPersistentHistoryChangeRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLPersistentHistoryChangeRequestContext")
        .cast<NSSQLPersistentHistoryChangeRequestContext>();
  }

  static Pointer createCountRequestContextForChanges(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createCountRequestContextForChanges"),
    );
  }

  static Pointer createDeleteTransactionsRequestContext(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createDeleteTransactionsRequestContext"),
    );
  }

  static Pointer createRequestContextForChangesWithTransactionIDs(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createRequestContextForChangesWithTransactionIDs:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int executeRequestUsingConnection(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("executeRequestUsingConnection:"),
      arg,
    );
  }

  static Pointer fetchRequestContextForChanges(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestContextForChanges"),
    );
  }

  static Pointer fetchRequestDescribingChanges(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRequestDescribingChanges"),
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer request(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static int shouldUseBatches(
    Pointer<NSSQLPersistentHistoryChangeRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldUseBatches"),
    );
  }
}

@unsized
class NSSQLPredicateAnalyser extends Struct<NSSQLPredicateAnalyser> {
  factory NSSQLPredicateAnalyser._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLPredicateAnalyser> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLPredicateAnalyser")
        .cast<NSSQLPredicateAnalyser>();
  }

  static Pointer allModifierPredicates(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allModifierPredicates"),
    );
  }

  static void dealloc(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer keypaths(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("keypaths"),
    );
  }

  static Pointer setExpressions(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("setExpressions"),
    );
  }

  static Pointer subqueries(
    Pointer<NSSQLPredicateAnalyser> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subqueries"),
    );
  }

  static void visitPredicate(
    Pointer<NSSQLPredicateAnalyser> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicate:"),
      arg,
    );
  }

  static void visitPredicateExpression(
    Pointer<NSSQLPredicateAnalyser> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicateExpression:"),
      arg,
    );
  }

  static void visitPredicateOperator(
    Pointer<NSSQLPredicateAnalyser> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicateOperator:"),
      arg,
    );
  }
}

@unsized
class NSSQLPrimaryKey extends Struct<NSSQLPrimaryKey> {
  factory NSSQLPrimaryKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLPrimaryKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLPrimaryKey").cast<NSSQLPrimaryKey>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLPrimaryKey> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLPrimaryKey> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLPrimaryKey> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer name(
    Pointer<NSSQLPrimaryKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer sqlTypeString(
    Pointer<NSSQLPrimaryKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlTypeString"),
    );
  }
}

@unsized
class NSSQLProperty extends Struct<NSSQLProperty> {
  factory NSSQLProperty._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLProperty> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLProperty").cast<NSSQLProperty>();
  }

  static Pointer columnName(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnName"),
    );
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLProperty> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer externalName(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalName"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLProperty> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static int isAttribute(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isAttribute"),
    );
  }

  static int isColumn(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isColumn"),
    );
  }

  static int isEntityKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEntityKey"),
    );
  }

  static int isEqual(
    Pointer<NSSQLProperty> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isForeignEntityKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isForeignEntityKey"),
    );
  }

  static int isForeignKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isForeignKey"),
    );
  }

  static int isForeignOrderKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isForeignOrderKey"),
    );
  }

  static int isManyToMany(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isManyToMany"),
    );
  }

  static int isOptLockKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOptLockKey"),
    );
  }

  static int isPrimaryKey(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isPrimaryKey"),
    );
  }

  static int isRelationship(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRelationship"),
    );
  }

  static int isToMany(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isToMany"),
    );
  }

  static int isToOne(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isToOne"),
    );
  }

  static Pointer name(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer propertyDescription(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertyDescription"),
    );
  }

  static int propertyType(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("propertyType"),
    );
  }

  static void setEntityForReadOnlyFetch(
    Pointer<NSSQLProperty> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setEntityForReadOnlyFetch:"),
      arg,
    );
  }

  static void setPropertyDescription(
    Pointer<NSSQLProperty> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPropertyDescription:"),
      arg,
    );
  }

  static int slot(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("slot"),
    );
  }

  static int sqlType(
    Pointer<NSSQLProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("sqlType"),
    );
  }
}

@unsized
class NSSQLRTreeIndex extends Struct<NSSQLRTreeIndex> {
  factory NSSQLRTreeIndex._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRTreeIndex> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLRTreeIndex").cast<NSSQLRTreeIndex>();
  }

  static Pointer bulkUpdateStatementsForStore(
    Pointer<NSSQLRTreeIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bulkUpdateStatementsForStore:"),
      arg,
    );
  }

  static Pointer createStatementsForStore(
    Pointer<NSSQLRTreeIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createStatementsForStore:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLRTreeIndex> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dropStatementsForStore(
    Pointer<NSSQLRTreeIndex> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dropStatementsForStore:"),
      arg,
    );
  }

  static void generateSQLStrings(
    Pointer<NSSQLRTreeIndex> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generateSQLStrings"),
    );
  }

  static Pointer initForIndexDescription(
    Pointer<NSSQLRTreeIndex> _self,
    Pointer arg, {
    @required Pointer sqlEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForIndexDescription:sqlEntity:"),
      arg,
      sqlEntity,
    );
  }

  static Pointer tableName(
    Pointer<NSSQLRTreeIndex> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tableName"),
    );
  }
}

@unsized
class NSSQLRTreeIndexQueryIntermediate
    extends Struct<NSSQLRTreeIndexQueryIntermediate> {
  factory NSSQLRTreeIndexQueryIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRTreeIndexQueryIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLRTreeIndexQueryIntermediate")
        .cast<NSSQLRTreeIndexQueryIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLRTreeIndexQueryIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLRTreeIndexQueryIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initForIndexNamed(
    Pointer<NSSQLRTreeIndexQueryIntermediate> _self,
    Pointer arg, {
    @required Pointer onEntity,
    @required Pointer properties,
    @required Pointer ranges,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initForIndexNamed:onEntity:properties:ranges:inScope:"),
      arg,
      onEntity,
      properties,
      ranges,
      inScope,
    );
  }
}

@unsized
class NSSQLReadOnlySelectIntermediate
    extends Struct<NSSQLReadOnlySelectIntermediate> {
  factory NSSQLReadOnlySelectIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLReadOnlySelectIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLReadOnlySelectIntermediate")
        .cast<NSSQLReadOnlySelectIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLReadOnlySelectIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLReadOnlySelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithScope(
    Pointer<NSSQLReadOnlySelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithScope:"),
      arg,
    );
  }

  static int onlyFetchesAggregates(
    Pointer<NSSQLReadOnlySelectIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("onlyFetchesAggregates"),
    );
  }

  static Pointer resolveVariableExpression(
    Pointer<NSSQLReadOnlySelectIntermediate> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("resolveVariableExpression:inContext:"),
      arg,
      inContext,
    );
  }
}

@unsized
class NSSQLRelationship extends Struct<NSSQLRelationship> {
  factory NSSQLRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRelationship> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLRelationship").cast<NSSQLRelationship>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLRelationship> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static Pointer correlationTableName(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationTableName"),
    );
  }

  static void dealloc(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationEntity(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationEntity"),
    );
  }

  static Pointer foreignKey(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKey"),
    );
  }

  static Pointer initForReadOnlyFetchWithEntity(
    Pointer<NSSQLRelationship> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLRelationship> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer inverseRelationship(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseRelationship"),
    );
  }

  static int isOrdered(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOrdered"),
    );
  }

  static Pointer name(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer relationshipDescription(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipDescription"),
    );
  }

  static Pointer sourceEntity(
    Pointer<NSSQLRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceEntity"),
    );
  }
}

@unsized
class NSSQLRelationshipFaultRequestContext
    extends Struct<NSSQLRelationshipFaultRequestContext> {
  factory NSSQLRelationshipFaultRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRelationshipFaultRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLRelationshipFaultRequestContext")
        .cast<NSSQLRelationshipFaultRequestContext>();
  }

  static void dealloc(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer initWithObjectID(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
    Pointer arg, {
    @required Pointer relationship,
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:relationship:context:sqlCore:"),
      arg,
      relationship,
      context,
      sqlCore,
    );
  }

  static Pointer objectID(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static Pointer relationship(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationship"),
    );
  }

  static Pointer sqlModel(
    Pointer<NSSQLRelationshipFaultRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlModel"),
    );
  }
}

@unsized
class NSSQLRow extends Struct<NSSQLRow> {
  factory NSSQLRow._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRow> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLRow").cast<NSSQLRow>();
  }

  static Pointer attributeValueForSlot(
    Pointer<NSSQLRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_returns_ptr(
      _self,
      _objc.getSelector("attributeValueForSlot:"),
      arg,
    );
  }

  static Pointer copy(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static void dealloc(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int foreignEntityKeyForSlot(
    Pointer<NSSQLRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_returns_Uint32(
      _self,
      _objc.getSelector("foreignEntityKeyForSlot:"),
      arg,
    );
  }

  static int foreignKeyForSlot(
    Pointer<NSSQLRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_returns_Int64(
      _self,
      _objc.getSelector("foreignKeyForSlot:"),
      arg,
    );
  }

  static int foreignOrderKeyForSlot(
    Pointer<NSSQLRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint32_returns_Uint32(
      _self,
      _objc.getSelector("foreignOrderKeyForSlot:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSSQLRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static int optLock(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("optLock"),
    );
  }

  static int pk64(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("pk64"),
    );
  }

  static void setForeignEntityKeySlot(
    Pointer<NSSQLRow> _self,
    int arg, {
    @required int entityKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_Uint32_returns_void(
      _self,
      _objc.getSelector("setForeignEntityKeySlot:entityKey:"),
      arg,
      entityKey,
    );
  }

  static void setForeignKeySlot(
    Pointer<NSSQLRow> _self,
    int arg, {
    @required int int64,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_Int64_returns_void(
      _self,
      _objc.getSelector("setForeignKeySlot:int64:"),
      arg,
      int64,
    );
  }

  static void setForeignOrderKeySlot(
    Pointer<NSSQLRow> _self,
    int arg, {
    @required int orderKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_Uint32_returns_void(
      _self,
      _objc.getSelector("setForeignOrderKeySlot:orderKey:"),
      arg,
      orderKey,
    );
  }

  static void setOptLock(
    Pointer<NSSQLRow> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setOptLock:"),
      arg,
    );
  }

  static Pointer sqlEntity(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlEntity"),
    );
  }

  static int sqlEntityID(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("sqlEntityID"),
    );
  }

  static Pointer valueForKey(
    Pointer<NSSQLRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static int version(
    Pointer<NSSQLRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("version"),
    );
  }
}

@unsized
class NSSQLRowCache extends Struct<NSSQLRowCache> {
  factory NSSQLRowCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLRowCache> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLRowCache").cast<NSSQLRowCache>();
  }

  static void dealloc(
    Pointer<NSSQLRowCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<NSSQLRowCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPersistentStore:"),
      arg,
    );
  }

  static Pointer sqlCore(
    Pointer<NSSQLRowCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlCore"),
    );
  }
}

@unsized
class NSSQLSaveChangesRequestContext
    extends Struct<NSSQLSaveChangesRequestContext> {
  factory NSSQLSaveChangesRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSaveChangesRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLSaveChangesRequestContext")
        .cast<NSSQLSaveChangesRequestContext>();
  }

  static void addDataMask(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer arg, {
    @required Pointer forEntityKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addDataMask:forEntityKey:"),
      arg,
      forEntityKey,
    );
  }

  static Pointer dataMaskForKey(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dataMaskForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeEpilogue(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeEpilogue"),
    );
  }

  static void executePrologue(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executePrologue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static Pointer externalDataLinksDirectory(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataLinksDirectory"),
    );
  }

  static Pointer externalDataReferencesDirectory(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesDirectory"),
    );
  }

  static Pointer faultHandler(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultHandler"),
    );
  }

  static Pointer fileBackedFuturesDirectory(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesDirectory"),
    );
  }

  static int hasChangesForWriting(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChangesForWriting"),
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer metadataToWrite(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadataToWrite"),
    );
  }

  static Pointer model(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer originalCachedRows(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("originalCachedRows"),
    );
  }

  static Pointer originalRowForObjectID(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("originalRowForObjectID:"),
      arg,
    );
  }

  static Pointer request(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static Pointer rowCache(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowCache"),
    );
  }

  static Pointer savePlan(
    Pointer<NSSQLSaveChangesRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("savePlan"),
    );
  }

  static void setOriginalRow(
    Pointer<NSSQLSaveChangesRequestContext> _self,
    Pointer arg, {
    @required Pointer forObjectID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOriginalRow:forObjectID:"),
      arg,
      forObjectID,
    );
  }
}

@unsized
class NSSQLSavePlan extends Struct<NSSQLSavePlan> {
  factory NSSQLSavePlan._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSavePlan> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLSavePlan").cast<NSSQLSavePlan>();
  }

  static void dealloc(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entityForEntityDescription(
    Pointer<NSSQLSavePlan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForEntityDescription:"),
      arg,
    );
  }

  static Pointer externalDataReferencesToDelete(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesToDelete"),
    );
  }

  static Pointer externalDataReferencesToSave(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalDataReferencesToSave"),
    );
  }

  static Pointer fileBackedFuturesToCopy(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesToCopy"),
    );
  }

  static Pointer fileBackedFuturesToDelete(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesToDelete"),
    );
  }

  static Pointer foreignOrderKeysBeingDeleted(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignOrderKeysBeingDeleted"),
    );
  }

  static Pointer foreignOrderKeysBeingUpdated(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignOrderKeysBeingUpdated"),
    );
  }

  static int hasChangesForWriting(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChangesForWriting"),
    );
  }

  static Pointer initForRequestContext(
    Pointer<NSSQLSavePlan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForRequestContext:"),
      arg,
    );
  }

  static Pointer newAncillaryRowsUpdatedForRowCache(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newAncillaryRowsUpdatedForRowCache"),
    );
  }

  static Pointer newCorrelationTableUpdates(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCorrelationTableUpdates"),
    );
  }

  static Pointer newObjectsForExhaustiveLockConflictDetection(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newObjectsForExhaustiveLockConflictDetection"),
    );
  }

  static Pointer newObjectsForFastLockConflictDetection(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newObjectsForFastLockConflictDetection"),
    );
  }

  static Pointer newObjectsForUniquenessConflictDetectionGivenReportedFailures(
    Pointer<NSSQLSavePlan> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newObjectsForUniquenessConflictDetectionGivenReportedFailures:"),
      arg,
    );
  }

  static Pointer newPrimaryRowsUpdatedForRowCache(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newPrimaryRowsUpdatedForRowCache"),
    );
  }

  static Pointer newRowsToAddToRowCache(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newRowsToAddToRowCache"),
    );
  }

  static Pointer newRowsToRemoveFromRowCache(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newRowsToRemoveFromRowCache"),
    );
  }

  static void prepareRows(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareRows"),
    );
  }

  static Pointer saveRequest(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("saveRequest"),
    );
  }

  static Pointer savingContext(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("savingContext"),
    );
  }

  static void setTransactionInMemorySequence(
    Pointer<NSSQLSavePlan> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setTransactionInMemorySequence:"),
      arg,
    );
  }

  static Pointer toManyRelationshipChanges(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("toManyRelationshipChanges"),
    );
  }

  static int transactionInMemorySequence(
    Pointer<NSSQLSavePlan> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("transactionInMemorySequence"),
    );
  }
}

@unsized
class NSSQLSelectIntermediate extends Struct<NSSQLSelectIntermediate> {
  factory NSSQLSelectIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSelectIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLSelectIntermediate")
        .cast<NSSQLSelectIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLSelectIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initForCorrelationTarget(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg, {
    @required Pointer alias,
    @required Pointer fetchColumns,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForCorrelationTarget:alias:fetchColumns:inScope:"),
      arg,
      alias,
      fetchColumns,
      inScope,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg, {
    @required Pointer alias,
    @required Pointer fetchColumns,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:alias:fetchColumns:inScope:"),
      arg,
      alias,
      fetchColumns,
      inScope,
    );
  }

  static int isTargetColumnsScoped(
    Pointer<NSSQLSelectIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTargetColumnsScoped"),
    );
  }

  static int onlyFetchesAggregates(
    Pointer<NSSQLSelectIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("onlyFetchesAggregates"),
    );
  }

  static Pointer resolveVariableExpression(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("resolveVariableExpression:inContext:"),
      arg,
      inContext,
    );
  }

  static void setColumnAlias(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setColumnAlias:"),
      arg,
    );
  }

  static void setFetchColumns(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFetchColumns:"),
      arg,
    );
  }

  static void setFetchEntity(
    Pointer<NSSQLSelectIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFetchEntity:"),
      arg,
    );
  }

  static void setIsCount(
    Pointer<NSSQLSelectIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsCount:"),
      arg,
    );
  }

  static void setUseDistinct(
    Pointer<NSSQLSelectIntermediate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseDistinct:"),
      arg,
    );
  }
}

@unsized
class NSSQLSimpleWhereIntermediate
    extends Struct<NSSQLSimpleWhereIntermediate> {
  factory NSSQLSimpleWhereIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSimpleWhereIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLSimpleWhereIntermediate")
        .cast<NSSQLSimpleWhereIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLSimpleWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLSimpleWhereIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithPredicate(
    Pointer<NSSQLSimpleWhereIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPredicate:inScope:"),
      arg,
      inScope,
    );
  }

  static int isWhereScoped(
    Pointer<NSSQLSimpleWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWhereScoped"),
    );
  }
}

@unsized
class NSSQLStatementIntermediate extends Struct<NSSQLStatementIntermediate> {
  factory NSSQLStatementIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLStatementIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLStatementIntermediate")
        .cast<NSSQLStatementIntermediate>();
  }

  static Pointer correlationToken(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationToken"),
    );
  }

  static void dealloc(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer governingAlias(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAlias"),
    );
  }

  static Pointer governingAliasForKeypathExpression(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAliasForKeypathExpression:"),
      arg,
    );
  }

  static Pointer governingEntity(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntity"),
    );
  }

  static Pointer governingEntityForKeypathExpression(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntityForKeypathExpression:"),
      arg,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg, {
    @required Pointer alias,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:alias:inScope:"),
      arg,
      alias,
      inScope,
    );
  }

  static int keypathExpressionIsSafeLHSForIn(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("keypathExpressionIsSafeLHSForIn:"),
      arg,
    );
  }

  static Pointer limitIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("limitIntermediate"),
    );
  }

  static Pointer orderIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("orderIntermediate"),
    );
  }

  static void setCorrelationToken(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCorrelationToken:"),
      arg,
    );
  }

  static void setGoverningAlias(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGoverningAlias:"),
      arg,
    );
  }

  static void setGoverningEntity(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGoverningEntity:"),
      arg,
    );
  }

  static void setLimitIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLimitIntermediate:"),
      arg,
    );
  }

  static void setOrderIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOrderIntermediate:"),
      arg,
    );
  }

  static void setWhereIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setWhereIntermediate:"),
      arg,
    );
  }

  static Pointer whereIntermediate(
    Pointer<NSSQLStatementIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("whereIntermediate"),
    );
  }
}

@unsized
class NSSQLStoreMappingGenerator extends Struct<NSSQLStoreMappingGenerator> {
  factory NSSQLStoreMappingGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLStoreMappingGenerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLStoreMappingGenerator")
        .cast<NSSQLStoreMappingGenerator>();
  }

  static void dealloc(
    Pointer<NSSQLStoreMappingGenerator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateTableName(
    Pointer<NSSQLStoreMappingGenerator> _self,
    Pointer arg, {
    @required int isAncillary,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("generateTableName:isAncillary:"),
      arg,
      isAncillary,
    );
  }

  static Pointer init(
    Pointer<NSSQLStoreMappingGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer newGeneratedPropertyName(
    Pointer<NSSQLStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newGeneratedPropertyName:"),
      arg,
    );
  }

  static Pointer newUniqueNameWithBase(
    Pointer<NSSQLStoreMappingGenerator> _self,
    Pointer<Uint16> arg, {
    @required int withLength,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("newUniqueNameWithBase:withLength:"),
      arg,
      withLength,
    );
  }

  static Pointer uniqueNameWithBase(
    Pointer<NSSQLStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("uniqueNameWithBase:"),
      arg,
    );
  }
}

@unsized
class NSSQLStoreRequestContext extends Struct<NSSQLStoreRequestContext> {
  factory NSSQLStoreRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLStoreRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLStoreRequestContext")
        .cast<NSSQLStoreRequestContext>();
  }

  static Pointer connection(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static Pointer context(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("context"),
    );
  }

  static Pointer createNestedObjectFaultContextForObjectWithID(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createNestedObjectFaultContextForObjectWithID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int debugLogLevel(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("debugLogLevel"),
    );
  }

  static Pointer exception(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exception"),
    );
  }

  static void executeEpilogue(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeEpilogue"),
    );
  }

  static void executePrologue(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executePrologue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }

  static int executeRequestUsingConnection(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("executeRequestUsingConnection:"),
      arg,
    );
  }

  static int forConflictAnalysis(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("forConflictAnalysis"),
    );
  }

  static int hasHistoryTracking(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasHistoryTracking"),
    );
  }

  static Pointer initWithRequest(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg, {
    @required Pointer context,
    @required Pointer sqlCore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRequest:context:sqlCore:"),
      arg,
      context,
      sqlCore,
    );
  }

  static int isWritingRequest(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWritingRequest"),
    );
  }

  static Pointer localError(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localError"),
    );
  }

  static Pointer newObjectIDForEntity(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg, {
    @required int pk,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_returns_ptr(
      _self,
      _objc.getSelector("newObjectIDForEntity:pk:"),
      arg,
      pk,
    );
  }

  static Pointer newStatementWithSQLString(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newStatementWithSQLString:"),
      arg,
    );
  }

  static Pointer notificationSourceObject(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("notificationSourceObject"),
    );
  }

  static Pointer persistentStoreRequest(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreRequest"),
    );
  }

  static Pointer queryGenerationToken(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("queryGenerationToken"),
    );
  }

  static int requestType(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static Pointer result(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("result"),
    );
  }

  static Pointer rowCache(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowCache"),
    );
  }

  static void setConnection(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConnection:"),
      arg,
    );
  }

  static void setException(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setException:"),
      arg,
    );
  }

  static void setLocalError(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLocalError:"),
      arg,
    );
  }

  static void setResult(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setResult:"),
      arg,
    );
  }

  static void setTransactionID(
    Pointer<NSSQLStoreRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionID:"),
      arg,
    );
  }

  static int shouldRegisterQueryGeneration(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldRegisterQueryGeneration"),
    );
  }

  static Pointer sqlCore(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlCore"),
    );
  }

  static int storeIsInMemory(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("storeIsInMemory"),
    );
  }

  static Pointer transactionID(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionID"),
    );
  }

  static int useColoredLogging(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useColoredLogging"),
    );
  }

  static int useConcurrentFetching(
    Pointer<NSSQLStoreRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useConcurrentFetching"),
    );
  }
}

@unsized
class NSSQLSubqueryExpressionIntermediate
    extends Struct<NSSQLSubqueryExpressionIntermediate> {
  factory NSSQLSubqueryExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSubqueryExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLSubqueryExpressionIntermediate")
        .cast<NSSQLSubqueryExpressionIntermediate>();
  }

  static int canDoDirectJoinGivenPredicate(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canDoDirectJoinGivenPredicate:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer fetchIntermediateForKeypathExpression(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIntermediateForKeypathExpression:"),
      arg,
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer governingAliasForKeypathExpression(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAliasForKeypathExpression:"),
      arg,
    );
  }

  static Pointer governingEntityForKeypathExpression(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingEntityForKeypathExpression:"),
      arg,
    );
  }

  static Pointer initWithExpression(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg, {
    @required Pointer trailingKeypath,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithExpression:trailingKeypath:inScope:"),
      arg,
      trailingKeypath,
      inScope,
    );
  }

  static int keypathExpressionIsSafeLHSForIn(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("keypathExpressionIsSafeLHSForIn:"),
      arg,
    );
  }

  static void selectDistinct(
    Pointer<NSSQLSubqueryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("selectDistinct"),
    );
  }
}

@unsized
class NSSQLSubqueryExpressionIntermediatePredicateVisitor
    extends Struct<NSSQLSubqueryExpressionIntermediatePredicateVisitor> {
  factory NSSQLSubqueryExpressionIntermediatePredicateVisitor._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor>
      allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLSubqueryExpressionIntermediatePredicateVisitor")
        .cast<NSSQLSubqueryExpressionIntermediatePredicateVisitor>();
  }

  static int checkPredicate(
    Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("checkPredicate:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithScope(
    Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithScope:"),
      arg,
    );
  }

  static void visitPredicate(
    Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicate:"),
      arg,
    );
  }

  static void visitPredicateExpression(
    Pointer<NSSQLSubqueryExpressionIntermediatePredicateVisitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("visitPredicateExpression:"),
      arg,
    );
  }
}

@unsized
class NSSQLTernaryExpressionIntermediate
    extends Struct<NSSQLTernaryExpressionIntermediate> {
  factory NSSQLTernaryExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLTernaryExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLTernaryExpressionIntermediate")
        .cast<NSSQLTernaryExpressionIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer disambiguatingEntity(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguatingEntity"),
    );
  }

  static Pointer disambiguationKeypath(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("disambiguationKeypath"),
    );
  }

  static int disambiguationKeypathHasToMany(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("disambiguationKeypathHasToMany"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static void setDisambiguatingEntity(
    Pointer<NSSQLTernaryExpressionIntermediate> _self,
    Pointer arg, {
    @required Pointer withKeypath,
    @required int hasToMany,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDisambiguatingEntity:withKeypath:hasToMany:"),
      arg,
      withKeypath,
      hasToMany,
    );
  }
}

@unsized
class NSSQLToMany extends Struct<NSSQLToMany> {
  factory NSSQLToMany._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLToMany> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLToMany").cast<NSSQLToMany>();
  }

  static Pointer initWithEntity(
    Pointer<NSSQLToMany> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer inverseToOne(
    Pointer<NSSQLToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseToOne"),
    );
  }

  static int isToMany(
    Pointer<NSSQLToMany> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isToMany"),
    );
  }
}

@unsized
class NSSQLToOne extends Struct<NSSQLToOne> {
  factory NSSQLToOne._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLToOne> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLToOne").cast<NSSQLToOne>();
  }

  static Pointer columnName(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnName"),
    );
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSSQLToOne> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer foreignEntityKey(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignEntityKey"),
    );
  }

  static Pointer foreignKey(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignKey"),
    );
  }

  static Pointer foreignOrderKey(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("foreignOrderKey"),
    );
  }

  static Pointer initForReadOnlyFetchWithEntity(
    Pointer<NSSQLToOne> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForReadOnlyFetchWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity$propertyDescription(
    Pointer<NSSQLToOne> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:"),
      arg,
      propertyDescription,
    );
  }

  static Pointer initWithEntity$inverseToMany(
    Pointer<NSSQLToOne> _self,
    Pointer arg, {
    @required Pointer inverseToMany,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:inverseToMany:"),
      arg,
      inverseToMany,
    );
  }

  static Pointer initWithEntity$propertyDescription$virtualForToMany(
    Pointer<NSSQLToOne> _self,
    Pointer arg, {
    @required Pointer propertyDescription,
    @required Pointer virtualForToMany,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:propertyDescription:virtualForToMany:"),
      arg,
      propertyDescription,
      virtualForToMany,
    );
  }

  static int isOptional(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOptional"),
    );
  }

  static int isVirtual(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isVirtual"),
    );
  }

  static int slot(
    Pointer<NSSQLToOne> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("slot"),
    );
  }
}

@unsized
class NSSQLUbiquitizedStoreConnectionManager
    extends Struct<NSSQLUbiquitizedStoreConnectionManager> {
  factory NSSQLUbiquitizedStoreConnectionManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLUbiquitizedStoreConnectionManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLUbiquitizedStoreConnectionManager")
        .cast<NSSQLUbiquitizedStoreConnectionManager>();
  }

  static void dealloc(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnectAllConnections(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnectAllConnections"),
    );
  }

  static int handleStoreRequest(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("handleStoreRequest:"),
      arg,
    );
  }

  static Pointer initWithSQLCore(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    Pointer arg, {
    @required int priority,
    @required Pointer seedConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:priority:seedConnection:"),
      arg,
      priority,
      seedConnection,
    );
  }

  static Pointer initializationConnection(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initializationConnection"),
    );
  }

  static int routeStoreRequest(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("routeStoreRequest:"),
      arg,
    );
  }

  static void scheduleBarrierBlock(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleBarrierBlock:"),
      arg,
    );
  }

  static void scheduleConnectionsBarrier(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleConnectionsBarrier:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLUbiquitizedStoreConnectionManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }
}

@unsized
class NSSQLUpdateColumnsIntermediate
    extends Struct<NSSQLUpdateColumnsIntermediate> {
  factory NSSQLUpdateColumnsIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLUpdateColumnsIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLUpdateColumnsIntermediate")
        .cast<NSSQLUpdateColumnsIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer governingAliasForKeypathExpression(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("governingAliasForKeypathExpression:"),
      arg,
    );
  }

  static Pointer initWithProperties(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
    Pointer arg, {
    @required Pointer values,
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithProperties:values:inScope:"),
      arg,
      values,
      inScope,
    );
  }

  static int isDestination(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
    Pointer arg, {
    @required Pointer compatibleDestinationFor,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDestination:compatibleDestinationFor:"),
      arg,
      compatibleDestinationFor,
    );
  }

  static int isRelationship(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
    Pointer arg, {
    @required Pointer compatibleWith,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRelationship:compatibleWith:"),
      arg,
      compatibleWith,
    );
  }

  static int isUpdateColumnsScoped(
    Pointer<NSSQLUpdateColumnsIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUpdateColumnsScoped"),
    );
  }
}

@unsized
class NSSQLUpdateIntermediate extends Struct<NSSQLUpdateIntermediate> {
  factory NSSQLUpdateIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLUpdateIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLUpdateIntermediate")
        .cast<NSSQLUpdateIntermediate>();
  }

  static void dealloc(
    Pointer<NSSQLUpdateIntermediate> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLUpdateIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLUpdateIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:inScope:"),
      arg,
      inScope,
    );
  }

  static int isUpdateScoped(
    Pointer<NSSQLUpdateIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUpdateScoped"),
    );
  }

  static void setUpdateColumnsIntermediate(
    Pointer<NSSQLUpdateIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUpdateColumnsIntermediate:"),
      arg,
    );
  }

  static Pointer updateColumnsIntermediate(
    Pointer<NSSQLUpdateIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updateColumnsIntermediate"),
    );
  }
}

@unsized
class NSSQLVariableExpressionIntermediate
    extends Struct<NSSQLVariableExpressionIntermediate> {
  factory NSSQLVariableExpressionIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLVariableExpressionIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLVariableExpressionIntermediate")
        .cast<NSSQLVariableExpressionIntermediate>();
  }

  static Pointer generateSQLStringInContext(
    Pointer<NSSQLVariableExpressionIntermediate> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateSQLStringInContext:"),
      arg,
    );
  }
}

@unsized
class NSSQLWhereIntermediate extends Struct<NSSQLWhereIntermediate> {
  factory NSSQLWhereIntermediate._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLWhereIntermediate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLWhereIntermediate")
        .cast<NSSQLWhereIntermediate>();
  }

  static Pointer initWithPredicate(
    Pointer<NSSQLWhereIntermediate> _self,
    Pointer arg, {
    @required Pointer inScope,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPredicate:inScope:"),
      arg,
      inScope,
    );
  }

  static Pointer predicate(
    Pointer<NSSQLWhereIntermediate> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }
}

@unsized
class NSSQLXPCFetchRequestContext extends Struct<NSSQLXPCFetchRequestContext> {
  factory NSSQLXPCFetchRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLXPCFetchRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLXPCFetchRequestContext")
        .cast<NSSQLXPCFetchRequestContext>();
  }

  static void executeEpilogue(
    Pointer<NSSQLXPCFetchRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeEpilogue"),
    );
  }

  static void executeRequestCore(
    Pointer<NSSQLXPCFetchRequestContext> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeRequestCore:"),
      arg,
    );
  }
}

@unsized
class NSSQLiteAdapter extends Struct<NSSQLiteAdapter> {
  factory NSSQLiteAdapter._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteAdapter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLiteAdapter").cast<NSSQLiteAdapter>();
  }

  static Pointer createSQLStatementsForRTreeTriggersForLocationAttribute(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer withSQLEntity,
    @required Pointer existingRtreeTables,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createSQLStatementsForRTreeTriggersForLocationAttribute:withSQLEntity:existingRtreeTables:"),
      arg,
      withSQLEntity,
      existingRtreeTables,
    );
  }

  static Pointer createSQLStatementsForTriggerAttribute(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer withSQLEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("createSQLStatementsForTriggerAttribute:withSQLEntity:"),
      arg,
      withSQLEntity,
    );
  }

  static void dealloc(
    Pointer<NSSQLiteAdapter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer
      generateBatchDeleteUpdateHistoryStatementEntity$andRelationship$useInverse(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer andRelationship,
    @required int useInverse,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "generateBatchDeleteUpdateHistoryStatementEntity:andRelationship:useInverse:"),
      arg,
      andRelationship,
      useInverse,
    );
  }

  static Pointer
      generateBatchDeleteUpdateHistoryStatementEntity$andRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer andRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "generateBatchDeleteUpdateHistoryStatementEntity:andRelationship:"),
      arg,
      andRelationship,
    );
  }

  static Pointer generateDeleteHistoryTriggerForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateDeleteHistoryTriggerForEntity:error:"),
      arg,
      error,
    );
  }

  static Pointer generateDeleteStatementsForRequest(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("generateDeleteStatementsForRequest:error:"),
      arg,
      error,
    );
  }

  static Pointer
      generateSQLStatmentForSourcesAndOrderKeysForDestination$inToMany(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer inToMany,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "generateSQLStatmentForSourcesAndOrderKeysForDestination:inToMany:"),
      arg,
      inToMany,
    );
  }

  static Pointer
      generateSQLStatmentForSourcesAndOrderKeysForDestination$inManyToMany(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer inManyToMany,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "generateSQLStatmentForSourcesAndOrderKeysForDestination:inManyToMany:"),
      arg,
      inManyToMany,
    );
  }

  static Pointer generateTriggerStatementsForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer usingRelationshipCleanupSQL,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "generateTriggerStatementsForEntity:usingRelationshipCleanupSQL:error:"),
      arg,
      usingRelationshipCleanupSQL,
      error,
    );
  }

  static Pointer initWithSQLCore(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:"),
      arg,
    );
  }

  static Pointer newComplexPrimaryKeyUpdateStatementForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newComplexPrimaryKeyUpdateStatementForEntity:"),
      arg,
    );
  }

  static Pointer newConstrainedValuesUpdateStatementWithRow(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newConstrainedValuesUpdateStatementWithRow:"),
      arg,
    );
  }

  static Pointer newCopyAndInsertStatementForManyToMany(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer toManyToMany,
    @required Pointer intermediateTableName,
    @required int invertColumns,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "newCopyAndInsertStatementForManyToMany:toManyToMany:intermediateTableName:invertColumns:"),
      arg,
      toManyToMany,
      intermediateTableName,
      invertColumns,
    );
  }

  static Pointer newCorrelationDeleteStatementForRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCorrelationDeleteStatementForRelationship:"),
      arg,
    );
  }

  static Pointer newCorrelationInsertStatementForRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCorrelationInsertStatementForRelationship:"),
      arg,
    );
  }

  static Pointer newCorrelationMasterReorderStatementForRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCorrelationMasterReorderStatementForRelationship:"),
      arg,
    );
  }

  static Pointer newCorrelationMasterReorderStatementPart2ForRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newCorrelationMasterReorderStatementPart2ForRelationship:"),
      arg,
    );
  }

  static Pointer newCorrelationReorderStatementForRelationship(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCorrelationReorderStatementForRelationship:"),
      arg,
    );
  }

  static Pointer newCountStatementWithFetchRequestContext(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCountStatementWithFetchRequestContext:"),
      arg,
    );
  }

  static Pointer newCreateBinaryIndexStatementsForIndex(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateBinaryIndexStatementsForIndex:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer newCreateIndexStatementForColumn(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateIndexStatementForColumn:"),
      arg,
    );
  }

  static Pointer newCreateIndexStatementForColumnWithName(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer inTableWithName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newCreateIndexStatementForColumnWithName:inTableWithName:"),
      arg,
      inTableWithName,
    );
  }

  static Pointer newCreateIndexStatementForColumns(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer name,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateIndexStatementForColumns:name:"),
      arg,
      name,
    );
  }

  static Pointer newCreateIndexStatementForCorrelationTable(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateIndexStatementForCorrelationTable:"),
      arg,
    );
  }

  static Pointer newCreateIndexStatementsForEntity$defaultIndicesOnly(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required int defaultIndicesOnly,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc
          .getSelector("newCreateIndexStatementsForEntity:defaultIndicesOnly:"),
      arg,
      defaultIndicesOnly,
    );
  }

  static Pointer newCreateIndexStatementsForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateIndexStatementsForEntity:"),
      arg,
    );
  }

  static Pointer newCreatePrimaryKeyTableStatement(
    Pointer<NSSQLiteAdapter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreatePrimaryKeyTableStatement"),
    );
  }

  static Pointer newCreateRTreeIndexStatementsForIndex(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateRTreeIndexStatementsForIndex:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer newCreateTableStatementForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateTableStatementForEntity:"),
      arg,
    );
  }

  static Pointer newCreateTableStatementForManyToMany(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateTableStatementForManyToMany:"),
      arg,
    );
  }

  static Pointer newCreateTempTableStatementForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer withAttributesToConstrain,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newCreateTempTableStatementForEntity:withAttributesToConstrain:"),
      arg,
      withAttributesToConstrain,
    );
  }

  static Pointer newCreateTriggersForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer existingRtreeTables,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCreateTriggersForEntity:existingRtreeTables:"),
      arg,
      existingRtreeTables,
    );
  }

  static Pointer newDeleteStatementWithRow(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newDeleteStatementWithRow:"),
      arg,
    );
  }

  static Pointer newDropTableStatementForTableNamed(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newDropTableStatementForTableNamed:"),
      arg,
    );
  }

  static Pointer newDropTableStatementOrFailForTableNamed(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newDropTableStatementOrFailForTableNamed:"),
      arg,
    );
  }

  static Pointer newGeneratorWithStatement(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newGeneratorWithStatement:"),
      arg,
    );
  }

  static Pointer newInsertStatementWithRow(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newInsertStatementWithRow:"),
      arg,
    );
  }

  static Pointer newPrimaryKeyInitializeStatementForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required int withInitialMaxPK,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_returns_ptr(
      _self,
      _objc.getSelector(
          "newPrimaryKeyInitializeStatementForEntity:withInitialMaxPK:"),
      arg,
      withInitialMaxPK,
    );
  }

  static Pointer newRenameTableStatementFrom(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer to,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newRenameTableStatementFrom:to:"),
      arg,
      to,
    );
  }

  static Pointer newRenameTableStatementFromManyToMany(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required Pointer toManyToMany,
    @required Pointer orToRandomSpot,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newRenameTableStatementFromManyToMany:toManyToMany:orToRandomSpot:"),
      arg,
      toManyToMany,
      orToRandomSpot,
    );
  }

  static Pointer newSelectStatementWithFetchRequest(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required int ignoreInheritance,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc
          .getSelector("newSelectStatementWithFetchRequest:ignoreInheritance:"),
      arg,
      ignoreInheritance,
    );
  }

  static Pointer newSelectStatementWithFetchRequestContext(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg, {
    @required int ignoreInheritance,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "newSelectStatementWithFetchRequestContext:ignoreInheritance:"),
      arg,
      ignoreInheritance,
    );
  }

  static Pointer newSimplePrimaryKeyUpdateStatementForEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newSimplePrimaryKeyUpdateStatementForEntity:"),
      arg,
    );
  }

  static Pointer newStatementWithEntity(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newStatementWithEntity:"),
      arg,
    );
  }

  static Pointer newStatementWithSQLString(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newStatementWithSQLString:"),
      arg,
    );
  }

  static Pointer newStatementWithoutEntity(
    Pointer<NSSQLiteAdapter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newStatementWithoutEntity"),
    );
  }

  static Pointer sqlCore(
    Pointer<NSSQLiteAdapter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlCore"),
    );
  }

  static int sqlTypeForExpressionConstantValue(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint8(
      _self,
      _objc.getSelector("sqlTypeForExpressionConstantValue:"),
      arg,
    );
  }

  static Pointer sqliteVersion(
    Pointer<NSSQLiteAdapter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqliteVersion"),
    );
  }

  static Pointer typeStringForColumn(
    Pointer<NSSQLiteAdapter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("typeStringForColumn:"),
      arg,
    );
  }

  static Pointer typeStringForSQLType(
    Pointer<NSSQLiteAdapter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint8_returns_ptr(
      _self,
      _objc.getSelector("typeStringForSQLType:"),
      arg,
    );
  }
}

@unsized
class NSSQLiteConnection extends Struct<NSSQLiteConnection> {
  factory NSSQLiteConnection._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteConnection> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLiteConnection").cast<NSSQLiteConnection>();
  }

  static Pointer adapter(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("adapter"),
    );
  }

  static void addPeerRange(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPeerRange:"),
      arg,
    );
  }

  static void addPeerRangeForPeerID(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer rangeStart,
    @required Pointer rangeEnd,
    @required Pointer peerRangeStart,
    @required Pointer peerRangeEnd,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "addPeerRangeForPeerID:entityName:rangeStart:rangeEnd:peerRangeStart:peerRangeEnd:"),
      arg,
      entityName,
      rangeStart,
      rangeEnd,
      peerRangeStart,
      peerRangeEnd,
    );
  }

  static int addTransactionStringColumnsToTransactionTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("addTransactionStringColumnsToTransactionTable"),
    );
  }

  static void addVMCachedStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addVMCachedStatement:"),
      arg,
    );
  }

  static void adoptQueryGenerationWithIdentifier(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("adoptQueryGenerationWithIdentifier:"),
      arg,
    );
  }

  static Pointer allPeerRanges(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allPeerRanges"),
    );
  }

  static void beginReadTransaction(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("beginReadTransaction"),
    );
  }

  static void beginTransaction(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("beginTransaction"),
    );
  }

  static void bindTempTableForBindIntarray(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("bindTempTableForBindIntarray:"),
      arg,
    );
  }

  static void bindTempTablesForStatementIfNecessary(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("bindTempTablesForStatementIfNecessary:"),
      arg,
    );
  }

  static void cacheCurrentDBStatementOn(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheCurrentDBStatementOn:"),
      arg,
    );
  }

  static void cacheUpdateConstrainedValuesStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer forEntity,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheUpdateConstrainedValuesStatement:forEntity:"),
      arg,
      forEntity,
    );
  }

  static Pointer cachedUpdateConstrainedValuesStatmentForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedUpdateConstrainedValuesStatmentForEntity:"),
      arg,
    );
  }

  static int canConnect(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canConnect"),
    );
  }

  static void clearObjectIDsUpdatedByTriggers(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearObjectIDsUpdatedByTriggers"),
    );
  }

  static void clearPrefetchRequestCache(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearPrefetchRequestCache"),
    );
  }

  static Pointer columnsToFetch(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("columnsToFetch"),
    );
  }

  static void commitTransaction(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("commitTransaction"),
    );
  }

  static void configureUbiquityMetadataTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("configureUbiquityMetadataTable"),
    );
  }

  static void connect(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("connect"),
    );
  }

  static Pointer connectionManager(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("connectionManager"),
    );
  }

  static int createAncillaryModelTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("createAncillaryModelTables"),
    );
  }

  static void createCachedModelTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createCachedModelTable"),
    );
  }

  static void createHistoryTrackingTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createHistoryTrackingTables"),
    );
  }

  static void createIndexesForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createIndexesForEntity:"),
      arg,
    );
  }

  static void createManyToManyTablesForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createManyToManyTablesForEntity:"),
      arg,
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntities(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMapOfEntityNameToPKMaxForEntities:"),
      arg,
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntitiesFromPKTable(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMapOfEntityNameToPKMaxForEntitiesFromPKTable:"),
      arg,
    );
  }

  static Pointer createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:"),
      arg,
    );
  }

  static void createMetadata(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createMetadata"),
    );
  }

  static void createPrimaryKeyTableForModel(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int knownEmpty,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("createPrimaryKeyTableForModel:knownEmpty:"),
      arg,
      knownEmpty,
    );
  }

  static void createSchema(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createSchema"),
    );
  }

  static Pointer createSetOfObjectIDsUpdatedByTriggers(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSetOfObjectIDsUpdatedByTriggers"),
    );
  }

  static void createTableForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createTableForEntity:"),
      arg,
    );
  }

  static void createTablesForEntities(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createTablesForEntities:"),
      arg,
    );
  }

  static void createTriggersForEntities(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("createTriggersForEntities:"),
      arg,
    );
  }

  static int createdAncillaryTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("createdAncillaryTables"),
    );
  }

  static Pointer currentQueryGenerationIdentifier(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentQueryGenerationIdentifier"),
    );
  }

  static int databaseIsEmpty(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("databaseIsEmpty"),
    );
  }

  static void dealloc(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void deleteCloudKitMetadataEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer withPrimaryKeys,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("deleteCloudKitMetadataEntity:withPrimaryKeys:"),
      arg,
      withPrimaryKeys,
    );
  }

  static int deleteRow(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer forRequestContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("deleteRow:forRequestContext:"),
      arg,
      forRequestContext,
    );
  }

  static void didCreateSchema(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didCreateSchema"),
    );
  }

  static void disconnect(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnect"),
    );
  }

  static void dropHistoryBeforeTransactionID(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dropHistoryBeforeTransactionID:"),
      arg,
    );
  }

  static void dropHistoryTrackingTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dropHistoryTrackingTables"),
    );
  }

  static void dropUbiquityTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dropUbiquityTables"),
    );
  }

  static void endFetchAndRecycleStatement(
    Pointer<NSSQLiteConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("endFetchAndRecycleStatement:"),
      arg,
    );
  }

  static void execute(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("execute"),
    );
  }

  static Pointer executeAttributeUniquenessCheckSQLStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer returningColumns,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "executeAttributeUniquenessCheckSQLStatement:returningColumns:"),
      arg,
      returningColumns,
    );
  }

  static void executeCorrelationChangesForValue1(
    Pointer<NSSQLiteConnection> _self,
    int arg, {
    @required int value2,
    @required int value3,
    @required int value4,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector(
          "executeCorrelationChangesForValue1:value2:value3:value4:"),
      arg,
      value2,
      value3,
      value4,
    );
  }

  static Pointer executeMulticolumnUniquenessCheckSQLStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer returningColumns,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "executeMulticolumnUniquenessCheckSQLStatement:returningColumns:"),
      arg,
      returningColumns,
    );
  }

  static Pointer fetchCachedModel(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchCachedModel"),
    );
  }

  static Pointer fetchCreationSQLForType(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchCreationSQLForType:"),
      arg,
    );
  }

  static Pointer fetchIndexCreationSQL(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchIndexCreationSQL"),
    );
  }

  static int fetchMaxPrimaryKeyForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("fetchMaxPrimaryKeyForEntity:"),
      arg,
    );
  }

  static Pointer fetchMetadata(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchMetadata"),
    );
  }

  static int fetchResultSet(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer usingFetchPlan,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("fetchResultSet:usingFetchPlan:"),
      arg,
      usingFetchPlan,
    );
  }

  static Pointer fetchTableCreationSQL(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchTableCreationSQL"),
    );
  }

  static Pointer fetchTableNames(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchTableNames"),
    );
  }

  static Pointer fetchUbiquityKnowledgeVector(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchUbiquityKnowledgeVector"),
    );
  }

  static void forceTransactionClosed(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("forceTransactionClosed"),
    );
  }

  static void freeQueryGenerationWithIdentifier(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("freeQueryGenerationWithIdentifier:"),
      arg,
    );
  }

  static Pointer gatherUpdatedObjectIDs(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("gatherUpdatedObjectIDs"),
    );
  }

  static int generatePrimaryKeysForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int batch,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint32_returns_Int64(
      _self,
      _objc.getSelector("generatePrimaryKeysForEntity:batch:"),
      arg,
      batch,
    );
  }

  static void handleCorruptedDB(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("handleCorruptedDB:"),
      arg,
    );
  }

  static Pointer hasAncillaryEntitiesInHistory(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("hasAncillaryEntitiesInHistory"),
    );
  }

  static int hasCachedModelTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasCachedModelTable"),
    );
  }

  static int hasChangeTrackingTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChangeTrackingTables"),
    );
  }

  static int hasCloudKitTables(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasCloudKitTables"),
    );
  }

  static int hasHistoryRows(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasHistoryRows"),
    );
  }

  static int hasHistoryTransactionWithNumber(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasHistoryTransactionWithNumber:"),
      arg,
    );
  }

  static int hasMetadataTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasMetadataTable"),
    );
  }

  static int hasMirroredRelationshipTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasMirroredRelationshipTable"),
    );
  }

  static int hasOpenTransaction(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasOpenTransaction"),
    );
  }

  static int hasPrimaryKeyTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasPrimaryKeyTable"),
    );
  }

  static int hasTransactionStringColumnsInTransactionTable(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasTransactionStringColumnsInTransactionTable"),
    );
  }

  static Pointer initAsQueryGenerationTrackingConnectionForSQLCore(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initAsQueryGenerationTrackingConnectionForSQLCore:"),
      arg,
    );
  }

  static Pointer initForSQLCore(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForSQLCore:"),
      arg,
    );
  }

  static void insertAncillaryModelObject(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer withEntity,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("insertAncillaryModelObject:withEntity:"),
      arg,
      withEntity,
    );
  }

  static void insertBatchDeleteChangesForTransactionID(
    Pointer<NSSQLiteConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("insertBatchDeleteChangesForTransactionID:"),
      arg,
    );
  }

  static void insertChanges(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int type,
    @required int transactionID,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void(
      _self,
      _objc.getSelector("insertChanges:type:transactionID:context:"),
      arg,
      type,
      transactionID,
      context,
    );
  }

  static int insertImportOperation(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("insertImportOperation:"),
      arg,
    );
  }

  static void insertImportPendingRelationship(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int withOperationPrimaryKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector(
          "insertImportPendingRelationship:withOperationPrimaryKey:"),
      arg,
      withOperationPrimaryKey,
    );
  }

  static void insertRow(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("insertRow:"),
      arg,
    );
  }

  static void insertUpdates(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int transactionID,
    @required Pointer updatedAttributes,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int64_ptr_returns_void(
      _self,
      _objc.getSelector("insertUpdates:transactionID:updatedAttributes:"),
      arg,
      transactionID,
      updatedAttributes,
    );
  }

  static int isFetchInProgress(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFetchInProgress"),
    );
  }

  static int isLocalFS(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isLocalFS"),
    );
  }

  static int isOpen(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isOpen"),
    );
  }

  static int isWriter(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isWriter"),
    );
  }

  static int logQueryPlanForStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("logQueryPlanForStatement:"),
      arg,
    );
  }

  static Pointer metadataColumns(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadataColumns"),
    );
  }

  static Pointer newFetchUUIDSForSubentitiesRootedAt(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newFetchUUIDSForSubentitiesRootedAt:"),
      arg,
    );
  }

  static Pointer newFetchedArray(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newFetchedArray"),
    );
  }

  static int numberOfTombstones(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("numberOfTombstones"),
    );
  }

  static void performAndWait(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performAndWait:"),
      arg,
    );
  }

  static int performIntegrityCheck(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("performIntegrityCheck"),
    );
  }

  static Pointer prefetchRequestCache(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("prefetchRequestCache"),
    );
  }

  static void prepareAndExecuteSQLStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareAndExecuteSQLStatement:"),
      arg,
    );
  }

  static void prepareInsertStatementForAncillaryEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareInsertStatementForAncillaryEntity:"),
      arg,
    );
  }

  static void prepareSQLStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareSQLStatement:"),
      arg,
    );
  }

  static void processDeleteRequest(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processDeleteRequest:"),
      arg,
    );
  }

  static void processExternalDataReferenceFilesDeletedByRequest(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processExternalDataReferenceFilesDeletedByRequest:"),
      arg,
    );
  }

  static void processRelationshipUpdatesForRequestContext(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processRelationshipUpdatesForRequestContext:"),
      arg,
    );
  }

  static void processSaveRequest(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processSaveRequest:"),
      arg,
    );
  }

  static void processUpdateRequest(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer withOIDs,
    @required Pointer forAttributes,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processUpdateRequest:withOIDs:forAttributes:"),
      arg,
      withOIDs,
      forAttributes,
    );
  }

  static Pointer queue(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("queue"),
    );
  }

  static void recreateIndices(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("recreateIndices"),
    );
  }

  static void registerCurrentQueryGenerationWithStore(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerCurrentQueryGenerationWithStore:"),
      arg,
    );
  }

  static void registerCurrentQueryGenerationWithStore$retries(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int retries,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("registerCurrentQueryGenerationWithStore:retries:"),
      arg,
      retries,
    );
  }

  static int registerMigrationUpdateFunctionWithMigrator(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("registerMigrationUpdateFunctionWithMigrator:"),
      arg,
    );
  }

  static void releaseSQLStatement(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseSQLStatement"),
    );
  }

  static Pointer reopenQueryGenerationWithIdentifier(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("reopenQueryGenerationWithIdentifier:error:"),
      arg,
      error,
    );
  }

  static void replaceUbiquityKnowledgeVector(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("replaceUbiquityKnowledgeVector:"),
      arg,
    );
  }

  static void resetSQLStatement(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetSQLStatement"),
    );
  }

  static void rollbackTransaction(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("rollbackTransaction"),
    );
  }

  static int rowsChangedByLastStatement(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("rowsChangedByLastStatement"),
    );
  }

  static void saveCachedModel(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveCachedModel:"),
      arg,
    );
  }

  static void saveMetadata(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveMetadata:"),
      arg,
    );
  }

  static int selectCountWithStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("selectCountWithStatement:"),
      arg,
    );
  }

  static void selectRowsWithStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("selectRowsWithStatement:cached:"),
      arg,
      cached,
    );
  }

  static void setColumnsToFetch(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setColumnsToFetch:"),
      arg,
    );
  }

  static void setExclusiveLockingMode(
    Pointer<NSSQLiteConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setExclusiveLockingMode:"),
      arg,
    );
  }

  static void setIsWriter(
    Pointer<NSSQLiteConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsWriter:"),
      arg,
    );
  }

  static void setSecureDeleteMode(
    Pointer<NSSQLiteConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setSecureDeleteMode:"),
      arg,
    );
  }

  static void setUbiquityTableValue(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityTableValue:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer sqlStatement(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlStatement"),
    );
  }

  static Pointer statementCacheForEntity(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("statementCacheForEntity:"),
      arg,
    );
  }

  static void transactionDidBegin(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionDidBegin"),
    );
  }

  static void transactionDidCommit(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionDidCommit"),
    );
  }

  static void transactionDidRollback(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionDidRollback"),
    );
  }

  static Pointer transactionStringForName(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionStringForName:"),
      arg,
    );
  }

  static void triggerUpdatedRowInTable(
    Pointer<NSSQLiteConnection> _self,
    Pointer<Utf8> arg, {
    @required int withEntityID,
    @required int primaryKey,
    @required Pointer<Utf8> columnName,
    @required int newValue,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void(
      _self,
      _objc.getSelector(
          "triggerUpdatedRowInTable:withEntityID:primaryKey:columnName:newValue:"),
      arg,
      withEntityID,
      primaryKey,
      columnName,
      newValue,
    );
  }

  static Pointer ubiquityTableKeysAndValues(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityTableKeysAndValues"),
    );
  }

  static Pointer ubiquityTableValueForKey(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityTableValueForKey:"),
      arg,
    );
  }

  static void uncacheVMStatement(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("uncacheVMStatement:"),
      arg,
    );
  }

  static void updateAncillaryModelObject(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer withEntity,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateAncillaryModelObject:withEntity:"),
      arg,
      withEntity,
    );
  }

  static void updateConstrainedValuesForRow(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateConstrainedValuesForRow:"),
      arg,
    );
  }

  static void updateRow(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer forRequestContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateRow:forRequestContext:"),
      arg,
      forRequestContext,
    );
  }

  static void updateUbiquityKnowledgeForPeerWithID(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg, {
    @required Pointer andTransactionNumber,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "updateUbiquityKnowledgeForPeerWithID:andTransactionNumber:"),
      arg,
      andTransactionNumber,
    );
  }

  static void updateUbiquityKnowledgeVector(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateUbiquityKnowledgeVector:"),
      arg,
    );
  }

  static void willCreateSchema(
    Pointer<NSSQLiteConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willCreateSchema"),
    );
  }

  static void writeCorrelationChangesFromTracker(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeCorrelationChangesFromTracker:"),
      arg,
    );
  }

  static void writeCorrelationDeletesFromTracker(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeCorrelationDeletesFromTracker:"),
      arg,
    );
  }

  static void writeCorrelationInsertsFromTracker(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeCorrelationInsertsFromTracker:"),
      arg,
    );
  }

  static void writeCorrelationMasterReordersFromTracker(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeCorrelationMasterReordersFromTracker:"),
      arg,
    );
  }

  static void writeCorrelationReordersFromTracker(
    Pointer<NSSQLiteConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("writeCorrelationReordersFromTracker:"),
      arg,
    );
  }
}

@unsized
class NSSQLiteInPlaceMigrationManager
    extends Struct<NSSQLiteInPlaceMigrationManager> {
  factory NSSQLiteInPlaceMigrationManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteInPlaceMigrationManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLiteInPlaceMigrationManager")
        .cast<NSSQLiteInPlaceMigrationManager>();
  }

  static void dealloc(
    Pointer<NSSQLiteInPlaceMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int migrateStoreFromURL(
    Pointer<NSSQLiteInPlaceMigrationManager> _self,
    Pointer arg, {
    @required Pointer type,
    @required Pointer options,
    @required Pointer withMappingModel,
    @required Pointer toDestinationURL,
    @required Pointer destinationType,
    @required Pointer destinationOptions,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:"),
      arg,
      type,
      options,
      withMappingModel,
      toDestinationURL,
      destinationType,
      destinationOptions,
      error,
    );
  }
}

@unsized
class NSSQLiteIntarrayTable extends Struct<NSSQLiteIntarrayTable> {
  factory NSSQLiteIntarrayTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteIntarrayTable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLiteIntarrayTable")
        .cast<NSSQLiteIntarrayTable>();
  }

  static void dealloc(
    Pointer<NSSQLiteIntarrayTable> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer intarrayTableName(
    Pointer<NSSQLiteIntarrayTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("intarrayTableName"),
    );
  }

  static void setIntarrayTableName(
    Pointer<NSSQLiteIntarrayTable> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIntarrayTableName:"),
      arg,
    );
  }
}

@unsized
class NSSQLitePrefetchRequestCache
    extends Struct<NSSQLitePrefetchRequestCache> {
  factory NSSQLitePrefetchRequestCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLitePrefetchRequestCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLitePrefetchRequestCache")
        .cast<NSSQLitePrefetchRequestCache>();
  }

  static void dealloc(
    Pointer<NSSQLitePrefetchRequestCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithSQLCore(
    Pointer<NSSQLitePrefetchRequestCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSQLCore:"),
      arg,
    );
  }

  static Pointer inverseIsToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSSQLitePrefetchRequestCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "inverseIsToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer manyToManyPrefetchRequestsForRelationshipNamed(
    Pointer<NSSQLitePrefetchRequestCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToManyPrefetchRequestsForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer manyToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSSQLitePrefetchRequestCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }
}

@unsized
class NSSQLiteStatement extends Struct<NSSQLiteStatement> {
  factory NSSQLiteStatement._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteStatement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSQLiteStatement").cast<NSSQLiteStatement>();
  }

  static int addBindIntarray(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("addBindIntarray:"),
      arg,
    );
  }

  static int addBindVariable(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("addBindVariable:"),
      arg,
    );
  }

  static Pointer bindIntarrays(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bindIntarrays"),
    );
  }

  static Pointer bindVariables(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("bindVariables"),
    );
  }

  static void cacheFakeEntityForFetch(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheFakeEntityForFetch:"),
      arg,
    );
  }

  static Pointer cachedStatementInfo(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedStatementInfo"),
    );
  }

  static void clearCaches(
    Pointer<NSSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("clearCaches:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer fakeEntityForFetch(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fakeEntityForFetch"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static Pointer initWithEntity$sqlString(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg, {
    @required Pointer sqlString,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:sqlString:"),
      arg,
      sqlString,
    );
  }

  static int isImpossibleCondition(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isImpossibleCondition"),
    );
  }

  static int isReadOnly(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isReadOnly"),
    );
  }

  static void removeAllBindIntarrays(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeAllBindIntarrays"),
    );
  }

  static void removeAllBindVariables(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeAllBindVariables"),
    );
  }

  static void setBindIntarrays(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBindIntarrays:"),
      arg,
    );
  }

  static void setBindVariables(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBindVariables:"),
      arg,
    );
  }

  static void setCachedStatementInfo(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCachedStatementInfo:"),
      arg,
    );
  }

  static void setImpossibleCondition(
    Pointer<NSSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setImpossibleCondition:"),
      arg,
    );
  }

  static void setSQLString(
    Pointer<NSSQLiteStatement> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSQLString:"),
      arg,
    );
  }

  static void setTrackChangedRowCount(
    Pointer<NSSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setTrackChangedRowCount:"),
      arg,
    );
  }

  static Pointer sqlString(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlString"),
    );
  }

  static int trackChangedRowCount(
    Pointer<NSSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("trackChangedRowCount"),
    );
  }
}

@unsized
class NSSQLiteStatementCache extends Struct<NSSQLiteStatementCache> {
  factory NSSQLiteStatementCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSSQLiteStatementCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSQLiteStatementCache")
        .cast<NSSQLiteStatementCache>();
  }

  static void cacheCorrelationDeleteStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheCorrelationDeleteStatement:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void cacheCorrelationInsertStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheCorrelationInsertStatement:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void cacheCorrelationMasterReorderStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cacheCorrelationMasterReorderStatement:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void cacheCorrelationMasterReorderStatementPart2(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cacheCorrelationMasterReorderStatementPart2:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void cacheCorrelationReorderStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheCorrelationReorderStatement:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void cacheDeletionStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheDeletionStatement:"),
      arg,
    );
  }

  static void cacheFaultingStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheFaultingStatement:"),
      arg,
    );
  }

  static void cacheFaultingStatement$andFetchRequest$forRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg, {
    @required Pointer andFetchRequest,
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cacheFaultingStatement:andFetchRequest:forRelationship:"),
      arg,
      andFetchRequest,
      forRelationship,
    );
  }

  static void cacheInsertStatement(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheInsertStatement:"),
      arg,
    );
  }

  static void clearCachedStatements(
    Pointer<NSSQLiteStatementCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("clearCachedStatements"),
    );
  }

  static Pointer correlationDeleteStatementForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationDeleteStatementForRelationship:"),
      arg,
    );
  }

  static Pointer correlationInsertStatementForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationInsertStatementForRelationship:"),
      arg,
    );
  }

  static Pointer correlationMasterReorderStatementForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationMasterReorderStatementForRelationship:"),
      arg,
    );
  }

  static Pointer correlationMasterReorderStatementPart2ForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "correlationMasterReorderStatementPart2ForRelationship:"),
      arg,
    );
  }

  static Pointer correlationReorderStatementForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("correlationReorderStatementForRelationship:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSQLiteStatementCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletionStatement(
    Pointer<NSSQLiteStatementCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletionStatement"),
    );
  }

  static Pointer faultingStatement(
    Pointer<NSSQLiteStatementCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("faultingStatement"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static Pointer insertStatement(
    Pointer<NSSQLiteStatementCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertStatement"),
    );
  }

  static Pointer preparedFaultingCachesForRelationship(
    Pointer<NSSQLiteStatementCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("preparedFaultingCachesForRelationship:"),
      arg,
    );
  }
}

@unsized
class NSSaveChangesRequest extends Struct<NSSaveChangesRequest> {
  factory NSSaveChangesRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSSaveChangesRequest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSaveChangesRequest").cast<NSSaveChangesRequest>();
  }

  static void dealloc(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedObjects(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedObjects"),
    );
  }

  static Pointer description(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hasChanges(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasChanges"),
    );
  }

  static Pointer init(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithInsertedObjects(
    Pointer<NSSaveChangesRequest> _self,
    Pointer arg, {
    @required Pointer updatedObjects,
    @required Pointer deletedObjects,
    @required Pointer lockedObjects,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:"),
      arg,
      updatedObjects,
      deletedObjects,
      lockedObjects,
    );
  }

  static Pointer insertedObjects(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertedObjects"),
    );
  }

  static Pointer lockedObjects(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("lockedObjects"),
    );
  }

  static int requestType(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static void setDeletedObjects(
    Pointer<NSSaveChangesRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDeletedObjects:"),
      arg,
    );
  }

  static Pointer updatedObjects(
    Pointer<NSSaveChangesRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedObjects"),
    );
  }
}

@unsized
class NSScalarObjectID48 extends Struct<NSScalarObjectID48> {
  factory NSScalarObjectID48._() {
    throw UnimplementedError();
  }
  static Pointer<NSScalarObjectID48> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScalarObjectID48").cast<NSScalarObjectID48>();
  }

  static int retainCount(
    Pointer<NSScalarObjectID48> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

@unsized
class NSScalarObjectID64 extends Struct<NSScalarObjectID64> {
  factory NSScalarObjectID64._() {
    throw UnimplementedError();
  }
  static Pointer<NSScalarObjectID64> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScalarObjectID64").cast<NSScalarObjectID64>();
  }
}

@unsized
class NSStoreMapNode extends Struct<NSStoreMapNode> {
  factory NSStoreMapNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSStoreMapNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSStoreMapNode").cast<NSStoreMapNode>();
  }

  static Pointer configurationName(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurationName"),
    );
  }

  static void dealloc(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationsForRelationship(
    Pointer<NSStoreMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationsForRelationship:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSStoreMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer entity(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer initWithCoder(
    Pointer<NSStoreMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithObjectID(
    Pointer<NSStoreMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObjectID:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSStoreMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer key(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("key"),
    );
  }

  static Pointer<Pointer> knownKeyValuesPointer(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knownKeyValuesPointer"),
    );
  }

  static Pointer objectID(
    Pointer<NSStoreMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static void setDestinations(
    Pointer<NSStoreMapNode> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinations:forRelationship:"),
      arg,
      forRelationship,
    );
  }
}

@unsized
class NSStoreMapping extends Struct<NSStoreMapping> {
  factory NSStoreMapping._() {
    throw UnimplementedError();
  }
  static Pointer<NSStoreMapping> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSStoreMapping").cast<NSStoreMapping>();
  }

  static void copyValuesForReadOnlyFetch(
    Pointer<NSStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("copyValuesForReadOnlyFetch:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer externalName(
    Pointer<NSStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalName"),
    );
  }

  static int hash(
    Pointer<NSStoreMapping> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithExternalName(
    Pointer<NSStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithExternalName:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setExternalName(
    Pointer<NSStoreMapping> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExternalName:"),
      arg,
    );
  }
}

@unsized
class NSStoreMappingGenerator extends Struct<NSStoreMappingGenerator> {
  factory NSStoreMappingGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSStoreMappingGenerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSStoreMappingGenerator")
        .cast<NSStoreMappingGenerator>();
  }

  static Pointer externalNameForEntityName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalNameForEntityName:"),
      arg,
    );
  }

  static Pointer externalNameForPropertyName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalNameForPropertyName:"),
      arg,
    );
  }

  static Pointer internalNameForEntityName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required int version,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int32_returns_ptr(
      _self,
      _objc.getSelector("internalNameForEntityName:version:"),
      arg,
      version,
    );
  }

  static Pointer internalNameForPropertyName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required int version,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int32_returns_ptr(
      _self,
      _objc.getSelector("internalNameForPropertyName:version:"),
      arg,
      version,
    );
  }

  static Pointer joinsForRelationship(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("joinsForRelationship:"),
      arg,
    );
  }

  static Pointer mappingForAttribute(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required Pointer forConfigurationWithName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingForAttribute:forConfigurationWithName:"),
      arg,
      forConfigurationWithName,
    );
  }

  static Pointer mappingForEntity(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required Pointer forConfigurationWithName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingForEntity:forConfigurationWithName:"),
      arg,
      forConfigurationWithName,
    );
  }

  static Pointer mappingForRelationship(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required Pointer forConfigurationWithName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingForRelationship:forConfigurationWithName:"),
      arg,
      forConfigurationWithName,
    );
  }

  static Pointer mappingsDictForConfigurationWithName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required Pointer inModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingsDictForConfigurationWithName:inModel:"),
      arg,
      inModel,
    );
  }

  static Pointer mappingsForConfigurationWithName(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg, {
    @required Pointer inModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingsForConfigurationWithName:inModel:"),
      arg,
      inModel,
    );
  }

  static Pointer primaryKeyForEntity(
    Pointer<NSStoreMappingGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKeyForEntity:"),
      arg,
    );
  }
}

@unsized
class NSStoreMigrationPolicy extends Struct<NSStoreMigrationPolicy> {
  factory NSStoreMigrationPolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSStoreMigrationPolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSStoreMigrationPolicy")
        .cast<NSStoreMigrationPolicy>();
  }

  static Pointer addMigratedStoreToCoordinator(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer withType,
    @required Pointer configuration,
    @required Pointer URL,
    @required Pointer options,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "addMigratedStoreToCoordinator:withType:configuration:URL:options:error:"),
      arg,
      withType,
      configuration,
      URL,
      options,
      error,
    );
  }

  static Pointer createMigrationManagerForSourceModel(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer destinationModel,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createMigrationManagerForSourceModel:destinationModel:error:"),
      arg,
      destinationModel,
      error,
    );
  }

  static void dealloc(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationConfiguration(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationConfiguration"),
    );
  }

  static Pointer destinationConfigurationForMigration(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer sourceMetadata,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "destinationConfigurationForMigration:sourceMetadata:error:"),
      arg,
      sourceMetadata,
      error,
    );
  }

  static Pointer destinationModel(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationModel"),
    );
  }

  static Pointer destinationOptions(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationOptions"),
    );
  }

  static Pointer destinationOptionsForMigration(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer sourceMetadata,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationOptionsForMigration:sourceMetadata:error:"),
      arg,
      sourceMetadata,
      error,
    );
  }

  static Pointer destinationType(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationType"),
    );
  }

  static Pointer destinationTypeForMigration(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer sourceMetadata,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationTypeForMigration:sourceMetadata:error:"),
      arg,
      sourceMetadata,
      error,
    );
  }

  static Pointer destinationURL(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationURL"),
    );
  }

  static void didPerformMigrationWithManager(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didPerformMigrationWithManager:"),
      arg,
    );
  }

  static Pointer externalDataReferencesURLForDestination(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer forStoreOfType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "externalDataReferencesURLForDestination:forStoreOfType:"),
      arg,
      forStoreOfType,
    );
  }

  static void handleMigrationError(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer inManager,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("handleMigrationError:inManager:"),
      arg,
      inManager,
    );
  }

  static Pointer mappingModel(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingModel"),
    );
  }

  static Pointer mappingModelForSourceModel(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer destinationModel,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mappingModelForSourceModel:destinationModel:error:"),
      arg,
      destinationModel,
      error,
    );
  }

  static int migrateStoreAtURL$toURL$storeType$options$withManager$error(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer toURL,
    @required Pointer storeType,
    @required Pointer options,
    @required Pointer withManager,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "migrateStoreAtURL:toURL:storeType:options:withManager:error:"),
      arg,
      toURL,
      storeType,
      options,
      withManager,
      error,
    );
  }

  static Pointer migrateStoreAtURL$withManager$metadata$options$error(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer withManager,
    @required Pointer metadata,
    @required Pointer options,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("migrateStoreAtURL:withManager:metadata:options:error:"),
      arg,
      withManager,
      metadata,
      options,
      error,
    );
  }

  static Pointer migrationManager(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("migrationManager"),
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static Pointer resourceBundles(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("resourceBundles"),
    );
  }

  static void setDestinationConfiguration(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationConfiguration:"),
      arg,
    );
  }

  static void setDestinationOptions(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationOptions:"),
      arg,
    );
  }

  static void setDestinationType(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationType:"),
      arg,
    );
  }

  static void setDestinationURL(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDestinationURL:"),
      arg,
    );
  }

  static void setMappingModel(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMappingModel:"),
      arg,
    );
  }

  static void setMigrationManager(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMigrationManager:"),
      arg,
    );
  }

  static void setPersistentStoreCoordinator(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPersistentStoreCoordinator:"),
      arg,
    );
  }

  static void
      setPersistentStoreCoordinator$sourceURL$configuration$metadata$options(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer sourceURL,
    @required Pointer configuration,
    @required Pointer metadata,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "setPersistentStoreCoordinator:sourceURL:configuration:metadata:options:"),
      arg,
      sourceURL,
      configuration,
      metadata,
      options,
    );
  }

  static void setResourceBundles(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setResourceBundles:"),
      arg,
    );
  }

  static void setSourceConfiguration(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceConfiguration:"),
      arg,
    );
  }

  static void setSourceMetadata(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceMetadata:"),
      arg,
    );
  }

  static void setSourceModel(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceModel:"),
      arg,
    );
  }

  static void setSourceOptions(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceOptions:"),
      arg,
    );
  }

  static void setSourceURL(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceURL:"),
      arg,
    );
  }

  static Pointer sourceConfiguration(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceConfiguration"),
    );
  }

  static Pointer sourceMetadata(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceMetadata"),
    );
  }

  static Pointer sourceModel(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceModel"),
    );
  }

  static Pointer sourceModelForStoreAtURL(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg, {
    @required Pointer metadata,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceModelForStoreAtURL:metadata:error:"),
      arg,
      metadata,
      error,
    );
  }

  static Pointer sourceOptions(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceOptions"),
    );
  }

  static Pointer sourceType(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceType"),
    );
  }

  static Pointer sourceURL(
    Pointer<NSStoreMigrationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceURL"),
    );
  }

  static void willPerformMigrationWithManager(
    Pointer<NSStoreMigrationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willPerformMigrationWithManager:"),
      arg,
    );
  }
}

@unsized
class NSTemporaryObjectID extends Struct<NSTemporaryObjectID> {
  factory NSTemporaryObjectID._() {
    throw UnimplementedError();
  }
  static Pointer<NSTemporaryObjectID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSTemporaryObjectID").cast<NSTemporaryObjectID>();
  }

  static Pointer URIRepresentation(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URIRepresentation"),
    );
  }

  static void dealloc(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entity(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static void finalize(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static int hash(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer initWithEntity(
    Pointer<NSTemporaryObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static Pointer initWithEntity$andUUIDString(
    Pointer<NSTemporaryObjectID> _self,
    Pointer arg, {
    @required Pointer andUUIDString,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:andUUIDString:"),
      arg,
      andUUIDString,
    );
  }

  static int isEqual(
    Pointer<NSTemporaryObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isTemporaryID(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTemporaryID"),
    );
  }

  static Pointer persistentStore(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStore"),
    );
  }

  static void release(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer retain(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSTemporaryObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

@unsized
class NSUnknownRequestTypeResult extends Struct<NSUnknownRequestTypeResult> {
  factory NSUnknownRequestTypeResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnknownRequestTypeResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnknownRequestTypeResult")
        .cast<NSUnknownRequestTypeResult>();
  }

  static void dealloc(
    Pointer<NSUnknownRequestTypeResult> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithSubresults(
    Pointer<NSUnknownRequestTypeResult> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSubresults:"),
      arg,
    );
  }

  static Pointer subresults(
    Pointer<NSUnknownRequestTypeResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("subresults"),
    );
  }
}

@unsized
class NSValidationErrorLocalizationPolicy
    extends Struct<NSValidationErrorLocalizationPolicy> {
  factory NSValidationErrorLocalizationPolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSValidationErrorLocalizationPolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSValidationErrorLocalizationPolicy")
        .cast<NSValidationErrorLocalizationPolicy>();
  }

  static void dealloc(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithURL(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static Pointer localizationDictionary(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localizationDictionary"),
    );
  }

  static Pointer localizedEntityNameForEntity(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localizedEntityNameForEntity:"),
      arg,
    );
  }

  static Pointer localizedModelStringForKey(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localizedModelStringForKey:"),
      arg,
    );
  }

  static Pointer localizedPropertyNameForProperty(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localizedPropertyNameForProperty:"),
      arg,
    );
  }

  static void setLocalizationDictionary(
    Pointer<NSValidationErrorLocalizationPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLocalizationDictionary:"),
      arg,
    );
  }
}

@unsized
class NSXMLDocumentMap extends Struct<NSXMLDocumentMap> {
  factory NSXMLDocumentMap._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLDocumentMap> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLDocumentMap").cast<NSXMLDocumentMap>();
  }

  static void addObject(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static int containsObjectWithID(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("containsObjectWithID:"),
      arg,
    );
  }

  static void createAttributeChildOnNode(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer forAttribute,
    @required Pointer type,
    @required Pointer andValue,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "createAttributeChildOnNode:forAttribute:type:andValue:"),
      arg,
      forAttribute,
      type,
      andValue,
    );
  }

  static Pointer createRelationshipChildOnNode(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer forRelationshipDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createRelationshipChildOnNode:forRelationshipDescription:"),
      arg,
      forRelationshipDescription,
    );
  }

  static Pointer dataForKey(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dataForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLDocumentMap> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer document(
    Pointer<NSXMLDocumentMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("document"),
    );
  }

  static Pointer getIDRefStringForValue(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer ofRelationship,
    @required Pointer stringKeys,
    @required Pointer objectIDMapping,
    @required Pointer objectForError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "getIDRefStringForValue:ofRelationship:stringKeys:objectIDMapping:objectForError:"),
      arg,
      ofRelationship,
      stringKeys,
      objectIDMapping,
      objectForError,
    );
  }

  static Pointer getXMLAttributeValueFromObject(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer forAttribute,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getXMLAttributeValueFromObject:forAttribute:"),
      arg,
      forAttribute,
    );
  }

  static Pointer handleFetchRequest(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleFetchRequest:"),
      arg,
    );
  }

  static Pointer initWithDocument(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer forStore,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithDocument:forStore:"),
      arg,
      forStore,
    );
  }

  static int nextPK64(
    Pointer<NSXMLDocumentMap> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("nextPK64"),
    );
  }

  static Pointer nodeFromManagedObject(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("nodeFromManagedObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static void prepareForSave(
    Pointer<NSXMLDocumentMap> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareForSave"),
    );
  }

  static void removeObject(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static Pointer retainedObjectIDsForRelationship(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer forObjectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedObjectIDsForRelationship:forObjectID:"),
      arg,
      forObjectID,
    );
  }

  static Pointer retainedXmlInfoForRelationship(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedXmlInfoForRelationship:"),
      arg,
    );
  }

  static void updateObject(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer objectIDMap,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateObject:objectIDMap:"),
      arg,
      objectIDMap,
    );
  }

  static void updateXMLNode(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg, {
    @required Pointer fromObject,
    @required Pointer objectIDMapping,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateXMLNode:fromObject:objectIDMapping:"),
      arg,
      fromObject,
      objectIDMapping,
    );
  }

  static Pointer xmlInfoForAttribute(
    Pointer<NSXMLDocumentMap> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("xmlInfoForAttribute:"),
      arg,
    );
  }
}

@unsized
class NSXMLDocumentMapNode extends Struct<NSXMLDocumentMapNode> {
  factory NSXMLDocumentMapNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLDocumentMapNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLDocumentMapNode").cast<NSXMLDocumentMapNode>();
  }

  static void dealloc(
    Pointer<NSXMLDocumentMapNode> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSXMLDocumentMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithXMLNode(
    Pointer<NSXMLDocumentMapNode> _self,
    Pointer arg, {
    @required Pointer objectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithXMLNode:objectID:"),
      arg,
      objectID,
    );
  }

  static void setAllDestinations(
    Pointer<NSXMLDocumentMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAllDestinations:"),
      arg,
    );
  }

  static Pointer valueForKey(
    Pointer<NSXMLDocumentMapNode> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static Pointer xmlNode(
    Pointer<NSXMLDocumentMapNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("xmlNode"),
    );
  }
}

@unsized
class NSXMLObjectStore extends Struct<NSXMLObjectStore> {
  factory NSXMLObjectStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLObjectStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLObjectStore").cast<NSXMLObjectStore>();
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSXMLObjectStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static void saveDocumentToPath(
    Pointer<NSXMLObjectStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("saveDocumentToPath:"),
      arg,
    );
  }

  static Pointer type(
    Pointer<NSXMLObjectStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }
}

@unsized
class NSXMLObjectStore2 extends Struct<NSXMLObjectStore2> {
  factory NSXMLObjectStore2._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLObjectStore2> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLObjectStore2").cast<NSXMLObjectStore2>();
  }

  static void createAttributeChildOnNode(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer forAttribute,
    @required Pointer type,
    @required Pointer andValue,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "createAttributeChildOnNode:forAttribute:type:andValue:"),
      arg,
      forAttribute,
      type,
      andValue,
    );
  }

  static Pointer createRelationshipChildOnNode(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer forRelationshipDescription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createRelationshipChildOnNode:forRelationshipDescription:"),
      arg,
      forRelationshipDescription,
    );
  }

  static void dealloc(
    Pointer<NSXMLObjectStore2> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer getIDRefStringForValue(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer ofRelationship,
    @required Pointer objectForError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("getIDRefStringForValue:ofRelationship:objectForError:"),
      arg,
      ofRelationship,
      objectForError,
    );
  }

  static Pointer getXMLAttributeValueFromObject(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer forAttribute,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getXMLAttributeValueFromObject:forAttribute:"),
      arg,
      forAttribute,
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static int load(
    Pointer<NSXMLObjectStore2> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static Pointer newCacheNodeForManagedObject(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newCacheNodeForManagedObject:"),
      arg,
    );
  }

  static Pointer newReferenceObjectForManagedObject(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newReferenceObjectForManagedObject:"),
      arg,
    );
  }

  static int nextPK64(
    Pointer<NSXMLObjectStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("nextPK64"),
    );
  }

  static Pointer retainedXmlInfoForRelationship(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedXmlInfoForRelationship:"),
      arg,
    );
  }

  static int save(
    Pointer<NSXMLObjectStore2> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("save:"),
      arg,
    );
  }

  static Pointer type(
    Pointer<NSXMLObjectStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }

  static void updateCacheNode(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg, {
    @required Pointer fromManagedObject,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateCacheNode:fromManagedObject:"),
      arg,
      fromManagedObject,
    );
  }

  static void willRemoveCacheNodes(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveCacheNodes:"),
      arg,
    );
  }

  static void willRemoveFromPersistentStoreCoordinator(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveFromPersistentStoreCoordinator:"),
      arg,
    );
  }

  static Pointer xmlInfoForAttribute(
    Pointer<NSXMLObjectStore2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("xmlInfoForAttribute:"),
      arg,
    );
  }
}

@unsized
class NSXMLObjectStoreCacheNode2 extends Struct<NSXMLObjectStoreCacheNode2> {
  factory NSXMLObjectStoreCacheNode2._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLObjectStoreCacheNode2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLObjectStoreCacheNode2")
        .cast<NSXMLObjectStoreCacheNode2>();
  }

  static void dealloc(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entity(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static Pointer entityName(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer externalData(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("externalData"),
    );
  }

  static Pointer initWithData(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
    Pointer arg, {
    @required Pointer objectID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithData:objectID:"),
      arg,
      objectID,
    );
  }

  static Pointer oidReferenceData(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("oidReferenceData"),
    );
  }

  static void resetCaches(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetCaches"),
    );
  }

  static void setStore(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStore:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer valueForKey(
    Pointer<NSXMLObjectStoreCacheNode2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }
}

@unsized
class NSXPCRow extends Struct<NSXPCRow> {
  factory NSXPCRow._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCRow> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCRow").cast<NSXPCRow>();
  }

  static void dealloc(
    Pointer<NSXPCRow> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithNode(
    Pointer<NSXPCRow> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithNode:"),
      arg,
    );
  }

  static Pointer node(
    Pointer<NSXPCRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("node"),
    );
  }

  static Pointer objectID(
    Pointer<NSXPCRow> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }
}

@unsized
class NSXPCSaveRequestContext extends Struct<NSXPCSaveRequestContext> {
  factory NSXPCSaveRequestContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCSaveRequestContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCSaveRequestContext")
        .cast<NSXPCSaveRequestContext>();
  }

  static Pointer changeCache(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changeCache"),
    );
  }

  static void dealloc(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int forceUpdates(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("forceUpdates"),
    );
  }

  static Pointer initForStore(
    Pointer<NSXPCSaveRequestContext> _self,
    Pointer arg, {
    @required Pointer request,
    @required Pointer metadata,
    @required int forceInsertsToUpdates,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initForStore:request:metadata:forceInsertsToUpdates:context:"),
      arg,
      request,
      metadata,
      forceInsertsToUpdates,
      context,
    );
  }

  static int interrupts(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("interrupts"),
    );
  }

  static Pointer managedObjectContext(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer newEncodedSaveRequest(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newEncodedSaveRequest"),
    );
  }

  static Pointer request(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static Pointer rowForID(
    Pointer<NSXPCSaveRequestContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowForID:"),
      arg,
    );
  }

  static Pointer rowsToDelete(
    Pointer<NSXPCSaveRequestContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rowsToDelete"),
    );
  }

  static void setInterrupts(
    Pointer<NSXPCSaveRequestContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setInterrupts:"),
      arg,
    );
  }
}

@unsized
class NSXPCStore extends Struct<NSXPCStore> {
  factory NSXPCStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCStore").cast<NSXPCStore>();
  }

  static Pointer ancillaryModels(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillaryModels"),
    );
  }

  static Pointer ancillarySQLModels(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancillarySQLModels"),
    );
  }

  static void cacheContents$ofRelationship$onObjectWithID$generation(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer ofRelationship,
    @required Pointer onObjectWithID,
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cacheContents:ofRelationship:onObjectWithID:generation:"),
      arg,
      ofRelationship,
      onObjectWithID,
      generation,
    );
  }

  static void
      cacheContents$ofRelationship$onObjectWithID$withTimestamp$generation(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer ofRelationship,
    @required Pointer onObjectWithID,
    @required double withTimestamp,
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cacheContents:ofRelationship:onObjectWithID:withTimestamp:generation:"),
      arg,
      ofRelationship,
      onObjectWithID,
      withTimestamp,
      generation,
    );
  }

  static void cacheFetchedRows(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forManagedObjects,
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheFetchedRows:forManagedObjects:generation:"),
      arg,
      forManagedObjects,
      generation,
    );
  }

  static Pointer connectionManager(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("connectionManager"),
    );
  }

  static Pointer currentChangeToken(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentChangeToken"),
    );
  }

  static Pointer currentQueryGeneration(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentQueryGeneration"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decodePrefetchArray(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forSources,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("decodePrefetchArray:forSources:context:"),
      arg,
      forSources,
      context,
    );
  }

  static void decodePrefetchResult(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forSources,
    @required Pointer context,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("decodePrefetchResult:forSources:context:"),
      arg,
      forSources,
      context,
    );
  }

  static Pointer decodeResults$forFetch$context$error(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forFetch,
    @required Pointer context,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("decodeResults:forFetch:context:error:"),
      arg,
      forFetch,
      context,
      error,
    );
  }

  static Pointer decodeResults$forFaultOfObjectWithID$context$error(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forFaultOfObjectWithID,
    @required Pointer context,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("decodeResults:forFaultOfObjectWithID:context:error:"),
      arg,
      forFaultOfObjectWithID,
      context,
      error,
    );
  }

  static Pointer decodeValue(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forRelationship,
    @required Pointer onSource,
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("decodeValue:forRelationship:onSource:inContext:error:"),
      arg,
      forRelationship,
      onSource,
      inContext,
      error,
    );
  }

  static void disconnect(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnect"),
    );
  }

  static Pointer entityForEntityDescription(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityForEntityDescription:"),
      arg,
    );
  }

  static Pointer executeBatchDeleteRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeBatchDeleteRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeFetchRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeFetchRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executePersistentHistoryRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executePersistentHistoryRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executePullChangesRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executePullChangesRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer executeSaveRequest(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("executeSaveRequest:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer fileBackedFuturesDirectory(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesDirectory"),
    );
  }

  static void freeQueryGenerationWithIdentifier(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("freeQueryGenerationWithIdentifier:"),
      arg,
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer configurationName,
    @required Pointer URL,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:configurationName:URL:options:"),
      arg,
      configurationName,
      URL,
      options,
    );
  }

  static int load(
    Pointer<NSXPCStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("load:"),
      arg,
    );
  }

  static int loadMetadata(
    Pointer<NSXPCStore> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadMetadata:"),
      arg,
    );
  }

  static void managedObjectContextDidRegisterObjectsWithIDs(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidRegisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static void managedObjectContextDidUnregisterObjectsWithIDs(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer generation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "managedObjectContextDidUnregisterObjectsWithIDs:generation:"),
      arg,
      generation,
    );
  }

  static Pointer metadata(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer model(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer newValueForRelationship(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer forObjectWithID,
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newValueForRelationship:forObjectWithID:withContext:error:"),
      arg,
      forObjectWithID,
      withContext,
      error,
    );
  }

  static Pointer newValuesForObjectWithID(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newValuesForObjectWithID:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer objectIDFactoryForEntity(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForEntity:"),
      arg,
    );
  }

  static Pointer objectIDFactoryForSQLEntity(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDFactoryForSQLEntity:"),
      arg,
    );
  }

  static Pointer obtainPermanentIDsForObjects(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("obtainPermanentIDsForObjects:error:"),
      arg,
      error,
    );
  }

  static Pointer remoteStoreChangedNotificationName(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("remoteStoreChangedNotificationName"),
    );
  }

  static Pointer reopenQueryGenerationWithIdentifier(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("reopenQueryGenerationWithIdentifier:error:"),
      arg,
      error,
    );
  }

  static Pointer replacementObjectForXPCConnection(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer encoder,
    @required Pointer object,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("replacementObjectForXPCConnection:encoder:object:"),
      arg,
      encoder,
      object,
    );
  }

  static Pointer sendMessage(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer fromContext,
    @required Pointer<Uint64> interrupts,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sendMessage:fromContext:interrupts:error:"),
      arg,
      fromContext,
      interrupts,
      error,
    );
  }

  static Pointer serviceName(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("serviceName"),
    );
  }

  static void setIdentifier(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static void setSQLCore(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSQLCore:"),
      arg,
    );
  }

  static void setURL(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static void setupRemoteStoreObserver(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setupRemoteStoreObserver"),
    );
  }

  static Pointer sqlCore(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sqlCore"),
    );
  }

  static int supportsConcurrentRequestHandling(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsConcurrentRequestHandling"),
    );
  }

  static int supportsGenerationalQuerying(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("supportsGenerationalQuerying"),
    );
  }

  static Pointer type(
    Pointer<NSXPCStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer unarchiver(
    Pointer<NSXPCStore> _self,
    Pointer arg, {
    @required Pointer didDecodeObject,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("unarchiver:didDecodeObject:"),
      arg,
      didDecodeObject,
    );
  }

  static void willRemoveFromPersistentStoreCoordinator(
    Pointer<NSXPCStore> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willRemoveFromPersistentStoreCoordinator:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreConnection extends Struct<NSXPCStoreConnection> {
  factory NSXPCStoreConnection._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreConnection> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCStoreConnection").cast<NSXPCStoreConnection>();
  }

  static Pointer createConnectionWithOptions(
    Pointer<NSXPCStoreConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createConnectionWithOptions:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnect(
    Pointer<NSXPCStoreConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnect"),
    );
  }

  static Pointer initForStore(
    Pointer<NSXPCStoreConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStore:"),
      arg,
    );
  }

  static void reconnect(
    Pointer<NSXPCStoreConnection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reconnect"),
    );
  }

  static Pointer sendMessage(
    Pointer<NSXPCStoreConnection> _self,
    Pointer arg, {
    @required Pointer store,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sendMessage:store:error:"),
      arg,
      store,
      error,
    );
  }

  static void sendMessageWithContext(
    Pointer<NSXPCStoreConnection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("sendMessageWithContext:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreConnectionInfo extends Struct<NSXPCStoreConnectionInfo> {
  factory NSXPCStoreConnectionInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreConnectionInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreConnectionInfo")
        .cast<NSXPCStoreConnectionInfo>();
  }

  static Pointer cache(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cache"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entitlements(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitlements"),
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static void setUserInfo(
    Pointer<NSXPCStoreConnectionInfo> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static Pointer userInfo(
    Pointer<NSXPCStoreConnectionInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

@unsized
class NSXPCStoreConnectionManager extends Struct<NSXPCStoreConnectionManager> {
  factory NSXPCStoreConnectionManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreConnectionManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreConnectionManager")
        .cast<NSXPCStoreConnectionManager>();
  }

  static Pointer availableConnections(
    Pointer<NSXPCStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("availableConnections"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnectAllConnections(
    Pointer<NSXPCStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("disconnectAllConnections"),
    );
  }

  static Pointer initForStore(
    Pointer<NSXPCStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStore:"),
      arg,
    );
  }

  static int maxConnections(
    Pointer<NSXPCStoreConnectionManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("maxConnections"),
    );
  }

  static void sendMessageWithContext(
    Pointer<NSXPCStoreConnectionManager> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("sendMessageWithContext:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreManagedObjectArchivingToken
    extends Struct<NSXPCStoreManagedObjectArchivingToken> {
  factory NSXPCStoreManagedObjectArchivingToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreManagedObjectArchivingToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreManagedObjectArchivingToken")
        .cast<NSXPCStoreManagedObjectArchivingToken>();
  }

  static Pointer URI(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer initWithCoder(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithURI(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithURI:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSXPCStoreManagedObjectArchivingToken> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreMessageContext extends Struct<NSXPCStoreMessageContext> {
  factory NSXPCStoreMessageContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreMessageContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreMessageContext")
        .cast<NSXPCStoreMessageContext>();
  }

  static void dealloc(
    Pointer<NSXPCStoreMessageContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer error(
    Pointer<NSXPCStoreMessageContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer initForMessage(
    Pointer<NSXPCStoreMessageContext> _self,
    Pointer arg, {
    @required Pointer store,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForMessage:store:"),
      arg,
      store,
    );
  }

  static Pointer message(
    Pointer<NSXPCStoreMessageContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("message"),
    );
  }

  static Pointer result(
    Pointer<NSXPCStoreMessageContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("result"),
    );
  }

  static void setError(
    Pointer<NSXPCStoreMessageContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setResult(
    Pointer<NSXPCStoreMessageContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setResult:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<NSXPCStoreMessageContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }
}

@unsized
class NSXPCStoreNotificationObserver
    extends Struct<NSXPCStoreNotificationObserver> {
  factory NSXPCStoreNotificationObserver._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreNotificationObserver> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreNotificationObserver")
        .cast<NSXPCStoreNotificationObserver>();
  }

  static void dealloc(
    Pointer<NSXPCStoreNotificationObserver> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initForObservationWithName(
    Pointer<NSXPCStoreNotificationObserver> _self,
    Pointer arg, {
    @required Pointer store,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForObservationWithName:store:"),
      arg,
      store,
    );
  }

  static void setStore(
    Pointer<NSXPCStoreNotificationObserver> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStore:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreServer extends Struct<NSXPCStoreServer> {
  factory NSXPCStoreServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreServer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCStoreServer").cast<NSXPCStoreServer>();
  }

  static int context(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer shouldHandleInaccessibleFault,
    @required Pointer forObjectID,
    @required Pointer andTrigger,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector(
          "context:shouldHandleInaccessibleFault:forObjectID:andTrigger:"),
      arg,
      shouldHandleInaccessibleFault,
      forObjectID,
      andTrigger,
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreServer> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<NSXPCStoreServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer errorHandlingDelegate(
    Pointer<NSXPCStoreServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("errorHandlingDelegate"),
    );
  }

  static int errorIsPlausiblyAnSQLiteIssue(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("errorIsPlausiblyAnSQLiteIssue:"),
      arg,
    );
  }

  static Pointer handleBatchDeleteRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleBatchDeleteRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleFaultRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleFaultRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleFetchRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleFetchRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleMetadataRequestInContext(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleMetadataRequestInContext:"),
      arg,
    );
  }

  static Pointer handleNotificationNameRequestInContext(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleNotificationNameRequestInContext:error:"),
      arg,
      error,
    );
  }

  static Pointer handleObtainRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleObtainRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handlePersistentHistoryRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handlePersistentHistoryRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handlePersistentHistoryTokenRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handlePersistentHistoryTokenRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handlePullChangesRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handlePullChangesRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleQueryGenerationReleaseRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleQueryGenerationReleaseRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleQueryGenerationReopenRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleQueryGenerationReopenRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer handleQueryGenerationRequestInContext(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleQueryGenerationRequestInContext:error:"),
      arg,
      error,
    );
  }

  static Pointer handleRelationshipFaultRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleRelationshipFaultRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static void handleRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer reply,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("handleRequest:reply:"),
      arg,
      reply,
    );
  }

  static Pointer handleSaveRequest(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("handleSaveRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer initForStoreWithURL$usingModel$options$policy(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer usingModel,
    @required Pointer options,
    @required Pointer policy,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStoreWithURL:usingModel:options:policy:"),
      arg,
      usingModel,
      options,
      policy,
    );
  }

  static Pointer initForStoreWithURL$usingModelAtURL$options$policy(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer usingModelAtURL,
    @required Pointer options,
    @required Pointer policy,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStoreWithURL:usingModelAtURL:options:policy:"),
      arg,
      usingModelAtURL,
      options,
      policy,
    );
  }

  static int listener(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static Pointer localGenerationForXPCToken(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localGenerationForXPCToken:withContext:"),
      arg,
      withContext,
    );
  }

  static void postRemoteChangeNotificationForContext(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("postRemoteChangeNotificationForContext:"),
      arg,
    );
  }

  static void removeCachesForConnection(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeCachesForConnection:"),
      arg,
    );
  }

  static Pointer replacementObjectForXPCConnection(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer encoder,
    @required Pointer object,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("replacementObjectForXPCConnection:encoder:object:"),
      arg,
      encoder,
      object,
    );
  }

  static Pointer requestHandlingPolicy(
    Pointer<NSXPCStoreServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("requestHandlingPolicy"),
    );
  }

  static Pointer retainedCacheForConnection(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedCacheForConnection:"),
      arg,
    );
  }

  static Pointer retainedXPCEncodableGenerationTokenForOriginal(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "retainedXPCEncodableGenerationTokenForOriginal:inContext:"),
      arg,
      inContext,
    );
  }

  static void setErrorHandlingDelegate(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setErrorHandlingDelegate:"),
      arg,
    );
  }

  static int setupRecoveryForConnectionContext(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer ifNecessary,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("setupRecoveryForConnectionContext:ifNecessary:"),
      arg,
      ifNecessary,
    );
  }

  static void startListening(
    Pointer<NSXPCStoreServer> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("startListening"),
    );
  }

  static Pointer unpackQueryGeneration(
    Pointer<NSXPCStoreServer> _self,
    Pointer arg, {
    @required Pointer withContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("unpackQueryGeneration:withContext:"),
      arg,
      withContext,
    );
  }
}

@unsized
class NSXPCStoreServerConnectionContext
    extends Struct<NSXPCStoreServerConnectionContext> {
  factory NSXPCStoreServerConnectionContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreServerConnectionContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreServerConnectionContext")
        .cast<NSXPCStoreServerConnectionContext>();
  }

  static Pointer cache(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cache"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entitlements(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entitlements"),
    );
  }

  static Pointer initWithConnectionInfo(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithConnectionInfo:"),
      arg,
    );
  }

  static Pointer inverseIsToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "inverseIsToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer managedObjectContext(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer manyToManyPrefetchRequestsForRelationshipNamed(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToManyPrefetchRequestsForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer manyToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer notificationManager(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("notificationManager"),
    );
  }

  static Pointer persistentStoreCoordinator(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("persistentStoreCoordinator"),
    );
  }

  static void setManagedObjectContext(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setManagedObjectContext:"),
      arg,
    );
  }

  static void setNotificationManager(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setNotificationManager:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSXPCStoreServerConnectionContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static Pointer userInfo(
    Pointer<NSXPCStoreServerConnectionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

@unsized
class NSXPCStoreServerPerConnectionCache
    extends Struct<NSXPCStoreServerPerConnectionCache> {
  factory NSXPCStoreServerPerConnectionCache._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreServerPerConnectionCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreServerPerConnectionCache")
        .cast<NSXPCStoreServerPerConnectionCache>();
  }

  static Pointer coordinator(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("coordinator"),
    );
  }

  static void dealloc(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithCoordinator(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoordinator:"),
      arg,
    );
  }

  static Pointer inverseIsToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "inverseIsToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer localGenerationForRemoteGeneration(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localGenerationForRemoteGeneration:"),
      arg,
    );
  }

  static Pointer manyToManyPrefetchRequestsForRelationshipNamed(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToManyPrefetchRequestsForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static Pointer manyToOnePrefetchRequestForRelationshipNamed(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg, {
    @required Pointer onEntity,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "manyToOnePrefetchRequestForRelationshipNamed:onEntity:"),
      arg,
      onEntity,
    );
  }

  static void registerQueryGeneration(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg, {
    @required Pointer forRemoteGeneration,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerQueryGeneration:forRemoteGeneration:"),
      arg,
      forRemoteGeneration,
    );
  }

  static void releaseQueryGenerationForRemoteGeneration(
    Pointer<NSXPCStoreServerPerConnectionCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseQueryGenerationForRemoteGeneration:"),
      arg,
    );
  }
}

@unsized
class NSXPCStoreServerRequestHandlingPolicy
    extends Struct<NSXPCStoreServerRequestHandlingPolicy> {
  factory NSXPCStoreServerRequestHandlingPolicy._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCStoreServerRequestHandlingPolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCStoreServerRequestHandlingPolicy")
        .cast<NSXPCStoreServerRequestHandlingPolicy>();
  }

  static Pointer getIDsForEntity(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer count,
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getIDsForEntity:count:inContext:error:"),
      arg,
      count,
      inContext,
      error,
    );
  }

  static Pointer prefetchRelationships(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer forFetch,
    @required Pointer sourceOIDs,
    @required Pointer fromClientWithContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "prefetchRelationships:forFetch:sourceOIDs:fromClientWithContext:"),
      arg,
      forFetch,
      sourceOIDs,
      fromClientWithContext,
    );
  }

  static Pointer processBatchDeleteRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processBatchDeleteRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processFaultForObjectWithID(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processFaultForObjectWithID:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processFaultForRelationshipWithName(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer onObjectWithID,
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processFaultForRelationshipWithName:onObjectWithID:fromClientWithContext:error:"),
      arg,
      onObjectWithID,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processFetchRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processFetchRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processFetchResults(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer prefetchedObjects,
    @required int ofType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("processFetchResults:prefetchedObjects:ofType:"),
      arg,
      prefetchedObjects,
      ofType,
    );
  }

  static Pointer processObtainRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer inContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processObtainRequest:inContext:error:"),
      arg,
      inContext,
      error,
    );
  }

  static Pointer processPersistentHistoryRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processPersistentHistoryRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processPullChangesRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processPullChangesRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processRelationshipSourceObjectID(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "processRelationshipSourceObjectID:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer processSaveRequest(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processSaveRequest:fromClientWithContext:error:"),
      arg,
      fromClientWithContext,
      error,
    );
  }

  static Pointer restrictingPullChangeHistoryPredicateForEntity(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "restrictingPullChangeHistoryPredicateForEntity:fromClientWithContext:"),
      arg,
      fromClientWithContext,
    );
  }

  static Pointer restrictingReadPredicateForEntity(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "restrictingReadPredicateForEntity:fromClientWithContext:"),
      arg,
      fromClientWithContext,
    );
  }

  static Pointer restrictingWritePredicateForEntity(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg, {
    @required Pointer fromClientWithContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "restrictingWritePredicateForEntity:fromClientWithContext:"),
      arg,
      fromClientWithContext,
    );
  }

  static int shouldAcceptConnectionsFromClientWithContext(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldAcceptConnectionsFromClientWithContext:"),
      arg,
    );
  }

  static int shouldAcceptMetadataChangesFromClientWithContext(
    Pointer<NSXPCStoreServerRequestHandlingPolicy> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldAcceptMetadataChangesFromClientWithContext:"),
      arg,
    );
  }
}

@unsized
class PFCloudKitEncryptedSerializer
    extends Struct<PFCloudKitEncryptedSerializer> {
  factory PFCloudKitEncryptedSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitEncryptedSerializer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitEncryptedSerializer")
        .cast<PFCloudKitEncryptedSerializer>();
  }

  static Pointer getValueFromRecord(
    Pointer<PFCloudKitEncryptedSerializer> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getValueFromRecord:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer getValuesFromRecord(
    Pointer<PFCloudKitEncryptedSerializer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getValuesFromRecord:"),
      arg,
    );
  }

  static void setValue(
    Pointer<PFCloudKitEncryptedSerializer> _self,
    Pointer arg, {
    @required Pointer forKey,
    @required Pointer onRecord,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:onRecord:"),
      arg,
      forKey,
      onRecord,
    );
  }
}

@unsized
class PFCloudKitErrorLog extends Struct<PFCloudKitErrorLog> {
  factory PFCloudKitErrorLog._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitErrorLog> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFCloudKitErrorLog").cast<PFCloudKitErrorLog>();
  }

  static void dealloc(
    Pointer<PFCloudKitErrorLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitErrorLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entries(
    Pointer<PFCloudKitErrorLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entries"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitErrorLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void logEncounteredError(
    Pointer<PFCloudKitErrorLog> _self,
    Pointer arg, {
    @required Pointer withAnnotation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logEncounteredError:withAnnotation:"),
      arg,
      withAnnotation,
    );
  }
}

@unsized
class PFCloudKitErrorLogEntry extends Struct<PFCloudKitErrorLogEntry> {
  factory PFCloudKitErrorLogEntry._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitErrorLogEntry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitErrorLogEntry")
        .cast<PFCloudKitErrorLogEntry>();
  }

  static Pointer annotation(
    Pointer<PFCloudKitErrorLogEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("annotation"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitErrorLogEntry> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer error(
    Pointer<PFCloudKitErrorLogEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer initWithError(
    Pointer<PFCloudKitErrorLogEntry> _self,
    Pointer arg, {
    @required Pointer annotation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithError:annotation:"),
      arg,
      annotation,
    );
  }
}

@unsized
class PFCloudKitExportContext extends Struct<PFCloudKitExportContext> {
  factory PFCloudKitExportContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitExportContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitExportContext")
        .cast<PFCloudKitExportContext>();
  }

  static void addOperationForCurrentState(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer withExportMetadata,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addOperationForCurrentState:withExportMetadata:"),
      arg,
      withExportMetadata,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer exportMetadataIdentifier(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportMetadataIdentifier"),
    );
  }

  static Pointer finalHistoryToken(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finalHistoryToken"),
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static int modifyRecordsOperationWithID(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer finishedForStore,
    @required Pointer withSavedRecord,
    @required Pointer deletedRecordIDs,
    @required Pointer operationError,
    @required Pointer managedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "modifyRecordsOperationWithID:finishedForStore:withSavedRecord:deletedRecordIDs:operationError:managedObjectContext:error:"),
      arg,
      finishedForStore,
      withSavedRecord,
      deletedRecordIDs,
      operationError,
      managedObjectContext,
      error,
    );
  }

  static Pointer operations(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("operations"),
    );
  }

  static int persistMetadataChangesIfNecessary(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("persistMetadataChangesIfNecessary:error:"),
      arg,
      error,
    );
  }

  static int processAnalyzerContext(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer withStore,
    @required Pointer inManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "processAnalyzerContext:withStore:inManagedObjectContext:error:"),
      arg,
      withStore,
      inManagedObjectContext,
      error,
    );
  }

  static void processDeletedRecordID(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer withExportMetadata,
    @required Pointer inContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processDeletedRecordID:withExportMetadata:inContext:"),
      arg,
      withExportMetadata,
      inContext,
    );
  }

  static int processObjectState(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer withSerializer,
    @required Pointer analyzerContext,
    @required Pointer store,
    @required Pointer managedObjectContext,
    @required Pointer exportMetadata,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "processObjectState:withSerializer:analyzerContext:store:managedObjectContext:exportMetadata:error:"),
      arg,
      withSerializer,
      analyzerContext,
      store,
      managedObjectContext,
      exportMetadata,
      error,
    );
  }

  static int purgeExportMetadataFromStore(
    Pointer<PFCloudKitExportContext> _self,
    Pointer arg, {
    @required Pointer withContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("purgeExportMetadataFromStore:withContext:error:"),
      arg,
      withContext,
      error,
    );
  }

  static Pointer relCache(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relCache"),
    );
  }

  static void resetCurrentState(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetCurrentState"),
    );
  }

  static Pointer writtenAssetURLs(
    Pointer<PFCloudKitExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("writtenAssetURLs"),
    );
  }
}

@unsized
class PFCloudKitExporter extends Struct<PFCloudKitExporter> {
  factory PFCloudKitExporter._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitExporter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFCloudKitExporter").cast<PFCloudKitExporter>();
  }

  static void dealloc(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void executeOperationsInContext(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeOperationsInContext:completion:"),
      arg,
      completion,
    );
  }

  static Pointer exportContext(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportContext"),
    );
  }

  static void exportIfNecessaryWithCompletion(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("exportIfNecessaryWithCompletion:"),
      arg,
    );
  }

  static void exportOperationFinished(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg, {
    @required Pointer withSavedRecords,
    @required Pointer deletedRecordIDs,
    @required Pointer operationError,
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "exportOperationFinished:withSavedRecords:deletedRecordIDs:operationError:completion:"),
      arg,
      withSavedRecords,
      deletedRecordIDs,
      operationError,
      completion,
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg, {
    @required Pointer request,
    @required Pointer monitor,
    @required Pointer workQueue,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:request:monitor:workQueue:"),
      arg,
      request,
      monitor,
      workQueue,
    );
  }

  static Pointer options(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer request(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static void setDelegate(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void updateSystemFieldsForExportedRecords(
    Pointer<PFCloudKitExporter> _self,
    Pointer arg, {
    @required Pointer inManagedObjectContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "updateSystemFieldsForExportedRecords:inManagedObjectContext:"),
      arg,
      inManagedObjectContext,
    );
  }

  static Pointer workQueue(
    Pointer<PFCloudKitExporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("workQueue"),
    );
  }
}

@unsized
class PFCloudKitExporterOptions extends Struct<PFCloudKitExporterOptions> {
  factory PFCloudKitExporterOptions._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitExporterOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitExporterOptions")
        .cast<PFCloudKitExporterOptions>();
  }

  static Pointer copy(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer database(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("database"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithZone(
    Pointer<PFCloudKitExporterOptions> _self,
    Pointer arg, {
    @required Pointer database,
    @required Pointer options,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithZone:database:options:"),
      arg,
      database,
      options,
    );
  }

  static Pointer mirroringDelegateOptions(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringDelegateOptions"),
    );
  }

  static int perOperationBytesThreshold(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("perOperationBytesThreshold"),
    );
  }

  static int perOperationObjectThreshold(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("perOperationObjectThreshold"),
    );
  }

  static void setPerOperationBytesThreshold(
    Pointer<PFCloudKitExporterOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setPerOperationBytesThreshold:"),
      arg,
    );
  }

  static void setPerOperationObjectThreshold(
    Pointer<PFCloudKitExporterOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setPerOperationObjectThreshold:"),
      arg,
    );
  }

  static Pointer zone(
    Pointer<PFCloudKitExporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

@unsized
class PFCloudKitHistoryAnalyzer extends Struct<PFCloudKitHistoryAnalyzer> {
  factory PFCloudKitHistoryAnalyzer._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitHistoryAnalyzer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitHistoryAnalyzer")
        .cast<PFCloudKitHistoryAnalyzer>();
  }

  static void dealloc(
    Pointer<PFCloudKitHistoryAnalyzer> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithZone(
    Pointer<PFCloudKitHistoryAnalyzer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithZone:"),
      arg,
    );
  }

  static Pointer newAnalyzerContextForStore(
    Pointer<PFCloudKitHistoryAnalyzer> _self,
    Pointer arg, {
    @required Pointer sinceLastHistoryToken,
    @required Pointer inManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newAnalyzerContextForStore:sinceLastHistoryToken:inManagedObjectContext:error:"),
      arg,
      sinceLastHistoryToken,
      inManagedObjectContext,
      error,
    );
  }
}

@unsized
class PFCloudKitHistoryAnalyzerContext
    extends Struct<PFCloudKitHistoryAnalyzerContext> {
  factory PFCloudKitHistoryAnalyzerContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitHistoryAnalyzerContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitHistoryAnalyzerContext")
        .cast<PFCloudKitHistoryAnalyzerContext>();
  }

  static Pointer allDeletedRecordIDs(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allDeletedRecordIDs"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedRecordIDs(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedRecordIDs"),
    );
  }

  static Pointer entityNameToObjectIDs(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNameToObjectIDs"),
    );
  }

  static void finishProcessing(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finishProcessing"),
    );
  }

  static Pointer initWithZone(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithZone:"),
      arg,
    );
  }

  static int isFinished(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static Pointer objectIDToDeletedRecordID(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDToDeletedRecordID"),
    );
  }

  static Pointer objectIDToState(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDToState"),
    );
  }

  static void processChange(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processChange:"),
      arg,
    );
  }

  static void processTransaction(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
    Pointer arg, {
    @required int fromImporter,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("processTransaction:fromImporter:"),
      arg,
      fromImporter,
    );
  }

  static Pointer processedTransactionIDs(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("processedTransactionIDs"),
    );
  }

  static void reset(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static Pointer sortedStates(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sortedStates"),
    );
  }

  static Pointer zoneID(
    Pointer<PFCloudKitHistoryAnalyzerContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

@unsized
class PFCloudKitHistoryAnalyzerObjectState
    extends Struct<PFCloudKitHistoryAnalyzerObjectState> {
  factory PFCloudKitHistoryAnalyzerObjectState._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitHistoryAnalyzerObjectState> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitHistoryAnalyzerObjectState")
        .cast<PFCloudKitHistoryAnalyzerObjectState>();
  }

  static void dealloc(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int finalChangeType(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("finalChangeType"),
    );
  }

  static Pointer finalHistoryToken(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finalHistoryToken"),
    );
  }

  static Pointer finalTransactionNumber(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finalTransactionNumber"),
    );
  }

  static Pointer initWithOriginalChange(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOriginalChange:"),
      arg,
    );
  }

  static Pointer objectID(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static int originalChangeType(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("originalChangeType"),
    );
  }

  static Pointer originalTransactionNumber(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("originalTransactionNumber"),
    );
  }

  static Pointer tombstone(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("tombstone"),
    );
  }

  static void updateWithChange(
    Pointer<PFCloudKitHistoryAnalyzerObjectState> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateWithChange:"),
      arg,
    );
  }
}

@unsized
class PFCloudKitImportDatabaseContext
    extends Struct<PFCloudKitImportDatabaseContext> {
  factory PFCloudKitImportDatabaseContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImportDatabaseContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImportDatabaseContext")
        .cast<PFCloudKitImportDatabaseContext>();
  }

  static Pointer changedRecordZoneIDs(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changedRecordZoneIDs"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedRecordZoneIDs(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedRecordZoneIDs"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hasWorkToDo(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasWorkToDo"),
    );
  }

  static Pointer initWithInterestingZoneIDs(
    Pointer<PFCloudKitImportDatabaseContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithInterestingZoneIDs:"),
      arg,
    );
  }

  static Pointer interestingZoneIDs(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("interestingZoneIDs"),
    );
  }

  static Pointer purgedRecordZoneIDs(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("purgedRecordZoneIDs"),
    );
  }

  static void setUpdatedChangeToken(
    Pointer<PFCloudKitImportDatabaseContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUpdatedChangeToken:"),
      arg,
    );
  }

  static Pointer updatedChangeToken(
    Pointer<PFCloudKitImportDatabaseContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedChangeToken"),
    );
  }

  static void zoneWithIDChanged(
    Pointer<PFCloudKitImportDatabaseContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("zoneWithIDChanged:"),
      arg,
    );
  }

  static void zoneWithIDWasDeleted(
    Pointer<PFCloudKitImportDatabaseContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("zoneWithIDWasDeleted:"),
      arg,
    );
  }

  static void zoneWithIDWasPurged(
    Pointer<PFCloudKitImportDatabaseContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("zoneWithIDWasPurged:"),
      arg,
    );
  }
}

@unsized
class PFCloudKitImportZoneContext extends Struct<PFCloudKitImportZoneContext> {
  factory PFCloudKitImportZoneContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImportZoneContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImportZoneContext")
        .cast<PFCloudKitImportZoneContext>();
  }

  static void addMirroredRelationshipToLink(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addMirroredRelationshipToLink:"),
      arg,
    );
  }

  static void addObjectID$toCache$andUniqueIdentifier(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer toCache,
    @required Pointer andUniqueIdentifier,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObjectID:toCache:andUniqueIdentifier:"),
      arg,
      toCache,
      andUniqueIdentifier,
    );
  }

  static void addObjectID$toCache$forRecordWithType$andUniqueIdentifier(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer toCache,
    @required Pointer forRecordWithType,
    @required Pointer andUniqueIdentifier,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "addObjectID:toCache:forRecordWithType:andUniqueIdentifier:"),
      arg,
      toCache,
      forRecordWithType,
      andUniqueIdentifier,
    );
  }

  static void addUnresolvedRecordName(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer forRecordType,
    @required Pointer toCache,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addUnresolvedRecordName:forRecordType:toCache:"),
      arg,
      forRecordType,
      toCache,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedObjectIDs(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedObjectIDs"),
    );
  }

  static Pointer deletedRelationships(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedRelationships"),
    );
  }

  static Pointer fileBackedFuturesDirectory(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileBackedFuturesDirectory"),
    );
  }

  static Pointer importOperations(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("importOperations"),
    );
  }

  static Pointer
      initWithUpdatedRecords$deletedRecordTypeToRecordIDs$options$fileBackedFuturesDirectory(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer deletedRecordTypeToRecordIDs,
    @required Pointer options,
    @required Pointer fileBackedFuturesDirectory,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithUpdatedRecords:deletedRecordTypeToRecordIDs:options:fileBackedFuturesDirectory:"),
      arg,
      deletedRecordTypeToRecordIDs,
      options,
      fileBackedFuturesDirectory,
    );
  }

  static Pointer
      initWithUpdatedRecords$deletedRecordTypeToRecordIDs$options$fileBackedFuturesDirectory$relationshipCache(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer deletedRecordTypeToRecordIDs,
    @required Pointer options,
    @required Pointer fileBackedFuturesDirectory,
    @required Pointer relationshipCache,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithUpdatedRecords:deletedRecordTypeToRecordIDs:options:fileBackedFuturesDirectory:relationshipCache:"),
      arg,
      deletedRecordTypeToRecordIDs,
      options,
      fileBackedFuturesDirectory,
      relationshipCache,
    );
  }

  static int initializeCachesWithManagedObjectContext(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer andObservedStore,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "initializeCachesWithManagedObjectContext:andObservedStore:error:"),
      arg,
      andObservedStore,
      error,
    );
  }

  static Pointer invalidatedPendingRelationships(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("invalidatedPendingRelationships"),
    );
  }

  static Pointer mirroringOptions(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringOptions"),
    );
  }

  static Pointer modifiedRecords(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modifiedRecords"),
    );
  }

  static Pointer objectIDForRecordWithName(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer ofType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDForRecordWithName:ofType:"),
      arg,
      ofType,
    );
  }

  static Pointer pendingRelationshipsToTry(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("pendingRelationshipsToTry"),
    );
  }

  static int populateUnresolvedIDsWithManagedObjectContext(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("populateUnresolvedIDsWithManagedObjectContext:error:"),
      arg,
      error,
    );
  }

  static void registerObjectID(
    Pointer<PFCloudKitImportZoneContext> _self,
    Pointer arg, {
    @required Pointer forInsertedRecord,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerObjectID:forInsertedRecord:"),
      arg,
      forInsertedRecord,
    );
  }

  static Pointer relCache(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relCache"),
    );
  }

  static Pointer updatedRelationships(
    Pointer<PFCloudKitImportZoneContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedRelationships"),
    );
  }
}

@unsized
class PFCloudKitImporter extends Struct<PFCloudKitImporter> {
  factory PFCloudKitImporter._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFCloudKitImporter").cast<PFCloudKitImporter>();
  }

  static void databaseFetchFinishWithContext(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg, {
    @required Pointer error,
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("databaseFetchFinishWithContext:error:completion:"),
      arg,
      error,
      completion,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer dequeueWorkItem(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("dequeueWorkItem"),
    );
  }

  static void importIfNecessaryWithCompletion(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("importIfNecessaryWithCompletion:"),
      arg,
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg, {
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:request:"),
      arg,
      request,
    );
  }

  static Pointer metadata(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer options(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static void processDatabaseImportContext(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processDatabaseImportContext:completion:"),
      arg,
      completion,
    );
  }

  static void processWorkItemsWithCompletion(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processWorkItemsWithCompletion:"),
      arg,
    );
  }

  static Pointer request(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }

  static void workItemFinished(
    Pointer<PFCloudKitImporter> _self,
    Pointer arg, {
    @required Pointer withResult,
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("workItemFinished:withResult:completion:"),
      arg,
      withResult,
      completion,
    );
  }

  static Pointer workItemResults(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("workItemResults"),
    );
  }

  static Pointer workItems(
    Pointer<PFCloudKitImporter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("workItems"),
    );
  }
}

@unsized
class PFCloudKitImporterFetchRecordsWorkItem
    extends Struct<PFCloudKitImporterFetchRecordsWorkItem> {
  factory PFCloudKitImporterFetchRecordsWorkItem._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterFetchRecordsWorkItem> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterFetchRecordsWorkItem")
        .cast<PFCloudKitImporterFetchRecordsWorkItem>();
  }

  static void addUpdatedRecord(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addUpdatedRecord:"),
      arg,
    );
  }

  static Pointer assetPathToSafeSaveURL(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("assetPathToSafeSaveURL"),
    );
  }

  static void cloudKitSerializer$failedToUpdateRelationship$withError(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer failedToUpdateRelationship,
    @required Pointer withError,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cloudKitSerializer:failedToUpdateRelationship:withError:"),
      arg,
      failedToUpdateRelationship,
      withError,
    );
  }

  static void cloudKitSerializer$resolvedPendingRelationship(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer resolvedPendingRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cloudKitSerializer:resolvedPendingRelationship:"),
      arg,
      resolvedPendingRelationship,
    );
  }

  static Pointer cloudKitSerializer$safeSaveURLForAsset(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer safeSaveURLForAsset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloudKitSerializer:safeSaveURLForAsset:"),
      arg,
      safeSaveURLForAsset,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void doWorkWithCompletion(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("doWorkWithCompletion:"),
      arg,
    );
  }

  static Pointer encounteredErrors(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("encounteredErrors"),
    );
  }

  static void fetchFinishedForRecord(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer withID,
    @required Pointer error,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fetchFinishedForRecord:withID:error:"),
      arg,
      withID,
      error,
    );
  }

  static void fetchOperationFinishedWithError(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fetchOperationFinishedWithError:completion:"),
      arg,
      completion,
    );
  }

  static Pointer fetchRecordsRequest(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fetchRecordsRequest"),
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer arg, {
    @required Pointer metadata,
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:metadata:request:"),
      arg,
      metadata,
      request,
    );
  }

  static Pointer newMirroringResultByApplyingAccumulatedChanges(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newMirroringResultByApplyingAccumulatedChanges:"),
      arg,
    );
  }

  static void removeDownloadedAssetFiles(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeDownloadedAssetFiles"),
    );
  }

  static int totalAssetBytes(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("totalAssetBytes"),
    );
  }

  static Pointer updatedRecords(
    Pointer<PFCloudKitImporterFetchRecordsWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedRecords"),
    );
  }
}

@unsized
class PFCloudKitImporterOptions extends Struct<PFCloudKitImporterOptions> {
  factory PFCloudKitImporterOptions._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterOptions")
        .cast<PFCloudKitImporterOptions>();
  }

  static Pointer assetStorageURL(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("assetStorageURL"),
    );
  }

  static Pointer copy(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer database(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("database"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitImporterOptions> _self,
    Pointer arg, {
    @required Pointer monitor,
    @required Pointer assetStorageURL,
    @required Pointer workQueue,
    @required Pointer zone,
    @required Pointer andDatabase,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithOptions:monitor:assetStorageURL:workQueue:zone:andDatabase:"),
      arg,
      monitor,
      assetStorageURL,
      workQueue,
      zone,
      andDatabase,
    );
  }

  static Pointer monitor(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("monitor"),
    );
  }

  static Pointer options(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer workQueue(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("workQueue"),
    );
  }

  static Pointer zone(
    Pointer<PFCloudKitImporterOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

@unsized
class PFCloudKitImporterWorkItem extends Struct<PFCloudKitImporterWorkItem> {
  factory PFCloudKitImporterWorkItem._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterWorkItem> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterWorkItem")
        .cast<PFCloudKitImporterWorkItem>();
  }

  static void dealloc(
    Pointer<PFCloudKitImporterWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void doWorkWithCompletion(
    Pointer<PFCloudKitImporterWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("doWorkWithCompletion:"),
      arg,
    );
  }

  static Pointer initWithOptions(
    Pointer<PFCloudKitImporterWorkItem> _self,
    Pointer arg, {
    @required Pointer metadata,
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithOptions:metadata:request:"),
      arg,
      metadata,
      request,
    );
  }

  static Pointer metadata(
    Pointer<PFCloudKitImporterWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer options(
    Pointer<PFCloudKitImporterWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer request(
    Pointer<PFCloudKitImporterWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("request"),
    );
  }
}

@unsized
class PFCloudKitImporterZoneChangedWorkItem
    extends Struct<PFCloudKitImporterZoneChangedWorkItem> {
  factory PFCloudKitImporterZoneChangedWorkItem._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterZoneChangedWorkItem> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterZoneChangedWorkItem")
        .cast<PFCloudKitImporterZoneChangedWorkItem>();
  }

  static void addDeletedRecordID(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer ofType,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addDeletedRecordID:ofType:"),
      arg,
      ofType,
    );
  }

  static void addUpdatedRecord(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addUpdatedRecord:"),
      arg,
    );
  }

  static Pointer assetPathToSafeSaveURL(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("assetPathToSafeSaveURL"),
    );
  }

  static Pointer changedRecordZoneIDs(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("changedRecordZoneIDs"),
    );
  }

  static void cloudKitSerializer$failedToUpdateRelationship$withError(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer failedToUpdateRelationship,
    @required Pointer withError,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "cloudKitSerializer:failedToUpdateRelationship:withError:"),
      arg,
      failedToUpdateRelationship,
      withError,
    );
  }

  static void cloudKitSerializer$resolvedPendingRelationship(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer resolvedPendingRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cloudKitSerializer:resolvedPendingRelationship:"),
      arg,
      resolvedPendingRelationship,
    );
  }

  static Pointer cloudKitSerializer$safeSaveURLForAsset(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer safeSaveURLForAsset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloudKitSerializer:safeSaveURLForAsset:"),
      arg,
      safeSaveURLForAsset,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void doWorkWithCompletion(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("doWorkWithCompletion:"),
      arg,
    );
  }

  static Pointer encounteredErrors(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("encounteredErrors"),
    );
  }

  static void fetchFinishedForZoneWithID(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer serverChangeToken,
    @required Pointer error,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fetchFinishedForZoneWithID:serverChangeToken:error:"),
      arg,
      serverChangeToken,
      error,
    );
  }

  static void fetchOperationFinishedWithError(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer completion,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fetchOperationFinishedWithError:completion:"),
      arg,
      completion,
    );
  }

  static Pointer importOperation(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("importOperation"),
    );
  }

  static Pointer initWithChangedRecordZoneIDs(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer arg, {
    @required Pointer options,
    @required Pointer metadata,
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithChangedRecordZoneIDs:options:metadata:request:"),
      arg,
      options,
      metadata,
      request,
    );
  }

  static Pointer newMirroringResultByApplyingAccumulatedChanges(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newMirroringResultByApplyingAccumulatedChanges:"),
      arg,
    );
  }

  static Pointer recordTypeToDeletedRecordID(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordTypeToDeletedRecordID"),
    );
  }

  static void removeDownloadedAssetFiles(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeDownloadedAssetFiles"),
    );
  }

  static Pointer resolvedRelationships(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("resolvedRelationships"),
    );
  }

  static int totalAssetBytes(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("totalAssetBytes"),
    );
  }

  static Pointer updatedRecords(
    Pointer<PFCloudKitImporterZoneChangedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedRecords"),
    );
  }
}

@unsized
class PFCloudKitImporterZoneDeletedWorkItem
    extends Struct<PFCloudKitImporterZoneDeletedWorkItem> {
  factory PFCloudKitImporterZoneDeletedWorkItem._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterZoneDeletedWorkItem> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterZoneDeletedWorkItem")
        .cast<PFCloudKitImporterZoneDeletedWorkItem>();
  }

  static void dealloc(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedRecordZoneID(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedRecordZoneID"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void doWorkWithCompletion(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("doWorkWithCompletion:"),
      arg,
    );
  }

  static Pointer initWithDeletedRecordZoneID(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
    Pointer arg, {
    @required Pointer options,
    @required Pointer metadata,
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc
          .getSelector("initWithDeletedRecordZoneID:options:metadata:request:"),
      arg,
      options,
      metadata,
      request,
    );
  }

  static int wipeCloudMetadataFromMirroredObjects(
    Pointer<PFCloudKitImporterZoneDeletedWorkItem> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeCloudMetadataFromMirroredObjects:"),
      arg,
    );
  }
}

@unsized
class PFCloudKitImporterZonePurgedWorkItem
    extends Struct<PFCloudKitImporterZonePurgedWorkItem> {
  factory PFCloudKitImporterZonePurgedWorkItem._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitImporterZonePurgedWorkItem> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitImporterZonePurgedWorkItem")
        .cast<PFCloudKitImporterZonePurgedWorkItem>();
  }

  static void dealloc(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void doWorkWithCompletion(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("doWorkWithCompletion:"),
      arg,
    );
  }

  static Pointer initWithPurgedRecordZoneID(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
    Pointer arg, {
    @required Pointer options,
    @required Pointer metadata,
    @required Pointer request,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPurgedRecordZoneID:options:metadata:request:"),
      arg,
      options,
      metadata,
      request,
    );
  }

  static Pointer purgedRecordZoneID(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("purgedRecordZoneID"),
    );
  }

  static int wipeAllCloudDataAndPurgeHistoryToken(
    Pointer<PFCloudKitImporterZonePurgedWorkItem> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("wipeAllCloudDataAndPurgeHistoryToken:error:"),
      arg,
      error,
    );
  }
}

@unsized
class PFCloudKitLogging extends Struct<PFCloudKitLogging> {
  factory PFCloudKitLogging._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitLogging> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFCloudKitLogging").cast<PFCloudKitLogging>();
  }

  static void dealloc(
    Pointer<PFCloudKitLogging> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }
}

@unsized
class PFCloudKitMetadataModel extends Struct<PFCloudKitMetadataModel> {
  factory PFCloudKitMetadataModel._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitMetadataModel> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitMetadataModel")
        .cast<PFCloudKitMetadataModel>();
  }
}

@unsized
class PFCloudKitMetadataRequest extends Struct<PFCloudKitMetadataRequest> {
  factory PFCloudKitMetadataRequest._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitMetadataRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitMetadataRequest")
        .cast<PFCloudKitMetadataRequest>();
  }

  static void dealloc(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer entity(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entity"),
    );
  }

  static int fetchBatchSize(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchBatchSize"),
    );
  }

  static int fetchLimit(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchLimit"),
    );
  }

  static int fetchOffset(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("fetchOffset"),
    );
  }

  static int includesPropertyValues(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesPropertyValues"),
    );
  }

  static int includesSubentities(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("includesSubentities"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithEntity(
    Pointer<PFCloudKitMetadataRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithEntity:"),
      arg,
    );
  }

  static Pointer predicate(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer propertiesToFetch(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToFetch"),
    );
  }

  static Pointer propertiesToGroupBy(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("propertiesToGroupBy"),
    );
  }

  static int requestType(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("requestType"),
    );
  }

  static int resultType(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int returnsDistinctResults(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("returnsDistinctResults"),
    );
  }

  static void setPredicate(
    Pointer<PFCloudKitMetadataRequest> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static Pointer sortDescriptors(
    Pointer<PFCloudKitMetadataRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sortDescriptors"),
    );
  }
}

@unsized
class PFCloudKitMirroredRelationshipCache
    extends Struct<PFCloudKitMirroredRelationshipCache> {
  factory PFCloudKitMirroredRelationshipCache._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitMirroredRelationshipCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitMirroredRelationshipCache")
        .cast<PFCloudKitMirroredRelationshipCache>();
  }

  static Pointer addMirroredManyToMany(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("addMirroredManyToMany:"),
      arg,
    );
  }

  static void applyChangesToSQLCore(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("applyChangesToSQLCore:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void deleteMirroredRelationshipWithCKRecordID(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("deleteMirroredRelationshipWithCKRecordID:"),
      arg,
    );
  }

  static Pointer deletedMirroredRelationships(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedMirroredRelationships"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void initializeForRecordNames(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg, {
    @required Pointer mirroredRelationshipRecordNames,
    @required Pointer withSQLCore,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "initializeForRecordNames:mirroredRelationshipRecordNames:withSQLCore:"),
      arg,
      mirroredRelationshipRecordNames,
      withSQLCore,
    );
  }

  static void markAccessedRelationshipsUploadedAndPrune(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("markAccessedRelationshipsUploadedAndPrune"),
    );
  }

  static Pointer mirroredRelationshipForKey(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroredRelationshipForKey:"),
      arg,
    );
  }

  static Pointer mirroredRelationshipForManyToMany(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroredRelationshipForManyToMany:"),
      arg,
    );
  }

  static Pointer mtmKeyForObjectWithRecordName(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg, {
    @required Pointer relatedToObjectWithRecordName,
    @required Pointer byRelationship,
    @required Pointer withInverse,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "mtmKeyForObjectWithRecordName:relatedToObjectWithRecordName:byRelationship:withInverse:"),
      arg,
      relatedToObjectWithRecordName,
      byRelationship,
      withInverse,
    );
  }

  static void noteUpdateForMirroredRelationship(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("noteUpdateForMirroredRelationship:"),
      arg,
    );
  }

  static Pointer pendingMirroredRelationships(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("pendingMirroredRelationships"),
    );
  }

  static void processDeleteForObjectWithRecordName(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg, {
    @required Pointer andObjectID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processDeleteForObjectWithRecordName:andObjectID:"),
      arg,
      andObjectID,
    );
  }

  static Pointer purgeMirroredRelationshipsForDeletedRecordIDs(
    Pointer<PFCloudKitMirroredRelationshipCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("purgeMirroredRelationshipsForDeletedRecordIDs:"),
      arg,
    );
  }
}

@unsized
class PFCloudKitModelValidator extends Struct<PFCloudKitModelValidator> {
  factory PFCloudKitModelValidator._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitModelValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitModelValidator")
        .cast<PFCloudKitModelValidator>();
  }

  static void dealloc(
    Pointer<PFCloudKitModelValidator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitModelValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithManagedObjectModel(
    Pointer<PFCloudKitModelValidator> _self,
    Pointer arg, {
    @required Pointer configuration,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithManagedObjectModel:configuration:"),
      arg,
      configuration,
    );
  }

  static int validate(
    Pointer<PFCloudKitModelValidator> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateEntities(
    Pointer<PFCloudKitModelValidator> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateEntities:error:"),
      arg,
      error,
    );
  }

  static int validateEntity(
    Pointer<PFCloudKitModelValidator> _self,
    Pointer arg, {
    @required Pointer hasAttributeNamed,
    @required int ofType,
    @required Pointer<Pointer> andReturnFailureReason,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "validateEntity:hasAttributeNamed:ofType:andReturnFailureReason:"),
      arg,
      hasAttributeNamed,
      ofType,
      andReturnFailureReason,
    );
  }
}

@unsized
class PFCloudKitOptionsValidator extends Struct<PFCloudKitOptionsValidator> {
  factory PFCloudKitOptionsValidator._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitOptionsValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitOptionsValidator")
        .cast<PFCloudKitOptionsValidator>();
  }

  static void dealloc(
    Pointer<PFCloudKitOptionsValidator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer parsedOptions(
    Pointer<PFCloudKitOptionsValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("parsedOptions"),
    );
  }

  static int validateOptions(
    Pointer<PFCloudKitOptionsValidator> _self,
    Pointer arg, {
    @required Pointer andStoreOptions,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateOptions:andStoreOptions:error:"),
      arg,
      andStoreOptions,
      error,
    );
  }
}

@unsized
class PFCloudKitSchemaGenerator extends Struct<PFCloudKitSchemaGenerator> {
  factory PFCloudKitSchemaGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitSchemaGenerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitSchemaGenerator")
        .cast<PFCloudKitSchemaGenerator>();
  }

  static Pointer configurationName(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("configurationName"),
    );
  }

  static Pointer coordinator(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("coordinator"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithObservedStore(
    Pointer<PFCloudKitSchemaGenerator> _self,
    Pointer arg, {
    @required Pointer zone,
    @required Pointer mirroringOptions,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithObservedStore:zone:mirroringOptions:"),
      arg,
      zone,
      mirroringOptions,
    );
  }

  static Pointer managedObjectContext(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectContext"),
    );
  }

  static Pointer mirroringOptions(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringOptions"),
    );
  }

  static Pointer model(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer newRepresentativeRecords(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newRepresentativeRecords"),
    );
  }

  static void populateRelationshipsOnObject(
    Pointer<PFCloudKitSchemaGenerator> _self,
    Pointer arg, {
    @required Pointer withCache,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("populateRelationshipsOnObject:withCache:"),
      arg,
      withCache,
    );
  }

  static void populateValuesOnObject(
    Pointer<PFCloudKitSchemaGenerator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("populateValuesOnObject:"),
      arg,
    );
  }

  static Pointer representativeObjectForEntity(
    Pointer<PFCloudKitSchemaGenerator> _self,
    Pointer arg, {
    @required Pointer withManagedObjectContext,
    @required Pointer cache,
    @required int populate,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector(
          "representativeObjectForEntity:withManagedObjectContext:cache:populate:"),
      arg,
      withManagedObjectContext,
      cache,
      populate,
    );
  }

  static Pointer store(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer zone(
    Pointer<PFCloudKitSchemaGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

@unsized
class PFCloudKitSerializer extends Struct<PFCloudKitSerializer> {
  factory PFCloudKitSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitSerializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFCloudKitSerializer").cast<PFCloudKitSerializer>();
  }

  static void addURLToWrittenAssetURLs(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addURLToWrittenAssetURLs:"),
      arg,
    );
  }

  static int
      applyUpdatedRecords$deletedRecordIDs$toStore$inManagedObjectContext$onlyUpdatingAttributes$andRelationships$error(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer deletedRecordIDs,
    @required Pointer toStore,
    @required Pointer inManagedObjectContext,
    @required Pointer onlyUpdatingAttributes,
    @required Pointer andRelationships,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "applyUpdatedRecords:deletedRecordIDs:toStore:inManagedObjectContext:onlyUpdatingAttributes:andRelationships:error:"),
      arg,
      deletedRecordIDs,
      toStore,
      inManagedObjectContext,
      onlyUpdatingAttributes,
      andRelationships,
      error,
    );
  }

  static int
      applyUpdatedRecords$deletedRecordIDs$toStore$inManagedObjectContext$error(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer deletedRecordIDs,
    @required Pointer toStore,
    @required Pointer inManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "applyUpdatedRecords:deletedRecordIDs:toStore:inManagedObjectContext:error:"),
      arg,
      deletedRecordIDs,
      toStore,
      inManagedObjectContext,
      error,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer getRecordNameForObject(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getRecordNameForObject:"),
      arg,
    );
  }

  static Pointer getValueFromRecord(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer forKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getValueFromRecord:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer getValuesFromRecord(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getValuesFromRecord:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithZone(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer mirroringOptions,
    @required Pointer recordNamePrefix,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithZone:mirroringOptions:recordNamePrefix:"),
      arg,
      mirroringOptions,
      recordNamePrefix,
    );
  }

  static Pointer manyToManyRecordNameToRecord(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("manyToManyRecordNameToRecord"),
    );
  }

  static Pointer mirroringOptions(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringOptions"),
    );
  }

  static Pointer newCKRecordsFromObject(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required int fullyMaterializeRecords,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_returns_ptr(
      _self,
      _objc.getSelector("newCKRecordsFromObject:fullyMaterializeRecords:"),
      arg,
      fullyMaterializeRecords,
    );
  }

  static Pointer objectIDToCKRecordName(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectIDToCKRecordName"),
    );
  }

  static Pointer recordNamePrefix(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordNamePrefix"),
    );
  }

  static Pointer relCache(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relCache"),
    );
  }

  static void setDelegate(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setMtmRecord(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer toMtmRecordName,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMtmRecord:toMtmRecordName:"),
      arg,
      toMtmRecordName,
    );
  }

  static void setObjectID(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer toCKRecordName,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setObjectID:toCKRecordName:"),
      arg,
      toCKRecordName,
    );
  }

  static void setValue(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer forKey,
    @required Pointer onRecord,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:onRecord:"),
      arg,
      forKey,
      onRecord,
    );
  }

  static void updateAttributes(
    Pointer<PFCloudKitSerializer> _self,
    Pointer arg, {
    @required Pointer andRelationships,
    @required Pointer onManagedObject,
    @required Pointer fromRecord,
    @required Pointer importContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "updateAttributes:andRelationships:onManagedObject:fromRecord:importContext:"),
      arg,
      andRelationships,
      onManagedObject,
      fromRecord,
      importContext,
    );
  }

  static Pointer writtenAssetURLs(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("writtenAssetURLs"),
    );
  }

  static Pointer zone(
    Pointer<PFCloudKitSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

@unsized
class PFCloudKitSetupAssistant extends Struct<PFCloudKitSetupAssistant> {
  factory PFCloudKitSetupAssistant._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitSetupAssistant> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitSetupAssistant")
        .cast<PFCloudKitSetupAssistant>();
  }

  static Pointer cloudKitSemaphore(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cloudKitSemaphore"),
    );
  }

  static Pointer container(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer database(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("database"),
    );
  }

  static void dealloc(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithMirroringOptions(
    Pointer<PFCloudKitSetupAssistant> _self,
    Pointer arg, {
    @required Pointer observedStore,
    @required Pointer zone,
    @required Pointer zoneSubscription,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithMirroringOptions:observedStore:zone:zoneSubscription:"),
      arg,
      observedStore,
      zone,
      zoneSubscription,
    );
  }

  static Pointer largeBlobDirectoryURL(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("largeBlobDirectoryURL"),
    );
  }

  static Pointer metadata(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer mirroringOptions(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("mirroringOptions"),
    );
  }

  static Pointer observedCoordinator(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("observedCoordinator"),
    );
  }

  static Pointer observedStore(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("observedStore"),
    );
  }

  static Pointer zone(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zone"),
    );
  }

  static Pointer zoneSubscription(
    Pointer<PFCloudKitSetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("zoneSubscription"),
    );
  }
}

@unsized
class PFCloudKitStoreMonitor extends Struct<PFCloudKitStoreMonitor> {
  factory PFCloudKitStoreMonitor._() {
    throw UnimplementedError();
  }
  static Pointer<PFCloudKitStoreMonitor> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFCloudKitStoreMonitor")
        .cast<PFCloudKitStoreMonitor>();
  }

  static void coordinatorWillRemoveStore(
    Pointer<PFCloudKitStoreMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("coordinatorWillRemoveStore:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void declareStoreDead(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("declareStoreDead"),
    );
  }

  static int declaredDead(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("declaredDead"),
    );
  }

  static Pointer initForStore(
    Pointer<PFCloudKitStoreMonitor> _self,
    Pointer arg, {
    @required Pointer inCoordinator,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForStore:inCoordinator:"),
      arg,
      inCoordinator,
    );
  }

  static Pointer monitorGroup(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("monitorGroup"),
    );
  }

  static Pointer monitoredCoordinator(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("monitoredCoordinator"),
    );
  }

  static Pointer monitoredStore(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("monitoredStore"),
    );
  }

  static void performBlock(
    Pointer<PFCloudKitStoreMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("performBlock:"),
      arg,
    );
  }

  static void
      pfcloudstoremonitor_is_holding_your_store_open_waiting_for_cloudkit_activity_to_finish(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "pfcloudstoremonitor_is_holding_your_store_open_waiting_for_cloudkit_activity_to_finish"),
    );
  }

  static Pointer retainedMonitoredCoordinator(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedMonitoredCoordinator"),
    );
  }

  static int retryCount(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("retryCount"),
    );
  }

  static Pointer storeIdentifier(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeIdentifier"),
    );
  }

  static int storeIsAlive(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("storeIsAlive"),
    );
  }

  static int timeoutSeconds(
    Pointer<PFCloudKitStoreMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("timeoutSeconds"),
    );
  }
}

@unsized
class PFMirroredManyToManyRelationship
    extends Struct<PFMirroredManyToManyRelationship> {
  factory PFMirroredManyToManyRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<PFMirroredManyToManyRelationship> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFMirroredManyToManyRelationship")
        .cast<PFMirroredManyToManyRelationship>();
  }

  static Pointer ckRecordName(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ckRecordName"),
    );
  }

  static void dealloc(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithRecordName(
    Pointer<PFMirroredManyToManyRelationship> _self,
    Pointer arg, {
    @required Pointer recordType,
    @required Pointer managedObjectModel,
    @required int andType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithRecordName:recordType:managedObjectModel:andType:"),
      arg,
      recordType,
      managedObjectModel,
      andType,
    );
  }

  static Pointer inverseRelationshipDescription(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseRelationshipDescription"),
    );
  }

  static Pointer manyToManyRecordName(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("manyToManyRecordName"),
    );
  }

  static Pointer manyToManyRecordType(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("manyToManyRecordType"),
    );
  }

  static Pointer recordTypesToRecordNames(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordTypesToRecordNames"),
    );
  }

  static Pointer relatedCKRecordName(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedCKRecordName"),
    );
  }

  static Pointer relationshipDescription(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipDescription"),
    );
  }

  static int type(
    Pointer<PFMirroredManyToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static int updateRelationshipValueUsingImportContext(
    Pointer<PFMirroredManyToManyRelationship> _self,
    Pointer arg, {
    @required Pointer andManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "updateRelationshipValueUsingImportContext:andManagedObjectContext:error:"),
      arg,
      andManagedObjectContext,
      error,
    );
  }
}

@unsized
class PFMirroredManyToManyRelationshipV2
    extends Struct<PFMirroredManyToManyRelationshipV2> {
  factory PFMirroredManyToManyRelationshipV2._() {
    throw UnimplementedError();
  }
  static Pointer<PFMirroredManyToManyRelationshipV2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFMirroredManyToManyRelationshipV2")
        .cast<PFMirroredManyToManyRelationshipV2>();
  }

  static Pointer initWithRecord(
    Pointer<PFMirroredManyToManyRelationshipV2> _self,
    Pointer arg, {
    @required Pointer andValues,
    @required Pointer withManagedObjectModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithRecord:andValues:withManagedObjectModel:"),
      arg,
      andValues,
      withManagedObjectModel,
    );
  }

  static Pointer initWithRecordID(
    Pointer<PFMirroredManyToManyRelationshipV2> _self,
    Pointer arg, {
    @required Pointer forRecordWithName,
    @required Pointer relatedToRecordName,
    @required Pointer byRelationship,
    @required Pointer withInverse,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithRecordID:forRecordWithName:relatedToRecordName:byRelationship:withInverse:"),
      arg,
      forRecordWithName,
      relatedToRecordName,
      byRelationship,
      withInverse,
    );
  }

  static void populateRecordValues(
    Pointer<PFMirroredManyToManyRelationshipV2> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("populateRecordValues:"),
      arg,
    );
  }
}

@unsized
class PFMirroredOneToManyRelationship
    extends Struct<PFMirroredOneToManyRelationship> {
  factory PFMirroredOneToManyRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<PFMirroredOneToManyRelationship> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFMirroredOneToManyRelationship")
        .cast<PFMirroredOneToManyRelationship>();
  }

  static void dealloc(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithManagedObject(
    Pointer<PFMirroredOneToManyRelationship> _self,
    Pointer arg, {
    @required Pointer withRecordName,
    @required Pointer relatedToRecordWithRecordName,
    @required Pointer byRelationship,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithManagedObject:withRecordName:relatedToRecordWithRecordName:byRelationship:"),
      arg,
      withRecordName,
      relatedToRecordWithRecordName,
      byRelationship,
    );
  }

  static Pointer inverseRelationshipDescription(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("inverseRelationshipDescription"),
    );
  }

  static Pointer objectID(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("objectID"),
    );
  }

  static Pointer recordName(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordName"),
    );
  }

  static Pointer recordTypesToRecordNames(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("recordTypesToRecordNames"),
    );
  }

  static Pointer relatedRecordName(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relatedRecordName"),
    );
  }

  static Pointer relationshipDescription(
    Pointer<PFMirroredOneToManyRelationship> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipDescription"),
    );
  }

  static int updateRelationshipValueUsingImportContext(
    Pointer<PFMirroredOneToManyRelationship> _self,
    Pointer arg, {
    @required Pointer andManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "updateRelationshipValueUsingImportContext:andManagedObjectContext:error:"),
      arg,
      andManagedObjectContext,
      error,
    );
  }
}

@unsized
class PFMirroredRelationship extends Struct<PFMirroredRelationship> {
  factory PFMirroredRelationship._() {
    throw UnimplementedError();
  }
  static Pointer<PFMirroredRelationship> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFMirroredRelationship")
        .cast<PFMirroredRelationship>();
  }

  static int updateRelationshipValueUsingImportContext(
    Pointer<PFMirroredRelationship> _self,
    Pointer arg, {
    @required Pointer andManagedObjectContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "updateRelationshipValueUsingImportContext:andManagedObjectContext:error:"),
      arg,
      andManagedObjectContext,
      error,
    );
  }
}

@unsized
class PFUBLogEventID extends Struct<PFUBLogEventID> {
  factory PFUBLogEventID._() {
    throw UnimplementedError();
  }
  static Pointer<PFUBLogEventID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUBLogEventID").cast<PFUBLogEventID>();
  }

  static int eventType(
    Pointer<PFUBLogEventID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("eventType"),
    );
  }

  static int hash(
    Pointer<PFUBLogEventID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer idString(
    Pointer<PFUBLogEventID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("idString"),
    );
  }

  static Pointer initWithCustomKey(
    Pointer<PFUBLogEventID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCustomKey:"),
      arg,
    );
  }

  static Pointer initWithEventType(
    Pointer<PFUBLogEventID> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int32_returns_ptr(
      _self,
      _objc.getSelector("initWithEventType:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityBaseline extends Struct<PFUbiquityBaseline> {
  factory PFUbiquityBaseline._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaseline> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityBaseline").cast<PFUbiquityBaseline>();
  }

  static Pointer baselineArchive(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineArchive"),
    );
  }

  static Pointer baselineArchiveLocation(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineArchiveLocation"),
    );
  }

  static Pointer baselineMetadataData(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineMetadataData"),
    );
  }

  static Pointer baselinePeerArchiveLocation(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselinePeerArchiveLocation"),
    );
  }

  static Pointer baselineStagingLocation(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineStagingLocation"),
    );
  }

  static int canReplaceStoreAtKnowledgeVector(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canReplaceStoreAtKnowledgeVector:"),
      arg,
    );
  }

  static int clearOutStagingLocationWithError(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("clearOutStagingLocationWithError:"),
      arg,
    );
  }

  static int constructBaselineArchive(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("constructBaselineArchive:"),
      arg,
    );
  }

  static Pointer createManagedObjectModel(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createManagedObjectModel"),
    );
  }

  static Pointer createManagedObjectModelFromCurrentBaseline(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createManagedObjectModelFromCurrentBaseline"),
    );
  }

  static Pointer createPersistentStoreCoordinatorForCurrentBaseline(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createPersistentStoreCoordinatorForCurrentBaseline:"),
      arg,
    );
  }

  static Pointer createSetOfInUseExternalDataRefUUIDs(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSetOfInUseExternalDataRefUUIDs:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int gatherContentsAndConstructArchiveWithError(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("gatherContentsAndConstructArchiveWithError:"),
      arg,
    );
  }

  static int gatherContentsFromMigratedBaseline(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer withStoreFileURL,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "gatherContentsFromMigratedBaseline:withStoreFileURL:error:"),
      arg,
      withStoreFileURL,
      error,
    );
  }

  static Pointer gcModelData(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("gcModelData"),
    );
  }

  static int haveTransactionLogsForPeer(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required int between,
    @required int and,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_Int64_returns_Int8(
      _self,
      _objc.getSelector("haveTransactionLogsForPeer:between:and:"),
      arg,
      between,
      and,
    );
  }

  static int importBaselineForStoreAtURL(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer ofType,
    @required Pointer options,
    @required Pointer withLocalPeerID,
    @required Pointer stack,
    @required Pointer andPersistentStoreCoordinator,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "importBaselineForStoreAtURL:ofType:options:withLocalPeerID:stack:andPersistentStoreCoordinator:error:"),
      arg,
      ofType,
      options,
      withLocalPeerID,
      stack,
      andPersistentStoreCoordinator,
      error,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithBaselineLocation(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithBaselineLocation:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer ubiquityRootLocation,
    @required Pointer forStoreWithName,
    @required Pointer andManagedObjectModel,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:ubiquityRootLocation:forStoreWithName:andManagedObjectModel:"),
      arg,
      ubiquityRootLocation,
      forStoreWithName,
      andManagedObjectModel,
    );
  }

  static int isUploaded(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUploaded:"),
      arg,
    );
  }

  static int loadFileFromLocation(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadFileFromLocation:error:"),
      arg,
      error,
    );
  }

  static int makeCurrentBaselineWithError(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("makeCurrentBaselineWithError:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static int metadataMatchesCurrentMetadata(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("metadataMatchesCurrentMetadata:"),
      arg,
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static int moveToPermanentLocation(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("moveToPermanentLocation:"),
      arg,
    );
  }

  static Pointer optimizedModelData(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("optimizedModelData"),
    );
  }

  static int prepareForBaselineRollOfPersistentStore(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "prepareForBaselineRollOfPersistentStore:andLocalPeerID:error:"),
      arg,
      andLocalPeerID,
      error,
    );
  }

  static int removeUnusedExternalDataReferences(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("removeUnusedExternalDataReferences:"),
      arg,
    );
  }

  static int replaceLocalPersistentStoreAtURL(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer ofType,
    @required Pointer withOptions,
    @required Pointer usingPersistentStoreCoordinator,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "replaceLocalPersistentStoreAtURL:ofType:withOptions:usingPersistentStoreCoordinator:error:"),
      arg,
      ofType,
      withOptions,
      usingPersistentStoreCoordinator,
      error,
    );
  }

  static void setMetadata(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer storeData(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeData"),
    );
  }

  static Pointer storeFilename(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeFilename"),
    );
  }

  static Pointer storeFilenameToData(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeFilenameToData"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityBaseline> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static int unpackStoreFilesToStagingLocation(
    Pointer<PFUbiquityBaseline> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("unpackStoreFilesToStagingLocation:"),
      arg,
    );
  }

  static int updateCurrentStoreIdentifier(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("updateCurrentStoreIdentifier:error:"),
      arg,
      error,
    );
  }

  static int writeFileToLocation(
    Pointer<PFUbiquityBaseline> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeFileToLocation:error:"),
      arg,
      error,
    );
  }
}

@unsized
class PFUbiquityBaselineHeuristics
    extends Struct<PFUbiquityBaselineHeuristics> {
  factory PFUbiquityBaselineHeuristics._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineHeuristics> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineHeuristics")
        .cast<PFUbiquityBaselineHeuristics>();
  }

  static int bytesForFileAtPath(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("bytesForFileAtPath:"),
      arg,
    );
  }

  static int canRollBaseline(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canRollBaseline:"),
      arg,
    );
  }

  static Pointer copy(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer currentBaselineKV(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentBaselineKV"),
    );
  }

  static Pointer currentKV(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentKV"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int haveEnoughTransactionsToRoll(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("haveEnoughTransactionsToRoll"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer modelVersionHash,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:storeName:modelVersionHash:andUbiquityRootLocation:"),
      arg,
      storeName,
      modelVersionHash,
      andUbiquityRootLocation,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static int logSize(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("logSize"),
    );
  }

  static double logToStoreSizeRatio(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_float64(
      _self,
      _objc.getSelector("logToStoreSizeRatio"),
    );
  }

  static int logsConsumeEnoughDiskSpace(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("logsConsumeEnoughDiskSpace"),
    );
  }

  static int minLogBytes(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("minLogBytes"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static int numRequiredTransactions(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("numRequiredTransactions"),
    );
  }

  static void setCurrentBaselineKV(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentBaselineKV:"),
      arg,
    );
  }

  static void setCurrentKV(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentKV:"),
      arg,
    );
  }

  static void setLogSize(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setLogSize:"),
      arg,
    );
  }

  static void setLogToStoreSizeRatio(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_returns_void(
      _self,
      _objc.getSelector("setLogToStoreSizeRatio:"),
      arg,
    );
  }

  static void setMinLogBytes(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setMinLogBytes:"),
      arg,
    );
  }

  static void setNumRequiredTransactions(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setNumRequiredTransactions:"),
      arg,
    );
  }

  static void setStoreSize(
    Pointer<PFUbiquityBaselineHeuristics> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setStoreSize:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static int storeSize(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("storeSize"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static void updateHeuristics(
    Pointer<PFUbiquityBaselineHeuristics> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateHeuristics"),
    );
  }
}

@unsized
class PFUbiquityBaselineMetadata extends Struct<PFUbiquityBaselineMetadata> {
  factory PFUbiquityBaselineMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineMetadata> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineMetadata")
        .cast<PFUbiquityBaselineMetadata>();
  }

  static void addDictionaryForPeerRange(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addDictionaryForPeerRange:"),
      arg,
    );
  }

  static Pointer authorPeerID(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("authorPeerID"),
    );
  }

  static Pointer createNewLocalRangeWithRangeStart(
    Pointer<PFUbiquityBaselineMetadata> _self,
    int arg, {
    @required int andRangeEnd,
    @required Pointer forEntityNamed,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createNewLocalRangeWithRangeStart:andRangeEnd:forEntityNamed:"),
      arg,
      andRangeEnd,
      forEntityNamed,
    );
  }

  static Pointer createPeerRangeDictionary(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createPeerRangeDictionary:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int gatherMetadataWithStore(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg, {
    @required Pointer<Pointer> andError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("gatherMetadataWithStore:andError:"),
      arg,
      andError,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithCoder(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer modelVersionHash,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:storeName:modelVersionHash:andUbiquityRootLocation:"),
      arg,
      storeName,
      modelVersionHash,
      andUbiquityRootLocation,
    );
  }

  static int isEqual(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer knowledgeVector(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knowledgeVector"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static Pointer peerRanges(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerRanges"),
    );
  }

  static Pointer previousKnowledgeVector(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("previousKnowledgeVector"),
    );
  }

  static Pointer rootLocation(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rootLocation"),
    );
  }

  static void setKnowledgeVector(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setKnowledgeVector:"),
      arg,
    );
  }

  static void setPreviousKnowledgeVectorFromCurrentMetadata(
    Pointer<PFUbiquityBaselineMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setPreviousKnowledgeVectorFromCurrentMetadata:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityBaselineMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }
}

@unsized
class PFUbiquityBaselineOperation extends Struct<PFUbiquityBaselineOperation> {
  factory PFUbiquityBaselineOperation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineOperation")
        .cast<PFUbiquityBaselineOperation>();
  }

  static void dealloc(
    Pointer<PFUbiquityBaselineOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityBaselineOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<PFUbiquityBaselineOperation> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStore:localPeerID:andUbiquityRootLocation:"),
      arg,
      localPeerID,
      andUbiquityRootLocation,
    );
  }

  static Pointer model(
    Pointer<PFUbiquityBaselineOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("model"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityBaselineOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }
}

@unsized
class PFUbiquityBaselineRecoveryOperation
    extends Struct<PFUbiquityBaselineRecoveryOperation> {
  factory PFUbiquityBaselineRecoveryOperation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineRecoveryOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineRecoveryOperation")
        .cast<PFUbiquityBaselineRecoveryOperation>();
  }

  static int conflictsExistForBaseline(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("conflictsExistForBaseline:"),
      arg,
    );
  }

  static Pointer delegate(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer electAncestorBaselineForConflictedBaselines(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg, {
    @required Pointer<Pointer> dissentingBaselines,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "electAncestorBaselineForConflictedBaselines:dissentingBaselines:"),
      arg,
      dissentingBaselines,
    );
  }

  static int electBaselineURLFromVersions(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg, {
    @required Pointer withBaseline,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("electBaselineURLFromVersions:withBaseline:error:"),
      arg,
      withBaseline,
      error,
    );
  }

  static int hasCurrentBaseline(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasCurrentBaseline"),
    );
  }

  static int isEqual(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void main(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static int replaceLocalStoreWithBaseline(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("replaceLocalStoreWithBaseline:error:"),
      arg,
      error,
    );
  }

  static int resolveConflictsForBaseline(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg, {
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConflictsForBaseline:withError:"),
      arg,
      withError,
    );
  }

  static Pointer retainedDelegate(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedDelegate"),
    );
  }

  static void setDelegate(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int shouldReplaceLocalStoreWithBaseline(
    Pointer<PFUbiquityBaselineRecoveryOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldReplaceLocalStoreWithBaseline:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityBaselineRollOperation
    extends Struct<PFUbiquityBaselineRollOperation> {
  factory PFUbiquityBaselineRollOperation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineRollOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineRollOperation")
        .cast<PFUbiquityBaselineRollOperation>();
  }

  static void dealloc(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static int haveConsistentStateForBaselineRoll(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("haveConsistentStateForBaselineRoll"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEqual(
    Pointer<PFUbiquityBaselineRollOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void main(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer retainedDelegate(
    Pointer<PFUbiquityBaselineRollOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedDelegate"),
    );
  }

  static int rollBaselineWithError(
    Pointer<PFUbiquityBaselineRollOperation> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("rollBaselineWithError:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<PFUbiquityBaselineRollOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityBaselineRollResponseOperation
    extends Struct<PFUbiquityBaselineRollResponseOperation> {
  factory PFUbiquityBaselineRollResponseOperation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityBaselineRollResponseOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityBaselineRollResponseOperation")
        .cast<PFUbiquityBaselineRollResponseOperation>();
  }

  static int canAdoptBaseline(
    Pointer<PFUbiquityBaselineRollResponseOperation> _self,
    Pointer arg, {
    @required Pointer<Int8> byReplacingLocalStoreFile,
    @required Pointer withStack,
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "canAdoptBaseline:byReplacingLocalStoreFile:withStack:withError:"),
      arg,
      byReplacingLocalStoreFile,
      withStack,
      withError,
    );
  }

  static Pointer delegate(
    Pointer<PFUbiquityBaselineRollResponseOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void main(
    Pointer<PFUbiquityBaselineRollResponseOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer retainedDelegate(
    Pointer<PFUbiquityBaselineRollResponseOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedDelegate"),
    );
  }

  static void setDelegate(
    Pointer<PFUbiquityBaselineRollResponseOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityContainerIdentifier
    extends Struct<PFUbiquityContainerIdentifier> {
  factory PFUbiquityContainerIdentifier._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityContainerIdentifier> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityContainerIdentifier")
        .cast<PFUbiquityContainerIdentifier>();
  }

  static void accommodatePresentedItemDeletionWithCompletionHandler(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "accommodatePresentedItemDeletionWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int identifyContainer(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("identifyContainer:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:storeName:andUbiquityRootLocation:"),
      arg,
      storeName,
      andUbiquityRootLocation,
    );
  }

  static Pointer presentedItemOperationQueue(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemOperationQueue"),
    );
  }

  static Pointer presentedItemURL(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemURL"),
    );
  }

  static int replaceIdentifierWithUUID(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("replaceIdentifierWithUUID:error:"),
      arg,
      error,
    );
  }

  static void setUUIDStringFromLocation(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUUIDStringFromLocation:"),
      arg,
    );
  }

  static int usedExistingUUIDFile(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usedExistingUUIDFile"),
    );
  }

  static Pointer uuidFileLocation(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("uuidFileLocation"),
    );
  }

  static Pointer uuidString(
    Pointer<PFUbiquityContainerIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("uuidString"),
    );
  }

  static int writeToDisk(
    Pointer<PFUbiquityContainerIdentifier> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeToDisk:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityContainerMonitor extends Struct<PFUbiquityContainerMonitor> {
  factory PFUbiquityContainerMonitor._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityContainerMonitor> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityContainerMonitor")
        .cast<PFUbiquityContainerMonitor>();
  }

  static void checkStoresAndContainer(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkStoresAndContainer:"),
      arg,
    );
  }

  static void containerDeleteDetected(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("containerDeleteDetected:"),
      arg,
    );
  }

  static Pointer containerIdentifier(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static int containerState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("containerState"),
    );
  }

  static Pointer currentIdentityToken(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentIdentityToken"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void didChangeContainerIdentifier(
    Pointer<PFUbiquityContainerMonitor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("didChangeContainerIdentifier:"),
      arg,
    );
  }

  static void didChangeContainerState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didChangeContainerState"),
    );
  }

  static void didChangeMonitorState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("didChangeMonitorState"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithProcessingQueue(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithProcessingQueue:localPeerID:storeName:andUbiquityRootLocation:"),
      arg,
      localPeerID,
      storeName,
      andUbiquityRootLocation,
    );
  }

  static int monitorState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("monitorState"),
    );
  }

  static void scheduleCheckBlock(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleCheckBlock:"),
      arg,
    );
  }

  static void setContainerIdentifier(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg, {
    @required int transitionType,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setContainerIdentifier:transitionType:"),
      arg,
      transitionType,
    );
  }

  static void setContainerState(
    Pointer<PFUbiquityContainerMonitor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setContainerState:"),
      arg,
    );
  }

  static void setMonitorState(
    Pointer<PFUbiquityContainerMonitor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setMonitorState:"),
      arg,
    );
  }

  static int startMonitor(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("startMonitor:"),
      arg,
    );
  }

  static void stopMonitor(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("stopMonitor"),
    );
  }

  static void ubiquityIdentityChanged(
    Pointer<PFUbiquityContainerMonitor> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("ubiquityIdentityChanged:"),
      arg,
    );
  }

  static void willChangeContainerIdentifier(
    Pointer<PFUbiquityContainerMonitor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("willChangeContainerIdentifier:"),
      arg,
    );
  }

  static void willChangeContainerState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willChangeContainerState"),
    );
  }

  static void willChangeMonitorState(
    Pointer<PFUbiquityContainerMonitor> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("willChangeMonitorState"),
    );
  }
}

@unsized
class PFUbiquityEventLogging extends Struct<PFUbiquityEventLogging> {
  factory PFUbiquityEventLogging._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityEventLogging> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityEventLogging")
        .cast<PFUbiquityEventLogging>();
  }

  static void beginEvent(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("beginEvent:"),
      arg,
    );
  }

  static Pointer createCustomEventTrackingID(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createCustomEventTrackingID:"),
      arg,
    );
  }

  static Pointer createEventTrackingID(
    Pointer<PFUbiquityEventLogging> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int32_returns_ptr(
      _self,
      _objc.getSelector("createEventTrackingID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityEventLogging> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void debug(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("debug:message:"),
      arg,
      message,
    );
  }

  static void diagnostic(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("diagnostic:message:"),
      arg,
      message,
    );
  }

  static void endEvent(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("endEvent:"),
      arg,
    );
  }

  static void error(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("error:message:"),
      arg,
      message,
    );
  }

  static void fatal(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fatal:message:"),
      arg,
      message,
    );
  }

  static Pointer incompleteEvents(
    Pointer<PFUbiquityEventLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("incompleteEvents"),
    );
  }

  static void info(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("info:message:"),
      arg,
      message,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityEventLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void logEvent(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer ID,
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logEvent:ID:message:"),
      arg,
      ID,
      message,
    );
  }

  static void logEventData(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logEventData:message:"),
      arg,
      message,
    );
  }

  static int logLevel(
    Pointer<PFUbiquityEventLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("logLevel"),
    );
  }

  static void setLogLevel(
    Pointer<PFUbiquityEventLogging> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int64_returns_void(
      _self,
      _objc.getSelector("setLogLevel:"),
      arg,
    );
  }

  static void warning(
    Pointer<PFUbiquityEventLogging> _self,
    Pointer arg, {
    @required Pointer message,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("warning:message:"),
      arg,
      message,
    );
  }
}

@unsized
class PFUbiquityExportContext extends Struct<PFUbiquityExportContext> {
  factory PFUbiquityExportContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityExportContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityExportContext")
        .cast<PFUbiquityExportContext>();
  }

  static void dealloc(
    Pointer<PFUbiquityExportContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityExportContext> _self,
    Pointer arg, {
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLocalPeerID:andUbiquityRootLocation:"),
      arg,
      andUbiquityRootLocation,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static void setUseLocalStorage(
    Pointer<PFUbiquityExportContext> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseLocalStorage:"),
      arg,
    );
  }

  static Pointer storeExportContextForStore(
    Pointer<PFUbiquityExportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeExportContextForStore:"),
      arg,
    );
  }

  static Pointer storeExportContextForStoreName(
    Pointer<PFUbiquityExportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeExportContextForStoreName:"),
      arg,
    );
  }

  static int useLocalStorage(
    Pointer<PFUbiquityExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useLocalStorage"),
    );
  }
}

@unsized
class PFUbiquityFileCoordinator extends Struct<PFUbiquityFileCoordinator> {
  factory PFUbiquityFileCoordinator._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityFileCoordinator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityFileCoordinator")
        .cast<PFUbiquityFileCoordinator>();
  }

  static int coordinateReadingItemAtLocation(
    Pointer<PFUbiquityFileCoordinator> _self,
    Pointer arg, {
    @required int options,
    @required int retryOnError,
    @required Pointer<Pointer> error,
    @required Pointer byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "coordinateReadingItemAtLocation:options:retryOnError:error:byAccessor:"),
      arg,
      options,
      retryOnError,
      error,
      byAccessor,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithFilePresenter(
    Pointer<PFUbiquityFileCoordinator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithFilePresenter:"),
      arg,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static int shouldRetryForError(
    Pointer<PFUbiquityFileCoordinator> _self,
    Pointer arg, {
    @required Pointer<Int8> ignoreFile,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("shouldRetryForError:ignoreFile:"),
      arg,
      ignoreFile,
    );
  }
}

@unsized
class PFUbiquityFilePresenter extends Struct<PFUbiquityFilePresenter> {
  factory PFUbiquityFilePresenter._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityFilePresenter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityFilePresenter")
        .cast<PFUbiquityFilePresenter>();
  }

  static Pointer copyStatusDictionary(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("copyStatusDictionary"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void exporterDidMoveLog(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("exporterDidMoveLog:"),
      arg,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithUbiquityRootLocation(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer storeName,
    @required Pointer processingQueue,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithUbiquityRootLocation:localPeerID:storeName:processingQueue:"),
      arg,
      localPeerID,
      storeName,
      processingQueue,
    );
  }

  static int isiCloudExtension(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isiCloudExtension:"),
      arg,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer locationToSafeSaveFile(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("locationToSafeSaveFile"),
    );
  }

  static Pointer locationToStatus(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("locationToStatus"),
    );
  }

  static void logImportWasCancelled(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logImportWasCancelled:"),
      arg,
    );
  }

  static void logWasExported(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logWasExported:"),
      arg,
    );
  }

  static void logWasImported(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logWasImported:"),
      arg,
    );
  }

  static void logsWereScheduled(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logsWereScheduled:"),
      arg,
    );
  }

  static Pointer presentedItemOperationQueue(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemOperationQueue"),
    );
  }

  static Pointer presentedItemURL(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemURL"),
    );
  }

  static void presentedSubitemDidChangeAtURL(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("presentedSubitemDidChangeAtURL:"),
      arg,
    );
  }

  static void presentedSubitemUbiquityDidChangeAtURL(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("presentedSubitemUbiquityDidChangeAtURL:"),
      arg,
    );
  }

  static void printStatus(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("printStatus:"),
      arg,
    );
  }

  static void processPendingURLs(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("processPendingURLs"),
    );
  }

  static void registerSafeSaveFile(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerSafeSaveFile:"),
      arg,
    );
  }

  static void relinquishPresentedItemToReader(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("relinquishPresentedItemToReader:"),
      arg,
    );
  }

  static void relinquishPresentedItemToWriter(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("relinquishPresentedItemToWriter:"),
      arg,
    );
  }

  static Pointer retainedStatusForLocation(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedStatusForLocation:"),
      arg,
    );
  }

  static void setupAssistantDiscoveredPathsFromMetadataQuery(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setupAssistantDiscoveredPathsFromMetadataQuery:"),
      arg,
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static void unregisterSafeSaveFile(
    Pointer<PFUbiquityFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unregisterSafeSaveFile:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityGlobalObjectID extends Struct<PFUbiquityGlobalObjectID> {
  factory PFUbiquityGlobalObjectID._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityGlobalObjectID> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityGlobalObjectID")
        .cast<PFUbiquityGlobalObjectID>();
  }

  static int compare(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer createCompressedStringWithEntityNameToIndex(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg, {
    @required Pointer primaryKeyToIndex,
    @required Pointer peerIDToIndex,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createCompressedStringWithEntityNameToIndex:primaryKeyToIndex:peerIDToIndex:"),
      arg,
      primaryKeyToIndex,
      peerIDToIndex,
    );
  }

  static Pointer createGlobalIDString(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createGlobalIDString"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entityName(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static int hash(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initFromCopyWithStoreName(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer primaryKey,
    @required Pointer peerID,
    @required int andHash,
    @required Pointer managedObjectID,
    @required int primaryKeyInteger,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "initFromCopyWithStoreName:entityName:primaryKey:peerID:andHash:managedObjectID:primaryKeyInteger:"),
      arg,
      entityName,
      primaryKey,
      peerID,
      andHash,
      managedObjectID,
      primaryKeyInteger,
    );
  }

  static Pointer initWithCompressedString(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg, {
    @required Pointer forStoreWithName,
    @required Pointer andEntityNames,
    @required Pointer primaryKeys,
    @required Pointer peerIDs,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithCompressedString:forStoreWithName:andEntityNames:primaryKeys:peerIDs:"),
      arg,
      forStoreWithName,
      andEntityNames,
      primaryKeys,
      peerIDs,
    );
  }

  static Pointer initWithStoreName$entityName$primaryKeyInteger$andPeerID(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required int primaryKeyInteger,
    @required Pointer andPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:entityName:primaryKeyInteger:andPeerID:"),
      arg,
      entityName,
      primaryKeyInteger,
      andPeerID,
    );
  }

  static Pointer initWithStoreName$entityName$primaryKey$andPeerID(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer primaryKey,
    @required Pointer andPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStoreName:entityName:primaryKey:andPeerID:"),
      arg,
      entityName,
      primaryKey,
      andPeerID,
    );
  }

  static Pointer initWithString(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer managedObjectID(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectID"),
    );
  }

  static Pointer owningPeerID(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("owningPeerID"),
    );
  }

  static Pointer primaryKey(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKey"),
    );
  }

  static int primaryKeyInteger(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("primaryKeyInteger"),
    );
  }

  static void setManagedObjectID(
    Pointer<PFUbiquityGlobalObjectID> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setManagedObjectID:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static void updateHash(
    Pointer<PFUbiquityGlobalObjectID> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateHash"),
    );
  }
}

@unsized
class PFUbiquityGlobalObjectIDCache
    extends Struct<PFUbiquityGlobalObjectIDCache> {
  factory PFUbiquityGlobalObjectIDCache._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityGlobalObjectIDCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityGlobalObjectIDCache")
        .cast<PFUbiquityGlobalObjectIDCache>();
  }

  static Pointer createGlobalIDForCompressedString(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg, {
    @required Pointer withEntityNames,
    @required Pointer primaryKeys,
    @required Pointer peerIDs,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createGlobalIDForCompressedString:withEntityNames:primaryKeys:peerIDs:"),
      arg,
      withEntityNames,
      primaryKeys,
      peerIDs,
    );
  }

  static Pointer createGlobalIDForGlobalIDString(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createGlobalIDForGlobalIDString:"),
      arg,
    );
  }

  static Pointer createGlobalIDForPrimarKey(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    int arg, {
    @required Pointer entityName,
    @required Pointer andOwningPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createGlobalIDForPrimarKey:entityName:andOwningPeerID:"),
      arg,
      entityName,
      andOwningPeerID,
    );
  }

  static Pointer createGlobalIDForPrimaryKeyString(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer andOwningPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createGlobalIDForPrimaryKeyString:entityName:andOwningPeerID:"),
      arg,
      entityName,
      andOwningPeerID,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg, {
    @required Pointer forStoreName,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLocalPeerID:forStoreName:"),
      arg,
      forStoreName,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static void purgeCache(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("purgeCache"),
    );
  }

  static void setLocalPeerID(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLocalPeerID:"),
      arg,
    );
  }

  static void setStoreName(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreName:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityGlobalObjectIDCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }
}

@unsized
class PFUbiquityImportContext extends Struct<PFUbiquityImportContext> {
  factory PFUbiquityImportContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityImportContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityImportContext")
        .cast<PFUbiquityImportContext>();
  }

  static Pointer actingPeer(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("actingPeer"),
    );
  }

  static Pointer cacheWrapper(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheWrapper"),
    );
  }

  static Pointer currentKnowledgeVector(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentKnowledgeVector"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static Pointer globalIDToFetchedObject(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalIDToFetchedObject"),
    );
  }

  static Pointer globalIDToLocalIDURICache(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalIDToLocalIDURICache"),
    );
  }

  static Pointer heuristics(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("heuristics"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithStack(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg, {
    @required Pointer andStoreMetadata,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStack:andStoreMetadata:"),
      arg,
      andStoreMetadata,
    );
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg, {
    @required Pointer andUbiquityRootLocation,
    @required Pointer withLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:andUbiquityRootLocation:withLocalPeerID:"),
      arg,
      andUbiquityRootLocation,
      withLocalPeerID,
    );
  }

  static Pointer knowledgeVector(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knowledgeVector"),
    );
  }

  static int prefetchManagedObjectsInContext(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("prefetchManagedObjectsInContext:error:"),
      arg,
      error,
    );
  }

  static void setActingPeer(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setActingPeer:"),
      arg,
    );
  }

  static void setCacheWrapper(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCacheWrapper:"),
      arg,
    );
  }

  static void setCurrentKnowledgeVector(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentKnowledgeVector:"),
      arg,
    );
  }

  static void setExportingPeerID(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExportingPeerID:"),
      arg,
    );
  }

  static void setGlobalIDToLocalIDURICache(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGlobalIDToLocalIDURICache:"),
      arg,
    );
  }

  static void setHeuristics(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setHeuristics:"),
      arg,
    );
  }

  static void setKnowledgeVector(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setKnowledgeVector:"),
      arg,
    );
  }

  static void setStack(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStack:"),
      arg,
    );
  }

  static void setStoreMetadata(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreMetadata:"),
      arg,
    );
  }

  static void setStoreSaveSnapshot(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreSaveSnapshot:"),
      arg,
    );
  }

  static void setTransactionLog(
    Pointer<PFUbiquityImportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionLog:"),
      arg,
    );
  }

  static Pointer stack(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("stack"),
    );
  }

  static Pointer storeMetadata(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeMetadata"),
    );
  }

  static Pointer storeSaveSnapshot(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeSaveSnapshot"),
    );
  }

  static Pointer transactionLog(
    Pointer<PFUbiquityImportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLog"),
    );
  }
}

@unsized
class PFUbiquityImportOperation extends Struct<PFUbiquityImportOperation> {
  factory PFUbiquityImportOperation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityImportOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityImportOperation")
        .cast<PFUbiquityImportOperation>();
  }

  static void cancel(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer delegate(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<PFUbiquityImportOperation> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStore:localPeerID:andUbiquityRootLocation:"),
      arg,
      localPeerID,
      andUbiquityRootLocation,
    );
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityImportOperation> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:localPeerID:andUbiquityRootLocation:"),
      arg,
      localPeerID,
      andUbiquityRootLocation,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static void lockDelegateLock(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("lockDelegateLock"),
    );
  }

  static Pointer retainedDelegate(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedDelegate"),
    );
  }

  static void setDelegate(
    Pointer<PFUbiquityImportOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static void storeWillBeRemoved(
    Pointer<PFUbiquityImportOperation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("storeWillBeRemoved:"),
      arg,
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static void unlockDelegateLock(
    Pointer<PFUbiquityImportOperation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unlockDelegateLock"),
    );
  }
}

@unsized
class PFUbiquityKnowledgeVector extends Struct<PFUbiquityKnowledgeVector> {
  factory PFUbiquityKnowledgeVector._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityKnowledgeVector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityKnowledgeVector")
        .cast<PFUbiquityKnowledgeVector>();
  }

  static Pointer allPeerIDs(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allPeerIDs"),
    );
  }

  static int canMergeWithKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canMergeWithKnowledgeVector:"),
      arg,
    );
  }

  static int compare(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static int conflictsWithKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("conflictsWithKnowledgeVector:"),
      arg,
    );
  }

  static Pointer createAncestorVectorForConflictingVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createAncestorVectorForConflictingVector:"),
      arg,
    );
  }

  static Pointer createKnowledgeVectorString(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createKnowledgeVectorString"),
    );
  }

  static Pointer createSetOfAllPeerIDsWithOtherVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSetOfAllPeerIDsWithOtherVector:"),
      arg,
    );
  }

  static Pointer createStoreKnowledgeVectorDictionary(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createStoreKnowledgeVectorDictionary"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decrementToMinimumWithKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("decrementToMinimumWithKnowledgeVector:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hasPeerIDInCommonWith(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("hasPeerIDInCommonWith:"),
      arg,
    );
  }

  static int hash(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initFromCopy(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg, {
    @required Pointer storeKVDict,
    @required int hash,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector("initFromCopy:storeKVDict:hash:"),
      arg,
      storeKVDict,
      hash,
    );
  }

  static Pointer initWithCoder(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer initWithKnowledgeVectorDictionary(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithKnowledgeVectorDictionary:"),
      arg,
    );
  }

  static Pointer
      initWithKnowledgeVectorDictionary$andStoreKnowledgeVectorDictionary(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg, {
    @required Pointer andStoreKnowledgeVectorDictionary,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithKnowledgeVectorDictionary:andStoreKnowledgeVectorDictionary:"),
      arg,
      andStoreKnowledgeVectorDictionary,
    );
  }

  static Pointer initWithKnowledgeVectorString(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithKnowledgeVectorString:"),
      arg,
    );
  }

  static Pointer initWithStoreKnowledgeVectorDictionary(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStoreKnowledgeVectorDictionary:"),
      arg,
    );
  }

  static int isAncestorOfKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isAncestorOfKnowledgeVector:"),
      arg,
    );
  }

  static int isDescendantOfKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDescendantOfKnowledgeVector:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isZeroVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isZeroVector"),
    );
  }

  static int length(
    Pointer<PFUbiquityKnowledgeVector> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer newKnowledgeVectorByAddingKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newKnowledgeVectorByAddingKnowledgeVector:"),
      arg,
    );
  }

  static Pointer newKnowledgeVectorByDecrementingPeerWithID(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newKnowledgeVectorByDecrementingPeerWithID:"),
      arg,
    );
  }

  static Pointer newKnowledgeVectorByIncrementingPeerWithID(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newKnowledgeVectorByIncrementingPeerWithID:"),
      arg,
    );
  }

  static Pointer newKnowledgeVectorBySubtractingVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newKnowledgeVectorBySubtractingVector:"),
      arg,
    );
  }

  static Pointer transactionNumberForPeerID(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumberForPeerID:"),
      arg,
    );
  }

  static void updateWithKnowledgeVector(
    Pointer<PFUbiquityKnowledgeVector> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateWithKnowledgeVector:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityLocation extends Struct<PFUbiquityLocation> {
  factory PFUbiquityLocation._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityLocation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityLocation").cast<PFUbiquityLocation>();
  }

  static Pointer createFullPath(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createFullPath"),
    );
  }

  static Pointer createFullURL(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createFullURL"),
    );
  }

  static Pointer createRelativePath(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createRelativePath"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static int fileAtLocationIsDownloaded(
    Pointer<PFUbiquityLocation> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("fileAtLocationIsDownloaded:"),
      arg,
    );
  }

  static int fileAtLocationIsUploaded(
    Pointer<PFUbiquityLocation> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("fileAtLocationIsUploaded:"),
      arg,
    );
  }

  static int fileExistsAtLocation(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("fileExistsAtLocation"),
    );
  }

  static int fileExistsAtLocationWithLocalPeerID(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("fileExistsAtLocationWithLocalPeerID:error:"),
      arg,
      error,
    );
  }

  static Pointer filename(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static int hash(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithUbiquityRootPath(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithUbiquityRootPath:"),
      arg,
    );
  }

  static Pointer initWithUbiquityRootURL(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithUbiquityRootURL:"),
      arg,
    );
  }

  static int isDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDirectory"),
    );
  }

  static int isEqual(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToURL(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqualToURL:"),
      arg,
    );
  }

  static int isRootUbiquitous(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRootUbiquitous"),
    );
  }

  static int isTransactionLogLocation(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isTransactionLogLocation"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static Pointer otherPathComponents(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("otherPathComponents"),
    );
  }

  static int removeFileAtLocation(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("removeFileAtLocation:error:"),
      arg,
      error,
    );
  }

  static void setExportingPeerID(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExportingPeerID:"),
      arg,
    );
  }

  static void setFilename(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFilename:"),
      arg,
    );
  }

  static void setHash(
    Pointer<PFUbiquityLocation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setHash:"),
      arg,
    );
  }

  static void setIsRootUbiquitous(
    Pointer<PFUbiquityLocation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsRootUbiquitous:"),
      arg,
    );
  }

  static void setModelVersionHash(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setModelVersionHash:"),
      arg,
    );
  }

  static void setOtherPathComponents(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setOtherPathComponents:"),
      arg,
    );
  }

  static void setStoreName(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreName:"),
      arg,
    );
  }

  static void setUbiquityLocationType(
    Pointer<PFUbiquityLocation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setUbiquityLocationType:"),
      arg,
    );
  }

  static void setUbiquityRootLocation(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityRootLocation:"),
      arg,
    );
  }

  static void setUbiquityRootLocationPath(
    Pointer<PFUbiquityLocation> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityRootLocationPath:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static int ubiquityLocationType(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("ubiquityLocationType"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static Pointer ubiquityRootLocationPath(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocationPath"),
    );
  }

  static void updateHash(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateHash"),
    );
  }

  static int usesBaselineDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesBaselineDirectory"),
    );
  }

  static int usesBaselineStagingDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesBaselineStagingDirectory"),
    );
  }

  static int usesCurrentBaselineDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesCurrentBaselineDirectory"),
    );
  }

  static int usesNosyncDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesNosyncDirectory"),
    );
  }

  static int usesStagingLogDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesStagingLogDirectory"),
    );
  }

  static int usesTemporaryLogDirectory(
    Pointer<PFUbiquityLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("usesTemporaryLogDirectory"),
    );
  }
}

@unsized
class PFUbiquityLocationStatus extends Struct<PFUbiquityLocationStatus> {
  factory PFUbiquityLocationStatus._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityLocationStatus> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityLocationStatus")
        .cast<PFUbiquityLocationStatus>();
  }

  static void checkFileURLState(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkFileURLState"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encounteredError(
    Pointer<PFUbiquityLocationStatus> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("encounteredError:"),
      arg,
    );
  }

  static Pointer error(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("error"),
    );
  }

  static int hash(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocation(
    Pointer<PFUbiquityLocationStatus> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLocation:"),
      arg,
    );
  }

  static int isDeleted(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static int isDownloaded(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDownloaded"),
    );
  }

  static int isDownloading(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isDownloading"),
    );
  }

  static int isExported(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isExported"),
    );
  }

  static int isFailed(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFailed"),
    );
  }

  static int isImported(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isImported"),
    );
  }

  static int isLive(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isLive"),
    );
  }

  static int isScheduled(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isScheduled"),
    );
  }

  static int isUploaded(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUploaded"),
    );
  }

  static int isUploading(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isUploading"),
    );
  }

  static Pointer location(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("location"),
    );
  }

  static void logImportWasCancelled(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logImportWasCancelled"),
    );
  }

  static void logWasExported(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logWasExported"),
    );
  }

  static void logWasImported(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logWasImported"),
    );
  }

  static void logWasScheduled(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("logWasScheduled"),
    );
  }

  static int numBytes(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("numBytes"),
    );
  }

  static int numNotifications(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("numNotifications"),
    );
  }

  static void recoveredFromError(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("recoveredFromError"),
    );
  }

  static void setIsDownloading(
    Pointer<PFUbiquityLocationStatus> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDownloading:"),
      arg,
    );
  }

  static void statusDidChange(
    Pointer<PFUbiquityLocationStatus> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("statusDidChange"),
    );
  }
}

@unsized
class PFUbiquityLogging extends Struct<PFUbiquityLogging> {
  factory PFUbiquityLogging._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityLogging> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityLogging").cast<PFUbiquityLogging>();
  }

  static void checkUserDefaults(
    Pointer<PFUbiquityLogging> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkUserDefaults"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityLogging> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int desiredLogLevel(
    Pointer<PFUbiquityLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("desiredLogLevel"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityLogging> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setDesiredLogLevel(
    Pointer<PFUbiquityLogging> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setDesiredLogLevel:"),
      arg,
    );
  }

  static void userDefaultsChanged(
    Pointer<PFUbiquityLogging> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("userDefaultsChanged:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityMergeConflict extends Struct<PFUbiquityMergeConflict> {
  factory PFUbiquityMergeConflict._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMergeConflict> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMergeConflict")
        .cast<PFUbiquityMergeConflict>();
  }

  static Pointer ancestorSnapshot(
    Pointer<PFUbiquityMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ancestorSnapshot"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityMergeConflict> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithSource(
    Pointer<PFUbiquityMergeConflict> _self,
    Pointer arg, {
    @required int newVersion,
    @required int oldVersion,
    @required Pointer cachedSnapshot,
    @required Pointer persistedSnapshot,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:"),
      arg,
      newVersion,
      oldVersion,
      cachedSnapshot,
      persistedSnapshot,
    );
  }

  static void setAncestorSnapshot(
    Pointer<PFUbiquityMergeConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setAncestorSnapshot:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityMergePolicy extends Struct<PFUbiquityMergePolicy> {
  factory PFUbiquityMergePolicy._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMergePolicy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMergePolicy")
        .cast<PFUbiquityMergePolicy>();
  }

  static void mergeToManyRelationshipForSourceObject(
    Pointer<PFUbiquityMergePolicy> _self,
    Pointer arg, {
    @required Pointer withOldSnapshot,
    @required Pointer newSnapshot,
    @required Pointer andAncestor,
    @required int andLegacyPath,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector(
          "mergeToManyRelationshipForSourceObject:withOldSnapshot:newSnapshot:andAncestor:andLegacyPath:"),
      arg,
      withOldSnapshot,
      newSnapshot,
      andAncestor,
      andLegacyPath,
    );
  }
}

@unsized
class PFUbiquityMetadataFactory extends Struct<PFUbiquityMetadataFactory> {
  factory PFUbiquityMetadataFactory._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMetadataFactory> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMetadataFactory")
        .cast<PFUbiquityMetadataFactory>();
  }

  static void addModelingToolUserInfoToEntity(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addModelingToolUserInfoToEntity:"),
      arg,
    );
  }

  static void addModelingToolUserInfoToProperty(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addModelingToolUserInfoToProperty:"),
      arg,
    );
  }

  static int cacheEntryForLocalPeerID(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "cacheEntryForLocalPeerID:storeName:andUbiquityRootLocation:error:"),
      arg,
      storeName,
      andUbiquityRootLocation,
      error,
    );
  }

  static Pointer createMetadataModel(
    Pointer<PFUbiquityMetadataFactory> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMetadataModel"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityMetadataFactory> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityMetadataFactory> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entryForLocalPeerID(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "entryForLocalPeerID:storeName:andUbiquityRootLocation:"),
      arg,
      storeName,
      andUbiquityRootLocation,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityMetadataFactory> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer newAttributeNamed(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required int attributeType,
    @required int isOptional,
    @required int isTransient,
    @required Pointer withDefaultValue,
    @required Pointer andMinValue,
    @required Pointer andMaxValue,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newAttributeNamed:attributeType:isOptional:isTransient:withDefaultValue:andMinValue:andMaxValue:"),
      arg,
      attributeType,
      isOptional,
      isTransient,
      withDefaultValue,
      andMinValue,
      andMaxValue,
    );
  }

  static Pointer newEntityForName(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newEntityForName:"),
      arg,
    );
  }

  static Pointer newMetadataEntryForLocalPeerID(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newMetadataEntryForLocalPeerID:storeName:andUbiquityRootLocation:error:"),
      arg,
      storeName,
      andUbiquityRootLocation,
      error,
    );
  }

  static Pointer newMetadataManagedObjectModel(
    Pointer<PFUbiquityMetadataFactory> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("newMetadataManagedObjectModel"),
    );
  }

  static Pointer newRelationshipNamed(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer withDestinationEntity,
    @required Pointer andInverseRelationship,
    @required int isOptional,
    @required int isToMany,
    @required int andDeleteRule,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "newRelationshipNamed:withDestinationEntity:andInverseRelationship:isOptional:isToMany:andDeleteRule:"),
      arg,
      withDestinationEntity,
      andInverseRelationship,
      isOptional,
      isToMany,
      andDeleteRule,
    );
  }

  static Pointer newStackForLocalPeerID(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "newStackForLocalPeerID:storeName:andUbiquityRootLocation:error:"),
      arg,
      storeName,
      andUbiquityRootLocation,
      error,
    );
  }

  static void removeAllCoordinatorsForRootLocation(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeAllCoordinatorsForRootLocation:"),
      arg,
    );
  }

  static void removeCachedCoordinatorsForLocalPeerID(
    Pointer<PFUbiquityMetadataFactory> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "removeCachedCoordinatorsForLocalPeerID:storeName:andUbiquityRootLocation:"),
      arg,
      storeName,
      andUbiquityRootLocation,
    );
  }
}

@unsized
class PFUbiquityMetadataFactoryEntry
    extends Struct<PFUbiquityMetadataFactoryEntry> {
  factory PFUbiquityMetadataFactoryEntry._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMetadataFactoryEntry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMetadataFactoryEntry")
        .cast<PFUbiquityMetadataFactoryEntry>();
  }

  static void dealloc(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer filePresenter(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filePresenter"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithMetadataStoreFileLocation(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithMetadataStoreFileLocation:"),
      arg,
    );
  }

  static int initializePersistentStoreCoordinator(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializePersistentStoreCoordinator:"),
      arg,
    );
  }

  static Pointer metadataStoreFileLocation(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadataStoreFileLocation"),
    );
  }

  static Pointer psc(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("psc"),
    );
  }

  static Pointer store(
    Pointer<PFUbiquityMetadataFactoryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }
}

@unsized
class PFUbiquityMetadataFactoryFilePresenter
    extends Struct<PFUbiquityMetadataFactoryFilePresenter> {
  factory PFUbiquityMetadataFactoryFilePresenter._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMetadataFactoryFilePresenter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMetadataFactoryFilePresenter")
        .cast<PFUbiquityMetadataFactoryFilePresenter>();
  }

  static void accommodatePresentedItemDeletionWithCompletionHandler(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "accommodatePresentedItemDeletionWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithMetadataStoreFileLocation(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithMetadataStoreFileLocation:"),
      arg,
    );
  }

  static Pointer presentedItemLocation(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemLocation"),
    );
  }

  static Pointer presentedItemOperationQueue(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemOperationQueue"),
    );
  }

  static Pointer presentedItemURL(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("presentedItemURL"),
    );
  }

  static void relinquishPresentedItemToReader(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("relinquishPresentedItemToReader:"),
      arg,
    );
  }

  static void relinquishPresentedItemToWriter(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("relinquishPresentedItemToWriter:"),
      arg,
    );
  }

  static void savePresentedItemChangesWithCompletionHandler(
    Pointer<PFUbiquityMetadataFactoryFilePresenter> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("savePresentedItemChangesWithCompletionHandler:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityMigrationAssistant
    extends Struct<PFUbiquityMigrationAssistant> {
  factory PFUbiquityMigrationAssistant._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMigrationAssistant> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMigrationAssistant")
        .cast<PFUbiquityMigrationAssistant>();
  }

  static Pointer baselineLocationsByModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineLocationsByModelVersionHash"),
    );
  }

  static int canUseReceipts(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canUseReceipts"),
    );
  }

  static Pointer currentModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentModelVersionHash"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int electPreviousModelVersionHashFromTransactionLogsError(
    Pointer<PFUbiquityMigrationAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "electPreviousModelVersionHashFromTransactionLogsError:"),
      arg,
    );
  }

  static Pointer initWithUbiquityRootLocation(
    Pointer<PFUbiquityMigrationAssistant> _self,
    Pointer arg, {
    @required Pointer peerID,
    @required Pointer ubiquityName,
    @required Pointer modelVersionHash,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithUbiquityRootLocation:peerID:ubiquityName:modelVersionHash:"),
      arg,
      peerID,
      ubiquityName,
      modelVersionHash,
    );
  }

  static Pointer latestBaselineLocationSkipModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("latestBaselineLocationSkipModelVersionHash:"),
      arg,
    );
  }

  static Pointer latestTransactionLogForModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("latestTransactionLogForModelVersionHash:"),
      arg,
    );
  }

  static Pointer orderedReceipts(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("orderedReceipts"),
    );
  }

  static Pointer previousModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("previousModelVersionHash"),
    );
  }

  static Pointer receiptLocations(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("receiptLocations"),
    );
  }

  static Pointer transactionLogLocationsByModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogLocationsByModelVersionHash"),
    );
  }

  static Pointer transactionLogLocationsForModelVersionHash(
    Pointer<PFUbiquityMigrationAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogLocationsForModelVersionHash:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityMigrationManager extends Struct<PFUbiquityMigrationManager> {
  factory PFUbiquityMigrationManager._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityMigrationManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityMigrationManager")
        .cast<PFUbiquityMigrationManager>();
  }

  static void dealloc(
    Pointer<PFUbiquityMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer destinationModel(
    Pointer<PFUbiquityMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("destinationModel"),
    );
  }

  static Pointer
      initWithDestinationModel$sourceModel$ubiquityRootLocation$localPeerID(
    Pointer<PFUbiquityMigrationManager> _self,
    Pointer arg, {
    @required Pointer sourceModel,
    @required Pointer ubiquityRootLocation,
    @required Pointer localPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithDestinationModel:sourceModel:ubiquityRootLocation:localPeerID:"),
      arg,
      sourceModel,
      ubiquityRootLocation,
      localPeerID,
    );
  }

  static Pointer
      initWithDestinationModel$storeName$previousModelVersionHash$ubiquityRootLocation$localPeerID(
    Pointer<PFUbiquityMigrationManager> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer previousModelVersionHash,
    @required Pointer ubiquityRootLocation,
    @required Pointer localPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithDestinationModel:storeName:previousModelVersionHash:ubiquityRootLocation:localPeerID:"),
      arg,
      storeName,
      previousModelVersionHash,
      ubiquityRootLocation,
      localPeerID,
    );
  }

  static int migrateTransactionLogs(
    Pointer<PFUbiquityMigrationManager> _self,
    int arg, {
    @required Pointer andBaselineIfNecessaryForStoreName,
    @required Pointer peerID,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "migrateTransactionLogs:andBaselineIfNecessaryForStoreName:peerID:error:"),
      arg,
      andBaselineIfNecessaryForStoreName,
      peerID,
      error,
    );
  }

  static Pointer rootLocation(
    Pointer<PFUbiquityMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rootLocation"),
    );
  }

  static Pointer sourceModel(
    Pointer<PFUbiquityMigrationManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceModel"),
    );
  }
}

@unsized
class PFUbiquityPeer extends Struct<PFUbiquityPeer> {
  factory PFUbiquityPeer._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityPeer").cast<PFUbiquityPeer>();
  }
}

@unsized
class PFUbiquityPeerRange extends Struct<PFUbiquityPeerRange> {
  factory PFUbiquityPeerRange._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerRange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityPeerRange").cast<PFUbiquityPeerRange>();
  }

  static void loadFromBaselineDictionary(
    Pointer<PFUbiquityPeerRange> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("loadFromBaselineDictionary:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityPeerRangeCache extends Struct<PFUbiquityPeerRangeCache> {
  factory PFUbiquityPeerRangeCache._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerRangeCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityPeerRangeCache")
        .cast<PFUbiquityPeerRangeCache>();
  }

  static int cachePeerRanges(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("cachePeerRanges:"),
      arg,
    );
  }

  static int cacheSQLCorePeerRange(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("cacheSQLCorePeerRange:error:"),
      arg,
      error,
    );
  }

  static Pointer cachedRangeForLocalPrimaryKey(
    Pointer<PFUbiquityPeerRangeCache> _self,
    int arg, {
    @required Pointer ofEntityNamed,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Uint64_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedRangeForLocalPrimaryKey:ofEntityNamed:"),
      arg,
      ofEntityNamed,
    );
  }

  static Pointer cachedRangeForOwningPeerID(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required Pointer andEntityName,
    @required int withPrimaryKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr(
      _self,
      _objc.getSelector(
          "cachedRangeForOwningPeerID:andEntityName:withPrimaryKey:"),
      arg,
      andEntityName,
      withPrimaryKey,
    );
  }

  static Pointer createGlobalObjectIDForManagedObjectID(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createGlobalObjectIDForManagedObjectID:"),
      arg,
    );
  }

  static Pointer createMapOfManagedObjectIDsForGlobalIDs(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required int count,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int64_ptr_returns_ptr(
      _self,
      _objc.getSelector("createMapOfManagedObjectIDsForGlobalIDs:count:error:"),
      arg,
      count,
      error,
    );
  }

  static Pointer createMapOfManagedObjectIDsForStoreSaveSnapshot(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createMapOfManagedObjectIDsForStoreSaveSnapshot:error:"),
      arg,
      error,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer describeCaches(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("describeCaches"),
    );
  }

  static Pointer describeCachesVerbose(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("describeCachesVerbose"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithPrivateStore(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPrivateStore:storeName:andLocalPeerID:"),
      arg,
      storeName,
      andLocalPeerID,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static int localPrimaryKeyForOwningPeerID(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer arg, {
    @required Pointer andEntityName,
    @required int withPrimaryKey,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector(
          "localPrimaryKeyForOwningPeerID:andEntityName:withPrimaryKey:"),
      arg,
      andEntityName,
      withPrimaryKey,
    );
  }

  static Pointer privateStore(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("privateStore"),
    );
  }

  static int refreshPeerRangeCache(
    Pointer<PFUbiquityPeerRangeCache> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("refreshPeerRangeCache:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer translatedGlobalIDs(
    Pointer<PFUbiquityPeerRangeCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("translatedGlobalIDs"),
    );
  }
}

@unsized
class PFUbiquityPeerRangeReservationContext
    extends Struct<PFUbiquityPeerRangeReservationContext> {
  factory PFUbiquityPeerRangeReservationContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerRangeReservationContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityPeerRangeReservationContext")
        .cast<PFUbiquityPeerRangeReservationContext>();
  }

  static Pointer createLocalIDStringForStoreUUID(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer andPrimaryKeyString,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createLocalIDStringForStoreUUID:entityName:andPrimaryKeyString:"),
      arg,
      entityName,
      andPrimaryKeyString,
    );
  }

  static int createNewPeerRangesWithCache(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
    Pointer arg, {
    @required Pointer<Pointer> Error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("createNewPeerRangesWithCache:Error:"),
      arg,
      Error,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer globalObjectIDs(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDs"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStore(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
    Pointer arg, {
    @required Pointer andGlobalObjectIDs,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPersistentStore:andGlobalObjectIDs:"),
      arg,
      andGlobalObjectIDs,
    );
  }

  static Pointer moc(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("moc"),
    );
  }

  static int numRangesToReserve(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("numRangesToReserve"),
    );
  }

  static Pointer peerEntityNameRangeStartSet(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerEntityNameRangeStartSet"),
    );
  }

  static void prepareForRangeReservationWithRangeStart(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
    Pointer arg, {
    @required Pointer andGlobalID,
    @required Pointer andEntityName,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "prepareForRangeReservationWithRangeStart:andGlobalID:andEntityName:"),
      arg,
      andGlobalID,
      andEntityName,
    );
  }

  static Pointer psc(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("psc"),
    );
  }

  static Pointer store(
    Pointer<PFUbiquityPeerRangeReservationContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }
}

@unsized
class PFUbiquityPeerReceipt extends Struct<PFUbiquityPeerReceipt> {
  factory PFUbiquityPeerReceipt._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerReceipt> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityPeerReceipt")
        .cast<PFUbiquityPeerReceipt>();
  }

  static void dealloc(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer
      initWithLocalPeerID$andKnowledgeVector$forPeerID$storeName$modelVersionHash$andUbiquityRootLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg, {
    @required Pointer andKnowledgeVector,
    @required Pointer forPeerID,
    @required Pointer storeName,
    @required Pointer modelVersionHash,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:andKnowledgeVector:forPeerID:storeName:modelVersionHash:andUbiquityRootLocation:"),
      arg,
      andKnowledgeVector,
      forPeerID,
      storeName,
      modelVersionHash,
      andUbiquityRootLocation,
    );
  }

  static Pointer initWithLocalPeerID$andReceiptFileLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg, {
    @required Pointer andReceiptFileLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLocalPeerID:andReceiptFileLocation:"),
      arg,
      andReceiptFileLocation,
    );
  }

  static Pointer
      initWithLocalPeerID$receiptPeerID$storeName$modelVersionHash$andUbiquityRootLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg, {
    @required Pointer receiptPeerID,
    @required Pointer storeName,
    @required Pointer modelVersionHash,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:receiptPeerID:storeName:modelVersionHash:andUbiquityRootLocation:"),
      arg,
      receiptPeerID,
      storeName,
      modelVersionHash,
      andUbiquityRootLocation,
    );
  }

  static Pointer kv(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("kv"),
    );
  }

  static int loadFileFromLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadFileFromLocation:error:"),
      arg,
      error,
    );
  }

  static Pointer receiptFileLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("receiptFileLocation"),
    );
  }

  static void setWriteDate(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setWriteDate:"),
      arg,
    );
  }

  static Pointer writeDate(
    Pointer<PFUbiquityPeerReceipt> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("writeDate"),
    );
  }

  static int writeFileToLocation(
    Pointer<PFUbiquityPeerReceipt> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeFileToLocation:error:"),
      arg,
      error,
    );
  }
}

@unsized
class PFUbiquityPeerSnapshot extends Struct<PFUbiquityPeerSnapshot> {
  factory PFUbiquityPeerSnapshot._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerSnapshot> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityPeerSnapshot")
        .cast<PFUbiquityPeerSnapshot>();
  }

  static int compare(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static void computeDiffToPreviousSnapshot(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("computeDiffToPreviousSnapshot:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer diffFromPrevious(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("diffFromPrevious"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static Pointer initWithExportingPeerID(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg, {
    @required Pointer logSnapshot,
    @required Pointer transactionNumber,
    @required Pointer transactionDate,
    @required Pointer andKnowledgeVector,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithExportingPeerID:logSnapshot:transactionNumber:transactionDate:andKnowledgeVector:"),
      arg,
      logSnapshot,
      transactionNumber,
      transactionDate,
      andKnowledgeVector,
    );
  }

  static Pointer initWithTranasctionEntry(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg, {
    @required Pointer andLogSnapshot,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithTranasctionEntry:andLogSnapshot:"),
      arg,
      andLogSnapshot,
    );
  }

  static int isEqual(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer knowledgeVector(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knowledgeVector"),
    );
  }

  static Pointer logSnapshot(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("logSnapshot"),
    );
  }

  static void removeValuesChangedByPeerSnapshot(
    Pointer<PFUbiquityPeerSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeValuesChangedByPeerSnapshot:"),
      arg,
    );
  }

  static Pointer transactionDate(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionDate"),
    );
  }

  static Pointer transactionNumber(
    Pointer<PFUbiquityPeerSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }
}

@unsized
class PFUbiquityPeerSnapshotCollection
    extends Struct<PFUbiquityPeerSnapshotCollection> {
  factory PFUbiquityPeerSnapshotCollection._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerSnapshotCollection> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityPeerSnapshotCollection")
        .cast<PFUbiquityPeerSnapshotCollection>();
  }

  static void addSnapshot(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addSnapshot:"),
      arg,
    );
  }

  static Pointer allPeerIDs(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("allPeerIDs"),
    );
  }

  static int calculateSnapshotDiffsWithError(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("calculateSnapshotDiffsWithError:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer knowledgeVectorsForTransactionNumber(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
    Pointer arg, {
    @required Pointer exportedByPeerWithID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "knowledgeVectorsForTransactionNumber:exportedByPeerWithID:"),
      arg,
      exportedByPeerWithID,
    );
  }

  static Pointer snapshotForKnowledgeVector(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("snapshotForKnowledgeVector:"),
      arg,
    );
  }

  static Pointer snapshotForPeerID(
    Pointer<PFUbiquityPeerSnapshotCollection> _self,
    Pointer arg, {
    @required Pointer andTransactionNumber,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("snapshotForPeerID:andTransactionNumber:"),
      arg,
      andTransactionNumber,
    );
  }
}

@unsized
class PFUbiquityPeerState extends Struct<PFUbiquityPeerState> {
  factory PFUbiquityPeerState._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityPeerState> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFUbiquityPeerState").cast<PFUbiquityPeerState>();
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityPeerState> _self,
    Pointer arg, {
    @required Pointer insertIntoManagedObjectContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStoreName:insertIntoManagedObjectContext:"),
      arg,
      insertIntoManagedObjectContext,
    );
  }
}

@unsized
class PFUbiquityRecordImportConflict
    extends Struct<PFUbiquityRecordImportConflict> {
  factory PFUbiquityRecordImportConflict._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityRecordImportConflict> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityRecordImportConflict")
        .cast<PFUbiquityRecordImportConflict>();
  }

  static void addObjectID(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObjectID:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static void addObjectIDsForDiff(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer forRelationship,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addObjectIDsForDiff:forRelationship:"),
      arg,
      forRelationship,
    );
  }

  static Pointer conflictLogDate(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictLogDate"),
    );
  }

  static Pointer conflictingLogContent(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingLogContent"),
    );
  }

  static Pointer conflictingLogKnowledgeVector(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingLogKnowledgeVector"),
    );
  }

  static Pointer conflictingLogTransactionNumber(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingLogTransactionNumber"),
    );
  }

  static int conflictingLogTransactionType(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("conflictingLogTransactionType"),
    );
  }

  static Pointer conflictingObjectGlobalIDStr(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("conflictingObjectGlobalIDStr"),
    );
  }

  static Pointer createSetOfManagedObjectIDsForGlobalIDsInRelationship(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer withValue,
    @required Pointer withGlobalIDToLocalIDURIMap,
    @required Pointer andTransactionLog,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createSetOfManagedObjectIDsForGlobalIDsInRelationship:withValue:withGlobalIDToLocalIDURIMap:andTransactionLog:"),
      arg,
      withValue,
      withGlobalIDToLocalIDURIMap,
      andTransactionLog,
    );
  }

  static Pointer createSnapshotDictionaryForObjectWithEntry(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer inTransactionLog,
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createSnapshotDictionaryForObjectWithEntry:inTransactionLog:withError:"),
      arg,
      inTransactionLog,
      withError,
    );
  }

  static Pointer createSnapshotDictionaryFromLogEntry(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSnapshotDictionaryFromLogEntry:withError:"),
      arg,
      withError,
    );
  }

  static Pointer createSnapshotFromBaselineForEntry(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSnapshotFromBaselineForEntry:error:"),
      arg,
      error,
    );
  }

  static Pointer createSnapshotFromLogContent(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer withTransactionLog,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSnapshotFromLogContent:withTransactionLog:"),
      arg,
      withTransactionLog,
    );
  }

  static Pointer currentKnowledgeVector(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentKnowledgeVector"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer globalIDIndexToLocalIDURIMap(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalIDIndexToLocalIDURIMap"),
    );
  }

  static Pointer importContext(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("importContext"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer relationshipToObjectIDsToCheck(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipToObjectIDsToCheck"),
    );
  }

  static int resolveConflict(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("resolveConflict:"),
      arg,
    );
  }

  static int resolveMergeConflictForLogContent(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg, {
    @required Pointer previousSnapshot,
    @required Pointer andAncestorSnapshot,
    @required int withOldVersion,
    @required int andNewVersion,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "resolveMergeConflictForLogContent:previousSnapshot:andAncestorSnapshot:withOldVersion:andNewVersion:error:"),
      arg,
      previousSnapshot,
      andAncestorSnapshot,
      withOldVersion,
      andNewVersion,
      error,
    );
  }

  static void setConflictLogDate(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConflictLogDate:"),
      arg,
    );
  }

  static void setConflictingLogContent(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConflictingLogContent:"),
      arg,
    );
  }

  static void setConflictingLogKnowledgeVector(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConflictingLogKnowledgeVector:"),
      arg,
    );
  }

  static void setConflictingLogTransactionNumber(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConflictingLogTransactionNumber:"),
      arg,
    );
  }

  static void setConflictingLogTransactionType(
    Pointer<PFUbiquityRecordImportConflict> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setConflictingLogTransactionType:"),
      arg,
    );
  }

  static void setConflictingObjectGlobalIDStr(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setConflictingObjectGlobalIDStr:"),
      arg,
    );
  }

  static void setCurrentKnowledgeVector(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentKnowledgeVector:"),
      arg,
    );
  }

  static void setGlobalIDIndexToLocalIDURIMap(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGlobalIDIndexToLocalIDURIMap:"),
      arg,
    );
  }

  static void setImportContext(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setImportContext:"),
      arg,
    );
  }

  static void setSourceObject(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSourceObject:"),
      arg,
    );
  }

  static void setTransactionHistory(
    Pointer<PFUbiquityRecordImportConflict> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionHistory:"),
      arg,
    );
  }

  static Pointer sourceObject(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("sourceObject"),
    );
  }

  static Pointer transactionHistory(
    Pointer<PFUbiquityRecordImportConflict> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionHistory"),
    );
  }
}

@unsized
class PFUbiquityRecordsImporterSchedulingContext
    extends Struct<PFUbiquityRecordsImporterSchedulingContext> {
  factory PFUbiquityRecordsImporterSchedulingContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityRecordsImporterSchedulingContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityRecordsImporterSchedulingContext")
        .cast<PFUbiquityRecordsImporterSchedulingContext>();
  }

  static void addPendingLogLocation(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPendingLogLocation:"),
      arg,
    );
  }

  static void addPendingLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPendingLogLocations:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer failedLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("failedLogLocations"),
    );
  }

  static void failedTransactionLogAtLocationRecovered(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("failedTransactionLogAtLocationRecovered:"),
      arg,
    );
  }

  static Pointer ignoredLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ignoredLogLocations"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPendingLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithPendingLogLocations:"),
      arg,
    );
  }

  static Pointer logLocationsToEncounteredErrors(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("logLocationsToEncounteredErrors"),
    );
  }

  static Pointer pendingLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("pendingLogLocations"),
    );
  }

  static Pointer scheduledLogLocations(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("scheduledLogLocations"),
    );
  }

  static void transactionLogAtLocation(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg, {
    @required Pointer failedToOpenWithError,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionLogAtLocation:failedToOpenWithError:"),
      arg,
      failedToOpenWithError,
    );
  }

  static void transactionLogAtLocationWasIgnored(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionLogAtLocationWasIgnored:"),
      arg,
    );
  }

  static void transactionLogAtLocationWasScheduled(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("transactionLogAtLocationWasScheduled:"),
      arg,
    );
  }

  static void unionWithSchedulingContext(
    Pointer<PFUbiquityRecordsImporterSchedulingContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unionWithSchedulingContext:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityRemotePeerState extends Struct<PFUbiquityRemotePeerState> {
  factory PFUbiquityRemotePeerState._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityRemotePeerState> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityRemotePeerState")
        .cast<PFUbiquityRemotePeerState>();
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityRemotePeerState> _self,
    Pointer arg, {
    @required Pointer andRemotePeerID,
    @required Pointer insertIntoManagedObjectContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:andRemotePeerID:insertIntoManagedObjectContext:"),
      arg,
      andRemotePeerID,
      insertIntoManagedObjectContext,
    );
  }
}

@unsized
class PFUbiquitySQLCorePeerRange extends Struct<PFUbiquitySQLCorePeerRange> {
  factory PFUbiquitySQLCorePeerRange._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySQLCorePeerRange> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySQLCorePeerRange")
        .cast<PFUbiquitySQLCorePeerRange>();
  }

  static void dealloc(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entityName(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer initWithOwningPeerID(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
    Pointer arg, {
    @required Pointer entityName,
    @required Pointer rangeStart,
    @required Pointer rangeEnd,
    @required Pointer peerStart,
    @required Pointer peerEnd,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithOwningPeerID:entityName:rangeStart:rangeEnd:peerStart:peerEnd:"),
      arg,
      entityName,
      rangeStart,
      rangeEnd,
      peerStart,
      peerEnd,
    );
  }

  static Pointer owningPeerID(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("owningPeerID"),
    );
  }

  static Pointer peerEnd(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerEnd"),
    );
  }

  static Pointer peerStart(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerStart"),
    );
  }

  static Pointer rangeEnd(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rangeEnd"),
    );
  }

  static Pointer rangeStart(
    Pointer<PFUbiquitySQLCorePeerRange> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("rangeStart"),
    );
  }
}

@unsized
class PFUbiquitySafeSaveFile extends Struct<PFUbiquitySafeSaveFile> {
  factory PFUbiquitySafeSaveFile._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySafeSaveFile> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySafeSaveFile")
        .cast<PFUbiquitySafeSaveFile>();
  }

  static void checkFileDownload(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkFileDownload"),
    );
  }

  static void checkSafeSaveFileUpload(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkSafeSaveFileUpload"),
    );
  }

  static void checkSafeSaveFileUploadAsync(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("checkSafeSaveFileUploadAsync"),
    );
  }

  static int continueCheckingDownload(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("continueCheckingDownload"),
    );
  }

  static int continueCheckingUpload(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("continueCheckingUpload"),
    );
  }

  static Pointer currentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentLocation"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer downloadError(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("downloadError"),
    );
  }

  static void downloadFinished(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("downloadFinished"),
    );
  }

  static int downloadLatestVersion(
    Pointer<PFUbiquitySafeSaveFile> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("downloadLatestVersion:error:"),
      arg,
      error,
    );
  }

  static int downloadSuccess(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("downloadSuccess"),
    );
  }

  static int existsAtPermanentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("existsAtPermanentLocation"),
    );
  }

  static int existsAtSafeSaveLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("existsAtSafeSaveLocation"),
    );
  }

  static int existsInCloud(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("existsInCloud"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPermanentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg, {
    @required Pointer safeSaveLocation,
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPermanentLocation:safeSaveLocation:andLocalPeerID:"),
      arg,
      safeSaveLocation,
      andLocalPeerID,
    );
  }

  static int isFileDownloaded(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFileDownloaded:"),
      arg,
    );
  }

  static int isFileUploaded(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isFileUploaded:"),
      arg,
    );
  }

  static int isRegistered(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isRegistered"),
    );
  }

  static int loadFile(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadFile:"),
      arg,
    );
  }

  static int loadFileFromLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadFileFromLocation:error:"),
      arg,
      error,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static int moveAfterSave(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("moveAfterSave"),
    );
  }

  static int moveToPermanentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("moveToPermanentLocation:"),
      arg,
    );
  }

  static Pointer permanentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("permanentLocation"),
    );
  }

  static int removeFile(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("removeFile:"),
      arg,
    );
  }

  static int removeFileFromLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("removeFileFromLocation:error:"),
      arg,
      error,
    );
  }

  static Pointer safeSaveError(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("safeSaveError"),
    );
  }

  static int safeSaveFile(
    Pointer<PFUbiquitySafeSaveFile> _self,
    int arg, {
    @required int moveToPermanentLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("safeSaveFile:moveToPermanentLocation:error:"),
      arg,
      moveToPermanentLocation,
      error,
    );
  }

  static void safeSaveFinishedUpload(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("safeSaveFinishedUpload"),
    );
  }

  static Pointer safeSaveLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("safeSaveLocation"),
    );
  }

  static int safeSaveSuccess(
    Pointer<PFUbiquitySafeSaveFile> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("safeSaveSuccess"),
    );
  }

  static void setCurrentLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCurrentLocation:"),
      arg,
    );
  }

  static void setDownloadError(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDownloadError:"),
      arg,
    );
  }

  static void setDownloadSuccess(
    Pointer<PFUbiquitySafeSaveFile> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setDownloadSuccess:"),
      arg,
    );
  }

  static void setSafeSaveError(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setSafeSaveError:"),
      arg,
    );
  }

  static void setSafeSaveSuccess(
    Pointer<PFUbiquitySafeSaveFile> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setSafeSaveSuccess:"),
      arg,
    );
  }

  static int waitForFileToDownload(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("waitForFileToDownload:"),
      arg,
    );
  }

  static int waitForFileToUpload(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("waitForFileToUpload:"),
      arg,
    );
  }

  static int writeFile(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeFile:"),
      arg,
    );
  }

  static int writeFileToLocation(
    Pointer<PFUbiquitySafeSaveFile> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeFileToLocation:error:"),
      arg,
      error,
    );
  }
}

@unsized
class PFUbiquitySaveSnapshot extends Struct<PFUbiquitySaveSnapshot> {
  factory PFUbiquitySaveSnapshot._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySaveSnapshot> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySaveSnapshot")
        .cast<PFUbiquitySaveSnapshot>();
  }

  static void dealloc(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static Pointer initWithSaveNotification(
    Pointer<PFUbiquitySaveSnapshot> _self,
    Pointer arg, {
    @required Pointer withLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithSaveNotification:withLocalPeerID:"),
      arg,
      withLocalPeerID,
    );
  }

  static Pointer initWithTransactionLog(
    Pointer<PFUbiquitySaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithTransactionLog:"),
      arg,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static void setTransactionDate(
    Pointer<PFUbiquitySaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionDate:"),
      arg,
    );
  }

  static Pointer storeNames(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeNames"),
    );
  }

  static Pointer storeSaveSnapshotForStore(
    Pointer<PFUbiquitySaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeSaveSnapshotForStore:"),
      arg,
    );
  }

  static Pointer storeSaveSnapshotForStoreName(
    Pointer<PFUbiquitySaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeSaveSnapshotForStoreName:"),
      arg,
    );
  }

  static Pointer transactionDate(
    Pointer<PFUbiquitySaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionDate"),
    );
  }
}

@unsized
class PFUbiquitySetupAssistant extends Struct<PFUbiquitySetupAssistant> {
  factory PFUbiquitySetupAssistant._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySetupAssistant> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySetupAssistant")
        .cast<PFUbiquitySetupAssistant>();
  }

  static int abortSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("abortSetup"),
    );
  }

  static Pointer actualStoreFileURL(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("actualStoreFileURL"),
    );
  }

  static int attemptMetadataRecoveryForStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("attemptMetadataRecoveryForStore:error:"),
      arg,
      error,
    );
  }

  static int cacheFilePresenterForUbiquityRoot(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("cacheFilePresenterForUbiquityRoot"),
    );
  }

  static int canReadFromUbiquityRootLocation(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("canReadFromUbiquityRootLocation:"),
      arg,
    );
  }

  static int checkAndPerformMigrationForStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("checkAndPerformMigrationForStore:error:"),
      arg,
      error,
    );
  }

  static int checkKnowledgeVectorsAndBaselineWithStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("checkKnowledgeVectorsAndBaselineWithStore:error:"),
      arg,
      error,
    );
  }

  static int cleanUpFromFailedSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("cleanUpFromFailedSetup:"),
      arg,
    );
  }

  static Pointer containerIdentifier(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static void coordinatorWillRemoveStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("coordinatorWillRemoveStore:"),
      arg,
    );
  }

  static Pointer createSetOfLocalLogLocations(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSetOfLocalLogLocations:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int detectAndFixForkedContainer(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg, {
    @required Pointer store,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("detectAndFixForkedContainer:store:error:"),
      arg,
      store,
      error,
    );
  }

  static int doPostValidationInit(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("doPostValidationInit:"),
      arg,
    );
  }

  static void exportedLog(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("exportedLog:"),
      arg,
    );
  }

  static int failSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("failSetup"),
    );
  }

  static Pointer failSetupError(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("failSetupError"),
    );
  }

  static int finishSetupForStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("finishSetupForStore:error:"),
      arg,
      error,
    );
  }

  static void finishSetupWithRetry(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finishSetupWithRetry:"),
      arg,
    );
  }

  static void fixdictionary(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withDeletes,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("fixdictionary:withDeletes:"),
      arg,
      withDeletes,
    );
  }

  static Pointer getCurrentUbiquityIdentityToken(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("getCurrentUbiquityIdentityToken"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithPersistentStoreCoordinator(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer andStoreOptions,
    @required Pointer forPersistentStoreOfType,
    @required Pointer atURL,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithPersistentStoreCoordinator:andStoreOptions:forPersistentStoreOfType:atURL:"),
      arg,
      andStoreOptions,
      forPersistentStoreOfType,
      atURL,
    );
  }

  static void initialSyncComplete(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("initialSyncComplete"),
    );
  }

  static int initializeBaselineForStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeBaselineForStore:error:"),
      arg,
      error,
    );
  }

  static int initializeContainerIdentifierWithStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeContainerIdentifierWithStore:error:"),
      arg,
      error,
    );
  }

  static int initializeReceiptFile(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeReceiptFile:"),
      arg,
    );
  }

  static int initializeStack(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeStack:"),
      arg,
    );
  }

  static int initializeStoreKnowledgeVectorFromStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("initializeStoreKnowledgeVectorFromStore:error:"),
      arg,
      error,
    );
  }

  static void insertEntriesInDicitonary$inUserDictionaryManagedObjectContext(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer inUserDictionaryManagedObjectContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "insertEntriesInDicitonary:inUserDictionaryManagedObjectContext:"),
      arg,
      inUserDictionaryManagedObjectContext,
    );
  }

  static void
      insertEntriesInDicitonary$inLearningDictionaryManagedObjectContext(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer inLearningDictionaryManagedObjectContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "insertEntriesInDicitonary:inLearningDictionaryManagedObjectContext:"),
      arg,
      inLearningDictionaryManagedObjectContext,
    );
  }

  static void
      insertEntriesInDicitonary$inLearningDictionaryJPManagedObjectContext(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer inLearningDictionaryJPManagedObjectContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "insertEntriesInDicitonary:inLearningDictionaryJPManagedObjectContext:"),
      arg,
      inLearningDictionaryJPManagedObjectContext,
    );
  }

  static void insertEntriesInDicitonary$inBigramManagedObjectContext(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer inBigramManagedObjectContext,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "insertEntriesInDicitonary:inBigramManagedObjectContext:"),
      arg,
      inBigramManagedObjectContext,
    );
  }

  static int isInitialSyncComplete(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isInitialSyncComplete"),
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer localRootLocation(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localRootLocation"),
    );
  }

  static Pointer longDescription(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("longDescription"),
    );
  }

  static int migrateMetadataRoot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("migrateMetadataRoot:"),
      arg,
    );
  }

  static Pointer migrationAssistant(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("migrationAssistant"),
    );
  }

  static int moveLocalLogFilesToUbiquityLocation(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("moveLocalLogFilesToUbiquityLocation:"),
      arg,
    );
  }

  static int needsMetadataRecovery(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("needsMetadataRecovery"),
    );
  }

  static Pointer options(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int performCoordinatorPostStoreSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("performCoordinatorPostStoreSetup:error:"),
      arg,
      error,
    );
  }

  static int pruneStagingDirectoryForStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("pruneStagingDirectoryForStore:error:"),
      arg,
      error,
    );
  }

  static void removeEntriesFromDictionary$withPhraseLearningJPSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withPhraseLearningJPSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "removeEntriesFromDictionary:withPhraseLearningJPSnapshot:"),
      arg,
      withPhraseLearningJPSnapshot,
    );
  }

  static void removeEntriesFromDictionary$withPhraseLearningSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withPhraseLearningSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "removeEntriesFromDictionary:withPhraseLearningSnapshot:"),
      arg,
      withPhraseLearningSnapshot,
    );
  }

  static void removeEntriesFromDictionary$withBigramSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withBigramSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeEntriesFromDictionary:withBigramSnapshot:"),
      arg,
      withBigramSnapshot,
    );
  }

  static void removeEntriesFromDictionary$withShortcutSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withShortcutSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeEntriesFromDictionary:withShortcutSnapshot:"),
      arg,
      withShortcutSnapshot,
    );
  }

  static int respondToBaselineRoll(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("respondToBaselineRoll:"),
      arg,
    );
  }

  static int retryDelaySec(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("retryDelaySec"),
    );
  }

  static int rewriteTransactionLogs(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer toMatchStore,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("rewriteTransactionLogs:toMatchStore:error:"),
      arg,
      toMatchStore,
      error,
    );
  }

  static int seedStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("seedStore:error:"),
      arg,
      error,
    );
  }

  static void setAbortSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setAbortSetup:"),
      arg,
    );
  }

  static void setCacheFilePresenterForUbiquityRoot(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setCacheFilePresenterForUbiquityRoot:"),
      arg,
    );
  }

  static void setFailSetup(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setFailSetup:"),
      arg,
    );
  }

  static void setFailSetupError(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFailSetupError:"),
      arg,
    );
  }

  static void setRetryDelaySec(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setRetryDelaySec:"),
      arg,
    );
  }

  static void setStoreWasMigrated(
    Pointer<PFUbiquitySetupAssistant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setStoreWasMigrated:"),
      arg,
    );
  }

  static int sideLoadStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("sideLoadStore:error:"),
      arg,
      error,
    );
  }

  static Pointer storeKV(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeKV"),
    );
  }

  static int storeWasMigrated(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("storeWasMigrated"),
    );
  }

  static int tryToReplaceLocalStore(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withStoreSideLoadedByImporter,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc
          .getSelector("tryToReplaceLocalStore:withStoreSideLoadedByImporter:"),
      arg,
      withStoreSideLoadedByImporter,
    );
  }

  static int ubiquityEnabled(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("ubiquityEnabled"),
    );
  }

  static void ubiquityIdentityTokenChanged(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("ubiquityIdentityTokenChanged:"),
      arg,
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static Pointer ubiquityRootURL(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootURL"),
    );
  }

  static void updateDictionary$withShortcutSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withShortcutSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateDictionary:withShortcutSnapshot:"),
      arg,
      withShortcutSnapshot,
    );
  }

  static void updateDictionary$withPhraseLearningJPSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withPhraseLearningJPSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateDictionary:withPhraseLearningJPSnapshot:"),
      arg,
      withPhraseLearningJPSnapshot,
    );
  }

  static void updateDictionary$withPhraseLearningSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withPhraseLearningSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateDictionary:withPhraseLearningSnapshot:"),
      arg,
      withPhraseLearningSnapshot,
    );
  }

  static void updateDictionary$withBigramSnapshot(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer arg, {
    @required Pointer withBigramSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateDictionary:withBigramSnapshot:"),
      arg,
      withBigramSnapshot,
    );
  }

  static int useLocalAccount(
    Pointer<PFUbiquitySetupAssistant> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useLocalAccount"),
    );
  }

  static int validateOptionsWithError(
    Pointer<PFUbiquitySetupAssistant> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("validateOptionsWithError:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityStoreExportContext
    extends Struct<PFUbiquityStoreExportContext> {
  factory PFUbiquityStoreExportContext._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityStoreExportContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityStoreExportContext")
        .cast<PFUbiquityStoreExportContext>();
  }

  static Pointer addTransactionEntryForGlobalID(
    Pointer<PFUbiquityStoreExportContext> _self,
    Pointer arg, {
    @required int andTransactionType,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int32_returns_ptr(
      _self,
      _objc.getSelector("addTransactionEntryForGlobalID:andTransactionType:"),
      arg,
      andTransactionType,
    );
  }

  static Pointer cacheWrapper(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheWrapper"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityStoreExportContext> _self,
    Pointer arg, {
    @required Pointer andUbiquityRootLocation,
    @required Pointer forLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:andUbiquityRootLocation:forLocalPeerID:"),
      arg,
      andUbiquityRootLocation,
      forLocalPeerID,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static void setCacheWrapper(
    Pointer<PFUbiquityStoreExportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCacheWrapper:"),
      arg,
    );
  }

  static void setStore(
    Pointer<PFUbiquityStoreExportContext> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStore:"),
      arg,
    );
  }

  static Pointer store(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer transactionEntries(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionEntries"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityStoreExportContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }
}

@unsized
class PFUbiquityStoreMetadata extends Struct<PFUbiquityStoreMetadata> {
  factory PFUbiquityStoreMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityStoreMetadata> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityStoreMetadata")
        .cast<PFUbiquityStoreMetadata>();
  }

  static Pointer initWithUbiquityName(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg, {
    @required Pointer andUbiquityRootLocation,
    @required Pointer insertIntoManagedObjectContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithUbiquityName:andUbiquityRootLocation:insertIntoManagedObjectContext:"),
      arg,
      andUbiquityRootLocation,
      insertIntoManagedObjectContext,
    );
  }

  static void loadFromBaselineMetadata(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg, {
    @required Pointer withLocalPeerID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("loadFromBaselineMetadata:withLocalPeerID:"),
      arg,
      withLocalPeerID,
    );
  }

  static Pointer peerStateForPeerID(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerStateForPeerID:"),
      arg,
    );
  }

  static void setStoreOptions(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreOptions:"),
      arg,
    );
  }

  static Pointer storeOptions(
    Pointer<PFUbiquityStoreMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeOptions"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityStoreMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static Pointer ubiquityRootURL(
    Pointer<PFUbiquityStoreMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootURL"),
    );
  }

  static void updatePeerStatesToMatchKnowledgeVector(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updatePeerStatesToMatchKnowledgeVector:"),
      arg,
    );
  }

  static void updateWithStore(
    Pointer<PFUbiquityStoreMetadata> _self,
    Pointer arg, {
    @required Pointer andRootLocation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("updateWithStore:andRootLocation:"),
      arg,
      andRootLocation,
    );
  }
}

@unsized
class PFUbiquityStoreMetadataMedic
    extends Struct<PFUbiquityStoreMetadataMedic> {
  factory PFUbiquityStoreMetadataMedic._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityStoreMetadataMedic> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityStoreMetadataMedic")
        .cast<PFUbiquityStoreMetadataMedic>();
  }

  static int addTransactionHistoryEntriesForObjectIDs(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer arg, {
    @required Pointer withImportContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "addTransactionHistoryEntriesForObjectIDs:withImportContext:error:"),
      arg,
      withImportContext,
      error,
    );
  }

  static int cacheMetadataForTransactionLog(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer arg, {
    @required Pointer withImportContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "cacheMetadataForTransactionLog:withImportContext:error:"),
      arg,
      withImportContext,
      error,
    );
  }

  static Pointer connection(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithStore(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer arg, {
    @required Pointer localPeerID,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStore:localPeerID:andUbiquityRootLocation:"),
      arg,
      localPeerID,
      andUbiquityRootLocation,
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static int recoverBaselineMetadataWithImportContext(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("recoverBaselineMetadataWithImportContext:error:"),
      arg,
      error,
    );
  }

  static int recoverMetadataWithError(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("recoverMetadataWithError:"),
      arg,
    );
  }

  static int recoverTransactionLogMetadataWithImportContext(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc
          .getSelector("recoverTransactionLogMetadataWithImportContext:error:"),
      arg,
      error,
    );
  }

  static Pointer store(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("store"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityStoreMetadataMedic> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }
}

@unsized
class PFUbiquityStoreSaveSnapshot extends Struct<PFUbiquityStoreSaveSnapshot> {
  factory PFUbiquityStoreSaveSnapshot._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityStoreSaveSnapshot> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityStoreSaveSnapshot")
        .cast<PFUbiquityStoreSaveSnapshot>();
  }

  static Pointer addManagedObject(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required int withTransactionType,
    @required Pointer andStoreExportContext,
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "addManagedObject:withTransactionType:andStoreExportContext:withError:"),
      arg,
      withTransactionType,
      andStoreExportContext,
      withError,
    );
  }

  static Pointer checkIndecies(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("checkIndecies:"),
      arg,
    );
  }

  static Pointer checkIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer forValue,
    @required Pointer fromArrayOfValues,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("checkIndex:forValue:fromArrayOfValues:"),
      arg,
      forValue,
      fromArrayOfValues,
    );
  }

  static Pointer compressedGlobalObjectIDFromGlobalObjectID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("compressedGlobalObjectIDFromGlobalObjectID:"),
      arg,
    );
  }

  static Pointer createKnowledgeVectorFromPeerStates(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createKnowledgeVectorFromPeerStates"),
    );
  }

  static Pointer createUbiquityDictionary(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer withStoreExportContext,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createUbiquityDictionary:withStoreExportContext:error:"),
      arg,
      withStoreExportContext,
      error,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedObjects"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entityNameToIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNameToIndex"),
    );
  }

  static Pointer entityNames(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entityNames"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static Pointer filesDeletedInTransaction(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filesDeletedInTransaction"),
    );
  }

  static Pointer filesInsertedInTransaction(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filesInsertedInTransaction"),
    );
  }

  static void finishGlobalIDReplacement(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("finishGlobalIDReplacement"),
    );
  }

  static void generatePeerStates(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("generatePeerStates"),
    );
  }

  static Pointer globalObjectIDCache(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDCache"),
    );
  }

  static Pointer globalObjectIDForManagedObject(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer withStoreExportContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "globalObjectIDForManagedObject:withStoreExportContext:"),
      arg,
      withStoreExportContext,
    );
  }

  static Pointer globalObjectIDFromCompressedObjectID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDFromCompressedObjectID:"),
      arg,
    );
  }

  static Pointer globalObjectIDToIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDToIndex"),
    );
  }

  static Pointer globalObjectIDToPermanentManagedObjectID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDToPermanentManagedObjectID"),
    );
  }

  static Pointer globalObjectIDs(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalObjectIDs"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initForExport(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForExport:"),
      arg,
    );
  }

  static Pointer initWithExportingPeerID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithExportingPeerID:"),
      arg,
    );
  }

  static Pointer insertedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertedObjects"),
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer managedObjectIDToGlobalObjectID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("managedObjectIDToGlobalObjectID"),
    );
  }

  static Pointer noSyncCheckIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer forValue,
    @required Pointer fromArrayOfValues,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("noSyncCheckIndex:forValue:fromArrayOfValues:"),
      arg,
      forValue,
      fromArrayOfValues,
    );
  }

  static Pointer peerIDToIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerIDToIndex"),
    );
  }

  static Pointer peerIDs(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerIDs"),
    );
  }

  static Pointer peerStates(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerStates"),
    );
  }

  static void prepareForGlobalIDReplacement(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("prepareForGlobalIDReplacement"),
    );
  }

  static Pointer primaryKeyToIndex(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKeyToIndex"),
    );
  }

  static Pointer primaryKeys(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("primaryKeys"),
    );
  }

  static void replaceGlobalObjectID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer withGlobalObjectID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("replaceGlobalObjectID:withGlobalObjectID:"),
      arg,
      withGlobalObjectID,
    );
  }

  static void reserveTransactionNumberWithStoreExportContext(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("reserveTransactionNumberWithStoreExportContext:"),
      arg,
    );
  }

  static void resetFromOptimisticLockingException(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("resetFromOptimisticLockingException"),
    );
  }

  static void setDeletedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setDeletedObjects:"),
      arg,
    );
  }

  static void setEntityNames(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer globalObjectIDs,
    @required Pointer primaryKeys,
    @required Pointer forStoreName,
    @required Pointer withRootLocation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "setEntityNames:globalObjectIDs:primaryKeys:forStoreName:withRootLocation:"),
      arg,
      globalObjectIDs,
      primaryKeys,
      forStoreName,
      withRootLocation,
    );
  }

  static void setExportingPeerID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExportingPeerID:"),
      arg,
    );
  }

  static void setGlobalObjectIDCache(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGlobalObjectIDCache:"),
      arg,
    );
  }

  static void setInsertedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setInsertedObjects:"),
      arg,
    );
  }

  static void setLocalPeerID(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setLocalPeerID:"),
      arg,
    );
  }

  static void setStoreKV(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreKV:"),
      arg,
    );
  }

  static void setTransactionNumber(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionNumber:"),
      arg,
    );
  }

  static void setTransactionNumber$peerStates$andPeerIDs(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg, {
    @required Pointer peerStates,
    @required Pointer andPeerIDs,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionNumber:peerStates:andPeerIDs:"),
      arg,
      peerStates,
      andPeerIDs,
    );
  }

  static void setUpdatedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUpdatedObjects:"),
      arg,
    );
  }

  static Pointer storeKV(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeKV"),
    );
  }

  static Pointer transactionNumber(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }

  static Pointer transactionNumberFromPeerStates(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumberFromPeerStates:"),
      arg,
    );
  }

  static Pointer updatedObjects(
    Pointer<PFUbiquityStoreSaveSnapshot> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("updatedObjects"),
    );
  }
}

@unsized
class PFUbiquitySwitchboard extends Struct<PFUbiquitySwitchboard> {
  factory PFUbiquitySwitchboard._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySwitchboard> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySwitchboard")
        .cast<PFUbiquitySwitchboard>();
  }

  static void addEntryToPreviousEntries(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addEntryToPreviousEntries:"),
      arg,
    );
  }

  static int cacheFilePresenterForUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "cacheFilePresenterForUbiquityRootLocation:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static void coordinatorWillRemoveStore(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("coordinatorWillRemoveStore:"),
      arg,
    );
  }

  static Pointer createSetOfCoordinatorsForPersistentStoreName(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
    @required Pointer atUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createSetOfCoordinatorsForPersistentStoreName:andLocalPeerID:atUbiquityRootLocation:"),
      arg,
      andLocalPeerID,
      atUbiquityRootLocation,
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySwitchboard> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquitySwitchboard> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer entryForStore(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("entryForStore:"),
      arg,
    );
  }

  static Pointer filePresenterForUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filePresenterForUbiquityRootLocation:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static Pointer init(
    Pointer<PFUbiquitySwitchboard> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int registerUbiquitizedPersistentStore(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer withURL,
    @required Pointer forLocalPeerID,
    @required Pointer withLocalRootLocation,
    @required Pointer andUbiquityRootLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "registerUbiquitizedPersistentStore:withURL:forLocalPeerID:withLocalRootLocation:andUbiquityRootLocation:error:"),
      arg,
      withURL,
      forLocalPeerID,
      withLocalRootLocation,
      andUbiquityRootLocation,
      error,
    );
  }

  static void releaseAllEntriesForStoreName(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andPeerID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseAllEntriesForStoreName:andPeerID:"),
      arg,
      andPeerID,
    );
  }

  static void removeEntryFromPreviousEntries(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removeEntryFromPreviousEntries:"),
      arg,
    );
  }

  static void removeFilePresenterCachedForUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "removeFilePresenterCachedForUbiquityRootLocation:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static Pointer retainedEntryForStoreName(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedEntryForStoreName:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static void unregisterCoordinator(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unregisterCoordinator:"),
      arg,
    );
  }

  static void unregisterPersistentStore(
    Pointer<PFUbiquitySwitchboard> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unregisterPersistentStore:"),
      arg,
    );
  }
}

@unsized
class PFUbiquitySwitchboardCacheWrapper
    extends Struct<PFUbiquitySwitchboardCacheWrapper> {
  factory PFUbiquitySwitchboardCacheWrapper._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySwitchboardCacheWrapper> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySwitchboardCacheWrapper")
        .cast<PFUbiquitySwitchboardCacheWrapper>();
  }

  static Pointer baselineKV(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineKV"),
    );
  }

  static void cacheWrapperWillBeRemovedFromEntry(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheWrapperWillBeRemovedFromEntry"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer globalIDCache(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalIDCache"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    Pointer arg, {
    @required Pointer privateStore,
    @required Pointer forLocalPeerID,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithStoreName:privateStore:forLocalPeerID:andUbiquityRootLocation:"),
      arg,
      privateStore,
      forLocalPeerID,
      andUbiquityRootLocation,
    );
  }

  static Pointer kv(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("kv"),
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer peerRangeCache(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerRangeCache"),
    );
  }

  static Pointer peerReceipt(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("peerReceipt"),
    );
  }

  static void scheduleReceiptFileWrite(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("scheduleReceiptFileWrite:"),
      arg,
    );
  }

  static void setBaselineKV(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setBaselineKV:"),
      arg,
    );
  }

  static void setKv(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setKv:"),
      arg,
    );
  }

  static void setUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityRootLocation:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer transactionHistoryCache(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionHistoryCache"),
    );
  }

  static Pointer transactionLogCache(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogCache"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static int writeReceiptFile(
    Pointer<PFUbiquitySwitchboardCacheWrapper> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("writeReceiptFile:error:"),
      arg,
      error,
    );
  }
}

@unsized
class PFUbiquitySwitchboardEntry extends Struct<PFUbiquitySwitchboardEntry> {
  factory PFUbiquitySwitchboardEntry._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySwitchboardEntry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySwitchboardEntry")
        .cast<PFUbiquitySwitchboardEntry>();
  }

  static int activeStoreCount(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint64(
      _self,
      _objc.getSelector("activeStoreCount"),
    );
  }

  static void afterDelay$executeBlockOnPrivateQueue(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    double arg, {
    @required Pointer executeBlockOnPrivateQueue,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_ptr_returns_void(
      _self,
      _objc.getSelector("afterDelay:executeBlockOnPrivateQueue:"),
      arg,
      executeBlockOnPrivateQueue,
    );
  }

  static void afterDelay$executeBlockOnGlobalConcurrentQueue(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    double arg, {
    @required Pointer executeBlockOnGlobalConcurrentQueue,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_float64_ptr_returns_void(
      _self,
      _objc.getSelector("afterDelay:executeBlockOnGlobalConcurrentQueue:"),
      arg,
      executeBlockOnGlobalConcurrentQueue,
    );
  }

  static Pointer cacheWrapperForStoreName(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheWrapperForStoreName:"),
      arg,
    );
  }

  static void containerIdentifierChanged(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("containerIdentifierChanged:"),
      arg,
    );
  }

  static void containerStateChanged(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("containerStateChanged:"),
      arg,
    );
  }

  static Pointer createSetOfActiveStoreNames(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("createSetOfActiveStoreNames"),
    );
  }

  static Pointer createSetOfPersistentStoreCoordinatorsRegisteredForStoreName(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createSetOfPersistentStoreCoordinatorsRegisteredForStoreName:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void entryWillBeRemovedFromSwitchboard(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("entryWillBeRemovedFromSwitchboard"),
    );
  }

  static void executeBlockOnPrivateQueue(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("executeBlockOnPrivateQueue:"),
      arg,
    );
  }

  static Pointer filePresenter(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filePresenter"),
    );
  }

  static void filePresenterNoticedBaselineFileChange(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("filePresenterNoticedBaselineFileChange:"),
      arg,
    );
  }

  static void filePresenterWasNotifiedTransactionLogs(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("filePresenterWasNotifiedTransactionLogs:"),
      arg,
    );
  }

  static int finishSetupForStore(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg, {
    @required Pointer withSetupAssistant,
    @required int synchronously,
    @required Pointer<Pointer> error,
    @required Pointer finishBlock,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "finishSetupForStore:withSetupAssistant:synchronously:error:finishBlock:"),
      arg,
      withSetupAssistant,
      synchronously,
      error,
      finishBlock,
    );
  }

  static Pointer finishingSetupAssistant(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("finishingSetupAssistant"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer withURL,
    @required Pointer ubiquityRootLocation,
    @required Pointer andLocalRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:storeName:withURL:ubiquityRootLocation:andLocalRootLocation:"),
      arg,
      storeName,
      withURL,
      ubiquityRootLocation,
      andLocalRootLocation,
    );
  }

  static Pointer localFilePresenter(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localFilePresenter"),
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer localRootLocation(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localRootLocation"),
    );
  }

  static Pointer metaForStoreName(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metaForStoreName:"),
      arg,
    );
  }

  static Pointer metadata(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("metadata"),
    );
  }

  static Pointer monitor(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("monitor"),
    );
  }

  static void monitorStateChanged(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("monitorStateChanged:"),
      arg,
    );
  }

  static void registerPersistentStore(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg, {
    @required Pointer withStoreName,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("registerPersistentStore:withStoreName:"),
      arg,
      withStoreName,
    );
  }

  static void setActiveStoreCount(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint64_returns_void(
      _self,
      _objc.getSelector("setActiveStoreCount:"),
      arg,
    );
  }

  static void setMetadata(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setMetadata:"),
      arg,
    );
  }

  static void setUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityRootLocation:"),
      arg,
    );
  }

  static void setupFinished(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setupFinished"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static void synchronouslyExecuteBlockOnPrivateQueue(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("synchronouslyExecuteBlockOnPrivateQueue:"),
      arg,
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquitySwitchboardEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static void unregisterPersistentStore(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unregisterPersistentStore:"),
      arg,
    );
  }

  static void unregisterPersistentStoreCoordinator(
    Pointer<PFUbiquitySwitchboardEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("unregisterPersistentStoreCoordinator:"),
      arg,
    );
  }
}

@unsized
class PFUbiquitySwitchboardEntryMetadata
    extends Struct<PFUbiquitySwitchboardEntryMetadata> {
  factory PFUbiquitySwitchboardEntryMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquitySwitchboardEntryMetadata> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquitySwitchboardEntryMetadata")
        .cast<PFUbiquitySwitchboardEntryMetadata>();
  }

  static Pointer activeModelVersionHash(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("activeModelVersionHash"),
    );
  }

  static void addPersistentStore(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("addPersistentStore:"),
      arg,
    );
  }

  static Pointer baselineHeuristics(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("baselineHeuristics"),
    );
  }

  static Pointer cacheWrapper(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheWrapper"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer exporter(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exporter"),
    );
  }

  static Pointer importer(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("importer"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    Pointer arg, {
    @required Pointer ubiquityRootLocation,
    @required Pointer localRootLocation,
    @required Pointer storeName,
    @required Pointer andPrivateQueue,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:ubiquityRootLocation:localRootLocation:storeName:andPrivateQueue:"),
      arg,
      ubiquityRootLocation,
      localRootLocation,
      storeName,
      andPrivateQueue,
    );
  }

  static Pointer privatePSC(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("privatePSC"),
    );
  }

  static Pointer privateStore(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("privateStore"),
    );
  }

  static void removePersistentStore(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("removePersistentStore:"),
      arg,
    );
  }

  static Pointer schedulingContext(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("schedulingContext"),
    );
  }

  static void setCacheWrapper(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setCacheWrapper:"),
      arg,
    );
  }

  static void setUbiquityRootLocation(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setUbiquityRootLocation:"),
      arg,
    );
  }

  static void setUseLocalAccount(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseLocalAccount:"),
      arg,
    );
  }

  static void setUseLocalStorage(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseLocalStorage:"),
      arg,
    );
  }

  static Pointer stores(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("stores"),
    );
  }

  static void tearDown(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("tearDown"),
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static int useLocalAccount(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useLocalAccount"),
    );
  }

  static int useLocalStorage(
    Pointer<PFUbiquitySwitchboardEntryMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useLocalStorage"),
    );
  }
}

@unsized
class PFUbiquityToManyConflictDiff
    extends Struct<PFUbiquityToManyConflictDiff> {
  factory PFUbiquityToManyConflictDiff._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityToManyConflictDiff> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityToManyConflictDiff")
        .cast<PFUbiquityToManyConflictDiff>();
  }

  static void dealloc(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer deletedObjectIDs(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("deletedObjectIDs"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void diffWithLogSnapshot(
    Pointer<PFUbiquityToManyConflictDiff> _self,
    Pointer arg, {
    @required Pointer andPreviousSnapshot,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("diffWithLogSnapshot:andPreviousSnapshot:"),
      arg,
      andPreviousSnapshot,
    );
  }

  static Pointer init(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initForRelationshipAtKey(
    Pointer<PFUbiquityToManyConflictDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initForRelationshipAtKey:"),
      arg,
    );
  }

  static Pointer insertedObjectIDs(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("insertedObjectIDs"),
    );
  }

  static int isEqual(
    Pointer<PFUbiquityToManyConflictDiff> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer relationshipKey(
    Pointer<PFUbiquityToManyConflictDiff> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("relationshipKey"),
    );
  }
}

@unsized
class PFUbiquityTransactionEntry extends Struct<PFUbiquityTransactionEntry> {
  factory PFUbiquityTransactionEntry._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionEntry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionEntry")
        .cast<PFUbiquityTransactionEntry>();
  }

  static Pointer initAndInsertIntoManagedObjectContext(
    Pointer<PFUbiquityTransactionEntry> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initAndInsertIntoManagedObjectContext:"),
      arg,
    );
  }

  static void setTransactionType(
    Pointer<PFUbiquityTransactionEntry> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setTransactionType:"),
      arg,
    );
  }

  static Pointer transactionLogURL(
    Pointer<PFUbiquityTransactionEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogURL"),
    );
  }

  static int transactionType(
    Pointer<PFUbiquityTransactionEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("transactionType"),
    );
  }
}

@unsized
class PFUbiquityTransactionEntryLight
    extends Struct<PFUbiquityTransactionEntryLight> {
  factory PFUbiquityTransactionEntryLight._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionEntryLight> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionEntryLight")
        .cast<PFUbiquityTransactionEntryLight>();
  }

  static Pointer actingPeerID(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("actingPeerID"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer globalID(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalID"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithTransactionEntry(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg, {
    @required Pointer ubiquityRootLocation,
    @required Pointer andGlobalIDCache,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithTransactionEntry:ubiquityRootLocation:andGlobalIDCache:"),
      arg,
      ubiquityRootLocation,
      andGlobalIDCache,
    );
  }

  static Pointer knowledgeVector(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knowledgeVector"),
    );
  }

  static void setActingPeerID(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setActingPeerID:"),
      arg,
    );
  }

  static void setGlobalID(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGlobalID:"),
      arg,
    );
  }

  static void setKnowledgeVector(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setKnowledgeVector:"),
      arg,
    );
  }

  static void setStoreName(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setStoreName:"),
      arg,
    );
  }

  static void setTransactionDate(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionDate:"),
      arg,
    );
  }

  static void setTransactionLogLocation(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionLogLocation:"),
      arg,
    );
  }

  static void setTransactionNumber(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setTransactionNumber:"),
      arg,
    );
  }

  static void setTransactionType(
    Pointer<PFUbiquityTransactionEntryLight> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int32_returns_void(
      _self,
      _objc.getSelector("setTransactionType:"),
      arg,
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer transactionDate(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionDate"),
    );
  }

  static Pointer transactionLogLocation(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogLocation"),
    );
  }

  static Pointer transactionNumber(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }

  static int transactionType(
    Pointer<PFUbiquityTransactionEntryLight> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("transactionType"),
    );
  }
}

@unsized
class PFUbiquityTransactionHistoryCache
    extends Struct<PFUbiquityTransactionHistoryCache> {
  factory PFUbiquityTransactionHistoryCache._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionHistoryCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionHistoryCache")
        .cast<PFUbiquityTransactionHistoryCache>();
  }

  static int addTransactionEntry(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("addTransactionEntry:error:"),
      arg,
      error,
    );
  }

  static int addTransactionEntryLight(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg, {
    @required int needsWrite,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("addTransactionEntryLight:needsWrite:error:"),
      arg,
      needsWrite,
      error,
    );
  }

  static int addTransactionEntryLights(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("addTransactionEntryLights:error:"),
      arg,
      error,
    );
  }

  static Pointer cacheKV(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cacheKV"),
    );
  }

  static int cacheTransactionHistory(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("cacheTransactionHistory:"),
      arg,
    );
  }

  static Pointer cachedGlobalIDs(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedGlobalIDs"),
    );
  }

  static Pointer cachedTransactionHistoryForGlobalID(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("cachedTransactionHistoryForGlobalID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer describeCaches(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("describeCaches"),
    );
  }

  static Pointer describeCachesVerbose(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("describeCachesVerbose"),
    );
  }

  static Pointer description(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer globalIDCache(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("globalIDCache"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg, {
    @required Pointer storeName,
    @required Pointer privateStore,
    @required Pointer andUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithLocalPeerID:storeName:privateStore:andUbiquityRootLocation:"),
      arg,
      storeName,
      privateStore,
      andUbiquityRootLocation,
    );
  }

  static Pointer minCacheKV(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("minCacheKV"),
    );
  }

  static int purgeCacheAndWritePendingEntries(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    int arg, {
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_Int8_ptr_returns_Int8(
      _self,
      _objc.getSelector("purgeCacheAndWritePendingEntries:error:"),
      arg,
      error,
    );
  }

  static void setGlobalIDCache(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setGlobalIDCache:"),
      arg,
    );
  }

  static Pointer ubiquityRootLocation(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("ubiquityRootLocation"),
    );
  }

  static int writePendingEntries(
    Pointer<PFUbiquityTransactionHistoryCache> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("writePendingEntries:"),
      arg,
    );
  }
}

@unsized
class PFUbiquityTransactionLog extends Struct<PFUbiquityTransactionLog> {
  factory PFUbiquityTransactionLog._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionLog> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionLog")
        .cast<PFUbiquityTransactionLog>();
  }

  static void cleanupExternalDataReferences(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cleanupExternalDataReferences"),
    );
  }

  static Pointer currentLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("currentLocation"),
    );
  }

  static void dealloc(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int deleteLogFileWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("deleteLogFileWithError:"),
      arg,
    );
  }

  static Pointer description(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer exportingPeerID(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("exportingPeerID"),
    );
  }

  static Pointer fileProtectionOption(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileProtectionOption"),
    );
  }

  static Pointer generatePeerCodeKnowledgeVectorWithManagedObjectContext(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "generatePeerCodeKnowledgeVectorWithManagedObjectContext:"),
      arg,
    );
  }

  static int inPermanentLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("inPermanentLocation"),
    );
  }

  static int inStagingLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("inStagingLocation"),
    );
  }

  static int inTemporaryLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("inTemporaryLocation"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithStoreName(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg, {
    @required Pointer andSaveSnapshot,
    @required Pointer andRootLocation,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithStoreName:andSaveSnapshot:andRootLocation:"),
      arg,
      andSaveSnapshot,
      andRootLocation,
    );
  }

  static Pointer initWithTransactionLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithTransactionLogLocation:andLocalPeerID:"),
      arg,
      andLocalPeerID,
    );
  }

  static Pointer initWithTransactionLogURL(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg, {
    @required Pointer ubiquityRootLocation,
    @required Pointer andLocalPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithTransactionLogURL:ubiquityRootLocation:andLocalPeerID:"),
      arg,
      ubiquityRootLocation,
      andLocalPeerID,
    );
  }

  static Pointer knowledgeVector(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("knowledgeVector"),
    );
  }

  static int loadComparisonMetadataWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadComparisonMetadataWithError:"),
      arg,
    );
  }

  static int loadContents(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadContents:"),
      arg,
    );
  }

  static int loadDeletedObjectsDataWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadDeletedObjectsDataWithError:"),
      arg,
    );
  }

  static int loadImportMetadataWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadImportMetadataWithError:"),
      arg,
    );
  }

  static int loadInsertedObjectsDataWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadInsertedObjectsDataWithError:"),
      arg,
    );
  }

  static Pointer loadPlistAtLocation(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg, {
    @required Pointer<Pointer> withError,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("loadPlistAtLocation:withError:"),
      arg,
      withError,
    );
  }

  static int loadUpdatedObjectsDataWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadUpdatedObjectsDataWithError:"),
      arg,
    );
  }

  static int loadUsingRetry(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadUsingRetry"),
    );
  }

  static int loadedComparisonMetadata(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadedComparisonMetadata"),
    );
  }

  static int loadedDeletedObjectData(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadedDeletedObjectData"),
    );
  }

  static int loadedImportMetadata(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadedImportMetadata"),
    );
  }

  static int loadedInsertedObjectData(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadedInsertedObjectData"),
    );
  }

  static int loadedUpdatedObjectData(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("loadedUpdatedObjectData"),
    );
  }

  static Pointer localPeerID(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("localPeerID"),
    );
  }

  static Pointer modelVersionHash(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("modelVersionHash"),
    );
  }

  static int moveFileToPermanentLocationWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("moveFileToPermanentLocationWithError:"),
      arg,
    );
  }

  static void populateContents(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("populateContents"),
    );
  }

  static int releaseContents(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("releaseContents:"),
      arg,
    );
  }

  static void releaseDeletedObjects(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseDeletedObjects"),
    );
  }

  static void releaseInsertedObjects(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseInsertedObjects"),
    );
  }

  static void releaseUpdatedObjects(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("releaseUpdatedObjects"),
    );
  }

  static int rewriteToDiskWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("rewriteToDiskWithError:"),
      arg,
    );
  }

  static Pointer saveSnapshot(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("saveSnapshot"),
    );
  }

  static void setLoadUsingRetry(
    Pointer<PFUbiquityTransactionLog> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setLoadUsingRetry:"),
      arg,
    );
  }

  static void setUseTemporaryLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Int8_returns_void(
      _self,
      _objc.getSelector("setUseTemporaryLogLocation:"),
      arg,
    );
  }

  static Pointer stagingTransactionLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("stagingTransactionLogLocation"),
    );
  }

  static Pointer storeName(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("storeName"),
    );
  }

  static Pointer temporaryTransactionLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("temporaryTransactionLogLocation"),
    );
  }

  static Pointer transactionLogFilename(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogFilename"),
    );
  }

  static Pointer transactionLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionLogLocation"),
    );
  }

  static int transactionLogType(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int32(
      _self,
      _objc.getSelector("transactionLogType"),
    );
  }

  static Pointer transactionNumber(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("transactionNumber"),
    );
  }

  static int useTemporaryLogLocation(
    Pointer<PFUbiquityTransactionLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("useTemporaryLogLocation"),
    );
  }

  static int writeContentsOfZipArchive(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer arg, {
    @required Pointer intoExtendedAttributesForFile,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "writeContentsOfZipArchive:intoExtendedAttributesForFile:error:"),
      arg,
      intoExtendedAttributesForFile,
      error,
    );
  }

  static int writeToDiskWithError(
    Pointer<PFUbiquityTransactionLog> _self,
    Pointer<Pointer> arg, {
    @required Pointer andUpdateFilenameInTransactionEntries,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "writeToDiskWithError:andUpdateFilenameInTransactionEntries:"),
      arg,
      andUpdateFilenameInTransactionEntries,
    );
  }
}

@unsized
class PFUbiquityTransactionLogCache
    extends Struct<PFUbiquityTransactionLogCache> {
  factory PFUbiquityTransactionLogCache._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionLogCache> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionLogCache")
        .cast<PFUbiquityTransactionLogCache>();
  }

  static void cacheExportedLog(
    Pointer<PFUbiquityTransactionLogCache> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("cacheExportedLog:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityTransactionLogCache> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer init(
    Pointer<PFUbiquityTransactionLogCache> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer initWithLocalPeerID(
    Pointer<PFUbiquityTransactionLogCache> _self,
    Pointer arg, {
    @required Pointer andGlobalIDCache,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("initWithLocalPeerID:andGlobalIDCache:"),
      arg,
      andGlobalIDCache,
    );
  }

  static void removeLogsCachedForStoreNamed(
    Pointer<PFUbiquityTransactionLogCache> _self,
    Pointer arg, {
    @required Pointer withUbiquityRootLocation,
  }) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector(
          "removeLogsCachedForStoreNamed:withUbiquityRootLocation:"),
      arg,
      withUbiquityRootLocation,
    );
  }

  static Pointer retainedCachedLogForLocation(
    Pointer<PFUbiquityTransactionLogCache> _self,
    Pointer arg, {
    @required int loadWithRetry,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Int8_ptr_returns_ptr(
      _self,
      _objc.getSelector("retainedCachedLogForLocation:loadWithRetry:error:"),
      arg,
      loadWithRetry,
      error,
    );
  }
}

@unsized
class PFUbiquityTransactionLogMigrator
    extends Struct<PFUbiquityTransactionLogMigrator> {
  factory PFUbiquityTransactionLogMigrator._() {
    throw UnimplementedError();
  }
  static Pointer<PFUbiquityTransactionLogMigrator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFUbiquityTransactionLogMigrator")
        .cast<PFUbiquityTransactionLogMigrator>();
  }

  static Pointer createDestinationGlobalObjectIDFromSourceGlobalObjectID(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createDestinationGlobalObjectIDFromSourceGlobalObjectID:"),
      arg,
    );
  }

  static Pointer createDestinationObjectContentFromSourceObjectContent(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer withEntityMapping,
    @required Pointer migrationContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createDestinationObjectContentFromSourceObjectContent:withEntityMapping:migrationContext:"),
      arg,
      withEntityMapping,
      migrationContext,
    );
  }

  static Pointer createDestinationObjectsFromSourceObjects(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer migrationContext,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "createDestinationObjectsFromSourceObjects:migrationContext:"),
      arg,
      migrationContext,
    );
  }

  static void dealloc(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer initWithSourceModel(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer destinationModel,
    @required Pointer mappingModel,
    @required Pointer localPeerID,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector(
          "initWithSourceModel:destinationModel:mappingModel:localPeerID:"),
      arg,
      destinationModel,
      mappingModel,
      localPeerID,
    );
  }

  static int migrateBaselineFromLocation(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer toLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("migrateBaselineFromLocation:toLocation:error:"),
      arg,
      toLocation,
      error,
    );
  }

  static int migrateTransactionLogFromLocation(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer toLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("migrateTransactionLogFromLocation:toLocation:error:"),
      arg,
      toLocation,
      error,
    );
  }

  static int migrateTransactionLogsForStoreName(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
    Pointer arg, {
    @required Pointer andLocalPeerID,
    @required Pointer atUbiquityRootLocation,
    @required Pointer<Pointer> error,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector(
          "migrateTransactionLogsForStoreName:andLocalPeerID:atUbiquityRootLocation:error:"),
      arg,
      andLocalPeerID,
      atUbiquityRootLocation,
      error,
    );
  }

  static void populateMappingsByEntityName(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("populateMappingsByEntityName"),
    );
  }

  static int throttleLogs(
    Pointer<PFUbiquityTransactionLogMigrator> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Int8(
      _self,
      _objc.getSelector("throttleLogs"),
    );
  }
}

@unsized
class PFZipCentralDirectoryFileHeader
    extends Struct<PFZipCentralDirectoryFileHeader> {
  factory PFZipCentralDirectoryFileHeader._() {
    throw UnimplementedError();
  }
  static Pointer<PFZipCentralDirectoryFileHeader> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFZipCentralDirectoryFileHeader")
        .cast<PFZipCentralDirectoryFileHeader>();
  }

  static void appendToData(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("appendToData:"),
      arg,
    );
  }

  static int compressedSize(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("compressedSize"),
    );
  }

  static int compressionMethod(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("compressionMethod"),
    );
  }

  static int crc32(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("crc32"),
    );
  }

  static void dealloc(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int externalFileAttrs(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("externalFileAttrs"),
    );
  }

  static Pointer extraFieldData(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("extraFieldData"),
    );
  }

  static int extraFieldLength(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("extraFieldLength"),
    );
  }

  static Pointer fileComment(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("fileComment"),
    );
  }

  static int fileCommentLength(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("fileCommentLength"),
    );
  }

  static int fileStartDiskNumber(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("fileStartDiskNumber"),
    );
  }

  static Pointer filename(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static int filenameLength(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("filenameLength"),
    );
  }

  static int generalPurposeBit(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("generalPurposeBit"),
    );
  }

  static Pointer init(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int internalFileAttrs(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("internalFileAttrs"),
    );
  }

  static int lastModDate(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("lastModDate"),
    );
  }

  static int lastModTime(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("lastModTime"),
    );
  }

  static int loadFromBytes(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer<Utf8> arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromBytes:offset:"),
      arg,
      offset,
    );
  }

  static int loadFromData(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromData:offset:"),
      arg,
      offset,
    );
  }

  static int localFileHeaderRelativeOffset(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("localFileHeaderRelativeOffset"),
    );
  }

  static void setCompressedSize(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setCompressedSize:"),
      arg,
    );
  }

  static void setCompressionMethod(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setCompressionMethod:"),
      arg,
    );
  }

  static void setCrc32(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setCrc32:"),
      arg,
    );
  }

  static void setExternalFileAttrs(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setExternalFileAttrs:"),
      arg,
    );
  }

  static void setExtraFieldData(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExtraFieldData:"),
      arg,
    );
  }

  static void setFileComment(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFileComment:"),
      arg,
    );
  }

  static void setFileStartDiskNumber(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setFileStartDiskNumber:"),
      arg,
    );
  }

  static void setFilename(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFilename:"),
      arg,
    );
  }

  static void setGeneralPurposeBit(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setGeneralPurposeBit:"),
      arg,
    );
  }

  static void setInternalFileAttrs(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setInternalFileAttrs:"),
      arg,
    );
  }

  static void setLastModDate(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setLastModDate:"),
      arg,
    );
  }

  static void setLastModTime(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setLastModTime:"),
      arg,
    );
  }

  static void setLocalFileHeaderRelativeOffset(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setLocalFileHeaderRelativeOffset:"),
      arg,
    );
  }

  static void setUncompressedSize(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setUncompressedSize:"),
      arg,
    );
  }

  static void setVersionMadeBy(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setVersionMadeBy:"),
      arg,
    );
  }

  static void setVersionNeededToExtract(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setVersionNeededToExtract:"),
      arg,
    );
  }

  static int uncompressedSize(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("uncompressedSize"),
    );
  }

  static int versionMadeBy(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("versionMadeBy"),
    );
  }

  static int versionNeededToExtract(
    Pointer<PFZipCentralDirectoryFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("versionNeededToExtract"),
    );
  }
}

@unsized
class PFZipEndOfCentralDirectoryRecord
    extends Struct<PFZipEndOfCentralDirectoryRecord> {
  factory PFZipEndOfCentralDirectoryRecord._() {
    throw UnimplementedError();
  }
  static Pointer<PFZipEndOfCentralDirectoryRecord> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("PFZipEndOfCentralDirectoryRecord")
        .cast<PFZipEndOfCentralDirectoryRecord>();
  }

  static void appendToData(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("appendToData:"),
      arg,
    );
  }

  static int byteSizeOfCentralDirectory(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("byteSizeOfCentralDirectory"),
    );
  }

  static int centralDirectoryOffset(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("centralDirectoryOffset"),
    );
  }

  static Pointer comment(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("comment"),
    );
  }

  static int commentLength(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("commentLength"),
    );
  }

  static void dealloc(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int diskWhereCentralDirectoryStarts(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("diskWhereCentralDirectoryStarts"),
    );
  }

  static Pointer init(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int loadFromBytes(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    Pointer<Utf8> arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromBytes:offset:"),
      arg,
      offset,
    );
  }

  static int loadFromData(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    Pointer arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromData:offset:"),
      arg,
      offset,
    );
  }

  static int numberOfCentralDirectoryRecordsOnThisDisk(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("numberOfCentralDirectoryRecordsOnThisDisk"),
    );
  }

  static int numberOfDisk(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("numberOfDisk"),
    );
  }

  static void setByteSizeOfCentralDirectory(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setByteSizeOfCentralDirectory:"),
      arg,
    );
  }

  static void setCentralDirectoryOffset(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setCentralDirectoryOffset:"),
      arg,
    );
  }

  static void setComment(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setComment:"),
      arg,
    );
  }

  static void setDiskWhereCentralDirectoryStarts(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setDiskWhereCentralDirectoryStarts:"),
      arg,
    );
  }

  static void setNumberOfCentralDirectoryRecordsOnThisDisk(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setNumberOfCentralDirectoryRecordsOnThisDisk:"),
      arg,
    );
  }

  static void setNumberOfDisk(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setNumberOfDisk:"),
      arg,
    );
  }

  static void setTotalNumberOfCentralDirectoryRecords(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setTotalNumberOfCentralDirectoryRecords:"),
      arg,
    );
  }

  static int totalNumberOfCentralDirectoryRecords(
    Pointer<PFZipEndOfCentralDirectoryRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("totalNumberOfCentralDirectoryRecords"),
    );
  }
}

@unsized
class PFZipLocalFileHeader extends Struct<PFZipLocalFileHeader> {
  factory PFZipLocalFileHeader._() {
    throw UnimplementedError();
  }
  static Pointer<PFZipLocalFileHeader> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("PFZipLocalFileHeader").cast<PFZipLocalFileHeader>();
  }

  static void appendToData(
    Pointer<PFZipLocalFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("appendToData:"),
      arg,
    );
  }

  static int compressedSize(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("compressedSize"),
    );
  }

  static int compressionMethod(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("compressionMethod"),
    );
  }

  static int crc32(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("crc32"),
    );
  }

  static void dealloc(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer description(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer extraFieldData(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("extraFieldData"),
    );
  }

  static int extraFieldLength(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("extraFieldLength"),
    );
  }

  static Pointer filename(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static int filenameLength(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("filenameLength"),
    );
  }

  static int generalPurposeBit(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("generalPurposeBit"),
    );
  }

  static Pointer init(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_ptr(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int lastModDate(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("lastModDate"),
    );
  }

  static int lastModTime(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("lastModTime"),
    );
  }

  static int loadFromBytes(
    Pointer<PFZipLocalFileHeader> _self,
    Pointer<Utf8> arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromBytes:offset:"),
      arg,
      offset,
    );
  }

  static int loadFromData(
    Pointer<PFZipLocalFileHeader> _self,
    Pointer arg, {
    @required int offset,
  }) {
    _openDynamicLibrary();
    return _call_ptr_ptr_ptr_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("loadFromData:offset:"),
      arg,
      offset,
    );
  }

  static void setCompressedSize(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setCompressedSize:"),
      arg,
    );
  }

  static void setCompressionMethod(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setCompressionMethod:"),
      arg,
    );
  }

  static void setCrc32(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setCrc32:"),
      arg,
    );
  }

  static void setExtraFieldData(
    Pointer<PFZipLocalFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setExtraFieldData:"),
      arg,
    );
  }

  static void setFilename(
    Pointer<PFZipLocalFileHeader> _self,
    Pointer arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_ptr_returns_void(
      _self,
      _objc.getSelector("setFilename:"),
      arg,
    );
  }

  static void setGeneralPurposeBit(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setGeneralPurposeBit:"),
      arg,
    );
  }

  static void setLastModDate(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setLastModDate:"),
      arg,
    );
  }

  static void setLastModTime(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setLastModTime:"),
      arg,
    );
  }

  static void setUncompressedSize(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint32_returns_void(
      _self,
      _objc.getSelector("setUncompressedSize:"),
      arg,
    );
  }

  static void setVersionNeededToExtract(
    Pointer<PFZipLocalFileHeader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    _call_ptr_ptr_Uint16_returns_void(
      _self,
      _objc.getSelector("setVersionNeededToExtract:"),
      arg,
    );
  }

  static int totalHeaderLength(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("totalHeaderLength"),
    );
  }

  static int uncompressedSize(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint32(
      _self,
      _objc.getSelector("uncompressedSize"),
    );
  }

  static int versionNeededToExtract(
    Pointer<PFZipLocalFileHeader> _self,
  ) {
    _openDynamicLibrary();
    return _call_ptr_ptr_returns_Uint16(
      _self,
      _objc.getSelector("versionNeededToExtract"),
    );
  }
}

final _call_ptr_ptr_Int32_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Int32_returns_ptr_C,
    _call_ptr_ptr_Int32_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int32_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_ptr_ptr_Int32_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Int32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Int32_returns_void_C,
    _call_ptr_ptr_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_ptr_ptr_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Int64_Uint8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int64_Uint8_returns_ptr_C,
        _call_ptr_ptr_Int64_Uint8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int64_Uint8_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Uint8 sqlType);
typedef _call_ptr_ptr_Int64_Uint8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int sqlType);

final _call_ptr_ptr_Int64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int64_ptr_returns_ptr_C,
        _call_ptr_ptr_Int64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer andResult);
typedef _call_ptr_ptr_Int64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer andResult);

final _call_ptr_ptr_Int64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Int64_returns_void_C,
    _call_ptr_ptr_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_ptr_ptr_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Int8_Int8_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int8_Int8_Int8_returns_void_C,
        _call_ptr_ptr_Int8_Int8_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_Int8_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Int8 deleted, Int8 uploaded);
typedef _call_ptr_ptr_Int8_Int8_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int deleted, int uploaded);

final _call_ptr_ptr_Int8_Int8_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int8_Int8_ptr_returns_Int8_C,
        _call_ptr_ptr_Int8_Int8_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_Int8_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Int8 moveToPermanentLocation,
    Pointer error);
typedef _call_ptr_ptr_Int8_Int8_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int moveToPermanentLocation,
    Pointer error);

final _call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer andBaselineIfNecessaryForStoreName,
    Pointer peerID,
    Pointer error);
typedef _call_ptr_ptr_Int8_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer andBaselineIfNecessaryForStoreName,
    Pointer peerID,
    Pointer error);

final _call_ptr_ptr_Int8_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int8_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Pointer store, Pointer error);
typedef _call_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer store, Pointer error);

final _call_ptr_ptr_Int8_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Int8_ptr_returns_Int8_C,
        _call_ptr_ptr_Int8_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Pointer error);
typedef _call_ptr_ptr_Int8_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer error);

final _call_ptr_ptr_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Int8_returns_void_C,
    _call_ptr_ptr_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_ptr_ptr_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint16_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint16_returns_void_C,
    _call_ptr_ptr_Uint16_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint16_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint16 arg);
typedef _call_ptr_ptr_Uint16_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint32_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint32_Int64_returns_void_C,
        _call_ptr_ptr_Uint32_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Int64 int64);
typedef _call_ptr_ptr_Uint32_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int int64);

final _call_ptr_ptr_Uint32_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint32_Uint32_returns_void_C,
        _call_ptr_ptr_Uint32_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint32 orderKey);
typedef _call_ptr_ptr_Uint32_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int orderKey);

final _call_ptr_ptr_Uint32_Uint8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint32_Uint8_returns_ptr_C,
        _call_ptr_ptr_Uint32_Uint8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_Uint8_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint8 sqlType);
typedef _call_ptr_ptr_Uint32_Uint8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int sqlType);

final _call_ptr_ptr_Uint32_float64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint32_float64_returns_ptr_C,
        _call_ptr_ptr_Uint32_float64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_float64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Float andTimestamp);
typedef _call_ptr_ptr_Uint32_float64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, double andTimestamp);

final _call_ptr_ptr_Uint32_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint32_returns_Int64_C,
    _call_ptr_ptr_Uint32_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_ptr_ptr_Uint32_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint32_returns_Uint32 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint32_returns_Uint32_C,
        _call_ptr_ptr_Uint32_returns_Uint32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_ptr_ptr_Uint32_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint32_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint32_returns_ptr_C,
    _call_ptr_ptr_Uint32_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_ptr_ptr_Uint32_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint32_returns_void_C,
    _call_ptr_ptr_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_ptr_ptr_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void_C,
            _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void_C
    = Void Function(Pointer _arg0, Pointer _arg1, Uint64 arg, Uint64 value2,
        Uint64 value3, Uint64 value4);
typedef _call_ptr_ptr_Uint64_Uint64_Uint64_Uint64_returns_void_Dart
    = void Function(Pointer _arg0, Pointer _arg1, int arg, int value2,
        int value3, int value4);

final _call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr_C,
        _call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Uint64 andRangeEnd,
    Pointer forEntityNamed);
typedef _call_ptr_ptr_Uint64_Uint64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int andRangeEnd,
    Pointer forEntityNamed);

final _call_ptr_ptr_Uint64_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint64_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_Uint64_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer entityName,
    Pointer andOwningPeerID);
typedef _call_ptr_ptr_Uint64_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer entityName,
    Pointer andOwningPeerID);

final _call_ptr_ptr_Uint64_ptr_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint64_ptr_ptr_returns_void_C,
        _call_ptr_ptr_Uint64_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer valuesAtIndexes,
    Pointer forKey);
typedef _call_ptr_ptr_Uint64_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer valuesAtIndexes,
    Pointer forKey);

final _call_ptr_ptr_Uint64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint64_ptr_returns_ptr_C,
        _call_ptr_ptr_Uint64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer ofEntityNamed);
typedef _call_ptr_ptr_Uint64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer ofEntityNamed);

final _call_ptr_ptr_Uint64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_Uint64_ptr_returns_void_C,
        _call_ptr_ptr_Uint64_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_ptr_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer inContext);
typedef _call_ptr_ptr_Uint64_ptr_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer inContext);

final _call_ptr_ptr_Uint64_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint64_returns_Int8_C,
    _call_ptr_ptr_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_ptr_ptr_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint64_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint64_returns_ptr_C,
    _call_ptr_ptr_Uint64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_ptr_ptr_Uint64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint64_returns_void_C,
    _call_ptr_ptr_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_ptr_ptr_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint8_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint8_returns_ptr_C,
    _call_ptr_ptr_Uint8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint8_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg);
typedef _call_ptr_ptr_Uint8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_Uint8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_Uint8_returns_void_C,
    _call_ptr_ptr_Uint8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_Uint8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg);
typedef _call_ptr_ptr_Uint8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_ptr_ptr_float64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_float64_ptr_returns_void_C,
        _call_ptr_ptr_float64_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_float64_ptr_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Float arg, Pointer executeBlockOnGlobalConcurrentQueue);
typedef _call_ptr_ptr_float64_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    double arg,
    Pointer executeBlockOnGlobalConcurrentQueue);

final _call_ptr_ptr_float64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_float64_returns_void_C,
    _call_ptr_ptr_float64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_ptr_ptr_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int32 withTransactionType,
    Pointer andStoreExportContext,
    Pointer withError);
typedef _call_ptr_ptr_ptr_Int32_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withTransactionType,
    Pointer andStoreExportContext,
    Pointer withError);

final _call_ptr_ptr_ptr_Int32_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int32_returns_ptr_C,
        _call_ptr_ptr_ptr_Int32_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int32_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int32 andTransactionType);
typedef _call_ptr_ptr_ptr_Int32_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int andTransactionType);

final _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void_C,
            _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 withEntityID,
    Int64 primaryKey,
    Pointer columnName,
    Int64 newValue);
typedef _call_ptr_ptr_ptr_Int64_Int64_ptr_Int64_returns_void_Dart
    = void Function(Pointer _arg0, Pointer _arg1, Pointer arg, int withEntityID,
        int primaryKey, Pointer columnName, int newValue);

final _call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void_C,
        _call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 type,
    Int64 transactionID,
    Pointer context);
typedef _call_ptr_ptr_ptr_Int64_Int64_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int type,
    int transactionID,
    Pointer context);

final _call_ptr_ptr_ptr_Int64_Int64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_Int64_returns_Int8_C,
        _call_ptr_ptr_ptr_Int64_Int64_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_Int64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 between, Int64 and);
typedef _call_ptr_ptr_ptr_Int64_Int64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int between, int and);

final _call_ptr_ptr_ptr_Int64_Int64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_Int64_returns_ptr_C,
        _call_ptr_ptr_ptr_Int64_Int64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_Int64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 origin, Int64 generation);
typedef _call_ptr_ptr_ptr_Int64_Int64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int origin, int generation);

final _call_ptr_ptr_ptr_Int64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Int64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 count, Pointer error);
typedef _call_ptr_ptr_ptr_Int64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int count, Pointer error);

final _call_ptr_ptr_ptr_Int64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_ptr_returns_void_C,
        _call_ptr_ptr_ptr_Int64_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 transactionID,
    Pointer updatedAttributes);
typedef _call_ptr_ptr_ptr_Int64_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int transactionID,
    Pointer updatedAttributes);

final _call_ptr_ptr_ptr_Int64_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_returns_Int64_C,
        _call_ptr_ptr_ptr_Int64_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 atIndex);
typedef _call_ptr_ptr_ptr_Int64_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int atIndex);

final _call_ptr_ptr_ptr_Int64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_returns_ptr_C,
        _call_ptr_ptr_ptr_Int64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 withInitialMaxPK);
typedef _call_ptr_ptr_ptr_Int64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withInitialMaxPK);

final _call_ptr_ptr_ptr_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int64_returns_void_C,
        _call_ptr_ptr_ptr_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 withOperationPrimaryKey);
typedef _call_ptr_ptr_ptr_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withOperationPrimaryKey);

final _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Int8 ignoreInheritance,
        Int8 countOnly,
        Uint32 nestingLevel,
        Int8 nestIsWhereScoped,
        Pointer requestContext);
typedef _call_ptr_ptr_ptr_Int8_Int8_Uint32_Int8_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int ignoreInheritance,
        int countOnly,
        int nestingLevel,
        int nestIsWhereScoped,
        Pointer requestContext);

final _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Int8 success,
        Int8 madeChanges,
        Pointer error,
        Pointer changeToken,
        Pointer historyToken);
typedef _call_ptr_ptr_ptr_Int8_Int8_ptr_ptr_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int success,
        int madeChanges,
        Pointer error,
        Pointer changeToken,
        Pointer historyToken);

final _call_ptr_ptr_ptr_Int8_Int8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_Int8_returns_ptr_C,
        _call_ptr_ptr_ptr_Int8_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 delete,
    Int8 transactionOnly);
typedef _call_ptr_ptr_ptr_Int8_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int delete, int transactionOnly);

final _call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 ignoreInheritance,
    Uint32 nestingLevel,
    Int8 nestIsWhereScoped,
    Pointer requestContext);
typedef _call_ptr_ptr_ptr_Int8_Uint32_Int8_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int ignoreInheritance,
        int nestingLevel,
        int nestIsWhereScoped,
        Pointer requestContext);

final _call_ptr_ptr_ptr_Int8_Uint32_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_Uint32_returns_ptr_C,
        _call_ptr_ptr_ptr_Int8_Uint32_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_Uint32_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 ignoreInheritance,
    Uint32 nestingLevel);
typedef _call_ptr_ptr_ptr_Int8_Uint32_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int ignoreInheritance,
    int nestingLevel);

final _call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 inBackground,
    Pointer handler,
    Pointer error);
typedef _call_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int inBackground,
    Pointer handler,
    Pointer error);

final _call_ptr_ptr_ptr_Int8_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_Int8_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 needsWrite, Pointer error);
typedef _call_ptr_ptr_ptr_Int8_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int needsWrite, Pointer error);

final _call_ptr_ptr_ptr_Int8_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 loadWithRetry,
    Pointer error);
typedef _call_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int loadWithRetry,
    Pointer error);

final _call_ptr_ptr_ptr_Int8_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_Int8_returns_ptr_C,
    _call_ptr_ptr_ptr_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 fullyMaterializeRecords);
typedef _call_ptr_ptr_ptr_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int fullyMaterializeRecords);

final _call_ptr_ptr_ptr_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Int8_returns_void_C,
        _call_ptr_ptr_ptr_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 fromImporter);
typedef _call_ptr_ptr_ptr_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int fromImporter);

final _call_ptr_ptr_ptr_Uint32_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint32_returns_Int64_C,
        _call_ptr_ptr_ptr_Uint32_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint32_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint32 batch);
typedef _call_ptr_ptr_ptr_Uint32_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int batch);

final _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 attributeType,
        Int8 isOptional,
        Int8 isTransient,
        Pointer withDefaultValue,
        Pointer andMinValue,
        Pointer andMaxValue);
typedef _call_ptr_ptr_ptr_Uint64_Int8_Int8_ptr_ptr_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int attributeType,
        int isOptional,
        int isTransient,
        Pointer withDefaultValue,
        Pointer andMinValue,
        Pointer andMaxValue);

final _call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8_C,
            _call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Int8 retryOnError,
    Pointer error,
    Pointer byAccessor);
typedef _call_ptr_ptr_ptr_Uint64_Int8_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    int retryOnError,
    Pointer error,
    Pointer byAccessor);

final _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 newVersion,
        Uint64 oldVersion,
        Pointer snapshot1,
        Pointer snapshot2,
        Pointer snapshot3);
typedef _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int newVersion,
        int oldVersion,
        Pointer snapshot1,
        Pointer snapshot2,
        Pointer snapshot3);

final _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 newVersion,
        Uint64 oldVersion,
        Pointer cachedSnapshot,
        Pointer persistedSnapshot);
typedef _call_ptr_ptr_ptr_Uint64_Uint64_ptr_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int newVersion,
        int oldVersion,
        Pointer cachedSnapshot,
        Pointer persistedSnapshot);

final _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 priority,
    Pointer seedConnection);
typedef _call_ptr_ptr_ptr_Uint64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int priority,
    Pointer seedConnection);

final _call_ptr_ptr_ptr_Uint64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_ptr_returns_void_C,
        _call_ptr_ptr_ptr_Uint64_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 withSetMutation,
    Pointer usingObjects);
typedef _call_ptr_ptr_ptr_Uint64_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withSetMutation,
    Pointer usingObjects);

final _call_ptr_ptr_ptr_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_returns_Uint64_C,
        _call_ptr_ptr_ptr_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 offset);
typedef _call_ptr_ptr_ptr_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int offset);

final _call_ptr_ptr_ptr_Uint64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 withLength);
typedef _call_ptr_ptr_ptr_Uint64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int withLength);

final _call_ptr_ptr_ptr_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint64_returns_void_C,
        _call_ptr_ptr_ptr_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 transitionType);
typedef _call_ptr_ptr_ptr_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int transitionType);

final _call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint8 sqlType,
    Pointer attributeDescription,
    Int8 allowCoercion);
typedef _call_ptr_ptr_ptr_Uint8_ptr_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int sqlType,
    Pointer attributeDescription,
    int allowCoercion);

final _call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint8 ofType,
    Pointer inScope,
    Pointer context);
typedef _call_ptr_ptr_ptr_Uint8_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int ofType,
    Pointer inScope,
    Pointer context);

final _call_ptr_ptr_ptr_Uint8_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint8_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint8_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint8_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint8 sqlType,
    Pointer attributeDescription);
typedef _call_ptr_ptr_ptr_Uint8_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int sqlType,
    Pointer attributeDescription);

final _call_ptr_ptr_ptr_Uint8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_Uint8_returns_ptr_C,
        _call_ptr_ptr_ptr_Uint8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_Uint8_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint8 sqlType);
typedef _call_ptr_ptr_ptr_Uint8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int sqlType);

final _call_ptr_ptr_ptr_float64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_float64_returns_ptr_C,
        _call_ptr_ptr_ptr_float64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_float64_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float afterTimestamp);
typedef _call_ptr_ptr_ptr_float64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double afterTimestamp);

final _call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer configurationName,
    Int8 retainHashHack,
    Uint64 brokenHashVersion);
typedef _call_ptr_ptr_ptr_ptr_Int8_Uint64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer configurationName,
    int retainHashHack,
    int brokenHashVersion);

final _call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withSetupAssistant,
    Int8 synchronously,
    Pointer error,
    Pointer finishBlock);
typedef _call_ptr_ptr_ptr_ptr_Int8_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withSetupAssistant,
    int synchronously,
    Pointer error,
    Pointer finishBlock);

final _call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andManagedObjectContext,
    Int8 isDelete,
    Pointer error);
typedef _call_ptr_ptr_ptr_ptr_Int8_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andManagedObjectContext,
    int isDelete,
    Pointer error);

final _call_ptr_ptr_ptr_ptr_Int8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Int8_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andRelationship,
    Int8 useInverse);
typedef _call_ptr_ptr_ptr_ptr_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andRelationship,
    int useInverse);

final _call_ptr_ptr_ptr_ptr_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Int8_returns_void_C,
        _call_ptr_ptr_ptr_ptr_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Int8_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withKeypath, Int8 hasToMany);
typedef _call_ptr_ptr_ptr_ptr_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withKeypath,
    int hasToMany);

final _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_C,
        _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forProperty,
    Uint32 options,
    Float andTimestamp);
typedef _call_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forProperty,
    int options,
    double andTimestamp);

final _call_ptr_ptr_ptr_ptr_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint32_returns_void_C,
        _call_ptr_ptr_ptr_ptr_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forObjectID,
    Uint32 options);
typedef _call_ptr_ptr_ptr_ptr_Uint32_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forObjectID,
    int options);

final _call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer property,
    Uint64 collationType,
    Int8 ascending);
typedef _call_ptr_ptr_ptr_ptr_Uint64_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer property,
    int collationType,
    int ascending);

final _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer hasAttributeNamed,
    Uint64 ofType,
    Pointer andReturnFailureReason);
typedef _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer hasAttributeNamed,
    int ofType,
    Pointer andReturnFailureReason);

final _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer entityName,
    Uint64 primaryKeyInteger,
    Pointer andPeerID);
typedef _call_ptr_ptr_ptr_ptr_Uint64_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer entityName,
    int primaryKeyInteger,
    Pointer andPeerID);

final _call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64_C,
        _call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andEntityName,
    Uint64 withPrimaryKey);
typedef _call_ptr_ptr_ptr_ptr_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andEntityName,
    int withPrimaryKey);

final _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_Uint64_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andEntityName,
    Uint64 withPrimaryKey);
typedef _call_ptr_ptr_ptr_ptr_Uint64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andEntityName,
    int withPrimaryKey);

final _call_ptr_ptr_ptr_ptr_float64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_float64_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_float64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_float64_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forProperty,
    Float afterTimestamp);
typedef _call_ptr_ptr_ptr_ptr_float64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forProperty,
    double afterTimestamp);

final _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr_C,
            _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer withDestinationEntity,
        Pointer andInverseRelationship,
        Int8 isOptional,
        Int8 isToMany,
        Uint64 andDeleteRule);
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_Int8_Uint64_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer withDestinationEntity,
        Pointer andInverseRelationship,
        int isOptional,
        int isToMany,
        int andDeleteRule);

final _call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer request,
    Pointer metadata,
    Int8 forceInsertsToUpdates,
    Pointer context);
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer request,
    Pointer metadata,
    int forceInsertsToUpdates,
    Pointer context);

final _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withManagedObjectContext,
    Pointer cache,
    Int8 populate);
typedef _call_ptr_ptr_ptr_ptr_ptr_Int8_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withManagedObjectContext,
    Pointer cache,
    int populate);

final _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8 =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8_C,
            _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8_C
    = Int8 Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer previousSnapshot,
        Pointer andAncestorSnapshot,
        Uint32 withOldVersion,
        Uint32 andNewVersion,
        Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_Uint32_Uint32_ptr_returns_Int8_Dart
    = int Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer previousSnapshot,
        Pointer andAncestorSnapshot,
        int withOldVersion,
        int andNewVersion,
        Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer recordType,
    Pointer managedObjectModel,
    Uint64 andType);
typedef _call_ptr_ptr_ptr_ptr_ptr_Uint64_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer recordType,
    Pointer managedObjectModel,
    int andType);

final _call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void_C,
            _call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ofRelationship,
    Pointer onObjectWithID,
    Float withTimestamp,
    Pointer generation);
typedef _call_ptr_ptr_ptr_ptr_ptr_float64_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ofRelationship,
    Pointer onObjectWithID,
    double withTimestamp,
    Pointer generation);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer sourceAlias,
    Pointer destinationAlias,
    Pointer correlationAlias,
    Int8 direct,
    Pointer inScope);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer sourceAlias,
        Pointer destinationAlias,
        Pointer correlationAlias,
        int direct,
        Pointer inScope);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withOldSnapshot,
    Pointer newSnapshot,
    Pointer andAncestor,
    Int8 andLegacyPath);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withOldSnapshot,
    Pointer newSnapshot,
    Pointer andAncestor,
    int andLegacyPath);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_C
    = Void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer withOrderKeys,
        Pointer forSourceObjectID,
        Pointer forProperty,
        Uint32 options,
        Float andTimestamp);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint32_float64_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer withOrderKeys,
        Pointer forSourceObjectID,
        Pointer forProperty,
        int options,
        double andTimestamp);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer entityName,
        Pointer primaryKey,
        Pointer peerID,
        Uint64 andHash,
        Pointer managedObjectID,
        Uint64 primaryKeyInteger);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_Uint64_ptr_Uint64_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer entityName,
        Pointer primaryKey,
        Pointer peerID,
        int andHash,
        Pointer managedObjectID,
        int primaryKeyInteger);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withOrderKeys,
    Pointer forSourceObjectID,
    Pointer forProperty,
    Float andTimestamp);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_float64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withOrderKeys,
    Pointer forSourceObjectID,
    Pointer forProperty,
    double andTimestamp);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8 =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C
    = Int8 Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer type,
        Pointer options,
        Pointer withMappingModel,
        Pointer toDestinationURL,
        Pointer destinationType,
        Pointer destinationOptions,
        Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart
    = int Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer type,
        Pointer options,
        Pointer withMappingModel,
        Pointer toDestinationURL,
        Pointer destinationType,
        Pointer destinationOptions,
        Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8 =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C
    = Int8 Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer ofType,
        Pointer options,
        Pointer withLocalPeerID,
        Pointer stack,
        Pointer andPersistentStoreCoordinator,
        Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart
    = int Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer ofType,
        Pointer options,
        Pointer withLocalPeerID,
        Pointer stack,
        Pointer andPersistentStoreCoordinator,
        Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C
    = Void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer _arg2,
        Pointer _arg3,
        Pointer _arg4,
        Pointer _arg5,
        Pointer _arg6,
        Pointer _arg7,
        Pointer _arg8);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer _arg2,
        Pointer _arg3,
        Pointer _arg4,
        Pointer _arg5,
        Pointer _arg6,
        Pointer _arg7,
        Pointer _arg8);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withURL,
    Pointer forLocalPeerID,
    Pointer withLocalRootLocation,
    Pointer andUbiquityRootLocation,
    Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withURL,
    Pointer forLocalPeerID,
    Pointer withLocalRootLocation,
    Pointer andUbiquityRootLocation,
    Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer entityName,
    Pointer rangeStart,
    Pointer rangeEnd,
    Pointer peerStart,
    Pointer peerEnd);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer entityName,
        Pointer rangeStart,
        Pointer rangeEnd,
        Pointer peerStart,
        Pointer peerEnd);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C,
            _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart>(
        "objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer entityName,
    Pointer rangeStart,
    Pointer rangeEnd,
    Pointer peerRangeStart,
    Pointer peerRangeEnd);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer entityName,
    Pointer rangeStart,
    Pointer rangeEnd,
    Pointer peerRangeStart,
    Pointer peerRangeEnd);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ofType,
    Pointer withOptions,
    Pointer usingPersistentStoreCoordinator,
    Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ofType,
    Pointer withOptions,
    Pointer usingPersistentStoreCoordinator,
    Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ubiquityRootLocation,
    Pointer localRootLocation,
    Pointer storeName,
    Pointer andPrivateQueue);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer ubiquityRootLocation,
    Pointer localRootLocation,
    Pointer storeName,
    Pointer andPrivateQueue);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer globalObjectIDs,
    Pointer primaryKeys,
    Pointer forStoreName,
    Pointer withRootLocation);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer globalObjectIDs,
    Pointer primaryKeys,
    Pointer forStoreName,
    Pointer withRootLocation);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64_C = Int64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer shouldHandleInaccessibleFault,
    Pointer forObjectID,
    Pointer andTrigger);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer shouldHandleInaccessibleFault,
    Pointer forObjectID,
    Pointer andTrigger);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andLocalPeerID,
    Pointer atUbiquityRootLocation,
    Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andLocalPeerID,
    Pointer atUbiquityRootLocation,
    Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer destinationModel,
    Pointer mappingModel,
    Pointer localPeerID);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer destinationModel,
    Pointer mappingModel,
    Pointer localPeerID);

final _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C,
        _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toCache,
    Pointer forRecordWithType,
    Pointer andUniqueIdentifier);
typedef _call_ptr_ptr_ptr_ptr_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toCache,
    Pointer forRecordWithType,
    Pointer andUniqueIdentifier);

final _call_ptr_ptr_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_returns_Int8_C,
        _call_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer toLocation, Pointer error);
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toLocation,
    Pointer error);

final _call_ptr_ptr_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_returns_ptr_C,
        _call_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withEntityMapping,
    Pointer migrationContext);
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withEntityMapping,
    Pointer migrationContext);

final _call_ptr_ptr_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_ptr_returns_void_C,
        _call_ptr_ptr_ptr_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer peerStates, Pointer andPeerIDs);
typedef _call_ptr_ptr_ptr_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer peerStates,
    Pointer andPeerIDs);

final _call_ptr_ptr_ptr_ptr_returns_Int32 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_returns_Int32_C,
        _call_ptr_ptr_ptr_ptr_returns_Int32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer usingFetchPlan);
typedef _call_ptr_ptr_ptr_ptr_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer usingFetchPlan);

final _call_ptr_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_ptr_returns_Int8_C,
    _call_ptr_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer andUpdateFilenameInTransactionEntries);
typedef _call_ptr_ptr_ptr_ptr_returns_Int8_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer andUpdateFilenameInTransactionEntries);

final _call_ptr_ptr_ptr_ptr_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_ptr_ptr_ptr_ptr_returns_Uint64_C,
        _call_ptr_ptr_ptr_ptr_returns_Uint64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);
typedef _call_ptr_ptr_ptr_ptr_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);

final _call_ptr_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_ptr_returns_ptr_C,
    _call_ptr_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer migrationContext);
typedef _call_ptr_ptr_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer migrationContext);

final _call_ptr_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_ptr_returns_void_C,
    _call_ptr_ptr_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_ptr_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withUbiquityRootLocation);
typedef _call_ptr_ptr_ptr_ptr_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withUbiquityRootLocation);

final _call_ptr_ptr_ptr_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Int32_C,
    _call_ptr_ptr_ptr_returns_Int32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Int64_C,
    _call_ptr_ptr_ptr_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Int8_C,
    _call_ptr_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_Uint32 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Uint32_C,
    _call_ptr_ptr_ptr_returns_Uint32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Uint64_C,
    _call_ptr_ptr_ptr_returns_Uint64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_Uint8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_Uint8_C,
    _call_ptr_ptr_ptr_returns_Uint8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_Uint8_C = Uint8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_Uint8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_float64_C,
    _call_ptr_ptr_ptr_returns_float64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_ptr_C,
    _call_ptr_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_ptr_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_ptr_returns_void_C,
    _call_ptr_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_ptr_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_ptr_ptr_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Int32_C,
    _call_ptr_ptr_returns_Int32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Int64_C,
    _call_ptr_ptr_returns_Int64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Int8_C,
    _call_ptr_ptr_returns_Int8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Uint16 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Uint16_C,
    _call_ptr_ptr_returns_Uint16_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Uint16_C = Uint16 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Uint16_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Uint32 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Uint32_C,
    _call_ptr_ptr_returns_Uint32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Uint64_C,
    _call_ptr_ptr_returns_Uint64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_Uint8 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_Uint8_C,
    _call_ptr_ptr_returns_Uint8_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_Uint8_C = Uint8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_Uint8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_float32 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_float32_C,
    _call_ptr_ptr_returns_float32_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_float32_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_float32_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_float64_C,
    _call_ptr_ptr_returns_float64_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_ptr = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_ptr_C,
    _call_ptr_ptr_returns_ptr_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_ptr_C = Pointer Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_ptr_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1);

final _call_ptr_ptr_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_ptr_ptr_returns_void_C,
    _call_ptr_ptr_returns_void_Dart>("objc_msgSend");
typedef _call_ptr_ptr_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_ptr_ptr_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1);
