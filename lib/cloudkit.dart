/// [CloudKit](https://developer.apple.com/documentation/cloudkit?language=objc) (Objective-C library).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
library cupertino_ffi.cloudkit;

import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';
import 'package:cupertino_ffi/objective_c.dart' as _objc;

bool _isDynamicLibraryOpened = false;

/// Ensures that the Objective-C library has been loaded.
void _openDynamicLibrary() {
  if (!_isDynamicLibraryOpened) {
    _isDynamicLibraryOpened = true;
    DynamicLibrary.open(
        "/System/Library/Frameworks/CloudKit.framework/Versions/A/CloudKit");
  }
}

/// Objective-C class _CKAcceptSharesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAcceptSharesOperation extends Struct<CKAcceptSharesOperation> {
  factory CKAcceptSharesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKAcceptSharesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAcceptSharesOperation")
        .cast<CKAcceptSharesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> acceptSharesCompletionBlock(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acceptSharesCompletionBlock"),
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> errorsByShareURL(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorsByShareURL"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithShareMetadatas(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithShareMetadatas:"),
      arg,
    );
  }

  static Pointer<Void> perShareCompletionBlock(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perShareCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setAcceptSharesCompletionBlock(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcceptSharesCompletionBlock:"),
      arg,
    );
  }

  static void setErrorsByShareURL(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorsByShareURL:"),
      arg,
    );
  }

  static void setPerShareCompletionBlock(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerShareCompletionBlock:"),
      arg,
    );
  }

  static void setShareMetadatas(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadatas:"),
      arg,
    );
  }

  static void setShareMetadatasByShareURL(
    Pointer<CKAcceptSharesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadatasByShareURL:"),
      arg,
    );
  }

  static Pointer<Void> shareMetadatas(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadatas"),
    );
  }

  static Pointer<Void> shareMetadatasByShareURL(
    Pointer<CKAcceptSharesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadatasByShareURL"),
    );
  }
}

/// Objective-C class _CKAcceptSharesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAcceptSharesOperationInfo extends Struct<CKAcceptSharesOperationInfo> {
  factory CKAcceptSharesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAcceptSharesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAcceptSharesOperationInfo")
        .cast<CKAcceptSharesOperationInfo>();
  }

  static int databaseScope(
    Pointer<CKAcceptSharesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAcceptSharesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAcceptSharesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setShareMetadatasToAccept(
    Pointer<CKAcceptSharesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadatasToAccept:"),
      arg,
    );
  }

  static Pointer<Void> shareMetadatasToAccept(
    Pointer<CKAcceptSharesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadatasToAccept"),
    );
  }
}

/// Objective-C class _CKAccountInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAccountInfo extends Struct<CKAccountInfo> {
  factory CKAccountInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAccountInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKAccountInfo").cast<CKAccountInfo>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int accountPartition(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("accountPartition"),
    );
  }

  static int accountStatus(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("accountStatus"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> deviceToDeviceEncryptionAvailabilityError(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceToDeviceEncryptionAvailabilityError"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAccountInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hasEncryptionIdentity(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasEncryptionIdentity"),
    );
  }

  static int hasValidCredentials(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValidCredentials"),
    );
  }

  static int hash(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAccountInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKAccountInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> manateeError(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("manateeError"),
    );
  }

  static void setAccountPartition(
    Pointer<CKAccountInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setAccountPartition:"),
      arg,
    );
  }

  static void setAccountStatus(
    Pointer<CKAccountInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setAccountStatus:"),
      arg,
    );
  }

  static void setDeviceToDeviceEncryptionAvailabilityError(
    Pointer<CKAccountInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceToDeviceEncryptionAvailabilityError:"),
      arg,
    );
  }

  static void setHasEncryptionIdentity(
    Pointer<CKAccountInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasEncryptionIdentity:"),
      arg,
    );
  }

  static void setHasValidCredentials(
    Pointer<CKAccountInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasValidCredentials:"),
      arg,
    );
  }

  static void setManateeError(
    Pointer<CKAccountInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setManateeError:"),
      arg,
    );
  }

  static void setSupportsDeviceToDeviceEncryption(
    Pointer<CKAccountInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsDeviceToDeviceEncryption:"),
      arg,
    );
  }

  static int supportsDeviceToDeviceEncryption(
    Pointer<CKAccountInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsDeviceToDeviceEncryption"),
    );
  }
}

/// Objective-C class _CKAccountOverrideInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAccountOverrideInfo extends Struct<CKAccountOverrideInfo> {
  factory CKAccountOverrideInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAccountOverrideInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAccountOverrideInfo")
        .cast<CKAccountOverrideInfo>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> accountPropertyOverrides(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accountPropertyOverrides"),
    );
  }

  static int accountWantsFlowControl(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accountWantsFlowControl"),
    );
  }

  static int accountWantsPushRegistration(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("accountWantsPushRegistration"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> email(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("email"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initAnonymousAccount(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("initAnonymousAccount"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithEmail(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> password,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEmail:password:"),
      arg,
      password,
    );
  }

  static int isEqual(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isUnitTestingAccount(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUnitTestingAccount"),
    );
  }

  static Pointer<Void> overridesByDataclass(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("overridesByDataclass"),
    );
  }

  static Pointer<Void> password(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("password"),
    );
  }

  static Pointer<Void> secondEmail(
    Pointer<CKAccountOverrideInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondEmail"),
    );
  }

  static void setAccountPropertyOverrides(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccountPropertyOverrides:"),
      arg,
    );
  }

  static void setAccountWantsFlowControl(
    Pointer<CKAccountOverrideInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAccountWantsFlowControl:"),
      arg,
    );
  }

  static void setAccountWantsPushRegistration(
    Pointer<CKAccountOverrideInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAccountWantsPushRegistration:"),
      arg,
    );
  }

  static void setIsUnitTestingAccount(
    Pointer<CKAccountOverrideInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsUnitTestingAccount:"),
      arg,
    );
  }

  static void setOverridesByDataclass(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOverridesByDataclass:"),
      arg,
    );
  }

  static void setSecondEmail(
    Pointer<CKAccountOverrideInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSecondEmail:"),
      arg,
    );
  }
}

/// Objective-C class _CKAggregateExpressionValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAggregateExpressionValidator
    extends Struct<CKAggregateExpressionValidator> {
  factory CKAggregateExpressionValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKAggregateExpressionValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAggregateExpressionValidator")
        .cast<CKAggregateExpressionValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAggregateExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidators(
    Pointer<CKAggregateExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidators:"),
      arg,
    );
  }

  static void setSubExpressionValidators(
    Pointer<CKAggregateExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubExpressionValidators:"),
      arg,
    );
  }

  static Pointer<Void> subExpressionValidators(
    Pointer<CKAggregateExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subExpressionValidators"),
    );
  }

  static int validate(
    Pointer<CKAggregateExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKAggregateZonePCSOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAggregateZonePCSOperation extends Struct<CKAggregateZonePCSOperation> {
  factory CKAggregateZonePCSOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKAggregateZonePCSOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAggregateZonePCSOperation")
        .cast<CKAggregateZonePCSOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> aggregateZonePCSCompletionBlock(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("aggregateZonePCSCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithSourceZoneIDs(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> targetZone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSourceZoneIDs:targetZone:"),
      arg,
      targetZone,
    );
  }

  static void performCKOperation(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setAggregateZonePCSCompletionBlock(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAggregateZonePCSCompletionBlock:"),
      arg,
    );
  }

  static void setSourceZoneIDs(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceZoneIDs:"),
      arg,
    );
  }

  static void setTargetZone(
    Pointer<CKAggregateZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTargetZone:"),
      arg,
    );
  }

  static Pointer<Void> sourceZoneIDs(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceZoneIDs"),
    );
  }

  static Pointer<Void> targetZone(
    Pointer<CKAggregateZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("targetZone"),
    );
  }
}

/// Objective-C class _CKAggregateZonePCSOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAggregateZonePCSOperationInfo
    extends Struct<CKAggregateZonePCSOperationInfo> {
  factory CKAggregateZonePCSOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAggregateZonePCSOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAggregateZonePCSOperationInfo")
        .cast<CKAggregateZonePCSOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setSourceZoneIDs(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceZoneIDs:"),
      arg,
    );
  }

  static void setTargetZone(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTargetZone:"),
      arg,
    );
  }

  static Pointer<Void> sourceZoneIDs(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceZoneIDs"),
    );
  }

  static Pointer<Void> targetZone(
    Pointer<CKAggregateZonePCSOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("targetZone"),
    );
  }
}

/// Objective-C class _CKAllPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAllPredicateValidator extends Struct<CKAllPredicateValidator> {
  factory CKAllPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKAllPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAllPredicateValidator")
        .cast<CKAllPredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAllPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidators(
    Pointer<CKAllPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidators:"),
      arg,
    );
  }

  static void setValidators(
    Pointer<CKAllPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidators:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKAllPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validators(
    Pointer<CKAllPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validators"),
    );
  }
}

/// Objective-C class _CKAnyPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAnyPredicateValidator extends Struct<CKAnyPredicateValidator> {
  factory CKAnyPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKAnyPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAnyPredicateValidator")
        .cast<CKAnyPredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAnyPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidators(
    Pointer<CKAnyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidators:"),
      arg,
    );
  }

  static void setValidators(
    Pointer<CKAnyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidators:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKAnyPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validators(
    Pointer<CKAnyPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validators"),
    );
  }
}

/// Objective-C class _CKApplicationPermissionGroup_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKApplicationPermissionGroup
    extends Struct<CKApplicationPermissionGroup> {
  factory CKApplicationPermissionGroup._() {
    throw UnimplementedError();
  }
  static Pointer<CKApplicationPermissionGroup> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKApplicationPermissionGroup")
        .cast<CKApplicationPermissionGroup>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKApplicationPermissionGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> applicationBundleIDs(
    Pointer<CKApplicationPermissionGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("applicationBundleIDs"),
    );
  }

  static Pointer<Void> containerIDs(
    Pointer<CKApplicationPermissionGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIDs"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKApplicationPermissionGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int enabledPermissions(
    Pointer<CKApplicationPermissionGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("enabledPermissions"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKApplicationPermissionGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKApplicationPermissionGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setApplicationBundleIDs(
    Pointer<CKApplicationPermissionGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setApplicationBundleIDs:"),
      arg,
    );
  }

  static void setContainerIDs(
    Pointer<CKApplicationPermissionGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerIDs:"),
      arg,
    );
  }

  static void setEnabledPermissions(
    Pointer<CKApplicationPermissionGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setEnabledPermissions:"),
      arg,
    );
  }
}

/// Objective-C class _CKArchiveRecordsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKArchiveRecordsOperation extends Struct<CKArchiveRecordsOperation> {
  factory CKArchiveRecordsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKArchiveRecordsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKArchiveRecordsOperation")
        .cast<CKArchiveRecordsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> archiveRecordsCompletionBlock(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archiveRecordsCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordIDs(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordIDs:"),
      arg,
    );
  }

  static Pointer<Void> perItemErrors(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perItemErrors"),
    );
  }

  static void performCKOperation(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordArchivedBlock(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordArchivedBlock"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKArchiveRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static void setArchiveRecordsCompletionBlock(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArchiveRecordsCompletionBlock:"),
      arg,
    );
  }

  static void setPerItemErrors(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerItemErrors:"),
      arg,
    );
  }

  static void setRecordArchivedBlock(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordArchivedBlock:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKArchiveRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKArchiveRecordsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKArchiveRecordsOperationInfo
    extends Struct<CKArchiveRecordsOperationInfo> {
  factory CKArchiveRecordsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKArchiveRecordsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKArchiveRecordsOperationInfo")
        .cast<CKArchiveRecordsOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKArchiveRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKArchiveRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKArchiveRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static void setRecordIDs(
    Pointer<CKArchiveRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKArchivedAnchoredPackage_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKArchivedAnchoredPackage extends Struct<CKArchivedAnchoredPackage> {
  factory CKArchivedAnchoredPackage._() {
    throw UnimplementedError();
  }
  static Pointer<CKArchivedAnchoredPackage> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKArchivedAnchoredPackage")
        .cast<CKArchivedAnchoredPackage>();
  }

  static Pointer<Void> UUID(
    Pointer<CKArchivedAnchoredPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static Pointer<Void> anchorPath(
    Pointer<CKArchivedAnchoredPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("anchorPath"),
    );
  }

  static Pointer<Void> awakeAfterUsingCoder(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("awakeAfterUsingCoder:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> packagePath(
    Pointer<CKArchivedAnchoredPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("packagePath"),
    );
  }

  static void setAnchorPath(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAnchorPath:"),
      arg,
    );
  }

  static void setPackagePath(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPackagePath:"),
      arg,
    );
  }

  static void setUUID(
    Pointer<CKArchivedAnchoredPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUUID:"),
      arg,
    );
  }
}

/// Objective-C class _CKAsset_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAsset extends Struct<CKAsset> {
  factory CKAsset._() {
    throw UnimplementedError();
  }
  static Pointer<CKAsset> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKAsset").cast<CKAsset>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKAsset> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> UUID(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static int arrayIndex(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("arrayIndex"),
    );
  }

  static Pointer<Void> assetChunkerOptions(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetChunkerOptions"),
    );
  }

  static Pointer<Void> assetContent(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetContent"),
    );
  }

  static Pointer<Void> assetCopyInfo(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetCopyInfo"),
    );
  }

  static Pointer<Void> assetHandleUUID(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetHandleUUID"),
    );
  }

  static Pointer<Void> assetKey(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetKey"),
    );
  }

  static Pointer<Void> assetReference(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetReference"),
    );
  }

  static Pointer<Void> assetRereferenceInfo(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetRereferenceInfo"),
    );
  }

  static Pointer<Void> assetTransferOptions(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptions"),
    );
  }

  static Pointer<Void> authToken(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("authToken"),
    );
  }

  static Pointer<Void> boundaryKey(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("boundaryKey"),
    );
  }

  static Pointer<Void> clearAssetKey(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clearAssetKey"),
    );
  }

  static Pointer<Void> clientOpenedFileHandle(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientOpenedFileHandle"),
    );
  }

  static Pointer<Void> constructedAssetDownloadURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constructedAssetDownloadURL"),
    );
  }

  static Pointer<Void> constructedAssetDownloadURLTemplate(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constructedAssetDownloadURLTemplate"),
    );
  }

  static int constructedAssetEstimatedSize(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("constructedAssetEstimatedSize"),
    );
  }

  static Pointer<Void> contentBaseURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentBaseURL"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> deviceID(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceID"),
    );
  }

  static Pointer<Void> downloadBaseURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadBaseURL"),
    );
  }

  static Pointer<Void> downloadPreauthorization(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadPreauthorization"),
    );
  }

  static int downloadTokenExpiration(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("downloadTokenExpiration"),
    );
  }

  static Pointer<Void> downloadURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadURL"),
    );
  }

  static Pointer<Void> downloadURLExpiration(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadURLExpiration"),
    );
  }

  static Pointer<Void> downloadURLTemplate(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadURLTemplate"),
    );
  }

  static Pointer<Void> downloadURLWithFileName(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("downloadURLWithFileName:"),
      arg,
    );
  }

  static int downloaded(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("downloaded"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileID(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileID"),
    );
  }

  static Pointer<Void> fileURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileURL"),
    );
  }

  static Pointer<Void> generationCountToSave(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generationCountToSave"),
    );
  }

  static int hasSize(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSize"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithAssetReference(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAssetReference:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCopyInfo(
    Pointer<CKAsset> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fileURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCopyInfo:fileURL:"),
      arg,
      fileURL,
    );
  }

  static Pointer<Void> initWithDeviceID(
    Pointer<CKAsset> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fileID,
    @required Pointer<Void> generationID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDeviceID:fileID:generationID:"),
      arg,
      fileID,
      generationID,
    );
  }

  static Pointer<Void> initWithFileDescriptor(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithFileDescriptor:"),
      arg,
    );
  }

  static Pointer<Void> initWithFileURL$(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithFileURL$signature$(
    Pointer<CKAsset> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> signature,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileURL:signature:"),
      arg,
      signature,
    );
  }

  static Pointer<Void> initWithFileURL$signature$assetHandleUUID$(
    Pointer<CKAsset> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> signature,
    @required Pointer<Void> assetHandleUUID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileURL:signature:assetHandleUUID:"),
      arg,
      signature,
      assetHandleUUID,
    );
  }

  static int isConstructedAsset(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConstructedAsset"),
    );
  }

  static int isRereferencedAssetUpload(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRereferencedAssetUpload"),
    );
  }

  static Pointer<Void> itemTypeHint(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemTypeHint"),
    );
  }

  static Pointer<Void> nullableFileURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nullableFileURL"),
    );
  }

  static Pointer<Void> openWithError(
    Pointer<CKAsset> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("openWithError:"),
      arg,
    );
  }

  static Pointer<Void> owner(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("owner"),
    );
  }

  static int paddedFileSize(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("paddedFileSize"),
    );
  }

  static Pointer<Void> realPathURL(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("realPathURL"),
    );
  }

  static Pointer<Void> record(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("record"),
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static Pointer<Void> recordKey(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordKey"),
    );
  }

  static Pointer<Void> referenceSignature(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceSignature"),
    );
  }

  static Pointer<Void> requestor(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestor"),
    );
  }

  static void setArrayIndex(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setArrayIndex:"),
      arg,
    );
  }

  static void setAssetChunkerOptions(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetChunkerOptions:"),
      arg,
    );
  }

  static void setAssetContent(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetContent:"),
      arg,
    );
  }

  static void setAssetCopyInfo(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetCopyInfo:"),
      arg,
    );
  }

  static void setAssetKey(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetKey:"),
      arg,
    );
  }

  static void setAssetReference(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetReference:"),
      arg,
    );
  }

  static void setAssetRereferenceInfo(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetRereferenceInfo:"),
      arg,
    );
  }

  static void setAssetTransferOptions(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptions:"),
      arg,
    );
  }

  static void setAuthToken(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAuthToken:"),
      arg,
    );
  }

  static void setBoundaryKey(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBoundaryKey:"),
      arg,
    );
  }

  static void setClearAssetKey(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClearAssetKey:"),
      arg,
    );
  }

  static void setClientOpenedFileHandle(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientOpenedFileHandle:"),
      arg,
    );
  }

  static void setConstructedAssetDownloadURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConstructedAssetDownloadURL:"),
      arg,
    );
  }

  static void setConstructedAssetDownloadURLTemplate(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConstructedAssetDownloadURLTemplate:"),
      arg,
    );
  }

  static void setConstructedAssetEstimatedSize(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setConstructedAssetEstimatedSize:"),
      arg,
    );
  }

  static void setContentBaseURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentBaseURL:"),
      arg,
    );
  }

  static void setDownloadBaseURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDownloadBaseURL:"),
      arg,
    );
  }

  static void setDownloadPreauthorization(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDownloadPreauthorization:"),
      arg,
    );
  }

  static void setDownloadTokenExpiration(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDownloadTokenExpiration:"),
      arg,
    );
  }

  static void setDownloadURLExpiration(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDownloadURLExpiration:"),
      arg,
    );
  }

  static void setDownloadURLTemplate(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDownloadURLTemplate:"),
      arg,
    );
  }

  static void setDownloaded(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDownloaded:"),
      arg,
    );
  }

  static void setFileURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileURL:"),
      arg,
    );
  }

  static void setGenerationCountToSave(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGenerationCountToSave:"),
      arg,
    );
  }

  static void setHasSize(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSize:"),
      arg,
    );
  }

  static void setItemTypeHint(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemTypeHint:"),
      arg,
    );
  }

  static void setNullableFileURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNullableFileURL:"),
      arg,
    );
  }

  static void setOwner(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwner:"),
      arg,
    );
  }

  static void setPaddedFileSize(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setPaddedFileSize:"),
      arg,
    );
  }

  static void setRealPathURL(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRealPathURL:"),
      arg,
    );
  }

  static void setRecord(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecord:"),
      arg,
    );
  }

  static void setRecordID(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordID:"),
      arg,
    );
  }

  static void setRecordKey(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordKey:"),
      arg,
    );
  }

  static void setReferenceSignature(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferenceSignature:"),
      arg,
    );
  }

  static void setRequestor(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestor:"),
      arg,
    );
  }

  static void setShouldReadRawEncryptedData(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReadRawEncryptedData:"),
      arg,
    );
  }

  static void setSignature(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSignature:"),
      arg,
    );
  }

  static void setSize(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSize:"),
      arg,
    );
  }

  static void setStorageGroupingPolicy(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStorageGroupingPolicy:"),
      arg,
    );
  }

  static void setUUID(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUUID:"),
      arg,
    );
  }

  static void setUploadRank(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUploadRank:"),
      arg,
    );
  }

  static void setUploadReceipt(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUploadReceipt:"),
      arg,
    );
  }

  static void setUploadReceiptExpiration(
    Pointer<CKAsset> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setUploadReceiptExpiration:"),
      arg,
    );
  }

  static void setUploaded(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUploaded:"),
      arg,
    );
  }

  static void setWasCached(
    Pointer<CKAsset> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWasCached:"),
      arg,
    );
  }

  static void setWrappedAssetKey(
    Pointer<CKAsset> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWrappedAssetKey:"),
      arg,
    );
  }

  static int shouldReadRawEncryptedData(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReadRawEncryptedData"),
    );
  }

  static Pointer<Void> signature(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signature"),
    );
  }

  static int size(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }

  static int storageGroupingPolicy(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("storageGroupingPolicy"),
    );
  }

  static int uploadRank(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("uploadRank"),
    );
  }

  static Pointer<Void> uploadReceipt(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uploadReceipt"),
    );
  }

  static double uploadReceiptExpiration(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("uploadReceiptExpiration"),
    );
  }

  static int uploaded(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("uploaded"),
    );
  }

  static int wasCached(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wasCached"),
    );
  }

  static Pointer<Void> wrappedAssetKey(
    Pointer<CKAsset> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("wrappedAssetKey"),
    );
  }
}

/// Objective-C class _CKAssetCopyInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAssetCopyInfo extends Struct<CKAssetCopyInfo> {
  factory CKAssetCopyInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAssetCopyInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKAssetCopyInfo").cast<CKAssetCopyInfo>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKAssetCopyInfo> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> assetKey(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetKey"),
    );
  }

  static Pointer<Void> assetURL(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetURL"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileSignature(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileSignature"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> referenceSignature(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceSignature"),
    );
  }

  static Pointer<Void> senderID(
    Pointer<CKAssetCopyInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("senderID"),
    );
  }

  static void setAssetKey(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetKey:"),
      arg,
    );
  }

  static void setAssetURL(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetURL:"),
      arg,
    );
  }

  static void setFileSignature(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileSignature:"),
      arg,
    );
  }

  static void setReferenceSignature(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferenceSignature:"),
      arg,
    );
  }

  static void setSenderID(
    Pointer<CKAssetCopyInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSenderID:"),
      arg,
    );
  }
}

/// Objective-C class _CKAssetDownloadPreauthorization_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAssetDownloadPreauthorization
    extends Struct<CKAssetDownloadPreauthorization> {
  factory CKAssetDownloadPreauthorization._() {
    throw UnimplementedError();
  }
  static Pointer<CKAssetDownloadPreauthorization> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAssetDownloadPreauthorization")
        .cast<CKAssetDownloadPreauthorization>();
  }

  static Pointer<Void> contentResponseBody(
    Pointer<CKAssetDownloadPreauthorization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentResponseBody"),
    );
  }

  static Pointer<Void> contentResponseHeaders(
    Pointer<CKAssetDownloadPreauthorization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentResponseHeaders"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKAssetDownloadPreauthorization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithResponseUUID(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> contentResponseHeaders,
    @required Pointer<Void> contentResponseBody,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithResponseUUID:contentResponseHeaders:contentResponseBody:"),
      arg,
      contentResponseHeaders,
      contentResponseBody,
    );
  }

  static int isEqual(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> responseUUID(
    Pointer<CKAssetDownloadPreauthorization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseUUID"),
    );
  }

  static void setContentResponseBody(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentResponseBody:"),
      arg,
    );
  }

  static void setContentResponseHeaders(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentResponseHeaders:"),
      arg,
    );
  }

  static void setResponseUUID(
    Pointer<CKAssetDownloadPreauthorization> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResponseUUID:"),
      arg,
    );
  }
}

/// Objective-C class _CKAssetReference_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAssetReference extends Struct<CKAssetReference> {
  factory CKAssetReference._() {
    throw UnimplementedError();
  }
  static Pointer<CKAssetReference> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKAssetReference").cast<CKAssetReference>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKAssetReference> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKAssetReference> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int databaseScope(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAssetReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fieldName(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fieldName"),
    );
  }

  static Pointer<Void> fileSignature(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileSignature"),
    );
  }

  static int hash(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAssetReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithExistingRecordID(
    Pointer<CKAssetReference> _self,
    Pointer<Void> arg, {
    @required int databaseScope,
    @required Pointer<Void> fieldName,
    @required Pointer<Void> fileSignature,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithExistingRecordID:databaseScope:fieldName:fileSignature:"),
      arg,
      databaseScope,
      fieldName,
      fileSignature,
    );
  }

  static int isEqual(
    Pointer<CKAssetReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKAssetReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static void setDatabaseScope(
    Pointer<CKAssetReference> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDatabaseScope:"),
      arg,
    );
  }
}

/// Objective-C class _CKAssetRereferenceInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAssetRereferenceInfo extends Struct<CKAssetRereferenceInfo> {
  factory CKAssetRereferenceInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKAssetRereferenceInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAssetRereferenceInfo")
        .cast<CKAssetRereferenceInfo>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKAssetRereferenceInfo> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> assetKey(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetKey"),
    );
  }

  static void clearRecordFetchProperties(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearRecordFetchProperties"),
    );
  }

  static Pointer<Void> contentBaseURL(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentBaseURL"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> destinationFieldName(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("destinationFieldName"),
    );
  }

  static Pointer<Void> downloadToken(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("downloadToken"),
    );
  }

  static int downloadTokenExpiration(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("downloadTokenExpiration"),
    );
  }

  static Pointer<Void> error(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer<Void> initWithSourceZoneID(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSourceZoneID:"),
      arg,
    );
  }

  static Pointer<Void> owner(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("owner"),
    );
  }

  static Pointer<Void> referenceSignature(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceSignature"),
    );
  }

  static Pointer<Void> requestor(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestor"),
    );
  }

  static void setAssetKey(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetKey:"),
      arg,
    );
  }

  static void setContentBaseURL(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentBaseURL:"),
      arg,
    );
  }

  static void setDestinationFieldName(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDestinationFieldName:"),
      arg,
    );
  }

  static void setDownloadToken(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDownloadToken:"),
      arg,
    );
  }

  static void setDownloadTokenExpiration(
    Pointer<CKAssetRereferenceInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDownloadTokenExpiration:"),
      arg,
    );
  }

  static void setError(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setOwner(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwner:"),
      arg,
    );
  }

  static void setReferenceSignature(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferenceSignature:"),
      arg,
    );
  }

  static void setRequestor(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestor:"),
      arg,
    );
  }

  static void setSourceZoneID(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceZoneID:"),
      arg,
    );
  }

  static Pointer<Void> sourceZoneID(
    Pointer<CKAssetRereferenceInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceZoneID"),
    );
  }

  static int validateAndSetRecordFetchPropertiesWithAsset(
    Pointer<CKAssetRereferenceInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> assetReference,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "validateAndSetRecordFetchPropertiesWithAsset:assetReference:"),
      arg,
      assetReference,
    );
  }
}

/// Objective-C class _CKAssetTransferOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAssetTransferOptions extends Struct<CKAssetTransferOptions> {
  factory CKAssetTransferOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKAssetTransferOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAssetTransferOptions")
        .cast<CKAssetTransferOptions>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKAssetTransferOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKAssetTransferOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static void setShouldFetchAssetContentInMemory(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContentInMemory:"),
      arg,
    );
  }

  static void setSparseAware(
    Pointer<CKAssetTransferOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSparseAware:"),
      arg,
    );
  }

  static Pointer<Void> shouldFetchAssetContent(
    Pointer<CKAssetTransferOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }

  static Pointer<Void> shouldFetchAssetContentInMemory(
    Pointer<CKAssetTransferOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shouldFetchAssetContentInMemory"),
    );
  }

  static Pointer<Void> sparseAware(
    Pointer<CKAssetTransferOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sparseAware"),
    );
  }
}

/// Objective-C class _CKAutoBugCaptureMetadata_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKAutoBugCaptureMetadata extends Struct<CKAutoBugCaptureMetadata> {
  factory CKAutoBugCaptureMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<CKAutoBugCaptureMetadata> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKAutoBugCaptureMetadata")
        .cast<CKAutoBugCaptureMetadata>();
  }

  static Pointer<Void> containerID(
    Pointer<CKAutoBugCaptureMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static Pointer<Void> errorPayload(
    Pointer<CKAutoBugCaptureMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorPayload"),
    );
  }

  static Pointer<Void> procName(
    Pointer<CKAutoBugCaptureMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("procName"),
    );
  }

  static int reason(
    Pointer<CKAutoBugCaptureMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("reason"),
    );
  }

  static void setContainerID(
    Pointer<CKAutoBugCaptureMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setErrorPayload(
    Pointer<CKAutoBugCaptureMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorPayload:"),
      arg,
    );
  }

  static void setProcName(
    Pointer<CKAutoBugCaptureMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProcName:"),
      arg,
    );
  }

  static void setReason(
    Pointer<CKAutoBugCaptureMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setReason:"),
      arg,
    );
  }
}

/// Objective-C class _CKBehaviorOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKBehaviorOptions extends Struct<CKBehaviorOptions> {
  factory CKBehaviorOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKBehaviorOptions> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKBehaviorOptions").cast<CKBehaviorOptions>();
  }

  static int CFNetworkLogging(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CFNetworkLogging"),
    );
  }

  static Pointer<Utf8> CKCtlPrompt(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCtlPrompt"),
    );
  }

  static int CKTimeLogging(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKTimeLogging"),
    );
  }

  static int CKTimeLoggingDetailed(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKTimeLoggingDetailed"),
    );
  }

  static double PCSCacheMinTime(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("PCSCacheMinTime"),
    );
  }

  static int PCSCacheSize(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("PCSCacheSize"),
    );
  }

  static int PCSRetryCount(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("PCSRetryCount"),
    );
  }

  static int allowExpiredDNSBehavior(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowExpiredDNSBehavior"),
    );
  }

  static int assetEvictionGracePeriodOnHighWatermarkWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector(
          "assetEvictionGracePeriodOnHighWatermarkWithDefaultValue:"),
      arg,
    );
  }

  static int assetEvictionGracePeriodWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("assetEvictionGracePeriodWithDefaultValue:"),
      arg,
    );
  }

  static Pointer<Void> automatedDeviceGroup(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("automatedDeviceGroup"),
    );
  }

  static Pointer<Void> automatedDeviceGroupDefaults(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("automatedDeviceGroupDefaults"),
    );
  }

  static int backgroundSessionConnectionPoolLimitWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_Int32(
      _self,
      _objc
          .getSelector("backgroundSessionConnectionPoolLimitWithDefaultValue:"),
      arg,
    );
  }

  static Pointer<Void> buildVersion(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("buildVersion"),
    );
  }

  static Pointer<Void> cachedPrefs(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedPrefs"),
    );
  }

  static Pointer<Void> cachedPrefsQueue(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedPrefsQueue"),
    );
  }

  static int cachedRecordExpiryTime(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("cachedRecordExpiryTime"),
    );
  }

  static int ckToken(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("ckToken"),
    );
  }

  static int clientThrottleQueueWidth(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("clientThrottleQueueWidth"),
    );
  }

  static int compressRequests(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("compressRequests"),
    );
  }

  static Pointer<Void> configBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configBaseURL"),
    );
  }

  static Pointer<Void> containerIDToForceFatalManateeZoneDecryptionFailure(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIDToForceFatalManateeZoneDecryptionFailure"),
    );
  }

  static Pointer<Void> customCloudDBBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customCloudDBBaseURL"),
    );
  }

  static Pointer<Void> customCodeServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customCodeServiceBaseURL"),
    );
  }

  static Pointer<Void> customDeviceServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customDeviceServiceBaseURL"),
    );
  }

  static Pointer<Void> customMetricsServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customMetricsServiceBaseURL"),
    );
  }

  static Pointer<Void> customShareServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customShareServiceBaseURL"),
    );
  }

  static void dealloc(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int defaultRetryAfter(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("defaultRetryAfter"),
    );
  }

  static int didReadAutomatedDeviceGroup(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("didReadAutomatedDeviceGroup"),
    );
  }

  static int disableCaching(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("disableCaching"),
    );
  }

  static int enableMMCSMetricsWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("enableMMCSMetricsWithDefaultValue:"),
      arg,
    );
  }

  static int enableMescal(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("enableMescal"),
    );
  }

  static int evictRecentAssets(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("evictRecentAssets"),
    );
  }

  static int flowControlBudget(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("flowControlBudget"),
    );
  }

  static int flowControlBudgetOverride(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("flowControlBudgetOverride"),
    );
  }

  static double flowControlRegeneration(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("flowControlRegeneration"),
    );
  }

  static double flowControlRegenerationOverride(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("flowControlRegenerationOverride"),
    );
  }

  static int highPriorityURLDelegates(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("highPriorityURLDelegates"),
    );
  }

  static int isAppleInternalInstall(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAppleInternalInstall"),
    );
  }

  static int logTraffic(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("logTraffic"),
    );
  }

  static int logTrafficToTextFile(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("logTrafficToTextFile"),
    );
  }

  static int longlivedOperationMaxRetryCount(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("longlivedOperationMaxRetryCount"),
    );
  }

  static int longlivedOperationThrottlingRetryCount(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("longlivedOperationThrottlingRetryCount"),
    );
  }

  static int maxBatchSize(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maxBatchSize"),
    );
  }

  static int maxPackageDownloadsPerBatchWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("maxPackageDownloadsPerBatchWithDefaultValue:"),
      arg,
    );
  }

  static int maxPackageUploadsPerBatchWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("maxPackageUploadsPerBatchWithDefaultValue:"),
      arg,
    );
  }

  static double maxRecentProxyAge(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maxRecentProxyAge"),
    );
  }

  static double maxTimeIntervalSinceLastZoneishPCSKeyRoll(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maxTimeIntervalSinceLastZoneishPCSKeyRoll"),
    );
  }

  static double maximumQueuedFetchWaitTime(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maximumQueuedFetchWaitTime"),
    );
  }

  static double maximumThrottleSeconds(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maximumThrottleSeconds"),
    );
  }

  static double maximumWaitAfterFetchRequest(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maximumWaitAfterFetchRequest"),
    );
  }

  static int mcToken(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("mcToken"),
    );
  }

  static double minTTRPromptInterval(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("minTTRPromptInterval"),
    );
  }

  static void observeValueForKeyPath(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofObject,
    @required Pointer<Void> change,
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeValueForKeyPath:ofObject:change:context:"),
      arg,
      ofObject,
      change,
      context,
    );
  }

  static double operationTimeout(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("operationTimeout"),
    );
  }

  static int optimisticPCS(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("optimisticPCS"),
    );
  }

  static Pointer<Void> otherAccountsWithDefaultValue(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("otherAccountsWithDefaultValue:"),
      arg,
    );
  }

  static double packageGCGracePeriod(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("packageGCGracePeriod"),
    );
  }

  static double packageGCPeriod(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("packageGCPeriod"),
    );
  }

  static int pipelineFetchAllChangesRequests(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("pipelineFetchAllChangesRequests"),
    );
  }

  static Pointer<Void> primaryAccountEmailOverride(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("primaryAccountEmailOverride"),
    );
  }

  static Pointer<Void> primaryAccountPasswordOverride(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("primaryAccountPasswordOverride"),
    );
  }

  static Pointer<Void> productName(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("productName"),
    );
  }

  static Pointer<Void> productVersion(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("productVersion"),
    );
  }

  static double publicIdentitiesExpirationTimeout(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("publicIdentitiesExpirationTimeout"),
    );
  }

  static int recentProxiesToSave(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("recentProxiesToSave"),
    );
  }

  static int recordCacheSizeLimit(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("recordCacheSizeLimit"),
    );
  }

  static Pointer<Void> recordNamesForFakingDecryptionFailure(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordNamesForFakingDecryptionFailure"),
    );
  }

  static int rollRecordMasterKeysOnUnshare(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("rollRecordMasterKeysOnUnshare"),
    );
  }

  static int rollRecordPCSMasterKeys(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("rollRecordPCSMasterKeys"),
    );
  }

  static int rollZonePCSIdentities(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("rollZonePCSIdentities"),
    );
  }

  static int sandboxCloudD(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("sandboxCloudD"),
    );
  }

  static int savedErrorCount(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("savedErrorCount"),
    );
  }

  static int sendDebugHeader(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("sendDebugHeader"),
    );
  }

  static void setAutomatedDeviceGroup(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAutomatedDeviceGroup:"),
      arg,
    );
  }

  static void setAutomatedDeviceGroupDefaults(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAutomatedDeviceGroupDefaults:"),
      arg,
    );
  }

  static void setBuildVersion(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBuildVersion:"),
      arg,
    );
  }

  static void setCFNetworkLogging(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCFNetworkLogging:"),
      arg,
    );
  }

  static void setCKCtlPrompt(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCKCtlPrompt:"),
      arg,
    );
  }

  static void setCKTimeLogging(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCKTimeLogging:"),
      arg,
    );
  }

  static void setCKTimeLoggingDetailed(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCKTimeLoggingDetailed:"),
      arg,
    );
  }

  static void setCachedPrefs(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedPrefs:"),
      arg,
    );
  }

  static void setCachedPrefsQueue(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedPrefsQueue:"),
      arg,
    );
  }

  static void setCachedRecordExpiryTime(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setCachedRecordExpiryTime:"),
      arg,
    );
  }

  static void setCkToken(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setCkToken:"),
      arg,
    );
  }

  static void setCompressRequests(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCompressRequests:"),
      arg,
    );
  }

  static void setConfigBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfigBaseURL:"),
      arg,
    );
  }

  static void setContainerIDToForceFatalManateeZoneDecryptionFailure(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "setContainerIDToForceFatalManateeZoneDecryptionFailure:"),
      arg,
    );
  }

  static void setCustomCloudDBBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomCloudDBBaseURL:"),
      arg,
    );
  }

  static void setCustomCodeServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomCodeServiceBaseURL:"),
      arg,
    );
  }

  static void setCustomDeviceServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomDeviceServiceBaseURL:"),
      arg,
    );
  }

  static void setCustomMetricsServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomMetricsServiceBaseURL:"),
      arg,
    );
  }

  static void setCustomShareServiceBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCustomShareServiceBaseURL:"),
      arg,
    );
  }

  static void setDidReadAutomatedDeviceGroup(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDidReadAutomatedDeviceGroup:"),
      arg,
    );
  }

  static void setDisableCaching(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDisableCaching:"),
      arg,
    );
  }

  static void setEnableMescal(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEnableMescal:"),
      arg,
    );
  }

  static void setLogTraffic(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLogTraffic:"),
      arg,
    );
  }

  static void setLogTrafficToTextFile(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLogTrafficToTextFile:"),
      arg,
    );
  }

  static void setMcToken(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setMcToken:"),
      arg,
    );
  }

  static void setModTimeInAssetCacheEviction(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setModTimeInAssetCacheEviction:"),
      arg,
    );
  }

  static void setOperationTimeout(
    Pointer<CKBehaviorOptions> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setOperationTimeout:"),
      arg,
    );
  }

  static void setOptimisticPCS(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOptimisticPCS:"),
      arg,
    );
  }

  static void setPrimaryAccountEmailOverride(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrimaryAccountEmailOverride:"),
      arg,
    );
  }

  static void setPrimaryAccountPasswordOverride(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrimaryAccountPasswordOverride:"),
      arg,
    );
  }

  static void setProductName(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProductName:"),
      arg,
    );
  }

  static void setProductVersion(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProductVersion:"),
      arg,
    );
  }

  static void setRollRecordMasterKeysOnUnshare(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRollRecordMasterKeysOnUnshare:"),
      arg,
    );
  }

  static void setRollRecordPCSMasterKeys(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRollRecordPCSMasterKeys:"),
      arg,
    );
  }

  static void setRollZonePCSIdentities(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRollZonePCSIdentities:"),
      arg,
    );
  }

  static void setSendDebugHeader(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSendDebugHeader:"),
      arg,
    );
  }

  static void setSetupBaseURL(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSetupBaseURL:"),
      arg,
    );
  }

  static void setShouldProfileSQL(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldProfileSQL:"),
      arg,
    );
  }

  static void setSqlBatchCount(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSqlBatchCount:"),
      arg,
    );
  }

  static void setSqlBatchTime(
    Pointer<CKBehaviorOptions> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setSqlBatchTime:"),
      arg,
    );
  }

  static void setTestRunIDHeader(
    Pointer<CKBehaviorOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTestRunIDHeader:"),
      arg,
    );
  }

  static void setTrafficLogMaximumDataSize(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setTrafficLogMaximumDataSize:"),
      arg,
    );
  }

  static void setUseEncryption(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseEncryption:"),
      arg,
    );
  }

  static void setUseEnhancedPCSEncryptionContext(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseEnhancedPCSEncryptionContext:"),
      arg,
    );
  }

  static void setUsePreauth(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsePreauth:"),
      arg,
    );
  }

  static void setUseStingray(
    Pointer<CKBehaviorOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseStingray:"),
      arg,
    );
  }

  static Pointer<Void> setupBaseURL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setupBaseURL"),
    );
  }

  static double shareAcceptorRetrievingDialogDelay(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("shareAcceptorRetrievingDialogDelay"),
    );
  }

  static double shareAcceptorRetrievingDialogMinPeriod(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("shareAcceptorRetrievingDialogMinPeriod"),
    );
  }

  static int shouldDecryptRecordsBeforeSave(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldDecryptRecordsBeforeSave"),
    );
  }

  static int shouldProfileSQL(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldProfileSQL"),
    );
  }

  static int sqlBatchCount(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("sqlBatchCount"),
    );
  }

  static double sqlBatchTime(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("sqlBatchTime"),
    );
  }

  static Pointer<Void> testRunIDHeader(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("testRunIDHeader"),
    );
  }

  static int trafficLogMaximumDataSize(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("trafficLogMaximumDataSize"),
    );
  }

  static int trafficLogQueueWidth(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("trafficLogQueueWidth"),
    );
  }

  static int useEncryption(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useEncryption"),
    );
  }

  static int useEnhancedPCSEncryptionContext(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useEnhancedPCSEncryptionContext"),
    );
  }

  static int useModTimeInAssetCacheEviction(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useModTimeInAssetCacheEviction"),
    );
  }

  static int usePreauth(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usePreauth"),
    );
  }

  static int useStingray(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useStingray"),
    );
  }

  static Pointer<Void> vettedEmailsTestFormat(
    Pointer<CKBehaviorOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettedEmailsTestFormat"),
    );
  }
}

/// Objective-C class _CKBlockingAsyncQueue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKBlockingAsyncQueue extends Struct<CKBlockingAsyncQueue> {
  factory CKBlockingAsyncQueue._() {
    throw UnimplementedError();
  }
  static Pointer<CKBlockingAsyncQueue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKBlockingAsyncQueue").cast<CKBlockingAsyncQueue>();
  }

  static Pointer<Void> initWithWidth$qosClass$(
    Pointer<CKBlockingAsyncQueue> _self,
    int arg, {
    @required int qosClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithWidth:qosClass:"),
      arg,
      qosClass,
    );
  }

  static Pointer<Void> initWithWidth$(
    Pointer<CKBlockingAsyncQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithWidth:"),
      arg,
    );
  }

  static void performBarrierBlock(
    Pointer<CKBlockingAsyncQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performBarrierBlock:"),
      arg,
    );
  }

  static void performBlock(
    Pointer<CKBlockingAsyncQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performBlock:"),
      arg,
    );
  }

  static int qosClass(
    Pointer<CKBlockingAsyncQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("qosClass"),
    );
  }

  static Pointer<Void> queue(
    Pointer<CKBlockingAsyncQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queue"),
    );
  }

  static Pointer<Void> queueSema(
    Pointer<CKBlockingAsyncQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queueSema"),
    );
  }

  static void setQosClass(
    Pointer<CKBlockingAsyncQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setQosClass:"),
      arg,
    );
  }

  static void setQueue(
    Pointer<CKBlockingAsyncQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueue:"),
      arg,
    );
  }

  static void setQueueSema(
    Pointer<CKBlockingAsyncQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueueSema:"),
      arg,
    );
  }

  static void setWidth(
    Pointer<CKBlockingAsyncQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setWidth:"),
      arg,
    );
  }

  static int width(
    Pointer<CKBlockingAsyncQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("width"),
    );
  }
}

/// Objective-C class _CKCodeFunctionInvokeOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCodeFunctionInvokeOperation
    extends Struct<CKCodeFunctionInvokeOperation> {
  factory CKCodeFunctionInvokeOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKCodeFunctionInvokeOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCodeFunctionInvokeOperation")
        .cast<CKCodeFunctionInvokeOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> functionInvokeCompletionBlock(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("functionInvokeCompletionBlock"),
    );
  }

  static Pointer<Void> functionName(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("functionName"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void>
      initWithServiceName$functionName$serializedParameters$local$(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> functionName,
    @required Pointer<Void> serializedParameters,
    @required int local,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithServiceName:functionName:serializedParameters:local:"),
      arg,
      functionName,
      serializedParameters,
      local,
    );
  }

  static Pointer<Void> initWithServiceName$functionName$serializedParameters$(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> functionName,
    @required Pointer<Void> serializedParameters,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithServiceName:functionName:serializedParameters:"),
      arg,
      functionName,
      serializedParameters,
    );
  }

  static int local(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("local"),
    );
  }

  static Pointer<Void> perRecordProgressBlock(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordProgressBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> responseError(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseError"),
    );
  }

  static Pointer<Void> serializedRequest(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serializedRequest"),
    );
  }

  static Pointer<Void> serializedResponse(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serializedResponse"),
    );
  }

  static Pointer<Void> serviceName(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serviceName"),
    );
  }

  static void setFunctionInvokeCompletionBlock(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFunctionInvokeCompletionBlock:"),
      arg,
    );
  }

  static void setFunctionName(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFunctionName:"),
      arg,
    );
  }

  static void setLocal(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLocal:"),
      arg,
    );
  }

  static void setPerRecordProgressBlock(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordProgressBlock:"),
      arg,
    );
  }

  static void setResponseError(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResponseError:"),
      arg,
    );
  }

  static void setSerializedRequest(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSerializedRequest:"),
      arg,
    );
  }

  static void setSerializedResponse(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSerializedResponse:"),
      arg,
    );
  }

  static void setServiceName(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServiceName:"),
      arg,
    );
  }

  static void setShouldFetchAssetContentInMemory(
    Pointer<CKCodeFunctionInvokeOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContentInMemory:"),
      arg,
    );
  }

  static int shouldFetchAssetContentInMemory(
    Pointer<CKCodeFunctionInvokeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContentInMemory"),
    );
  }
}

/// Objective-C class _CKCodeFunctionInvokeOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCodeFunctionInvokeOperationInfo
    extends Struct<CKCodeFunctionInvokeOperationInfo> {
  factory CKCodeFunctionInvokeOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKCodeFunctionInvokeOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCodeFunctionInvokeOperationInfo")
        .cast<CKCodeFunctionInvokeOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> functionName(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("functionName"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int local(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("local"),
    );
  }

  static Pointer<Void> requestLocalSerializations(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestLocalSerializations"),
    );
  }

  static Pointer<Void> serviceName(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serviceName"),
    );
  }

  static void setFunctionName(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFunctionName:"),
      arg,
    );
  }

  static void setLocal(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLocal:"),
      arg,
    );
  }

  static void setRequestLocalSerializations(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestLocalSerializations:"),
      arg,
    );
  }

  static void setServiceName(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServiceName:"),
      arg,
    );
  }

  static void setShouldFetchAssetContentInMemory(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContentInMemory:"),
      arg,
    );
  }

  static int shouldFetchAssetContentInMemory(
    Pointer<CKCodeFunctionInvokeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContentInMemory"),
    );
  }
}

/// Objective-C class _CKComparisonModifierValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKComparisonModifierValidator
    extends Struct<CKComparisonModifierValidator> {
  factory CKComparisonModifierValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKComparisonModifierValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKComparisonModifierValidator")
        .cast<CKComparisonModifierValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKComparisonModifierValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithModifier(
    Pointer<CKComparisonModifierValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithModifier:"),
      arg,
    );
  }

  static int modifier(
    Pointer<CKComparisonModifierValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("modifier"),
    );
  }

  static void setModifier(
    Pointer<CKComparisonModifierValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setModifier:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKComparisonModifierValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKComparisonOperatorValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKComparisonOperatorValidator
    extends Struct<CKComparisonOperatorValidator> {
  factory CKComparisonOperatorValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKComparisonOperatorValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKComparisonOperatorValidator")
        .cast<CKComparisonOperatorValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKComparisonOperatorValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithOperatorType(
    Pointer<CKComparisonOperatorValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:"),
      arg,
    );
  }

  static int operatorType(
    Pointer<CKComparisonOperatorValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("operatorType"),
    );
  }

  static void setOperatorType(
    Pointer<CKComparisonOperatorValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOperatorType:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKComparisonOperatorValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKComparisonOptionsValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKComparisonOptionsValidator
    extends Struct<CKComparisonOptionsValidator> {
  factory CKComparisonOptionsValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKComparisonOptionsValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKComparisonOptionsValidator")
        .cast<CKComparisonOptionsValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKComparisonOptionsValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<CKComparisonOptionsValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static int options(
    Pointer<CKComparisonOptionsValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static void setOptions(
    Pointer<CKComparisonOptionsValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOptions:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKComparisonOptionsValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKComparisonPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKComparisonPredicateValidator
    extends Struct<CKComparisonPredicateValidator> {
  factory CKComparisonPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKComparisonPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKComparisonPredicateValidator")
        .cast<CKComparisonPredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> leftExpressionValidator(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftExpressionValidator"),
    );
  }

  static Pointer<Void> modifierValidator(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifierValidator"),
    );
  }

  static Pointer<Void> operatorValidator(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operatorValidator"),
    );
  }

  static Pointer<Void> optionsValidator(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("optionsValidator"),
    );
  }

  static Pointer<Void> rightExpressionValidator(
    Pointer<CKComparisonPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightExpressionValidator"),
    );
  }

  static void setLeftExpressionValidator(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLeftExpressionValidator:"),
      arg,
    );
  }

  static void setModifierValidator(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifierValidator:"),
      arg,
    );
  }

  static void setOperatorValidator(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperatorValidator:"),
      arg,
    );
  }

  static void setOptionsValidator(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOptionsValidator:"),
      arg,
    );
  }

  static void setRightExpressionValidator(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRightExpressionValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKComparisonPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKCompleteParticipantVettingOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCompleteParticipantVettingOperation
    extends Struct<CKCompleteParticipantVettingOperation> {
  factory CKCompleteParticipantVettingOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKCompleteParticipantVettingOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCompleteParticipantVettingOperation")
        .cast<CKCompleteParticipantVettingOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> baseToken(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseToken"),
    );
  }

  static Pointer<Void> completeParticipantVettingCompletionBlock(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completeParticipantVettingCompletionBlock"),
    );
  }

  static Pointer<Void> displayedHostname(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayedHostname"),
    );
  }

  static Pointer<Void> encryptedKey(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedKey"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithVettingToken(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> vettingRecord,
    @required Pointer<Void> displayedHostname,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("initWithVettingToken:vettingRecord:displayedHostname:"),
      arg,
      vettingRecord,
      displayedHostname,
    );
  }

  static void performCKOperation(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> reconstructedShareURL(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reconstructedShareURL"),
    );
  }

  static Pointer<Void> routingKey(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routingKey"),
    );
  }

  static void setBaseToken(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseToken:"),
      arg,
    );
  }

  static void setCompleteParticipantVettingCompletionBlock(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompleteParticipantVettingCompletionBlock:"),
      arg,
    );
  }

  static void setDisplayedHostname(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDisplayedHostname:"),
      arg,
    );
  }

  static void setEncryptedKey(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedKey:"),
      arg,
    );
  }

  static void setReconstructedShareURL(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReconstructedShareURL:"),
      arg,
    );
  }

  static void setRoutingKey(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoutingKey:"),
      arg,
    );
  }

  static void setShareMetadata(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadata:"),
      arg,
    );
  }

  static void setVerificationError(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVerificationError:"),
      arg,
    );
  }

  static void setVettingEmail(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingEmail:"),
      arg,
    );
  }

  static void setVettingPhone(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingPhone:"),
      arg,
    );
  }

  static void setVettingToken(
    Pointer<CKCompleteParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingToken:"),
      arg,
    );
  }

  static Pointer<Void> shareMetadata(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadata"),
    );
  }

  static Pointer<Void> verificationError(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("verificationError"),
    );
  }

  static Pointer<Void> vettingEmail(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingEmail"),
    );
  }

  static Pointer<Void> vettingPhone(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingPhone"),
    );
  }

  static Pointer<Void> vettingToken(
    Pointer<CKCompleteParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingToken"),
    );
  }
}

/// Objective-C class _CKCompleteParticipantVettingOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCompleteParticipantVettingOperationInfo
    extends Struct<CKCompleteParticipantVettingOperationInfo> {
  factory CKCompleteParticipantVettingOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKCompleteParticipantVettingOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCompleteParticipantVettingOperationInfo")
        .cast<CKCompleteParticipantVettingOperationInfo>();
  }

  static Pointer<Void> baseToken(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseToken"),
    );
  }

  static Pointer<Void> displayedHostname(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayedHostname"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedKey(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedKey"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> routingKey(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routingKey"),
    );
  }

  static void setBaseToken(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseToken:"),
      arg,
    );
  }

  static void setDisplayedHostname(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDisplayedHostname:"),
      arg,
    );
  }

  static void setEncryptedKey(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedKey:"),
      arg,
    );
  }

  static void setRoutingKey(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoutingKey:"),
      arg,
    );
  }

  static void setVettingEmail(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingEmail:"),
      arg,
    );
  }

  static void setVettingPhone(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingPhone:"),
      arg,
    );
  }

  static void setVettingToken(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVettingToken:"),
      arg,
    );
  }

  static Pointer<Void> vettingEmail(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingEmail"),
    );
  }

  static Pointer<Void> vettingPhone(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingPhone"),
    );
  }

  static Pointer<Void> vettingToken(
    Pointer<CKCompleteParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("vettingToken"),
    );
  }
}

/// Objective-C class _CKCompoundSubpredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCompoundSubpredicateValidator
    extends Struct<CKCompoundSubpredicateValidator> {
  factory CKCompoundSubpredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKCompoundSubpredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCompoundSubpredicateValidator")
        .cast<CKCompoundSubpredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKCompoundSubpredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidator(
    Pointer<CKCompoundSubpredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidator:"),
      arg,
    );
  }

  static void setValidator(
    Pointer<CKCompoundSubpredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKCompoundSubpredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validator(
    Pointer<CKCompoundSubpredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validator"),
    );
  }
}

/// Objective-C class _CKCompoundTypePredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCompoundTypePredicateValidator
    extends Struct<CKCompoundTypePredicateValidator> {
  factory CKCompoundTypePredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKCompoundTypePredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCompoundTypePredicateValidator")
        .cast<CKCompoundTypePredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKCompoundTypePredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<CKCompoundTypePredicateValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithType:"),
      arg,
    );
  }

  static void setType(
    Pointer<CKCompoundTypePredicateValidator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static int type(
    Pointer<CKCompoundTypePredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static int validate(
    Pointer<CKCompoundTypePredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKConstantValueExpressionValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKConstantValueExpressionValidator
    extends Struct<CKConstantValueExpressionValidator> {
  factory CKConstantValueExpressionValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKConstantValueExpressionValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKConstantValueExpressionValidator")
        .cast<CKConstantValueExpressionValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKConstantValueExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidator(
    Pointer<CKConstantValueExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidator:"),
      arg,
    );
  }

  static void setValidator(
    Pointer<CKConstantValueExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKConstantValueExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validator(
    Pointer<CKConstantValueExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validator"),
    );
  }
}

/// Objective-C class _CKContactsSupport_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContactsSupport extends Struct<CKContactsSupport> {
  factory CKContactsSupport._() {
    throw UnimplementedError();
  }
  static Pointer<CKContactsSupport> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContactsSupport").cast<CKContactsSupport>();
  }

  static Pointer<Void> CKCNContact(
    Pointer<CKContactsSupport> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCNContact"),
    );
  }

  static Pointer<Void> CKCNContactFetchRequest(
    Pointer<CKContactsSupport> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCNContactFetchRequest"),
    );
  }

  static Pointer<Void> CKCNContactStore(
    Pointer<CKContactsSupport> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCNContactStore"),
    );
  }

  static Pointer<Void> CKCNMutableContact(
    Pointer<CKContactsSupport> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCNMutableContact"),
    );
  }

  static Pointer<Void> CKCNPhoneNumber(
    Pointer<CKContactsSupport> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKCNPhoneNumber"),
    );
  }
}

/// Objective-C class _CKContainer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContainer extends Struct<CKContainer> {
  factory CKContainer._() {
    throw UnimplementedError();
  }
  static Pointer<CKContainer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContainer").cast<CKContainer>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> CKStatusReportArray(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKStatusReportArray"),
    );
  }

  static void acceptShareMetadata(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("acceptShareMetadata:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static int accountChangeToken(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("accountChangeToken"),
    );
  }

  static void accountChangedWithID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("accountChangedWithID:"),
      arg,
    );
  }

  static Pointer<Void> accountInfoOverride(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accountInfoOverride"),
    );
  }

  static void accountInfoWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("accountInfoWithCompletionHandler:"),
      arg,
    );
  }

  static void accountStatusWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("accountStatusWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> accountStore(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accountStore"),
    );
  }

  static void accountsDidGrantAccessToBundleID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "accountsDidGrantAccessToBundleID:containerIdentifiers:"),
      arg,
      containerIdentifiers,
    );
  }

  static void accountsDidRevokeAccessToBundleID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerIdentifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "accountsDidRevokeAccessToBundleID:containerIdentifiers:"),
      arg,
      containerIdentifiers,
    );
  }

  static void accountsWillDeleteAccount(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("accountsWillDeleteAccount:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void addOperation(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addOperation:"),
      arg,
    );
  }

  static Pointer<Void> assetsByUUID(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetsByUUID"),
    );
  }

  static Pointer<Void> backgroundThrottlingOperationQueue(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("backgroundThrottlingOperationQueue"),
    );
  }

  static Pointer<Void> cachedSetupInfo(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cachedSetupInfo"),
    );
  }

  static Pointer<Void> callbackManager(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("callbackManager"),
    );
  }

  static int captureResponseHTTPHeaders(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("captureResponseHTTPHeaders"),
    );
  }

  static void clearContextFromMetadataCache(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearContextFromMetadataCache"),
    );
  }

  static void clearPCSCachesForKnownContextsWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearPCSCachesForKnownContextsWithCompletionHandler:"),
      arg,
    );
  }

  static void clearPILSCacheForLookupInfos(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearPILSCacheForLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> connectionWithError(
    Pointer<CKContainer> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("connectionWithError:"),
      arg,
    );
  }

  static void consumeSandboxExtensions(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("consumeSandboxExtensions:reply:"),
      arg,
      reply,
    );
  }

  static Pointer<Void> containerID(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static Pointer<Void> containerIdentifier(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static Pointer<Void> containerScopedUserID(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerScopedUserID"),
    );
  }

  static Pointer<Void> convenienceOperationQueue(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("convenienceOperationQueue"),
    );
  }

  static Pointer<Void> daemonWithErrorHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("daemonWithErrorHandler:"),
      arg,
    );
  }

  static Pointer<Void> databaseWithDatabaseScope(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("databaseWithDatabaseScope:"),
      arg,
    );
  }

  static void dataclassEnabled(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("dataclassEnabled:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void dealloc(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decryptPersonalInfoOnShare(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decryptPersonalInfoOnShare:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> description(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void discoverAllContactUserInfosWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("discoverAllContactUserInfosWithCompletionHandler:"),
      arg,
    );
  }

  static void discoverAllIdentitiesWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("discoverAllIdentitiesWithCompletionHandler:"),
      arg,
    );
  }

  static void discoverUserIdentityWithEmailAddress(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "discoverUserIdentityWithEmailAddress:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void discoverUserIdentityWithPhoneNumber(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "discoverUserIdentityWithPhoneNumber:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void discoverUserIdentityWithUserRecordID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "discoverUserIdentityWithUserRecordID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void discoverUserInfoWithEmailAddress(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("discoverUserInfoWithEmailAddress:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void discoverUserInfoWithUserRecordID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("discoverUserInfoWithUserRecordID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void dumpAllClientsStatusReportToFileHandle(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "dumpAllClientsStatusReportToFileHandle:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void dumpDaemonStatusReport(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dumpDaemonStatusReport"),
    );
  }

  static void dumpDaemonStatusReportToFileHandle(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc
          .getSelector("dumpDaemonStatusReportToFileHandle:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> fakeEntitlements(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fakeEntitlements"),
    );
  }

  static void fetchAllLongLivedOperationIDsWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchAllLongLivedOperationIDsWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchCurrentDeviceIDWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchCurrentDeviceIDWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchCurrentUserBoundaryKeyWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchCurrentUserBoundaryKeyWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchFullNameAndFormattedUsernameOfAccountWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchFullNameAndFormattedUsernameOfAccountWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchFullNameAndPrimaryEmailOnAccountWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchFullNameAndPrimaryEmailOnAccountWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchLongLivedOperationWithID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchLongLivedOperationWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchLongLivedOperationsWithIDs(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchLongLivedOperationsWithIDs:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchOrgAdminUserRecordIDWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchOrgAdminUserRecordIDWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchServerEnvironment(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchServerEnvironment:"),
      arg,
    );
  }

  static void fetchShareMetadataWithURL(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchShareMetadataWithURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchShareParticipantWithEmailAddress(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchShareParticipantWithEmailAddress:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchShareParticipantWithLookupInfo(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchShareParticipantWithLookupInfo:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchShareParticipantWithPhoneNumber(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchShareParticipantWithPhoneNumber:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchShareParticipantWithUserRecordID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "fetchShareParticipantWithUserRecordID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchUserRecordIDWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchUserRecordIDWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> findTrackedAssetByUUID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("findTrackedAssetByUUID:"),
      arg,
    );
  }

  static Pointer<Void> flowControlManager(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("flowControlManager"),
    );
  }

  static void flushOperationMetricsToPowerLog(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushOperationMetricsToPowerLog"),
    );
  }

  static void getFileMetadataWithFileHandle(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> openInfo,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getFileMetadataWithFileHandle:openInfo:reply:"),
      arg,
      openInfo,
      reply,
    );
  }

  static void getNewWebSharingIdentity(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getNewWebSharingIdentity:"),
      arg,
    );
  }

  static void getNewWebSharingIdentityDataWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getNewWebSharingIdentityDataWithCompletionHandler:"),
      arg,
    );
  }

  static void handleOperationCheckpoint(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCheckpoint:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationCompletion(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCompletion:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationProgress$forOperationWithID$reply$(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationProgress:forOperationWithID:reply:"),
      arg,
      forOperationWithID,
      reply,
    );
  }

  static void handleOperationProgress$forOperationWithID$(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationProgress:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationStatistics(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationStatistics:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static int hasCachedSetupInfo(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCachedSetupInfo"),
    );
  }

  static int hasValidConnection(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValidConnection"),
    );
  }

  static int holdAllOperations(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("holdAllOperations"),
    );
  }

  static int identityUpdateToken(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("identityUpdateToken"),
    );
  }

  static Pointer<Void> initWithContainerID$accountInfoOverride$(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> accountInfoOverride,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerID:accountInfoOverride:"),
      arg,
      accountInfoOverride,
    );
  }

  static Pointer<Void> initWithContainerID$(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerID:"),
      arg,
    );
  }

  static Pointer<Void> initWithContainerID$options$(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerID:options:"),
      arg,
      options,
    );
  }

  static int killSwitchToken(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("killSwitchToken"),
    );
  }

  static int masqueradeAsThirdPartyApp(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("masqueradeAsThirdPartyApp"),
    );
  }

  static void openFileWithOpenInfo(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("openFileWithOpenInfo:reply:"),
      arg,
      reply,
    );
  }

  static Pointer<Void> options(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer<Void> orgAdminUserID(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("orgAdminUserID"),
    );
  }

  static Pointer<Void> organizationCloudDatabase(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("organizationCloudDatabase"),
    );
  }

  static Pointer<Void> privateCloudDatabase(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateCloudDatabase"),
    );
  }

  static Pointer<Void> publicCloudDatabase(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicCloudDatabase"),
    );
  }

  static void requestApplicationPermission(
    Pointer<CKContainer> _self,
    int arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("requestApplicationPermission:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void resetAllApplicationPermissionsWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetAllApplicationPermissionsWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> sandboxExtensionHandles(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sandboxExtensionHandles"),
    );
  }

  static void serverPreferredPushEnvironmentWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("serverPreferredPushEnvironmentWithCompletionHandler:"),
      arg,
    );
  }

  static void setAccountChangeToken(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setAccountChangeToken:"),
      arg,
    );
  }

  static void setAccountInfoOverride(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccountInfoOverride:"),
      arg,
    );
  }

  static void setAccountStore(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccountStore:"),
      arg,
    );
  }

  static void setApplicationPermission(
    Pointer<CKContainer> _self,
    int arg, {
    @required int enabled,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int8_p_returns_void(
      _self,
      _objc.getSelector("setApplicationPermission:enabled:completionHandler:"),
      arg,
      enabled,
      completionHandler,
    );
  }

  static void setAssetsByUUID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetsByUUID:"),
      arg,
    );
  }

  static void setBackgroundThrottlingOperationQueue(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBackgroundThrottlingOperationQueue:"),
      arg,
    );
  }

  static void setCachedSetupInfo(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCachedSetupInfo:"),
      arg,
    );
  }

  static void setCallbackManager(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCallbackManager:"),
      arg,
    );
  }

  static void setCaptureResponseHTTPHeaders(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCaptureResponseHTTPHeaders:"),
      arg,
    );
  }

  static void setContainerID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setContainerScopedUserID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerScopedUserID:"),
      arg,
    );
  }

  static void setConvenienceOperationQueue(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConvenienceOperationQueue:"),
      arg,
    );
  }

  static void setFakeEntitlement(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFakeEntitlement:forKey:"),
      arg,
      forKey,
    );
  }

  static void setFakeEntitlements(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFakeEntitlements:"),
      arg,
    );
  }

  static void setFakeError(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forNextRequestOfClassName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFakeError:forNextRequestOfClassName:"),
      arg,
      forNextRequestOfClassName,
    );
  }

  static void setFakeResponseOperationResult(
    Pointer<CKContainer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forNextRequestOfClassName,
    @required Pointer<Void> forItemID,
    @required int withLifetime,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector(
          "setFakeResponseOperationResult:forNextRequestOfClassName:forItemID:withLifetime:"),
      arg,
      forNextRequestOfClassName,
      forItemID,
      withLifetime,
    );
  }

  static void setFlowControlManager(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFlowControlManager:"),
      arg,
    );
  }

  static void setHasCachedSetupInfo(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasCachedSetupInfo:"),
      arg,
    );
  }

  static void setHasValidConnection(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasValidConnection:"),
      arg,
    );
  }

  static void setHoldAllOperations(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHoldAllOperations:"),
      arg,
    );
  }

  static void setIdentityUpdateToken(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setIdentityUpdateToken:"),
      arg,
    );
  }

  static void setKillSwitchToken(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setKillSwitchToken:"),
      arg,
    );
  }

  static void setMasqueradeAsThirdPartyApp(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMasqueradeAsThirdPartyApp:"),
      arg,
    );
  }

  static void setOptions(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOptions:"),
      arg,
    );
  }

  static void setOrgAdminUserID(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrgAdminUserID:"),
      arg,
    );
  }

  static void setOrganizationCloudDatabase(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrganizationCloudDatabase:"),
      arg,
    );
  }

  static void setPrivateCloudDatabase(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrivateCloudDatabase:"),
      arg,
    );
  }

  static void setPublicCloudDatabase(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicCloudDatabase:"),
      arg,
    );
  }

  static void setSandboxExtensionHandles(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSandboxExtensionHandles:"),
      arg,
    );
  }

  static void setSharedCloudDatabase(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedCloudDatabase:"),
      arg,
    );
  }

  static void setSourceApplicationBundleIdentifier(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationBundleIdentifier:"),
      arg,
    );
  }

  static void setSourceApplicationSecondaryIdentifier(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationSecondaryIdentifier:"),
      arg,
    );
  }

  static void setStateHandle(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setStateHandle:"),
      arg,
    );
  }

  static void setStatusReportToken(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setStatusReportToken:"),
      arg,
    );
  }

  static void setThrottlingOperationQueue(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setThrottlingOperationQueue:"),
      arg,
    );
  }

  static void setUnderlyingDispatchQueue(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUnderlyingDispatchQueue:"),
      arg,
    );
  }

  static void setWantsSiloedContext(
    Pointer<CKContainer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsSiloedContext:"),
      arg,
    );
  }

  static void setXpcConnection(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setXpcConnection:"),
      arg,
    );
  }

  static Pointer<Void> setupInfo(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setupInfo"),
    );
  }

  static Pointer<Void> sharedCloudDatabase(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedCloudDatabase"),
    );
  }

  static Pointer<Void> sourceApplicationBundleIdentifier(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationBundleIdentifier"),
    );
  }

  static Pointer<Void> sourceApplicationSecondaryIdentifier(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationSecondaryIdentifier"),
    );
  }

  static int stateHandle(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("stateHandle"),
    );
  }

  static void statusForApplicationPermission(
    Pointer<CKContainer> _self,
    int arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("statusForApplicationPermission:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void statusGroupsForApplicationPermission(
    Pointer<CKContainer> _self,
    int arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "statusGroupsForApplicationPermission:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static int statusReportToken(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("statusReportToken"),
    );
  }

  static void submitEventMetric(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("submitEventMetric:"),
      arg,
    );
  }

  static Pointer<Void> throttlingOperationQueue(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("throttlingOperationQueue"),
    );
  }

  static void tossConfigWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("tossConfigWithCompletionHandler:"),
      arg,
    );
  }

  static void trackAssets(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("trackAssets:"),
      arg,
    );
  }

  static void triggerAutoBugCaptureSnapshot(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("triggerAutoBugCaptureSnapshot"),
    );
  }

  static Pointer<Void> underlyingDispatchQueue(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingDispatchQueue"),
    );
  }

  static void updatePushTokens(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("updatePushTokens"),
    );
  }

  static int wantsSiloedContext(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsSiloedContext"),
    );
  }

  static void wipeAllCachedLongLivedProxiesWithCompletionHandler(
    Pointer<CKContainer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("wipeAllCachedLongLivedProxiesWithCompletionHandler:"),
      arg,
    );
  }

  static void wipeAllCachesAndDie(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("wipeAllCachesAndDie"),
    );
  }

  static Pointer<Void> xpcConnection(
    Pointer<CKContainer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("xpcConnection"),
    );
  }
}

/// Objective-C class _CKContainerID_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContainerID extends Struct<CKContainerID> {
  factory CKContainerID._() {
    throw UnimplementedError();
  }
  static Pointer<CKContainerID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContainerID").cast<CKContainerID>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> containerIdentifier(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKContainerID> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKContainerID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int environment(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("environment"),
    );
  }

  static int hash(
    Pointer<CKContainerID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKContainerID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithContainerIdentifier(
    Pointer<CKContainerID> _self,
    Pointer<Void> arg, {
    @required int environment,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithContainerIdentifier:environment:"),
      arg,
      environment,
    );
  }

  static Pointer<Void> initWithDictionaryRepresentation(
    Pointer<CKContainerID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDictionaryRepresentation:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKContainerID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }
}

/// Objective-C class _CKContainerOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContainerOptions extends Struct<CKContainerOptions> {
  factory CKContainerOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKContainerOptions> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContainerOptions").cast<CKContainerOptions>();
  }

  static Pointer<Void> accountInfoOverride(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accountInfoOverride"),
    );
  }

  static int bypassPCSEncryption(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("bypassPCSEncryption"),
    );
  }

  static int captureResponseHTTPHeaders(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("captureResponseHTTPHeaders"),
    );
  }

  static Pointer<Void> encryptionServiceName(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptionServiceName"),
    );
  }

  static int enforceNamedOperationGroups(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("enforceNamedOperationGroups"),
    );
  }

  static int forceEnableReadOnlyManatee(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("forceEnableReadOnlyManatee"),
    );
  }

  static int returnPCSMetadata(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("returnPCSMetadata"),
    );
  }

  static void setAccountInfoOverride(
    Pointer<CKContainerOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccountInfoOverride:"),
      arg,
    );
  }

  static void setBypassPCSEncryption(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setBypassPCSEncryption:"),
      arg,
    );
  }

  static void setCaptureResponseHTTPHeaders(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCaptureResponseHTTPHeaders:"),
      arg,
    );
  }

  static void setEncryptionServiceName(
    Pointer<CKContainerOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptionServiceName:"),
      arg,
    );
  }

  static void setEnforceNamedOperationGroups(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEnforceNamedOperationGroups:"),
      arg,
    );
  }

  static void setForceEnableReadOnlyManatee(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForceEnableReadOnlyManatee:"),
      arg,
    );
  }

  static void setReturnPCSMetadata(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setReturnPCSMetadata:"),
      arg,
    );
  }

  static void setUseMMCSEncryptionV2(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseMMCSEncryptionV2:"),
      arg,
    );
  }

  static void setUseZoneWidePCS(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseZoneWidePCS:"),
      arg,
    );
  }

  static void setWantsSiloedContext(
    Pointer<CKContainerOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsSiloedContext:"),
      arg,
    );
  }

  static int useMMCSEncryptionV2(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useMMCSEncryptionV2"),
    );
  }

  static int useZoneWidePCS(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useZoneWidePCS"),
    );
  }

  static int wantsSiloedContext(
    Pointer<CKContainerOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsSiloedContext"),
    );
  }
}

/// Objective-C class _CKContainerSetupInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContainerSetupInfo extends Struct<CKContainerSetupInfo> {
  factory CKContainerSetupInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKContainerSetupInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContainerSetupInfo").cast<CKContainerSetupInfo>();
  }

  static Pointer<Void> accountInfoOverride(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("accountInfoOverride"),
    );
  }

  static int bypassPCSEncryption(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("bypassPCSEncryption"),
    );
  }

  static int captureResponseHTTPHeaders(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("captureResponseHTTPHeaders"),
    );
  }

  static int clientSDKVersion(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("clientSDKVersion"),
    );
  }

  static Pointer<Void> containerEncryptionServiceName(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerEncryptionServiceName"),
    );
  }

  static Pointer<Void> containerID(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fakeEntitlements(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fakeEntitlements"),
    );
  }

  static int forceEnableReadOnlyManatee(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("forceEnableReadOnlyManatee"),
    );
  }

  static int holdAllOperations(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("holdAllOperations"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int masqueradeAsThirdPartyApp(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("masqueradeAsThirdPartyApp"),
    );
  }

  static int returnPCSMetadata(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("returnPCSMetadata"),
    );
  }

  static void setAccountInfoOverride(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAccountInfoOverride:"),
      arg,
    );
  }

  static void setBypassPCSEncryption(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setBypassPCSEncryption:"),
      arg,
    );
  }

  static void setCaptureResponseHTTPHeaders(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCaptureResponseHTTPHeaders:"),
      arg,
    );
  }

  static void setClientSDKVersion(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setClientSDKVersion:"),
      arg,
    );
  }

  static void setContainerEncryptionServiceName(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerEncryptionServiceName:"),
      arg,
    );
  }

  static void setContainerID(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setFakeEntitlements(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFakeEntitlements:"),
      arg,
    );
  }

  static void setForceEnableReadOnlyManatee(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForceEnableReadOnlyManatee:"),
      arg,
    );
  }

  static void setHoldAllOperations(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHoldAllOperations:"),
      arg,
    );
  }

  static void setMasqueradeAsThirdPartyApp(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMasqueradeAsThirdPartyApp:"),
      arg,
    );
  }

  static void setReturnPCSMetadata(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setReturnPCSMetadata:"),
      arg,
    );
  }

  static void setSourceApplicationBundleIdentifier(
    Pointer<CKContainerSetupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationBundleIdentifier:"),
      arg,
    );
  }

  static void setUseMMCSEncryptionV2(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseMMCSEncryptionV2:"),
      arg,
    );
  }

  static void setUseZoneWidePCS(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseZoneWidePCS:"),
      arg,
    );
  }

  static void setWantsSiloedContext(
    Pointer<CKContainerSetupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsSiloedContext:"),
      arg,
    );
  }

  static Pointer<Void> sourceApplicationBundleIdentifier(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationBundleIdentifier"),
    );
  }

  static int useMMCSEncryptionV2(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useMMCSEncryptionV2"),
    );
  }

  static int useZoneWidePCS(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useZoneWidePCS"),
    );
  }

  static int wantsSiloedContext(
    Pointer<CKContainerSetupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsSiloedContext"),
    );
  }
}

/// Objective-C class _CKContainerXPCProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKContainerXPCProxy extends Struct<CKContainerXPCProxy> {
  factory CKContainerXPCProxy._() {
    throw UnimplementedError();
  }
  static Pointer<CKContainerXPCProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKContainerXPCProxy").cast<CKContainerXPCProxy>();
  }

  static void consumeSandboxExtensions(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("consumeSandboxExtensions:reply:"),
      arg,
      reply,
    );
  }

  static Pointer<Void> container(
    Pointer<CKContainerXPCProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static void getFileMetadataWithFileHandle(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> openInfo,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getFileMetadataWithFileHandle:openInfo:reply:"),
      arg,
      openInfo,
      reply,
    );
  }

  static void handleOperationCheckpoint(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCheckpoint:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationCompletion(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCompletion:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationProgress$forOperationWithID$reply$(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationProgress:forOperationWithID:reply:"),
      arg,
      forOperationWithID,
      reply,
    );
  }

  static void handleOperationProgress$forOperationWithID$(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationProgress:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationStatistics(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationStatistics:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static Pointer<Void> initWithContainer(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainer:"),
      arg,
    );
  }

  static void openFileWithOpenInfo(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("openFileWithOpenInfo:reply:"),
      arg,
      reply,
    );
  }

  static void setContainer(
    Pointer<CKContainerXPCProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }
}

/// Objective-C class _CKCustomBlockValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKCustomBlockValidator extends Struct<CKCustomBlockValidator> {
  factory CKCustomBlockValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKCustomBlockValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKCustomBlockValidator")
        .cast<CKCustomBlockValidator>();
  }

  static Pointer<Void> block(
    Pointer<CKCustomBlockValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("block"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<CKCustomBlockValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:"),
      arg,
    );
  }

  static void setBlock(
    Pointer<CKCustomBlockValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBlock:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKCustomBlockValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKDCancelToken_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDCancelToken extends Struct<CKDCancelToken> {
  factory CKDCancelToken._() {
    throw UnimplementedError();
  }
  static Pointer<CKDCancelToken> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDCancelToken").cast<CKDCancelToken>();
  }

  static void cancel(
    Pointer<CKDCancelToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> cancelAction(
    Pointer<CKDCancelToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cancelAction"),
    );
  }

  static int isCancelled(
    Pointer<CKDCancelToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCancelled"),
    );
  }

  static void setCancelAction(
    Pointer<CKDCancelToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCancelAction:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPDate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPDate extends Struct<CKDPDate> {
  factory CKDPDate._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPDate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDPDate").cast<CKDPDate>();
  }

  static void copyTo(
    Pointer<CKDPDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPDate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasTime(
    Pointer<CKDPDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasTime"),
    );
  }

  static int hash(
    Pointer<CKDPDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void mergeFrom(
    Pointer<CKDPDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static int readFrom(
    Pointer<CKDPDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static void setHasTime(
    Pointer<CKDPDate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasTime:"),
      arg,
    );
  }

  static void setTime(
    Pointer<CKDPDate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTime:"),
      arg,
    );
  }

  static double time(
    Pointer<CKDPDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("time"),
    );
  }

  static void writeTo(
    Pointer<CKDPDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPIdentifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPIdentifier extends Struct<CKDPIdentifier> {
  factory CKDPIdentifier._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPIdentifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDPIdentifier").cast<CKDPIdentifier>();
  }

  static int StringAsType(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("StringAsType:"),
      arg,
    );
  }

  static void copyTo(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPIdentifier> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasName(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasName"),
    );
  }

  static int hasType(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasType"),
    );
  }

  static int hash(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void mergeFrom(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int readFrom(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static void setHasType(
    Pointer<CKDPIdentifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasType:"),
      arg,
    );
  }

  static void setName(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setType(
    Pointer<CKDPIdentifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static int type(
    Pointer<CKDPIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer<Void> typeAsString(
    Pointer<CKDPIdentifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("typeAsString:"),
      arg,
    );
  }

  static void writeTo(
    Pointer<CKDPIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPLocationCoordinate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPLocationCoordinate extends Struct<CKDPLocationCoordinate> {
  factory CKDPLocationCoordinate._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPLocationCoordinate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDPLocationCoordinate")
        .cast<CKDPLocationCoordinate>();
  }

  static double altitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("altitude"),
    );
  }

  static void copyTo(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static double course(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("course"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasAltitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAltitude"),
    );
  }

  static int hasCourse(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCourse"),
    );
  }

  static int hasHorizontalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasHorizontalAccuracy"),
    );
  }

  static int hasLatitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLatitude"),
    );
  }

  static int hasLongitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLongitude"),
    );
  }

  static int hasSpeed(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSpeed"),
    );
  }

  static int hasTimestamp(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasTimestamp"),
    );
  }

  static int hasVerticalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasVerticalAccuracy"),
    );
  }

  static int hash(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static double horizontalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("horizontalAccuracy"),
    );
  }

  static int isEqual(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static double latitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("latitude"),
    );
  }

  static double longitude(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("longitude"),
    );
  }

  static void mergeFrom(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static int readFrom(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static void setAltitude(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setAltitude:"),
      arg,
    );
  }

  static void setCourse(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setCourse:"),
      arg,
    );
  }

  static void setHasAltitude(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasAltitude:"),
      arg,
    );
  }

  static void setHasCourse(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasCourse:"),
      arg,
    );
  }

  static void setHasHorizontalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasHorizontalAccuracy:"),
      arg,
    );
  }

  static void setHasLatitude(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasLatitude:"),
      arg,
    );
  }

  static void setHasLongitude(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasLongitude:"),
      arg,
    );
  }

  static void setHasSpeed(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSpeed:"),
      arg,
    );
  }

  static void setHasVerticalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasVerticalAccuracy:"),
      arg,
    );
  }

  static void setHorizontalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setHorizontalAccuracy:"),
      arg,
    );
  }

  static void setLatitude(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setLatitude:"),
      arg,
    );
  }

  static void setLongitude(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setLongitude:"),
      arg,
    );
  }

  static void setSpeed(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setSpeed:"),
      arg,
    );
  }

  static void setTimestamp(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimestamp:"),
      arg,
    );
  }

  static void setVerticalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setVerticalAccuracy:"),
      arg,
    );
  }

  static double speed(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("speed"),
    );
  }

  static Pointer<Void> timestamp(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timestamp"),
    );
  }

  static double verticalAccuracy(
    Pointer<CKDPLocationCoordinate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("verticalAccuracy"),
    );
  }

  static void writeTo(
    Pointer<CKDPLocationCoordinate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPRecordFieldValueEncryptedValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPRecordFieldValueEncryptedValue
    extends Struct<CKDPRecordFieldValueEncryptedValue> {
  factory CKDPRecordFieldValueEncryptedValue._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPRecordFieldValueEncryptedValue> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDPRecordFieldValueEncryptedValue")
        .cast<CKDPRecordFieldValueEncryptedValue>();
  }

  static void addDateListValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addDateListValue:"),
      arg,
    );
  }

  static void addDoubleListValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("addDoubleListValue:"),
      arg,
    );
  }

  static void addLocationListValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addLocationListValue:"),
      arg,
    );
  }

  static void addSignedListValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("addSignedListValue:"),
      arg,
    );
  }

  static void addStringListValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addStringListValue:"),
      arg,
    );
  }

  static void clearDateListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearDateListValues"),
    );
  }

  static void clearDoubleListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearDoubleListValues"),
    );
  }

  static void clearLocationListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearLocationListValues"),
    );
  }

  static void clearSignedListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearSignedListValues"),
    );
  }

  static void clearStringListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearStringListValues"),
    );
  }

  static void copyTo(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> dateListValueAtIndex(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("dateListValueAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> dateListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateListValues"),
    );
  }

  static int dateListValuesCount(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("dateListValuesCount"),
    );
  }

  static Pointer<Void> dateValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateValue"),
    );
  }

  static void dealloc(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static double doubleListValueAtIndex(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_float64(
      _self,
      _objc.getSelector("doubleListValueAtIndex:"),
      arg,
    );
  }

  static Pointer<Float> doubleListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("doubleListValues"),
    );
  }

  static int doubleListValuesCount(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("doubleListValuesCount"),
    );
  }

  static double doubleValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static int hasDateValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasDateValue"),
    );
  }

  static int hasDoubleValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasDoubleValue"),
    );
  }

  static int hasLocationValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLocationValue"),
    );
  }

  static int hasReferenceValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasReferenceValue"),
    );
  }

  static int hasSignedValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSignedValue"),
    );
  }

  static int hasStringValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasStringValue"),
    );
  }

  static int hash(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> locationListValueAtIndex(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("locationListValueAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> locationListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locationListValues"),
    );
  }

  static int locationListValuesCount(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("locationListValuesCount"),
    );
  }

  static Pointer<Void> locationValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locationValue"),
    );
  }

  static void mergeFrom(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static int readFrom(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static Pointer<Void> referenceValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceValue"),
    );
  }

  static void setDateListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateListValues:"),
      arg,
    );
  }

  static void setDateValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateValue:"),
      arg,
    );
  }

  static void setDoubleListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Float> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDoubleListValues:count:"),
      arg,
      count,
    );
  }

  static void setDoubleValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setDoubleValue:"),
      arg,
    );
  }

  static void setHasDoubleValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasDoubleValue:"),
      arg,
    );
  }

  static void setHasSignedValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSignedValue:"),
      arg,
    );
  }

  static void setLocationListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocationListValues:"),
      arg,
    );
  }

  static void setLocationValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocationValue:"),
      arg,
    );
  }

  static void setReferenceValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferenceValue:"),
      arg,
    );
  }

  static void setSignedListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Int64> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSignedListValues:count:"),
      arg,
      count,
    );
  }

  static void setSignedValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSignedValue:"),
      arg,
    );
  }

  static void setStringListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStringListValues:"),
      arg,
    );
  }

  static void setStringValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStringValue:"),
      arg,
    );
  }

  static int signedListValueAtIndex(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int64(
      _self,
      _objc.getSelector("signedListValueAtIndex:"),
      arg,
    );
  }

  static Pointer<Int64> signedListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signedListValues"),
    );
  }

  static int signedListValuesCount(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("signedListValuesCount"),
    );
  }

  static int signedValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("signedValue"),
    );
  }

  static Pointer<Void> stringListValueAtIndex(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("stringListValueAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> stringListValues(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringListValues"),
    );
  }

  static int stringListValuesCount(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("stringListValuesCount"),
    );
  }

  static Pointer<Void> stringValue(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static void writeTo(
    Pointer<CKDPRecordFieldValueEncryptedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPRecordIdentifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPRecordIdentifier extends Struct<CKDPRecordIdentifier> {
  factory CKDPRecordIdentifier._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPRecordIdentifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDPRecordIdentifier").cast<CKDPRecordIdentifier>();
  }

  static void copyTo(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasValue(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValue"),
    );
  }

  static int hasZoneIdentifier(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasZoneIdentifier"),
    );
  }

  static int hash(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void mergeFrom(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static int readFrom(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static void setValue(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static void setZoneIdentifier(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }

  static void writeTo(
    Pointer<CKDPRecordIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }

  static Pointer<Void> zoneIdentifier(
    Pointer<CKDPRecordIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneIdentifier"),
    );
  }
}

/// Objective-C class _CKDPRecordReference_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPRecordReference extends Struct<CKDPRecordReference> {
  factory CKDPRecordReference._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPRecordReference> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDPRecordReference").cast<CKDPRecordReference>();
  }

  static int StringAsType(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("StringAsType:"),
      arg,
    );
  }

  static void copyTo(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPRecordReference> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasRecordIdentifier(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasRecordIdentifier"),
    );
  }

  static int hasType(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasType"),
    );
  }

  static int hash(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void mergeFrom(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static int readFrom(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static Pointer<Void> recordIdentifier(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIdentifier"),
    );
  }

  static void setHasType(
    Pointer<CKDPRecordReference> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasType:"),
      arg,
    );
  }

  static void setRecordIdentifier(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIdentifier:"),
      arg,
    );
  }

  static void setType(
    Pointer<CKDPRecordReference> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static int type(
    Pointer<CKDPRecordReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer<Void> typeAsString(
    Pointer<CKDPRecordReference> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("typeAsString:"),
      arg,
    );
  }

  static void writeTo(
    Pointer<CKDPRecordReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDPRecordZoneIdentifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDPRecordZoneIdentifier extends Struct<CKDPRecordZoneIdentifier> {
  factory CKDPRecordZoneIdentifier._() {
    throw UnimplementedError();
  }
  static Pointer<CKDPRecordZoneIdentifier> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDPRecordZoneIdentifier")
        .cast<CKDPRecordZoneIdentifier>();
  }

  static void copyTo(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyTo:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static int hasOwnerIdentifier(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasOwnerIdentifier"),
    );
  }

  static int hasValue(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValue"),
    );
  }

  static int hash(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void mergeFrom(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("mergeFrom:"),
      arg,
    );
  }

  static Pointer<Void> ownerIdentifier(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerIdentifier"),
    );
  }

  static int readFrom(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("readFrom:"),
      arg,
    );
  }

  static void setOwnerIdentifier(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwnerIdentifier:"),
      arg,
    );
  }

  static void setValue(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKDPRecordZoneIdentifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }

  static void writeTo(
    Pointer<CKDPRecordZoneIdentifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeTo:"),
      arg,
    );
  }
}

/// Objective-C class _CKDatabase_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDatabase extends Struct<CKDatabase> {
  factory CKDatabase._() {
    throw UnimplementedError();
  }
  static Pointer<CKDatabase> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDatabase").cast<CKDatabase>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> CKStatusReportArray(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKStatusReportArray"),
    );
  }

  static void addOperation(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addOperation:"),
      arg,
    );
  }

  static void clearAssetCache(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearAssetCache"),
    );
  }

  static void clearAuthTokensForRecordWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearAuthTokensForRecordWithID:"),
      arg,
    );
  }

  static void clearCacheEntriesForRecord(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearCacheEntriesForRecord:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void clearCacheEntriesForZone(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("clearCacheEntriesForZone:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void clearCachesWithOptions(
    Pointer<CKDatabase> _self,
    int arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("clearCachesWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void clearRecordCache(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearRecordCache"),
    );
  }

  static Pointer<Void> container(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer<Void> daemonWithErrorHandler(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("daemonWithErrorHandler:"),
      arg,
    );
  }

  static int databaseScope(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static void deleteRecordWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteRecordWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void deleteRecordZoneWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteRecordZoneWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void deleteSubscriptionWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteSubscriptionWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void fetchAllRecordZonesWithCompletionHandler(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchAllRecordZonesWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchAllSubscriptionsWithCompletionHandler(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchAllSubscriptionsWithCompletionHandler:"),
      arg,
    );
  }

  static void fetchRecordWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchRecordWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchRecordZoneWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchRecordZoneWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void fetchSubscriptionWithID(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("fetchSubscriptionWithID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void getCorruptRecordsForAllZonesWithCompletionHandler(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCorruptRecordsForAllZonesWithCompletionHandler:"),
      arg,
    );
  }

  static void getPCSDiagnosticsForZonesWithCompletionHandler(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getPCSDiagnosticsForZonesWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> operationQueue(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationQueue"),
    );
  }

  static void performQuery(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inZoneWithID,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("performQuery:inZoneWithID:completionHandler:"),
      arg,
      inZoneWithID,
      completionHandler,
    );
  }

  static void saveRecord(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveRecord:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void saveRecordZone(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveRecordZone:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void saveSubscription(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveSubscription:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static int scope(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("scope"),
    );
  }

  static void setContainer(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }

  static void setUnderlyingDispatchQueue(
    Pointer<CKDatabase> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUnderlyingDispatchQueue:"),
      arg,
    );
  }

  static void showAssetCache(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("showAssetCache"),
    );
  }

  static Pointer<Void> underlyingDispatchQueue(
    Pointer<CKDatabase> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingDispatchQueue"),
    );
  }
}

/// Objective-C class _CKDatabaseNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDatabaseNotification extends Struct<CKDatabaseNotification> {
  factory CKDatabaseNotification._() {
    throw UnimplementedError();
  }
  static Pointer<CKDatabaseNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDatabaseNotification")
        .cast<CKDatabaseNotification>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKDatabaseNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int databaseScope(
    Pointer<CKDatabaseNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKDatabaseNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKDatabaseNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKDatabaseNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRemoteNotificationDictionary(
    Pointer<CKDatabaseNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRemoteNotificationDictionary:"),
      arg,
    );
  }

  static void setDatabaseScope(
    Pointer<CKDatabaseNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDatabaseScope:"),
      arg,
    );
  }
}

/// Objective-C class _CKDatabaseOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDatabaseOperation extends Struct<CKDatabaseOperation> {
  factory CKDatabaseOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKDatabaseOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDatabaseOperation").cast<CKDatabaseOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKDatabaseOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> database(
    Pointer<CKDatabaseOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("database"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKDatabaseOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKDatabaseOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> flowControlKey(
    Pointer<CKDatabaseOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("flowControlKey"),
    );
  }

  static void setDatabase(
    Pointer<CKDatabaseOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDatabase:"),
      arg,
    );
  }
}

/// Objective-C class _CKDatabaseOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDatabaseOperationInfo extends Struct<CKDatabaseOperationInfo> {
  factory CKDatabaseOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKDatabaseOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDatabaseOperationInfo")
        .cast<CKDatabaseOperationInfo>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKDatabaseOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static int databaseScope(
    Pointer<CKDatabaseOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKDatabaseOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKDatabaseOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setDatabaseScope(
    Pointer<CKDatabaseOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDatabaseScope:"),
      arg,
    );
  }

  static void takeValuesFrom(
    Pointer<CKDatabaseOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("takeValuesFrom:"),
      arg,
    );
  }
}

/// Objective-C class _CKDatabaseSubscription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDatabaseSubscription extends Struct<CKDatabaseSubscription> {
  factory CKDatabaseSubscription._() {
    throw UnimplementedError();
  }
  static Pointer<CKDatabaseSubscription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDatabaseSubscription")
        .cast<CKDatabaseSubscription>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDatabaseSubscription> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKDatabaseSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithSubscriptionID(
    Pointer<CKDatabaseSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSubscriptionID:"),
      arg,
    );
  }
}

/// Objective-C class _CKDeclarativePredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDeclarativePredicateValidator
    extends Struct<CKDeclarativePredicateValidator> {
  factory CKDeclarativePredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKDeclarativePredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDeclarativePredicateValidator")
        .cast<CKDeclarativePredicateValidator>();
  }

  static Pointer<Void> init(
    Pointer<CKDeclarativePredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int validate(
    Pointer<CKDeclarativePredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKDiscoverAllContactsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoverAllContactsOperation
    extends Struct<CKDiscoverAllContactsOperation> {
  factory CKDiscoverAllContactsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoverAllContactsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDiscoverAllContactsOperation")
        .cast<CKDiscoverAllContactsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKDiscoverAllContactsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> discoverAllContactsCompletionBlock(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoverAllContactsCompletionBlock"),
    );
  }

  static Pointer<Void> discoveredUserInfos(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoveredUserInfos"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKDiscoverAllContactsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setDiscoverAllContactsCompletionBlock(
    Pointer<CKDiscoverAllContactsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoverAllContactsCompletionBlock:"),
      arg,
    );
  }

  static void setDiscoveredUserInfos(
    Pointer<CKDiscoverAllContactsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoveredUserInfos:"),
      arg,
    );
  }
}

/// Objective-C class _CKDiscoverAllUserIdentitiesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoverAllUserIdentitiesOperation
    extends Struct<CKDiscoverAllUserIdentitiesOperation> {
  factory CKDiscoverAllUserIdentitiesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoverAllUserIdentitiesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDiscoverAllUserIdentitiesOperation")
        .cast<CKDiscoverAllUserIdentitiesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> discoverAllUserIdentitiesCompletionBlock(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoverAllUserIdentitiesCompletionBlock"),
    );
  }

  static Pointer<Void> identityToContactIdentifiers(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identityToContactIdentifiers"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setDiscoverAllUserIdentitiesCompletionBlock(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoverAllUserIdentitiesCompletionBlock:"),
      arg,
    );
  }

  static void setIdentityToContactIdentifiers(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentityToContactIdentifiers:"),
      arg,
    );
  }

  static void setUserIdentityDiscoveredBlock(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityDiscoveredBlock:"),
      arg,
    );
  }

  static Pointer<Void> userIdentityDiscoveredBlock(
    Pointer<CKDiscoverAllUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityDiscoveredBlock"),
    );
  }
}

/// Objective-C class _CKDiscoverUserIdentitiesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoverUserIdentitiesOperation
    extends Struct<CKDiscoverUserIdentitiesOperation> {
  factory CKDiscoverUserIdentitiesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoverUserIdentitiesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDiscoverUserIdentitiesOperation")
        .cast<CKDiscoverUserIdentitiesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> discoverUserIdentitiesCompletionBlock(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoverUserIdentitiesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithUserIdentityLookupInfos(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setDiscoverUserIdentitiesCompletionBlock(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoverUserIdentitiesCompletionBlock:"),
      arg,
    );
  }

  static void setUserIdentityDiscoveredBlock(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityDiscoveredBlock:"),
      arg,
    );
  }

  static void setUserIdentityLookupInfos(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> userIdentityDiscoveredBlock(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityDiscoveredBlock"),
    );
  }

  static Pointer<Void> userIdentityLookupInfos(
    Pointer<CKDiscoverUserIdentitiesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityLookupInfos"),
    );
  }
}

/// Objective-C class _CKDiscoverUserIdentitiesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoverUserIdentitiesOperationInfo
    extends Struct<CKDiscoverUserIdentitiesOperationInfo> {
  factory CKDiscoverUserIdentitiesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoverUserIdentitiesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDiscoverUserIdentitiesOperationInfo")
        .cast<CKDiscoverUserIdentitiesOperationInfo>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKDiscoverUserIdentitiesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKDiscoverUserIdentitiesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKDiscoverUserIdentitiesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setUserIdentityLookupInfos(
    Pointer<CKDiscoverUserIdentitiesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> userIdentityLookupInfos(
    Pointer<CKDiscoverUserIdentitiesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityLookupInfos"),
    );
  }
}

/// Objective-C class _CKDiscoverUserInfosOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoverUserInfosOperation
    extends Struct<CKDiscoverUserInfosOperation> {
  factory CKDiscoverUserInfosOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoverUserInfosOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKDiscoverUserInfosOperation")
        .cast<CKDiscoverUserInfosOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> discoverUserInfosCompletionBlock(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoverUserInfosCompletionBlock"),
    );
  }

  static Pointer<Void> emailAddresses(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddresses"),
    );
  }

  static Pointer<Void> emailsToUserInfos(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailsToUserInfos"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithEmailAddresses(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> userRecordIDs,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEmailAddresses:userRecordIDs:"),
      arg,
      userRecordIDs,
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setDiscoverUserInfosCompletionBlock(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoverUserInfosCompletionBlock:"),
      arg,
    );
  }

  static void setEmailAddresses(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailAddresses:"),
      arg,
    );
  }

  static void setEmailsToUserInfos(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailsToUserInfos:"),
      arg,
    );
  }

  static void setUserRecordIDs(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserRecordIDs:"),
      arg,
    );
  }

  static void setUserRecordIDsToUserInfos(
    Pointer<CKDiscoverUserInfosOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserRecordIDsToUserInfos:"),
      arg,
    );
  }

  static Pointer<Void> userRecordIDs(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userRecordIDs"),
    );
  }

  static Pointer<Void> userRecordIDsToUserInfos(
    Pointer<CKDiscoverUserInfosOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userRecordIDsToUserInfos"),
    );
  }
}

/// Objective-C class _CKDiscoveredUserInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKDiscoveredUserInfo extends Struct<CKDiscoveredUserInfo> {
  factory CKDiscoveredUserInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKDiscoveredUserInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKDiscoveredUserInfo").cast<CKDiscoveredUserInfo>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKDiscoveredUserInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> displayContact(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayContact"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKDiscoveredUserInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> firstName(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstName"),
    );
  }

  static int hash(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKDiscoveredUserInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithUserRecordID(
    Pointer<CKDiscoveredUserInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> displayContact,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUserRecordID:displayContact:"),
      arg,
      displayContact,
    );
  }

  static int isEqual(
    Pointer<CKDiscoveredUserInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> lastName(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastName"),
    );
  }

  static Pointer<Void> userRecordID(
    Pointer<CKDiscoveredUserInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userRecordID"),
    );
  }
}

/// Objective-C class _CKEncryptedData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedData extends Struct<CKEncryptedData> {
  factory CKEncryptedData._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedData").cast<CKEncryptedData>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKEncryptedData> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKEncryptedData> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedData(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedData"),
    );
  }

  static int hash(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:"),
      arg,
    );
  }

  static Pointer<Void> initWithEncryptedData(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEncryptedData:"),
      arg,
    );
  }

  static Pointer<Void> initWithValue(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValue:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int needsDecryption(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsDecryption"),
    );
  }

  static int needsEncryption(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsEncryption"),
    );
  }

  static void setData(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setData:"),
      arg,
    );
  }

  static void setEncryptedData(
    Pointer<CKEncryptedData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedData:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedDate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedDate extends Struct<CKEncryptedDate> {
  factory CKEncryptedDate._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedDate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedDate").cast<CKEncryptedDate>();
  }

  static Pointer<Void> date(
    Pointer<CKEncryptedDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("date"),
    );
  }

  static Pointer<Void> initWithDate(
    Pointer<CKEncryptedDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDate:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedDateArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedDateArray extends Struct<CKEncryptedDateArray> {
  factory CKEncryptedDateArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedDateArray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedDateArray").cast<CKEncryptedDateArray>();
  }

  static Pointer<Void> dateArray(
    Pointer<CKEncryptedDateArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateArray"),
    );
  }

  static Pointer<Void> initWithDateArray(
    Pointer<CKEncryptedDateArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDateArray:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedDateArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedDouble_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedDouble extends Struct<CKEncryptedDouble> {
  factory CKEncryptedDouble._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedDouble> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedDouble").cast<CKEncryptedDouble>();
  }

  static double doubleValue(
    Pointer<CKEncryptedDouble> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static Pointer<Void> initWithDouble(
    Pointer<CKEncryptedDouble> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithDouble:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedDouble> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedDoubleArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedDoubleArray extends Struct<CKEncryptedDoubleArray> {
  factory CKEncryptedDoubleArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedDoubleArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedDoubleArray")
        .cast<CKEncryptedDoubleArray>();
  }

  static Pointer<Void> doubleArray(
    Pointer<CKEncryptedDoubleArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("doubleArray"),
    );
  }

  static Pointer<Void> initWithDoubleArray(
    Pointer<CKEncryptedDoubleArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDoubleArray:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedDoubleArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedEmptyArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedEmptyArray extends Struct<CKEncryptedEmptyArray> {
  factory CKEncryptedEmptyArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedEmptyArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedEmptyArray")
        .cast<CKEncryptedEmptyArray>();
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedEmptyArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedLocation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedLocation extends Struct<CKEncryptedLocation> {
  factory CKEncryptedLocation._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedLocation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedLocation").cast<CKEncryptedLocation>();
  }

  static Pointer<Void> initWithLocation(
    Pointer<CKEncryptedLocation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLocation:"),
      arg,
    );
  }

  static Pointer<Void> location(
    Pointer<CKEncryptedLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("location"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedLocation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedLocationArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedLocationArray extends Struct<CKEncryptedLocationArray> {
  factory CKEncryptedLocationArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedLocationArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedLocationArray")
        .cast<CKEncryptedLocationArray>();
  }

  static Pointer<Void> initWithLocationArray(
    Pointer<CKEncryptedLocationArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLocationArray:"),
      arg,
    );
  }

  static Pointer<Void> locationArray(
    Pointer<CKEncryptedLocationArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locationArray"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedLocationArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedLongLong_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedLongLong extends Struct<CKEncryptedLongLong> {
  factory CKEncryptedLongLong._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedLongLong> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedLongLong").cast<CKEncryptedLongLong>();
  }

  static Pointer<Void> initWithLongLong(
    Pointer<CKEncryptedLongLong> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLongLong:"),
      arg,
    );
  }

  static int longLongValue(
    Pointer<CKEncryptedLongLong> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longLongValue"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedLongLong> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedLongLongArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedLongLongArray extends Struct<CKEncryptedLongLongArray> {
  factory CKEncryptedLongLongArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedLongLongArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedLongLongArray")
        .cast<CKEncryptedLongLongArray>();
  }

  static Pointer<Void> initWithLongLongArray(
    Pointer<CKEncryptedLongLongArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLongLongArray:"),
      arg,
    );
  }

  static Pointer<Void> longLongArray(
    Pointer<CKEncryptedLongLongArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("longLongArray"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedLongLongArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedRecordValueStore_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedRecordValueStore extends Struct<CKEncryptedRecordValueStore> {
  factory CKEncryptedRecordValueStore._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedRecordValueStore> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedRecordValueStore")
        .cast<CKEncryptedRecordValueStore>();
  }

  static Pointer<Void> objectForKeyedSubscript(
    Pointer<CKEncryptedRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKeyedSubscript:"),
      arg,
    );
  }

  static void setObject$forKey$(
    Pointer<CKEncryptedRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setObject$forKeyedSubscript$(
    Pointer<CKEncryptedRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyedSubscript,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKeyedSubscript:"),
      arg,
      forKeyedSubscript,
    );
  }
}

/// Objective-C class _CKEncryptedReference_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedReference extends Struct<CKEncryptedReference> {
  factory CKEncryptedReference._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedReference> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedReference").cast<CKEncryptedReference>();
  }

  static Pointer<Void> initWithReference(
    Pointer<CKEncryptedReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReference:"),
      arg,
    );
  }

  static Pointer<Void> reference(
    Pointer<CKEncryptedReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reference"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedString extends Struct<CKEncryptedString> {
  factory CKEncryptedString._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEncryptedString").cast<CKEncryptedString>();
  }

  static Pointer<Void> initWithString(
    Pointer<CKEncryptedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<CKEncryptedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEncryptedStringArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEncryptedStringArray extends Struct<CKEncryptedStringArray> {
  factory CKEncryptedStringArray._() {
    throw UnimplementedError();
  }
  static Pointer<CKEncryptedStringArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEncryptedStringArray")
        .cast<CKEncryptedStringArray>();
  }

  static Pointer<Void> initWithStringArray(
    Pointer<CKEncryptedStringArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStringArray:"),
      arg,
    );
  }

  static Pointer<Void> stringArray(
    Pointer<CKEncryptedStringArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringArray"),
    );
  }

  static Pointer<Void> value(
    Pointer<CKEncryptedStringArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKEvaluatedObjectExpressionValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEvaluatedObjectExpressionValidator
    extends Struct<CKEvaluatedObjectExpressionValidator> {
  factory CKEvaluatedObjectExpressionValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKEvaluatedObjectExpressionValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEvaluatedObjectExpressionValidator")
        .cast<CKEvaluatedObjectExpressionValidator>();
  }

  static int validate(
    Pointer<CKEvaluatedObjectExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKEventMetric_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEventMetric extends Struct<CKEventMetric> {
  factory CKEventMetric._() {
    throw UnimplementedError();
  }
  static Pointer<CKEventMetric> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEventMetric").cast<CKEventMetric>();
  }

  static int associateWithCompletedOperation(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("associateWithCompletedOperation:"),
      arg,
    );
  }

  static Pointer<Void> associatedOperationGroups(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("associatedOperationGroups"),
    );
  }

  static Pointer<Void> associatedOperations(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("associatedOperations"),
    );
  }

  static Pointer<Void> attributes(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> endTime(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endTime"),
    );
  }

  static Pointer<Void> eventName(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventName"),
    );
  }

  static Pointer<Void> generateEventMetricInfo(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generateEventMetricInfo"),
    );
  }

  static int hasBeenSubmitted(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasBeenSubmitted"),
    );
  }

  static int inferredAllowsCellular(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("inferredAllowsCellular"),
    );
  }

  static int inferredPreferAnonymousRequests(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("inferredPreferAnonymousRequests"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithEventName$(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventName:"),
      arg,
    );
  }

  static Pointer<Void> initWithEventName$atTime$(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atTime,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventName:atTime:"),
      arg,
      atTime,
    );
  }

  static int isCKInternalMetric(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCKInternalMetric"),
    );
  }

  static int isPushTriggerFired(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPushTriggerFired"),
    );
  }

  static Pointer<Void> metricUUID(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("metricUUID"),
    );
  }

  static void setEndTime(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndTime:"),
      arg,
    );
  }

  static void setHasBeenSubmitted(
    Pointer<CKEventMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasBeenSubmitted:"),
      arg,
    );
  }

  static void setInferredAllowsCellular(
    Pointer<CKEventMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setInferredAllowsCellular:"),
      arg,
    );
  }

  static void setInferredPreferAnonymousRequests(
    Pointer<CKEventMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setInferredPreferAnonymousRequests:"),
      arg,
    );
  }

  static void setIsCKInternalMetric(
    Pointer<CKEventMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsCKInternalMetric:"),
      arg,
    );
  }

  static void setIsPushTriggerFired(
    Pointer<CKEventMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPushTriggerFired:"),
      arg,
    );
  }

  static void setMetricValue(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMetricValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setObject(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyedSubscript,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKeyedSubscript:"),
      arg,
      forKeyedSubscript,
    );
  }

  static void setStartTime(
    Pointer<CKEventMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartTime:"),
      arg,
    );
  }

  static Pointer<Void> startTime(
    Pointer<CKEventMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startTime"),
    );
  }
}

/// Objective-C class _CKEventMetricInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEventMetricInfo extends Struct<CKEventMetricInfo> {
  factory CKEventMetricInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKEventMetricInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEventMetricInfo").cast<CKEventMetricInfo>();
  }

  static int allowsCellularAccess(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static Pointer<Void> associatedOperationGroups(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("associatedOperationGroups"),
    );
  }

  static Pointer<Void> associatedOperations(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("associatedOperations"),
    );
  }

  static Pointer<Void> attributes(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKEventMetricInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> endTime(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endTime"),
    );
  }

  static Pointer<Void> eventName(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eventName"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKEventMetricInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithEventMetric(
    Pointer<CKEventMetricInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEventMetric:"),
      arg,
    );
  }

  static int isCKInternalMetric(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCKInternalMetric"),
    );
  }

  static int isPushTriggerFired(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPushTriggerFired"),
    );
  }

  static Pointer<Void> metricUUID(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("metricUUID"),
    );
  }

  static int preferAnonymousRequests(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preferAnonymousRequests"),
    );
  }

  static Pointer<Void> startTime(
    Pointer<CKEventMetricInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startTime"),
    );
  }
}

/// Objective-C class _CKEventOperationGroupInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEventOperationGroupInfo extends Struct<CKEventOperationGroupInfo> {
  factory CKEventOperationGroupInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKEventOperationGroupInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKEventOperationGroupInfo")
        .cast<CKEventOperationGroupInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKEventOperationGroupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKEventOperationGroupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperationGroup(
    Pointer<CKEventOperationGroupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOperationGroup:"),
      arg,
    );
  }

  static Pointer<Void> operationGroupID(
    Pointer<CKEventOperationGroupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationGroupID"),
    );
  }

  static Pointer<Void> operationGroupName(
    Pointer<CKEventOperationGroupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationGroupName"),
    );
  }
}

/// Objective-C class _CKEventOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKEventOperationInfo extends Struct<CKEventOperationInfo> {
  factory CKEventOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKEventOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKEventOperationInfo").cast<CKEventOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKEventOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKEventOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperation(
    Pointer<CKEventOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOperation:"),
      arg,
    );
  }

  static Pointer<Void> operationGroupID(
    Pointer<CKEventOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationGroupID"),
    );
  }

  static Pointer<Void> operationID(
    Pointer<CKEventOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationID"),
    );
  }

  static Pointer<Void> operationType(
    Pointer<CKEventOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationType"),
    );
  }
}

/// Objective-C class _CKException_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKException extends Struct<CKException> {
  factory CKException._() {
    throw UnimplementedError();
  }
  static Pointer<CKException> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKException").cast<CKException>();
  }

  static Pointer<Void> error(
    Pointer<CKException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static int errorCode(
    Pointer<CKException> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("errorCode"),
    );
  }

  static Pointer<Void> initWithCode$format$args$(
    Pointer<CKException> _self,
    int arg, {
    @required Pointer<Void> format,
    @required Pointer<Void> args,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCode:format:args:"),
      arg,
      format,
      args,
    );
  }

  static Pointer<Void> initWithCode$format$(
    Pointer<CKException> _self,
    int arg, {
    @required Pointer<Void> format,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_p(
      _self,
      _objc.getSelector("initWithCode:format:"),
      arg,
      format,
    );
  }

  static Pointer<Void> initWithName$format$args$(
    Pointer<CKException> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> format,
    @required Pointer<Void> args,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:format:args:"),
      arg,
      format,
      args,
    );
  }

  static Pointer<Void> initWithName$format$(
    Pointer<CKException> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> format,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:format:"),
      arg,
      format,
    );
  }
}

/// Objective-C class _CKFetchArchivedRecordsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchArchivedRecordsOperation
    extends Struct<CKFetchArchivedRecordsOperation> {
  factory CKFetchArchivedRecordsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchArchivedRecordsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchArchivedRecordsOperation")
        .cast<CKFetchArchivedRecordsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static Pointer<Void> configurationsByRecordZoneID(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configurationsByRecordZoneID"),
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> fetchArchivedRecordsCompletionBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchArchivedRecordsCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordZoneIDs(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> configurationsByRecordZoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZoneIDs:configurationsByRecordZoneID:"),
      arg,
      configurationsByRecordZoneID,
    );
  }

  static Pointer<Void> perItemErrors(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perItemErrors"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordFetchedBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordFetchedBlock"),
    );
  }

  static Pointer<Void> recordZoneArchivesStatusByZoneID(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneArchivesStatusByZoneID"),
    );
  }

  static Pointer<Void> recordZoneChangeTokensUpdatedBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneChangeTokensUpdatedBlock"),
    );
  }

  static Pointer<Void> recordZoneFetchCompletionBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneFetchCompletionBlock"),
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setConfigurationsByRecordZoneID(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfigurationsByRecordZoneID:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setFetchArchivedRecordsCompletionBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchArchivedRecordsCompletionBlock:"),
      arg,
    );
  }

  static void setPerItemErrors(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerItemErrors:"),
      arg,
    );
  }

  static void setRecordFetchedBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordFetchedBlock:"),
      arg,
    );
  }

  static void setRecordZoneChangeTokensUpdatedBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneChangeTokensUpdatedBlock:"),
      arg,
    );
  }

  static void setRecordZoneFetchCompletionBlock(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneFetchCompletionBlock:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContents(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContents:"),
      arg,
    );
  }

  static void setStatusByZoneID(
    Pointer<CKFetchArchivedRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatusByZoneID:"),
      arg,
    );
  }

  static int shouldFetchAssetContents(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContents"),
    );
  }

  static Pointer<Void> statusByZoneID(
    Pointer<CKFetchArchivedRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusByZoneID"),
    );
  }
}

/// Objective-C class _CKFetchArchivedRecordsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchArchivedRecordsOperationInfo
    extends Struct<CKFetchArchivedRecordsOperationInfo> {
  factory CKFetchArchivedRecordsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchArchivedRecordsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchArchivedRecordsOperationInfo")
        .cast<CKFetchArchivedRecordsOperationInfo>();
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static Pointer<Void> configurationsByRecordZoneID(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configurationsByRecordZoneID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setConfigurationsByRecordZoneID(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfigurationsByRecordZoneID:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContents(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContents:"),
      arg,
    );
  }

  static int shouldFetchAssetContents(
    Pointer<CKFetchArchivedRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContents"),
    );
  }
}

/// Objective-C class _CKFetchArchivedRecordsOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchArchivedRecordsOptions
    extends Struct<CKFetchArchivedRecordsOptions> {
  factory CKFetchArchivedRecordsOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchArchivedRecordsOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchArchivedRecordsOptions")
        .cast<CKFetchArchivedRecordsOptions>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchArchivedRecordsOptions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchArchivedRecordsOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchArchivedRecordsOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchArchivedRecordsOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchArchivedRecordsOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchDatabaseChangesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchDatabaseChangesOperation
    extends Struct<CKFetchDatabaseChangesOperation> {
  factory CKFetchDatabaseChangesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchDatabaseChangesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchDatabaseChangesOperation")
        .cast<CKFetchDatabaseChangesOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> changeTokenUpdatedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeTokenUpdatedBlock"),
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> fetchDatabaseChangesCompletionBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchDatabaseChangesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithPreviousServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPreviousServerChangeToken:"),
      arg,
    );
  }

  static void performCKOperation(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static Pointer<Void> recordZoneWithIDChangedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneWithIDChangedBlock"),
    );
  }

  static Pointer<Void> recordZoneWithIDWasDeletedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneWithIDWasDeletedBlock"),
    );
  }

  static Pointer<Void> recordZoneWithIDWasPurgedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneWithIDWasPurgedBlock"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static Pointer<Void> serverChangeToken(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverChangeToken"),
    );
  }

  static void setChangeTokenUpdatedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeTokenUpdatedBlock:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setFetchDatabaseChangesCompletionBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchDatabaseChangesCompletionBlock:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setRecordZoneWithIDChangedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneWithIDChangedBlock:"),
      arg,
    );
  }

  static void setRecordZoneWithIDWasDeletedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneWithIDWasDeletedBlock:"),
      arg,
    );
  }

  static void setRecordZoneWithIDWasPurgedBlock(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneWithIDWasPurgedBlock:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static void setServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerChangeToken:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<CKFetchDatabaseChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static int status(
    Pointer<CKFetchDatabaseChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Objective-C class _CKFetchDatabaseChangesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchDatabaseChangesOperationInfo
    extends Struct<CKFetchDatabaseChangesOperationInfo> {
  factory CKFetchDatabaseChangesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchDatabaseChangesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchDatabaseChangesOperationInfo")
        .cast<CKFetchDatabaseChangesOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchDatabaseChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchDatabaseChangesOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchDatabaseChangesOperationResult
    extends Struct<CKFetchDatabaseChangesOperationResult> {
  factory CKFetchDatabaseChangesOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchDatabaseChangesOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchDatabaseChangesOperationResult")
        .cast<CKFetchDatabaseChangesOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> description(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> serverChangeToken(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverChangeToken"),
    );
  }

  static void setServerChangeToken(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerChangeToken:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static Pointer<Void> status(
    Pointer<CKFetchDatabaseChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Objective-C class _CKFetchNotificationChangesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchNotificationChangesOperation
    extends Struct<CKFetchNotificationChangesOperation> {
  factory CKFetchNotificationChangesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchNotificationChangesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchNotificationChangesOperation")
        .cast<CKFetchNotificationChangesOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> fetchNotificationChangesCompletionBlock(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchNotificationChangesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithPreviousServerChangeToken(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPreviousServerChangeToken:"),
      arg,
    );
  }

  static int moreComing(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("moreComing"),
    );
  }

  static Pointer<Void> notificationChangedBlock(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationChangedBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static Pointer<Void> resultServerChangeToken(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resultServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchNotificationChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setFetchNotificationChangesCompletionBlock(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchNotificationChangesCompletionBlock:"),
      arg,
    );
  }

  static void setMoreComing(
    Pointer<CKFetchNotificationChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMoreComing:"),
      arg,
    );
  }

  static void setNotificationChangedBlock(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationChangedBlock:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setResultServerChangeToken(
    Pointer<CKFetchNotificationChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResultServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchNotificationChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchNotificationChangesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchNotificationChangesOperationInfo
    extends Struct<CKFetchNotificationChangesOperationInfo> {
  factory CKFetchNotificationChangesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchNotificationChangesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchNotificationChangesOperationInfo")
        .cast<CKFetchNotificationChangesOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static void setWantsChanges(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsChanges:"),
      arg,
    );
  }

  static int wantsChanges(
    Pointer<CKFetchNotificationChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsChanges"),
    );
  }
}

/// Objective-C class _CKFetchNotificationChangesOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchNotificationChangesOperationResult
    extends Struct<CKFetchNotificationChangesOperationResult> {
  factory CKFetchNotificationChangesOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchNotificationChangesOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchNotificationChangesOperationResult")
        .cast<CKFetchNotificationChangesOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> description(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int moreComing(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("moreComing"),
    );
  }

  static Pointer<Void> serverChangeToken(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverChangeToken"),
    );
  }

  static void setMoreComing(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMoreComing:"),
      arg,
    );
  }

  static void setServerChangeToken(
    Pointer<CKFetchNotificationChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerChangeToken:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchRecordChangesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordChangesOperation
    extends Struct<CKFetchRecordChangesOperation> {
  factory CKFetchRecordChangesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordChangesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordChangesOperation")
        .cast<CKFetchRecordChangesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> changeTokensUpdatedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changeTokensUpdatedBlock"),
    );
  }

  static int changeTypesFromSetCallbacks(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("changeTypesFromSetCallbacks"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> fetchRecordChangesCompletionBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordChangesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordZoneID(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> previousServerChangeToken,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZoneID:previousServerChangeToken:"),
      arg,
      previousServerChangeToken,
    );
  }

  static int moreComing(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("moreComing"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static Pointer<Void> recordChangedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordChangedBlock"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordWithIDWasDeletedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordWithIDWasDeletedBlock"),
    );
  }

  static Pointer<Void> recordZoneID(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneID"),
    );
  }

  static Pointer<Void> resultClientChangeTokenData(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resultClientChangeTokenData"),
    );
  }

  static Pointer<Void> resultServerChangeToken(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resultServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static Pointer<Void> serverChangeTokenFetchedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverChangeTokenFetchedBlock"),
    );
  }

  static void setChangeTokensUpdatedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangeTokensUpdatedBlock:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchRecordChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setFetchRecordChangesCompletionBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordChangesCompletionBlock:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setRecordChangedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordChangedBlock:"),
      arg,
    );
  }

  static void setRecordErrors(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordWithIDWasDeletedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordWithIDWasDeletedBlock:"),
      arg,
    );
  }

  static void setRecordZoneID(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneID:"),
      arg,
    );
  }

  static void setResultClientChangeTokenData(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResultClientChangeTokenData:"),
      arg,
    );
  }

  static void setResultServerChangeToken(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResultServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchRecordChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static void setServerChangeTokenFetchedBlock(
    Pointer<CKFetchRecordChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerChangeTokenFetchedBlock:"),
      arg,
    );
  }

  static void setShouldFetchAssetContents(
    Pointer<CKFetchRecordChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContents:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<CKFetchRecordChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static int shouldFetchAssetContents(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContents"),
    );
  }

  static int status(
    Pointer<CKFetchRecordChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Objective-C class _CKFetchRecordChangesOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordChangesOperationResult
    extends Struct<CKFetchRecordChangesOperationResult> {
  factory CKFetchRecordChangesOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordChangesOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordChangesOperationResult")
        .cast<CKFetchRecordChangesOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> clientChangeTokenData(
    Pointer<CKFetchRecordChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientChangeTokenData"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKFetchRecordChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> serverChangeToken(
    Pointer<CKFetchRecordChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverChangeToken"),
    );
  }

  static void setClientChangeTokenData(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientChangeTokenData:"),
      arg,
    );
  }

  static void setServerChangeToken(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServerChangeToken:"),
      arg,
    );
  }

  static void setStatus(
    Pointer<CKFetchRecordChangesOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatus:"),
      arg,
    );
  }

  static Pointer<Void> status(
    Pointer<CKFetchRecordChangesOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("status"),
    );
  }
}

/// Objective-C class _CKFetchRecordVersionsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordVersionsOperation
    extends Struct<CKFetchRecordVersionsOperation> {
  factory CKFetchRecordVersionsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordVersionsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordVersionsOperation")
        .cast<CKFetchRecordVersionsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static Pointer<Void> fetchRecordVersionsCompletionBlock(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordVersionsCompletionBlock"),
    );
  }

  static Pointer<Void> fetchRecordVersionsProgressBlock(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordVersionsProgressBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithRecordIDs(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordIDs:"),
      arg,
    );
  }

  static int isDeleted(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeleted"),
    );
  }

  static Pointer<Void> minimumVersionETag(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minimumVersionETag"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchRecordVersionsCompletionBlock(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordVersionsCompletionBlock:"),
      arg,
    );
  }

  static void setFetchRecordVersionsProgressBlock(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordVersionsProgressBlock:"),
      arg,
    );
  }

  static void setIsDeleted(
    Pointer<CKFetchRecordVersionsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsDeleted:"),
      arg,
    );
  }

  static void setMinimumVersionETag(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMinimumVersionETag:"),
      arg,
    );
  }

  static void setRecordErrors(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKFetchRecordVersionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKFetchRecordVersionsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKFetchRecordVersionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }
}

/// Objective-C class _CKFetchRecordVersionsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordVersionsOperationInfo
    extends Struct<CKFetchRecordVersionsOperationInfo> {
  factory CKFetchRecordVersionsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordVersionsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordVersionsOperationInfo")
        .cast<CKFetchRecordVersionsOperationInfo>();
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> minimumVersionETag(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minimumVersionETag"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setMinimumVersionETag(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMinimumVersionETag:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKFetchRecordVersionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }
}

/// Objective-C class _CKFetchRecordZoneChangesConfiguration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZoneChangesConfiguration
    extends Struct<CKFetchRecordZoneChangesConfiguration> {
  factory CKFetchRecordZoneChangesConfiguration._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZoneChangesConfiguration> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZoneChangesConfiguration")
        .cast<CKFetchRecordZoneChangesConfiguration>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchChangesMadeByThisDevice(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchChangesMadeByThisDevice"),
    );
  }

  static int fetchNewestChangesFirst(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchNewestChangesFirst"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchChangesMadeByThisDevice(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchChangesMadeByThisDevice:"),
      arg,
    );
  }

  static void setFetchNewestChangesFirst(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchNewestChangesFirst:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchRecordZoneChangesConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchRecordZoneChangesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZoneChangesOperation
    extends Struct<CKFetchRecordZoneChangesOperation> {
  factory CKFetchRecordZoneChangesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZoneChangesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZoneChangesOperation")
        .cast<CKFetchRecordZoneChangesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static int changeTypesFromSetCallbacks(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("changeTypesFromSetCallbacks"),
    );
  }

  static Pointer<Void> configurationsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configurationsByRecordZoneID"),
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static Pointer<Void> fetchRecordZoneChangesCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordZoneChangesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordZoneIDs$optionsByRecordZoneID$(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> optionsByRecordZoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZoneIDs:optionsByRecordZoneID:"),
      arg,
      optionsByRecordZoneID,
    );
  }

  static Pointer<Void> initWithRecordZoneIDs$configurationsByRecordZoneID$(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> configurationsByRecordZoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZoneIDs:configurationsByRecordZoneID:"),
      arg,
      configurationsByRecordZoneID,
    );
  }

  static Pointer<Void> optionsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("optionsByRecordZoneID"),
    );
  }

  static Pointer<Void> partialFailureForItemsInZone(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("partialFailureForItemsInZone:"),
      arg,
    );
  }

  static Pointer<Void> perItemErrors(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perItemErrors"),
    );
  }

  static Pointer<Void> perRecordChangeCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordChangeCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordChangedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordChangedBlock"),
    );
  }

  static Pointer<Void> recordWithIDWasDeletedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordWithIDWasDeletedBlock"),
    );
  }

  static Pointer<Void> recordZoneChangeTokensUpdatedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneChangeTokensUpdatedBlock"),
    );
  }

  static Pointer<Void> recordZoneChangesStatusByZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneChangesStatusByZoneID"),
    );
  }

  static Pointer<Void> recordZoneFetchCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneFetchCompletionBlock"),
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static Pointer<Void> recordZoneIDsWithPendingArchivedRecords(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDsWithPendingArchivedRecords"),
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setConfigurationsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfigurationsByRecordZoneID:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setFetchRecordZoneChangesCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordZoneChangesCompletionBlock:"),
      arg,
    );
  }

  static void setOptionsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOptionsByRecordZoneID:"),
      arg,
    );
  }

  static void setPerItemErrors(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerItemErrors:"),
      arg,
    );
  }

  static void setPerRecordChangeCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordChangeCompletionBlock:"),
      arg,
    );
  }

  static void setRecordChangedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordChangedBlock:"),
      arg,
    );
  }

  static void setRecordWithIDWasDeletedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordWithIDWasDeletedBlock:"),
      arg,
    );
  }

  static void setRecordZoneChangeTokensUpdatedBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneChangeTokensUpdatedBlock:"),
      arg,
    );
  }

  static void setRecordZoneFetchCompletionBlock(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneFetchCompletionBlock:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContents(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContents:"),
      arg,
    );
  }

  static void setShouldReportAllPerItemFailures(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportAllPerItemFailures:"),
      arg,
    );
  }

  static void setStatusByZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatusByZoneID:"),
      arg,
    );
  }

  static void setZoneIDsWithPendingArchivedRecords(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneIDsWithPendingArchivedRecords:"),
      arg,
    );
  }

  static int shouldFetchAssetContents(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContents"),
    );
  }

  static int shouldReportAllPerItemFailures(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportAllPerItemFailures"),
    );
  }

  static Pointer<Void> statusByZoneID(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statusByZoneID"),
    );
  }

  static Pointer<Void> zoneIDsWithPendingArchivedRecords(
    Pointer<CKFetchRecordZoneChangesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneIDsWithPendingArchivedRecords"),
    );
  }
}

/// Objective-C class _CKFetchRecordZoneChangesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZoneChangesOperationInfo
    extends Struct<CKFetchRecordZoneChangesOperationInfo> {
  factory CKFetchRecordZoneChangesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZoneChangesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZoneChangesOperationInfo")
        .cast<CKFetchRecordZoneChangesOperationInfo>();
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static int changeTypes(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("changeTypes"),
    );
  }

  static Pointer<Void> configurationsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configurationsByRecordZoneID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchAllChanges(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllChanges"),
    );
  }

  static int forcePCSDecryptionAttempt(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("forcePCSDecryptionAttempt"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setChangeTypes(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setChangeTypes:"),
      arg,
    );
  }

  static void setConfigurationsByRecordZoneID(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfigurationsByRecordZoneID:"),
      arg,
    );
  }

  static void setFetchAllChanges(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllChanges:"),
      arg,
    );
  }

  static void setForcePCSDecryptionAttempt(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForcePCSDecryptionAttempt:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }

  static void setShouldFetchAssetContents(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContents:"),
      arg,
    );
  }

  static void setShouldReportAllPerItemFailures(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportAllPerItemFailures:"),
      arg,
    );
  }

  static int shouldFetchAssetContents(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContents"),
    );
  }

  static int shouldReportAllPerItemFailures(
    Pointer<CKFetchRecordZoneChangesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportAllPerItemFailures"),
    );
  }
}

/// Objective-C class _CKFetchRecordZoneChangesOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZoneChangesOptions
    extends Struct<CKFetchRecordZoneChangesOptions> {
  factory CKFetchRecordZoneChangesOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZoneChangesOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZoneChangesOptions")
        .cast<CKFetchRecordZoneChangesOptions>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchChangesMadeByThisDevice(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchChangesMadeByThisDevice"),
    );
  }

  static int fetchNewestChangesFirst(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchNewestChangesFirst"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithZoneConfiguration(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneConfiguration:"),
      arg,
    );
  }

  static Pointer<Void> previousServerChangeToken(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousServerChangeToken"),
    );
  }

  static int resultsLimit(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchChangesMadeByThisDevice(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchChangesMadeByThisDevice:"),
      arg,
    );
  }

  static void setFetchNewestChangesFirst(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchNewestChangesFirst:"),
      arg,
    );
  }

  static void setPreviousServerChangeToken(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousServerChangeToken:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static Pointer<Void> zoneConfiguration(
    Pointer<CKFetchRecordZoneChangesOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneConfiguration"),
    );
  }
}

/// Objective-C class _CKFetchRecordZonesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZonesOperation extends Struct<CKFetchRecordZonesOperation> {
  factory CKFetchRecordZonesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZonesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZonesOperation")
        .cast<CKFetchRecordZonesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> fetchAllRecordZonesError(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchAllRecordZonesError"),
    );
  }

  static Pointer<Void> fetchRecordZonesCompletionBlock(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordZonesCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static int ignorePCSFailures(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ignorePCSFailures"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordZoneIDs(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZoneIDs:"),
      arg,
    );
  }

  static int isFetchAllRecordZonesOperation(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchAllRecordZonesOperation"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordZoneErrors(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneErrors"),
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static Pointer<Void> recordZones(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZones"),
    );
  }

  static Pointer<Void> recordZonesByZoneID(
    Pointer<CKFetchRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZonesByZoneID"),
    );
  }

  static void setFetchAllRecordZonesError(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchAllRecordZonesError:"),
      arg,
    );
  }

  static void setFetchRecordZonesCompletionBlock(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordZonesCompletionBlock:"),
      arg,
    );
  }

  static void setIgnorePCSFailures(
    Pointer<CKFetchRecordZonesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIgnorePCSFailures:"),
      arg,
    );
  }

  static void setIsFetchAllRecordZonesOperation(
    Pointer<CKFetchRecordZonesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchAllRecordZonesOperation:"),
      arg,
    );
  }

  static void setRecordZoneErrors(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneErrors:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }

  static void setRecordZones(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZones:"),
      arg,
    );
  }

  static void setRecordZonesByZoneID(
    Pointer<CKFetchRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZonesByZoneID:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchRecordZonesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordZonesOperationInfo
    extends Struct<CKFetchRecordZonesOperationInfo> {
  factory CKFetchRecordZonesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordZonesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordZonesOperationInfo")
        .cast<CKFetchRecordZonesOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int ignorePCSFailures(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ignorePCSFailures"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isFetchAllRecordZonesOperation(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchAllRecordZonesOperation"),
    );
  }

  static Pointer<Void> recordZoneIDs(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDs"),
    );
  }

  static void setIgnorePCSFailures(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIgnorePCSFailures:"),
      arg,
    );
  }

  static void setIsFetchAllRecordZonesOperation(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchAllRecordZonesOperation:"),
      arg,
    );
  }

  static void setRecordZoneIDs(
    Pointer<CKFetchRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchRecordsAssetInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordsAssetInfo extends Struct<CKFetchRecordsAssetInfo> {
  factory CKFetchRecordsAssetInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordsAssetInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordsAssetInfo")
        .cast<CKFetchRecordsAssetInfo>();
  }

  static Pointer<Void> assetContent(
    Pointer<CKFetchRecordsAssetInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetContent"),
    );
  }

  static Pointer<Void> assetContentWithError(
    Pointer<CKFetchRecordsAssetInfo> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> expectedSignature,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("assetContentWithError:expectedSignature:"),
      arg,
      expectedSignature,
    );
  }

  static Pointer<Void> byteRanges(
    Pointer<CKFetchRecordsAssetInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("byteRanges"),
    );
  }

  static Pointer<Void> error(
    Pointer<CKFetchRecordsAssetInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordsAssetInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isContiguous(
    Pointer<CKFetchRecordsAssetInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isContiguous"),
    );
  }

  static void setAssetContent(
    Pointer<CKFetchRecordsAssetInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetContent:"),
      arg,
    );
  }

  static void setByteRanges(
    Pointer<CKFetchRecordsAssetInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setByteRanges:"),
      arg,
    );
  }

  static void setError(
    Pointer<CKFetchRecordsAssetInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void writeData(
    Pointer<CKFetchRecordsAssetInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeData:atOffset:"),
      arg,
      atOffset,
    );
  }
}

/// Objective-C class _CKFetchRecordsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordsOperation extends Struct<CKFetchRecordsOperation> {
  factory CKFetchRecordsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordsOperation")
        .cast<CKFetchRecordsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetInfoByArrayIndexByRecordKeyByRecordID(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetInfoByArrayIndexByRecordKeyByRecordID"),
    );
  }

  static Pointer<Void> assetInfoForRecordID(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordKey,
    @required Pointer<Void> arrayIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("assetInfoForRecordID:recordKey:arrayIndex:"),
      arg,
      recordKey,
      arrayIndex,
    );
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static int claimPackagesInRecord(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("claimPackagesInRecord:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static Pointer<Void> desiredPackageFileIndices(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredPackageFileIndices"),
    );
  }

  static int dropInMemoryAssetContentASAP(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dropInMemoryAssetContentASAP"),
    );
  }

  static Pointer<Void> fetchRecordsCompletionBlock(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchRecordsCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordIDs(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordIDs:"),
      arg,
    );
  }

  static int isFetchCurrentUserOperation(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchCurrentUserOperation"),
    );
  }

  static Pointer<Void> packagesToDestroy(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("packagesToDestroy"),
    );
  }

  static Pointer<Void> perRecordCompletionBlock(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordCompletionBlock"),
    );
  }

  static Pointer<Void> perRecordProgressBlock(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordProgressBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static Pointer<Void> recordIDsToETags(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToETags"),
    );
  }

  static Pointer<Void> recordIDsToRecords(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToRecords"),
    );
  }

  static Pointer<Void> recordIDsToVersionETags(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToVersionETags"),
    );
  }

  static void setAssetInfoByArrayIndexByRecordKeyByRecordID(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetInfoByArrayIndexByRecordKeyByRecordID:"),
      arg,
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setDesiredPackageFileIndices(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredPackageFileIndices:"),
      arg,
    );
  }

  static void setDropInMemoryAssetContentASAP(
    Pointer<CKFetchRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDropInMemoryAssetContentASAP:"),
      arg,
    );
  }

  static void setFetchRecordsCompletionBlock(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchRecordsCompletionBlock:"),
      arg,
    );
  }

  static void setIsFetchCurrentUserOperation(
    Pointer<CKFetchRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchCurrentUserOperation:"),
      arg,
    );
  }

  static void setPackagesToDestroy(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPackagesToDestroy:"),
      arg,
    );
  }

  static void setPerRecordCompletionBlock(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordCompletionBlock:"),
      arg,
    );
  }

  static void setPerRecordProgressBlock(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordProgressBlock:"),
      arg,
    );
  }

  static void setRecordErrors(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setRecordIDsToETags(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToETags:"),
      arg,
    );
  }

  static void setRecordIDsToRecords(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToRecords:"),
      arg,
    );
  }

  static void setRecordIDsToVersionETags(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToVersionETags:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKFetchRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static void setShouldFetchAssetContentInMemory(
    Pointer<CKFetchRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContentInMemory:"),
      arg,
    );
  }

  static void setWebSharingIdentityDataByRecordID(
    Pointer<CKFetchRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebSharingIdentityDataByRecordID:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }

  static int shouldFetchAssetContentInMemory(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContentInMemory"),
    );
  }

  static Pointer<Void> webSharingIdentityDataByRecordID(
    Pointer<CKFetchRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webSharingIdentityDataByRecordID"),
    );
  }
}

/// Objective-C class _CKFetchRecordsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchRecordsOperationInfo extends Struct<CKFetchRecordsOperationInfo> {
  factory CKFetchRecordsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchRecordsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchRecordsOperationInfo")
        .cast<CKFetchRecordsOperationInfo>();
  }

  static int URLOptions(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("URLOptions"),
    );
  }

  static Pointer<Void> assetFieldNamesToPublishURLs(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetFieldNamesToPublishURLs"),
    );
  }

  static Pointer<Void> assetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByRecordTypeAndKey"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static Pointer<Void> desiredPackageFileIndices(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredPackageFileIndices"),
    );
  }

  static int dropInMemoryAssetContentASAP(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dropInMemoryAssetContentASAP"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isFetchCurrentUserOperation(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchCurrentUserOperation"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static Pointer<Void> recordIDsToETags(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToETags"),
    );
  }

  static Pointer<Void> recordIDsToVersionETags(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToVersionETags"),
    );
  }

  static int requestedTTL(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("requestedTTL"),
    );
  }

  static void setAssetFieldNamesToPublishURLs(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetFieldNamesToPublishURLs:"),
      arg,
    );
  }

  static void setAssetTransferOptionsByRecordTypeAndKey(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByRecordTypeAndKey:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setDesiredPackageFileIndices(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredPackageFileIndices:"),
      arg,
    );
  }

  static void setDropInMemoryAssetContentASAP(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDropInMemoryAssetContentASAP:"),
      arg,
    );
  }

  static void setIsFetchCurrentUserOperation(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchCurrentUserOperation:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setRecordIDsToETags(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToETags:"),
      arg,
    );
  }

  static void setRecordIDsToVersionETags(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToVersionETags:"),
      arg,
    );
  }

  static void setRequestedTTL(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRequestedTTL:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static void setShouldFetchAssetContentInMemory(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContentInMemory:"),
      arg,
    );
  }

  static void setURLOptions(
    Pointer<CKFetchRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setURLOptions:"),
      arg,
    );
  }

  static void setWebSharingIdentityDataByRecordID(
    Pointer<CKFetchRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebSharingIdentityDataByRecordID:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }

  static int shouldFetchAssetContentInMemory(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContentInMemory"),
    );
  }

  static Pointer<Void> webSharingIdentityDataByRecordID(
    Pointer<CKFetchRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webSharingIdentityDataByRecordID"),
    );
  }
}

/// Objective-C class _CKFetchShareMetadataOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareMetadataOperation
    extends Struct<CKFetchShareMetadataOperation> {
  factory CKFetchShareMetadataOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareMetadataOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareMetadataOperation")
        .cast<CKFetchShareMetadataOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static int claimPackagesInRecord(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("claimPackagesInRecord:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> errorsByURL(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorsByURL"),
    );
  }

  static Pointer<Void> fetchShareMetadataCompletionBlock(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchShareMetadataCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithShareURLs(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithShareURLs:"),
      arg,
    );
  }

  static Pointer<Void> packagesToDestroy(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("packagesToDestroy"),
    );
  }

  static Pointer<Void> perShareMetadataBlock(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perShareMetadataBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> rootRecordDesiredKeys(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecordDesiredKeys"),
    );
  }

  static void setErrorsByURL(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorsByURL:"),
      arg,
    );
  }

  static void setFetchShareMetadataCompletionBlock(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchShareMetadataCompletionBlock:"),
      arg,
    );
  }

  static void setPackagesToDestroy(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPackagesToDestroy:"),
      arg,
    );
  }

  static void setPerShareMetadataBlock(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerShareMetadataBlock:"),
      arg,
    );
  }

  static void setRootRecordDesiredKeys(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecordDesiredKeys:"),
      arg,
    );
  }

  static void setShareURLs(
    Pointer<CKFetchShareMetadataOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareURLs:"),
      arg,
    );
  }

  static void setShouldFetchRootRecord(
    Pointer<CKFetchShareMetadataOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchRootRecord:"),
      arg,
    );
  }

  static Pointer<Void> shareURLs(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareURLs"),
    );
  }

  static int shouldFetchRootRecord(
    Pointer<CKFetchShareMetadataOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchRootRecord"),
    );
  }
}

/// Objective-C class _CKFetchShareMetadataOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareMetadataOperationInfo
    extends Struct<CKFetchShareMetadataOperationInfo> {
  factory CKFetchShareMetadataOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareMetadataOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareMetadataOperationInfo")
        .cast<CKFetchShareMetadataOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> rootRecordDesiredKeys(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecordDesiredKeys"),
    );
  }

  static void setRootRecordDesiredKeys(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecordDesiredKeys:"),
      arg,
    );
  }

  static void setShareURLsToFetch(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareURLsToFetch:"),
      arg,
    );
  }

  static void setShouldFetchRootRecord(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchRootRecord:"),
      arg,
    );
  }

  static Pointer<Void> shareURLsToFetch(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareURLsToFetch"),
    );
  }

  static int shouldFetchRootRecord(
    Pointer<CKFetchShareMetadataOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchRootRecord"),
    );
  }
}

/// Objective-C class _CKFetchShareParticipantKeyOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareParticipantKeyOperation
    extends Struct<CKFetchShareParticipantKeyOperation> {
  factory CKFetchShareParticipantKeyOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareParticipantKeyOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareParticipantKeyOperation")
        .cast<CKFetchShareParticipantKeyOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> baseTokensByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseTokensByShareID"),
    );
  }

  static Pointer<Void> childRecordIDsByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("childRecordIDsByShareID"),
    );
  }

  static Pointer<Void> errorsByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorsByShareID"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithShareIDs(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithShareIDs:"),
      arg,
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setBaseTokensByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseTokensByShareID:"),
      arg,
    );
  }

  static void setChildRecordIDsByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildRecordIDsByShareID:"),
      arg,
    );
  }

  static void setErrorsByShareID(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorsByShareID:"),
      arg,
    );
  }

  static void setShareIDs(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareIDs:"),
      arg,
    );
  }

  static void setShareParticipantKeyCompletionBlock(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareParticipantKeyCompletionBlock:"),
      arg,
    );
  }

  static void setShareParticipantKeyFetchedBlock(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareParticipantKeyFetchedBlock:"),
      arg,
    );
  }

  static Pointer<Void> shareIDs(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareIDs"),
    );
  }

  static Pointer<Void> shareParticipantKeyCompletionBlock(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareParticipantKeyCompletionBlock"),
    );
  }

  static Pointer<Void> shareParticipantKeyFetchedBlock(
    Pointer<CKFetchShareParticipantKeyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareParticipantKeyFetchedBlock"),
    );
  }
}

/// Objective-C class _CKFetchShareParticipantKeyOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareParticipantKeyOperationInfo
    extends Struct<CKFetchShareParticipantKeyOperationInfo> {
  factory CKFetchShareParticipantKeyOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareParticipantKeyOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareParticipantKeyOperationInfo")
        .cast<CKFetchShareParticipantKeyOperationInfo>();
  }

  static Pointer<Void> baseTokensByShareID(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseTokensByShareID"),
    );
  }

  static Pointer<Void> childRecordIDsByShareID(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("childRecordIDsByShareID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setBaseTokensByShareID(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseTokensByShareID:"),
      arg,
    );
  }

  static void setChildRecordIDsByShareID(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildRecordIDsByShareID:"),
      arg,
    );
  }

  static void setShareIDs(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareIDs:"),
      arg,
    );
  }

  static Pointer<Void> shareIDs(
    Pointer<CKFetchShareParticipantKeyOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareIDs"),
    );
  }
}

/// Objective-C class _CKFetchShareParticipantsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareParticipantsOperation
    extends Struct<CKFetchShareParticipantsOperation> {
  factory CKFetchShareParticipantsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareParticipantsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareParticipantsOperation")
        .cast<CKFetchShareParticipantsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> discoveredUserIdentities(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("discoveredUserIdentities"),
    );
  }

  static Pointer<Void> fetchShareParticipantsCompletionBlock(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchShareParticipantsCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithUserIdentityLookupInfos(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> lookupErrors(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lookupErrors"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setDiscoveredUserIdentities(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDiscoveredUserIdentities:"),
      arg,
    );
  }

  static void setFetchShareParticipantsCompletionBlock(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchShareParticipantsCompletionBlock:"),
      arg,
    );
  }

  static void setLookupErrors(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLookupErrors:"),
      arg,
    );
  }

  static void setShareParticipantFetchedBlock(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareParticipantFetchedBlock:"),
      arg,
    );
  }

  static void setUserIdentityLookupInfos(
    Pointer<CKFetchShareParticipantsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> shareParticipantFetchedBlock(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareParticipantFetchedBlock"),
    );
  }

  static Pointer<Void> userIdentityLookupInfos(
    Pointer<CKFetchShareParticipantsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityLookupInfos"),
    );
  }
}

/// Objective-C class _CKFetchShareParticipantsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchShareParticipantsOperationInfo
    extends Struct<CKFetchShareParticipantsOperationInfo> {
  factory CKFetchShareParticipantsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchShareParticipantsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchShareParticipantsOperationInfo")
        .cast<CKFetchShareParticipantsOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchShareParticipantsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchShareParticipantsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setUserIdentityLookupInfos(
    Pointer<CKFetchShareParticipantsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentityLookupInfos:"),
      arg,
    );
  }

  static Pointer<Void> userIdentityLookupInfos(
    Pointer<CKFetchShareParticipantsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentityLookupInfos"),
    );
  }
}

/// Objective-C class _CKFetchSubscriptionsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchSubscriptionsOperation
    extends Struct<CKFetchSubscriptionsOperation> {
  factory CKFetchSubscriptionsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchSubscriptionsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchSubscriptionsOperation")
        .cast<CKFetchSubscriptionsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> fetchSubscriptionCompletionBlock(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchSubscriptionCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithSubscriptionIDs(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSubscriptionIDs:"),
      arg,
    );
  }

  static int isFetchAllSubscriptionsOperation(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchAllSubscriptionsOperation"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setFetchSubscriptionCompletionBlock(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchSubscriptionCompletionBlock:"),
      arg,
    );
  }

  static void setIsFetchAllSubscriptionsOperation(
    Pointer<CKFetchSubscriptionsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchAllSubscriptionsOperation:"),
      arg,
    );
  }

  static void setSubscriptionErrors(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionErrors:"),
      arg,
    );
  }

  static void setSubscriptionIDs(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionIDs:"),
      arg,
    );
  }

  static void setSubscriptions(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptions:"),
      arg,
    );
  }

  static void setSubscriptionsBySubscriptionID(
    Pointer<CKFetchSubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionsBySubscriptionID:"),
      arg,
    );
  }

  static Pointer<Void> subscriptionErrors(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionErrors"),
    );
  }

  static Pointer<Void> subscriptionIDs(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionIDs"),
    );
  }

  static Pointer<Void> subscriptions(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptions"),
    );
  }

  static Pointer<Void> subscriptionsBySubscriptionID(
    Pointer<CKFetchSubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionsBySubscriptionID"),
    );
  }
}

/// Objective-C class _CKFetchSubscriptionsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchSubscriptionsOperationInfo
    extends Struct<CKFetchSubscriptionsOperationInfo> {
  factory CKFetchSubscriptionsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchSubscriptionsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchSubscriptionsOperationInfo")
        .cast<CKFetchSubscriptionsOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isFetchAllSubscriptionsOperation(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFetchAllSubscriptionsOperation"),
    );
  }

  static void setIsFetchAllSubscriptionsOperation(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFetchAllSubscriptionsOperation:"),
      arg,
    );
  }

  static void setSubscriptionIDs(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionIDs:"),
      arg,
    );
  }

  static Pointer<Void> subscriptionIDs(
    Pointer<CKFetchSubscriptionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionIDs"),
    );
  }
}

/// Objective-C class _CKFetchUserQuotaOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchUserQuotaOperation extends Struct<CKFetchUserQuotaOperation> {
  factory CKFetchUserQuotaOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchUserQuotaOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchUserQuotaOperation")
        .cast<CKFetchUserQuotaOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> fetchUserQuotaCompletionBlock(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchUserQuotaCompletionBlock"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static int quotaAvailable(
    Pointer<CKFetchUserQuotaOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("quotaAvailable"),
    );
  }

  static void setFetchUserQuotaCompletionBlock(
    Pointer<CKFetchUserQuotaOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchUserQuotaCompletionBlock:"),
      arg,
    );
  }

  static void setQuotaAvailable(
    Pointer<CKFetchUserQuotaOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setQuotaAvailable:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchUserQuotaOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchUserQuotaOperationResult
    extends Struct<CKFetchUserQuotaOperationResult> {
  factory CKFetchUserQuotaOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchUserQuotaOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchUserQuotaOperationResult")
        .cast<CKFetchUserQuotaOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchUserQuotaOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchUserQuotaOperationResult> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchUserQuotaOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchUserQuotaOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int quotaAvailable(
    Pointer<CKFetchUserQuotaOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("quotaAvailable"),
    );
  }

  static void setQuotaAvailable(
    Pointer<CKFetchUserQuotaOperationResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setQuotaAvailable:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchWebAuthTokenOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchWebAuthTokenOperation
    extends Struct<CKFetchWebAuthTokenOperation> {
  factory CKFetchWebAuthTokenOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchWebAuthTokenOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchWebAuthTokenOperation")
        .cast<CKFetchWebAuthTokenOperation>();
  }

  static Pointer<Void> APIToken(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("APIToken"),
    );
  }

  static int CKOperationShouldRun(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> fetchWebAuthTokenCompletionBlock(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchWebAuthTokenCompletionBlock"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithAPIToken(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAPIToken:"),
      arg,
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setAPIToken(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAPIToken:"),
      arg,
    );
  }

  static void setFetchWebAuthTokenCompletionBlock(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchWebAuthTokenCompletionBlock:"),
      arg,
    );
  }

  static void setWebAuthToken(
    Pointer<CKFetchWebAuthTokenOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebAuthToken:"),
      arg,
    );
  }

  static Pointer<Void> webAuthToken(
    Pointer<CKFetchWebAuthTokenOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webAuthToken"),
    );
  }
}

/// Objective-C class _CKFetchWebAuthTokenOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchWebAuthTokenOperationInfo
    extends Struct<CKFetchWebAuthTokenOperationInfo> {
  factory CKFetchWebAuthTokenOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchWebAuthTokenOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchWebAuthTokenOperationInfo")
        .cast<CKFetchWebAuthTokenOperationInfo>();
  }

  static Pointer<Void> APIToken(
    Pointer<CKFetchWebAuthTokenOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("APIToken"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchWebAuthTokenOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchWebAuthTokenOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setAPIToken(
    Pointer<CKFetchWebAuthTokenOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAPIToken:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchWebAuthTokenOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchWebAuthTokenOperationResult
    extends Struct<CKFetchWebAuthTokenOperationResult> {
  factory CKFetchWebAuthTokenOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchWebAuthTokenOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchWebAuthTokenOperationResult")
        .cast<CKFetchWebAuthTokenOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setWebAuthToken(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebAuthToken:"),
      arg,
    );
  }

  static Pointer<Void> webAuthToken(
    Pointer<CKFetchWebAuthTokenOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webAuthToken"),
    );
  }
}

/// Objective-C class _CKFetchWhitelistedBundleIDsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchWhitelistedBundleIDsOperation
    extends Struct<CKFetchWhitelistedBundleIDsOperation> {
  factory CKFetchWhitelistedBundleIDsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchWhitelistedBundleIDsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchWhitelistedBundleIDsOperation")
        .cast<CKFetchWhitelistedBundleIDsOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> bundleIDs(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundleIDs"),
    );
  }

  static Pointer<Void> fetchWhitelistedBundleIDsCompletionBlock(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fetchWhitelistedBundleIDsCompletionBlock"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static void performCKOperation(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setBundleIDs(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBundleIDs:"),
      arg,
    );
  }

  static void setFetchWhitelistedBundleIDsCompletionBlock(
    Pointer<CKFetchWhitelistedBundleIDsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFetchWhitelistedBundleIDsCompletionBlock:"),
      arg,
    );
  }
}

/// Objective-C class _CKFetchWhitelistedBundleIDsOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFetchWhitelistedBundleIDsOperationResult
    extends Struct<CKFetchWhitelistedBundleIDsOperationResult> {
  factory CKFetchWhitelistedBundleIDsOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFetchWhitelistedBundleIDsOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFetchWhitelistedBundleIDsOperationResult")
        .cast<CKFetchWhitelistedBundleIDsOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> bundleIDs(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundleIDs"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setBundleIDs(
    Pointer<CKFetchWhitelistedBundleIDsOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBundleIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKFileMetadata_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFileMetadata extends Struct<CKFileMetadata> {
  factory CKFileMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<CKFileMetadata> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKFileMetadata").cast<CKFileMetadata>();
  }

  static Pointer<Void> deviceID(
    Pointer<CKFileMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileID(
    Pointer<CKFileMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileID"),
    );
  }

  static Pointer<Void> fileSize(
    Pointer<CKFileMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileSize"),
    );
  }

  static Pointer<Void> generationID(
    Pointer<CKFileMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generationID"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> modTimeInSeconds(
    Pointer<CKFileMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modTimeInSeconds"),
    );
  }

  static void setDeviceID(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceID:"),
      arg,
    );
  }

  static void setFileID(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileID:"),
      arg,
    );
  }

  static void setFileSize(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileSize:"),
      arg,
    );
  }

  static void setGenerationID(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGenerationID:"),
      arg,
    );
  }

  static void setModTimeInSeconds(
    Pointer<CKFileMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModTimeInSeconds:"),
      arg,
    );
  }
}

/// Objective-C class _CKFileOpenInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFileOpenInfo extends Struct<CKFileOpenInfo> {
  factory CKFileOpenInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKFileOpenInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKFileOpenInfo").cast<CKFileOpenInfo>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> UUID(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static Pointer<Void> clientOpenedFileHandle(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientOpenedFileHandle"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> deviceID(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileID(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileID"),
    );
  }

  static Pointer<Void> generationID(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generationID"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> path(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static void setClientOpenedFileHandle(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientOpenedFileHandle:"),
      arg,
    );
  }

  static void setDeviceID(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceID:"),
      arg,
    );
  }

  static void setFileID(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileID:"),
      arg,
    );
  }

  static void setGenerationID(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGenerationID:"),
      arg,
    );
  }

  static void setPath(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPath:"),
      arg,
    );
  }

  static void setShouldReadRawEncryptedData(
    Pointer<CKFileOpenInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReadRawEncryptedData:"),
      arg,
    );
  }

  static void setUUID(
    Pointer<CKFileOpenInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUUID:"),
      arg,
    );
  }

  static int shouldReadRawEncryptedData(
    Pointer<CKFileOpenInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReadRawEncryptedData"),
    );
  }
}

/// Objective-C class _CKFileOpenResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFileOpenResult extends Struct<CKFileOpenResult> {
  factory CKFileOpenResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKFileOpenResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKFileOpenResult").cast<CKFileOpenResult>();
  }

  static void dealloc(
    Pointer<CKFileOpenResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKFileOpenResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedFileHandle(
    Pointer<CKFileOpenResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedFileHandle"),
    );
  }

  static Pointer<Void> fileHandle(
    Pointer<CKFileOpenResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileHandle"),
    );
  }

  static Pointer<Void> fileSize(
    Pointer<CKFileOpenResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileSize"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKFileOpenResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setEncryptedFileHandle(
    Pointer<CKFileOpenResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedFileHandle:"),
      arg,
    );
  }

  static void setFileHandle(
    Pointer<CKFileOpenResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileHandle:"),
      arg,
    );
  }

  static void setFileSize(
    Pointer<CKFileOpenResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileSize:"),
      arg,
    );
  }
}

/// Objective-C class _CKFlipFlopPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFlipFlopPredicateValidator
    extends Struct<CKFlipFlopPredicateValidator> {
  factory CKFlipFlopPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKFlipFlopPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFlipFlopPredicateValidator")
        .cast<CKFlipFlopPredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKFlipFlopPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidator(
    Pointer<CKFlipFlopPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidator:"),
      arg,
    );
  }

  static void setValidator(
    Pointer<CKFlipFlopPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKFlipFlopPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validator(
    Pointer<CKFlipFlopPredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validator"),
    );
  }
}

/// Objective-C class _CKFlowControl_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFlowControl extends Struct<CKFlowControl> {
  factory CKFlowControl._() {
    throw UnimplementedError();
  }
  static Pointer<CKFlowControl> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKFlowControl").cast<CKFlowControl>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int attemptBudgetedExpenditureWithCost(
    Pointer<CKFlowControl> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_Int8(
      _self,
      _objc.getSelector("attemptBudgetedExpenditureWithCost:"),
      arg,
    );
  }

  static double budget(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("budget"),
    );
  }

  static int budgetCap(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("budgetCap"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void expendWithCost(
    Pointer<CKFlowControl> _self,
    double arg, {
    @required Pointer<Void> reportableError,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("expendWithCost:reportableError:"),
      arg,
      reportableError,
    );
  }

  static Pointer<Void> initWithBudgetCap(
    Pointer<CKFlowControl> _self,
    int arg, {
    @required double withMaximumThrottleTime,
    @required double andRegenerationPerSecond,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_float64_float64_returns_p(
      _self,
      _objc.getSelector(
          "initWithBudgetCap:withMaximumThrottleTime:andRegenerationPerSecond:"),
      arg,
      withMaximumThrottleTime,
      andRegenerationPerSecond,
    );
  }

  static int isLimited(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLimited"),
    );
  }

  static Pointer<Void> lastRegeneration(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastRegeneration"),
    );
  }

  static Pointer<Void> lastReportableError(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastReportableError"),
    );
  }

  static double maximumThrottleTime(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("maximumThrottleTime"),
    );
  }

  static void regenerate(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("regenerate"),
    );
  }

  static double regenerationPerSecond(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("regenerationPerSecond"),
    );
  }

  static double secondsUntilBudgetLimitationRemoved(
    Pointer<CKFlowControl> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("secondsUntilBudgetLimitationRemoved"),
    );
  }

  static void setBudget(
    Pointer<CKFlowControl> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setBudget:"),
      arg,
    );
  }

  static void setBudgetCap(
    Pointer<CKFlowControl> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBudgetCap:"),
      arg,
    );
  }

  static void setLastRegeneration(
    Pointer<CKFlowControl> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastRegeneration:"),
      arg,
    );
  }

  static void setLastReportableError(
    Pointer<CKFlowControl> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastReportableError:"),
      arg,
    );
  }

  static void setMaximumThrottleTime(
    Pointer<CKFlowControl> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setMaximumThrottleTime:"),
      arg,
    );
  }

  static void setRegenerationPerSecond(
    Pointer<CKFlowControl> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRegenerationPerSecond:"),
      arg,
    );
  }
}

/// Objective-C class _CKFunctionExpressionValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKFunctionExpressionValidator
    extends Struct<CKFunctionExpressionValidator> {
  factory CKFunctionExpressionValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKFunctionExpressionValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKFunctionExpressionValidator")
        .cast<CKFunctionExpressionValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKFunctionExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> argumentValidators(
    Pointer<CKFunctionExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("argumentValidators"),
    );
  }

  static Pointer<Void> functionName(
    Pointer<CKFunctionExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("functionName"),
    );
  }

  static Pointer<Void> initWithFunctionName(
    Pointer<CKFunctionExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> validators,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFunctionName:validators:"),
      arg,
      validators,
    );
  }

  static void setArgumentValidators(
    Pointer<CKFunctionExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArgumentValidators:"),
      arg,
    );
  }

  static void setFunctionName(
    Pointer<CKFunctionExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFunctionName:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKFunctionExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKInitiateParticipantVettingOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKInitiateParticipantVettingOperation
    extends Struct<CKInitiateParticipantVettingOperation> {
  factory CKInitiateParticipantVettingOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKInitiateParticipantVettingOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKInitiateParticipantVettingOperation")
        .cast<CKInitiateParticipantVettingOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> address(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("address"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> initWithShareMetadata(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> participantID,
    @required Pointer<Void> address,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithShareMetadata:participantID:address:"),
      arg,
      participantID,
      address,
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static Pointer<Void> participantID(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantID"),
    );
  }

  static Pointer<Void> participantVettingInitiatedBlock(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantVettingInitiatedBlock"),
    );
  }

  static Pointer<Void> participantVettingInitiationCompletionBlock(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantVettingInitiationCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void retryTimes(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    int arg, {
    @required Pointer<Void> container,
    @required Pointer<Void> participantVettingInitiatedBlock,
    @required Pointer<Void> participantVettingInitiationCompletionBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "retryTimes:container:participantVettingInitiatedBlock:participantVettingInitiationCompletionBlock:"),
      arg,
      container,
      participantVettingInitiatedBlock,
      participantVettingInitiationCompletionBlock,
    );
  }

  static void setAddress(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddress:"),
      arg,
    );
  }

  static void setParticipantID(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantID:"),
      arg,
    );
  }

  static void setParticipantVettingInitiatedBlock(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantVettingInitiatedBlock:"),
      arg,
    );
  }

  static void setParticipantVettingInitiationCompletionBlock(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantVettingInitiationCompletionBlock:"),
      arg,
    );
  }

  static void setShareMetadata(
    Pointer<CKInitiateParticipantVettingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadata:"),
      arg,
    );
  }

  static Pointer<Void> shareMetadata(
    Pointer<CKInitiateParticipantVettingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadata"),
    );
  }
}

/// Objective-C class _CKInitiateParticipantVettingOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKInitiateParticipantVettingOperationInfo
    extends Struct<CKInitiateParticipantVettingOperationInfo> {
  factory CKInitiateParticipantVettingOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKInitiateParticipantVettingOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKInitiateParticipantVettingOperationInfo")
        .cast<CKInitiateParticipantVettingOperationInfo>();
  }

  static Pointer<Void> address(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("address"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> participantID(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantID"),
    );
  }

  static void setAddress(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddress:"),
      arg,
    );
  }

  static void setParticipantID(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantID:"),
      arg,
    );
  }

  static void setShareMetadata(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareMetadata:"),
      arg,
    );
  }

  static Pointer<Void> shareMetadata(
    Pointer<CKInitiateParticipantVettingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareMetadata"),
    );
  }
}

/// Objective-C class _CKInternalError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKInternalError extends Struct<CKInternalError> {
  factory CKInternalError._() {
    throw UnimplementedError();
  }
  static Pointer<CKInternalError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKInternalError").cast<CKInternalError>();
  }
}

/// Objective-C class _CKKeyPathExpressionValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKKeyPathExpressionValidator
    extends Struct<CKKeyPathExpressionValidator> {
  factory CKKeyPathExpressionValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKKeyPathExpressionValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKKeyPathExpressionValidator")
        .cast<CKKeyPathExpressionValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKKeyPathExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidator(
    Pointer<CKKeyPathExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidator:"),
      arg,
    );
  }

  static void setValidator(
    Pointer<CKKeyPathExpressionValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKKeyPathExpressionValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validator(
    Pointer<CKKeyPathExpressionValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validator"),
    );
  }
}

/// Objective-C class _CKKindOfClassValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKKindOfClassValidator extends Struct<CKKindOfClassValidator> {
  factory CKKindOfClassValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKKindOfClassValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKKindOfClassValidator")
        .cast<CKKindOfClassValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKKindOfClassValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithClass(
    Pointer<CKKindOfClassValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClass:"),
      arg,
    );
  }

  static Pointer<Void> parentClass(
    Pointer<CKKindOfClassValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentClass"),
    );
  }

  static void setParentClass(
    Pointer<CKKindOfClassValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentClass:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKKindOfClassValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKKindOfCollectionClassValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKKindOfCollectionClassValidator
    extends Struct<CKKindOfCollectionClassValidator> {
  factory CKKindOfCollectionClassValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKKindOfCollectionClassValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKKindOfCollectionClassValidator")
        .cast<CKKindOfCollectionClassValidator>();
  }

  static int validate(
    Pointer<CKKindOfCollectionClassValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKLegacyPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKLegacyPredicateValidator extends Struct<CKLegacyPredicateValidator> {
  factory CKLegacyPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKLegacyPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKLegacyPredicateValidator")
        .cast<CKLegacyPredicateValidator>();
  }

  static int validate$error$(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static void validate$(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("validate:"),
      arg,
    );
  }

  static int validateBasicOperatorPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateBasicOperatorPredicate:"),
      arg,
    );
  }

  static int validateBeginsWithPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateBeginsWithPredicate:"),
      arg,
    );
  }

  static int validateBetweenPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateBetweenPredicate:"),
      arg,
    );
  }

  static void validateComparisonPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("validateComparisonPredicate:"),
      arg,
    );
  }

  static void validateCompoundPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("validateCompoundPredicate:"),
      arg,
    );
  }

  static int validateContainsAllInPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateContainsAllInPredicate:"),
      arg,
    );
  }

  static int validateContainsAnyPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateContainsAnyPredicate:"),
      arg,
    );
  }

  static int validateContainsPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateContainsPredicate:"),
      arg,
    );
  }

  static int validateFullTextSearchPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateFullTextSearchPredicate:"),
      arg,
    );
  }

  static int validateInPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateInPredicate:"),
      arg,
    );
  }

  static int validateNearPredicate(
    Pointer<CKLegacyPredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateNearPredicate:"),
      arg,
    );
  }
}

/// Objective-C class _CKLocationSortDescriptor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKLocationSortDescriptor extends Struct<CKLocationSortDescriptor> {
  factory CKLocationSortDescriptor._() {
    throw UnimplementedError();
  }
  static Pointer<CKLocationSortDescriptor> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKLocationSortDescriptor")
        .cast<CKLocationSortDescriptor>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKLocationSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int compareObject(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareObject:toObject:"),
      arg,
      toObject,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKLocationSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithKey(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> relativeLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKey:relativeLocation:"),
      arg,
      relativeLocation,
    );
  }

  static Pointer<Void> relativeLocation(
    Pointer<CKLocationSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relativeLocation"),
    );
  }

  static void setRelativeLocation(
    Pointer<CKLocationSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelativeLocation:"),
      arg,
    );
  }
}

/// Objective-C class _CKLogFacilityWrapper_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKLogFacilityWrapper extends Struct<CKLogFacilityWrapper> {
  factory CKLogFacilityWrapper._() {
    throw UnimplementedError();
  }
  static Pointer<CKLogFacilityWrapper> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKLogFacilityWrapper").cast<CKLogFacilityWrapper>();
  }

  static Pointer<Void> facility(
    Pointer<CKLogFacilityWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("facility"),
    );
  }

  static Pointer<Void> facilityName(
    Pointer<CKLogFacilityWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("facilityName"),
    );
  }

  static Pointer<Void> initWithFacility(
    Pointer<CKLogFacilityWrapper> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> facilityName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFacility:facilityName:"),
      arg,
      facilityName,
    );
  }
}

/// Objective-C class _CKMarkNotificationsReadOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKMarkNotificationsReadOperation
    extends Struct<CKMarkNotificationsReadOperation> {
  factory CKMarkNotificationsReadOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKMarkNotificationsReadOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKMarkNotificationsReadOperation")
        .cast<CKMarkNotificationsReadOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> errorsByNotificationID(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorsByNotificationID"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithNotificationIDsToMarkRead(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithNotificationIDsToMarkRead:"),
      arg,
    );
  }

  static Pointer<Void> markNotificationsReadCompletionBlock(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markNotificationsReadCompletionBlock"),
    );
  }

  static Pointer<Void> notificationIDs(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIDs"),
    );
  }

  static Pointer<Void> notificationIDsMarkedRead(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIDsMarkedRead"),
    );
  }

  static void performCKOperation(
    Pointer<CKMarkNotificationsReadOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setErrorsByNotificationID(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorsByNotificationID:"),
      arg,
    );
  }

  static void setMarkNotificationsReadCompletionBlock(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMarkNotificationsReadCompletionBlock:"),
      arg,
    );
  }

  static void setNotificationIDs(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationIDs:"),
      arg,
    );
  }

  static void setNotificationIDsMarkedRead(
    Pointer<CKMarkNotificationsReadOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationIDsMarkedRead:"),
      arg,
    );
  }
}

/// Objective-C class _CKMarkNotificationsReadOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKMarkNotificationsReadOperationInfo
    extends Struct<CKMarkNotificationsReadOperationInfo> {
  factory CKMarkNotificationsReadOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKMarkNotificationsReadOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKMarkNotificationsReadOperationInfo")
        .cast<CKMarkNotificationsReadOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKMarkNotificationsReadOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKMarkNotificationsReadOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> notificationIDs(
    Pointer<CKMarkNotificationsReadOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationIDs"),
    );
  }

  static void setNotificationIDs(
    Pointer<CKMarkNotificationsReadOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKMetric_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKMetric extends Struct<CKMetric> {
  factory CKMetric._() {
    throw UnimplementedError();
  }
  static Pointer<CKMetric> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKMetric").cast<CKMetric>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int bytesDownloaded(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("bytesDownloaded"),
    );
  }

  static int bytesUploaded(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("bytesUploaded"),
    );
  }

  static int connections(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("connections"),
    );
  }

  static int connectionsCreated(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("connectionsCreated"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKMetric> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double duration(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("duration"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static double executing(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("executing"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static double queueing(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("queueing"),
    );
  }

  static void setBytesDownloaded(
    Pointer<CKMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBytesDownloaded:"),
      arg,
    );
  }

  static void setBytesUploaded(
    Pointer<CKMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBytesUploaded:"),
      arg,
    );
  }

  static void setConnections(
    Pointer<CKMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setConnections:"),
      arg,
    );
  }

  static void setConnectionsCreated(
    Pointer<CKMetric> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setConnectionsCreated:"),
      arg,
    );
  }

  static void setDuration(
    Pointer<CKMetric> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setDuration:"),
      arg,
    );
  }

  static void setExecuting(
    Pointer<CKMetric> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setExecuting:"),
      arg,
    );
  }

  static void setQueueing(
    Pointer<CKMetric> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setQueueing:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<CKMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static Pointer<Void> startDate(
    Pointer<CKMetric> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }

  static void unionMetric(
    Pointer<CKMetric> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionMetric:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyBadgeOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyBadgeOperation extends Struct<CKModifyBadgeOperation> {
  factory CKModifyBadgeOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyBadgeOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyBadgeOperation")
        .cast<CKModifyBadgeOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static int badgeValue(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("badgeValue"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifyBadgeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifyBadgeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBadgeValue(
    Pointer<CKModifyBadgeOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithBadgeValue:"),
      arg,
    );
  }

  static Pointer<Void> modifyBadgeCompletionBlock(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifyBadgeCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKModifyBadgeOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setBadgeValue(
    Pointer<CKModifyBadgeOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBadgeValue:"),
      arg,
    );
  }

  static void setModifyBadgeCompletionBlock(
    Pointer<CKModifyBadgeOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifyBadgeCompletionBlock:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyBadgeOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyBadgeOperationInfo extends Struct<CKModifyBadgeOperationInfo> {
  factory CKModifyBadgeOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyBadgeOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyBadgeOperationInfo")
        .cast<CKModifyBadgeOperationInfo>();
  }

  static int badgeValue(
    Pointer<CKModifyBadgeOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("badgeValue"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKModifyBadgeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifyBadgeOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setBadgeValue(
    Pointer<CKModifyBadgeOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBadgeValue:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyRecordAccessOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordAccessOperation
    extends Struct<CKModifyRecordAccessOperation> {
  factory CKModifyRecordAccessOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordAccessOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordAccessOperation")
        .cast<CKModifyRecordAccessOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static Pointer<Void> grantedRecordIDs(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("grantedRecordIDs"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithRecordIDsToGrantAccess(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordIDsToRevokeAccess,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithRecordIDsToGrantAccess:recordIDsToRevokeAccess:"),
      arg,
      recordIDsToRevokeAccess,
    );
  }

  static void performCKOperation(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordAccessCompletionBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordAccessCompletionBlock"),
    );
  }

  static Pointer<Void> recordAccessGrantedBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordAccessGrantedBlock"),
    );
  }

  static Pointer<Void> recordAccessRevokedBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordAccessRevokedBlock"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordIDsToGrant(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToGrant"),
    );
  }

  static Pointer<Void> recordIDsToRevoke(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToRevoke"),
    );
  }

  static Pointer<Void> revokedRecordIDs(
    Pointer<CKModifyRecordAccessOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("revokedRecordIDs"),
    );
  }

  static void setGrantedRecordIDs(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGrantedRecordIDs:"),
      arg,
    );
  }

  static void setRecordAccessCompletionBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordAccessCompletionBlock:"),
      arg,
    );
  }

  static void setRecordAccessGrantedBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordAccessGrantedBlock:"),
      arg,
    );
  }

  static void setRecordAccessRevokedBlock(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordAccessRevokedBlock:"),
      arg,
    );
  }

  static void setRecordErrors(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordIDsToGrant(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToGrant:"),
      arg,
    );
  }

  static void setRecordIDsToRevoke(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToRevoke:"),
      arg,
    );
  }

  static void setRevokedRecordIDs(
    Pointer<CKModifyRecordAccessOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRevokedRecordIDs:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyRecordAccessOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordAccessOperationInfo
    extends Struct<CKModifyRecordAccessOperationInfo> {
  factory CKModifyRecordAccessOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordAccessOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordAccessOperationInfo")
        .cast<CKModifyRecordAccessOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordIDsToGrant(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToGrant"),
    );
  }

  static Pointer<Void> recordIDsToRevoke(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToRevoke"),
    );
  }

  static void setRecordIDsToGrant(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToGrant:"),
      arg,
    );
  }

  static void setRecordIDsToRevoke(
    Pointer<CKModifyRecordAccessOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToRevoke:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyRecordZonesOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordZonesOperation
    extends Struct<CKModifyRecordZonesOperation> {
  factory CKModifyRecordZonesOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordZonesOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordZonesOperation")
        .cast<CKModifyRecordZonesOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> deletedRecordZoneIDs(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedRecordZoneIDs"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordZonesToSave(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordZoneIDsToDelete,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordZonesToSave:recordZoneIDsToDelete:"),
      arg,
      recordZoneIDsToDelete,
    );
  }

  static int markZonesAsUserPurged(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("markZonesAsUserPurged"),
    );
  }

  static Pointer<Void> modifyRecordZonesCompletionBlock(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifyRecordZonesCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordZoneErrors(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneErrors"),
    );
  }

  static Pointer<Void> recordZoneIDsToDelete(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDsToDelete"),
    );
  }

  static Pointer<Void> recordZonesByZoneIDs(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZonesByZoneIDs"),
    );
  }

  static Pointer<Void> recordZonesToSave(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZonesToSave"),
    );
  }

  static Pointer<Void> savedRecordZones(
    Pointer<CKModifyRecordZonesOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedRecordZones"),
    );
  }

  static void setDeletedRecordZoneIDs(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedRecordZoneIDs:"),
      arg,
    );
  }

  static void setMarkZonesAsUserPurged(
    Pointer<CKModifyRecordZonesOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMarkZonesAsUserPurged:"),
      arg,
    );
  }

  static void setModifyRecordZonesCompletionBlock(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifyRecordZonesCompletionBlock:"),
      arg,
    );
  }

  static void setRecordZoneErrors(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneErrors:"),
      arg,
    );
  }

  static void setRecordZoneIDsToDelete(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDsToDelete:"),
      arg,
    );
  }

  static void setRecordZonesByZoneIDs(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZonesByZoneIDs:"),
      arg,
    );
  }

  static void setRecordZonesToSave(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZonesToSave:"),
      arg,
    );
  }

  static void setSavedRecordZones(
    Pointer<CKModifyRecordZonesOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedRecordZones:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyRecordZonesOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordZonesOperationInfo
    extends Struct<CKModifyRecordZonesOperationInfo> {
  factory CKModifyRecordZonesOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordZonesOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordZonesOperationInfo")
        .cast<CKModifyRecordZonesOperationInfo>();
  }

  static int allowDefaultZoneSave(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowDefaultZoneSave"),
    );
  }

  static int dontFetchFromServer(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("dontFetchFromServer"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int markZonesAsUserPurged(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("markZonesAsUserPurged"),
    );
  }

  static int maxZoneSaveAttempts(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("maxZoneSaveAttempts"),
    );
  }

  static Pointer<Void> recordZoneIDsToDelete(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneIDsToDelete"),
    );
  }

  static Pointer<Void> recordZonesToSave(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZonesToSave"),
    );
  }

  static void setAllowDefaultZoneSave(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowDefaultZoneSave:"),
      arg,
    );
  }

  static void setDontFetchFromServer(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDontFetchFromServer:"),
      arg,
    );
  }

  static void setMarkZonesAsUserPurged(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMarkZonesAsUserPurged:"),
      arg,
    );
  }

  static void setMaxZoneSaveAttempts(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setMaxZoneSaveAttempts:"),
      arg,
    );
  }

  static void setRecordZoneIDsToDelete(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneIDsToDelete:"),
      arg,
    );
  }

  static void setRecordZonesToSave(
    Pointer<CKModifyRecordZonesOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZonesToSave:"),
      arg,
    );
  }
}

/// Objective-C class _CKModifyRecordsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordsOperation extends Struct<CKModifyRecordsOperation> {
  factory CKModifyRecordsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordsOperation")
        .cast<CKModifyRecordsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetsByRecordIDAndRecordKey(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetsByRecordIDAndRecordKey"),
    );
  }

  static int atomic(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("atomic"),
    );
  }

  static int claimPackagesInRecord(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("claimPackagesInRecord:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> clientChangeTokenData(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientChangeTokenData"),
    );
  }

  static Pointer<Void> conflictLosersToResolveByRecordID(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictLosersToResolveByRecordID"),
    );
  }

  static Pointer<Void> deletedRecordIDs(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedRecordIDs"),
    );
  }

  static void destroyPackages(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("destroyPackages:"),
      arg,
    );
  }

  static void destroyPackagesInRecords(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("destroyPackagesInRecords:"),
      arg,
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRecordsToSave(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordIDsToDelete,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordsToSave:recordIDsToDelete:"),
      arg,
      recordIDsToDelete,
    );
  }

  static Pointer<Void> modifyRecordsCompletionBlock(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifyRecordsCompletionBlock"),
    );
  }

  static Pointer<Void> packagesToDestroy(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("packagesToDestroy"),
    );
  }

  static Pointer<Void> perRecordCompletionBlock(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordCompletionBlock"),
    );
  }

  static Pointer<Void> perRecordProgressBlock(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perRecordProgressBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> pluginFieldsForRecordDeletesByID(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pluginFieldsForRecordDeletesByID"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordIDsToDelete(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToDelete"),
    );
  }

  static Pointer<Void> recordIDsToDeleteToEtags(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToDeleteToEtags"),
    );
  }

  static Pointer<Void> recordsByRecordIDs(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordsByRecordIDs"),
    );
  }

  static Pointer<Void> recordsInFlightBlock(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordsInFlightBlock"),
    );
  }

  static Pointer<Void> recordsToSave(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordsToSave"),
    );
  }

  static int savePolicy(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("savePolicy"),
    );
  }

  static Pointer<Void> savedRecords(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedRecords"),
    );
  }

  static void setAssetsByRecordIDAndRecordKey(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetsByRecordIDAndRecordKey:"),
      arg,
    );
  }

  static void setAtomic(
    Pointer<CKModifyRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAtomic:"),
      arg,
    );
  }

  static void setClientChangeTokenData(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientChangeTokenData:"),
      arg,
    );
  }

  static void setConflictLosersToResolveByRecordID(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictLosersToResolveByRecordID:"),
      arg,
    );
  }

  static void setDeletedRecordIDs(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedRecordIDs:"),
      arg,
    );
  }

  static void setModifyRecordsCompletionBlock(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifyRecordsCompletionBlock:"),
      arg,
    );
  }

  static void setPackagesToDestroy(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPackagesToDestroy:"),
      arg,
    );
  }

  static void setPerRecordCompletionBlock(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordCompletionBlock:"),
      arg,
    );
  }

  static void setPerRecordProgressBlock(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerRecordProgressBlock:"),
      arg,
    );
  }

  static void setPluginFieldsForRecordDeletesByID(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPluginFieldsForRecordDeletesByID:"),
      arg,
    );
  }

  static void setRecordErrors(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordIDsToDelete(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToDelete:"),
      arg,
    );
  }

  static void setRecordIDsToDeleteToEtags(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToDeleteToEtags:"),
      arg,
    );
  }

  static void setRecordsByRecordIDs(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordsByRecordIDs:"),
      arg,
    );
  }

  static void setRecordsInFlightBlock(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordsInFlightBlock:"),
      arg,
    );
  }

  static void setRecordsToSave(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordsToSave:"),
      arg,
    );
  }

  static void setSavePolicy(
    Pointer<CKModifyRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSavePolicy:"),
      arg,
    );
  }

  static void setSavedRecords(
    Pointer<CKModifyRecordsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedRecords:"),
      arg,
    );
  }

  static void setShouldOnlySaveAssetContent(
    Pointer<CKModifyRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldOnlySaveAssetContent:"),
      arg,
    );
  }

  static void setShouldReportRecordsInFlight(
    Pointer<CKModifyRecordsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportRecordsInFlight:"),
      arg,
    );
  }

  static int shouldOnlySaveAssetContent(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldOnlySaveAssetContent"),
    );
  }

  static int shouldReportRecordsInFlight(
    Pointer<CKModifyRecordsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportRecordsInFlight"),
    );
  }
}

/// Objective-C class _CKModifyRecordsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyRecordsOperationInfo
    extends Struct<CKModifyRecordsOperationInfo> {
  factory CKModifyRecordsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyRecordsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyRecordsOperationInfo")
        .cast<CKModifyRecordsOperationInfo>();
  }

  static int atomic(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("atomic"),
    );
  }

  static Pointer<Void> clientChangeTokenData(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientChangeTokenData"),
    );
  }

  static Pointer<Void> conflictLosersToResolveByRecordID(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictLosersToResolveByRecordID"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> pluginFieldsForRecordDeletesByID(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pluginFieldsForRecordDeletesByID"),
    );
  }

  static Pointer<Void> recordIDsToDelete(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToDelete"),
    );
  }

  static Pointer<Void> recordIDsToDeleteToEtags(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToDeleteToEtags"),
    );
  }

  static Pointer<Void> recordsToSave(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordsToSave"),
    );
  }

  static int savePolicy(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("savePolicy"),
    );
  }

  static void setAtomic(
    Pointer<CKModifyRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAtomic:"),
      arg,
    );
  }

  static void setClientChangeTokenData(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientChangeTokenData:"),
      arg,
    );
  }

  static void setConflictLosersToResolveByRecordID(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictLosersToResolveByRecordID:"),
      arg,
    );
  }

  static void setPluginFieldsForRecordDeletesByID(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPluginFieldsForRecordDeletesByID:"),
      arg,
    );
  }

  static void setRecordIDsToDelete(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToDelete:"),
      arg,
    );
  }

  static void setRecordIDsToDeleteToEtags(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToDeleteToEtags:"),
      arg,
    );
  }

  static void setRecordsToSave(
    Pointer<CKModifyRecordsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordsToSave:"),
      arg,
    );
  }

  static void setSavePolicy(
    Pointer<CKModifyRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSavePolicy:"),
      arg,
    );
  }

  static void setShouldOnlySaveAssetContent(
    Pointer<CKModifyRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldOnlySaveAssetContent:"),
      arg,
    );
  }

  static void setShouldReportRecordsInFlight(
    Pointer<CKModifyRecordsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportRecordsInFlight:"),
      arg,
    );
  }

  static int shouldOnlySaveAssetContent(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldOnlySaveAssetContent"),
    );
  }

  static int shouldReportRecordsInFlight(
    Pointer<CKModifyRecordsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportRecordsInFlight"),
    );
  }
}

/// Objective-C class _CKModifySubscriptionsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifySubscriptionsOperation
    extends Struct<CKModifySubscriptionsOperation> {
  factory CKModifySubscriptionsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifySubscriptionsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifySubscriptionsOperation")
        .cast<CKModifySubscriptionsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> deletedSubscriptionIDs(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deletedSubscriptionIDs"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithSubscriptionsToSave(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> subscriptionIDsToDelete,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSubscriptionsToSave:subscriptionIDsToDelete:"),
      arg,
      subscriptionIDsToDelete,
    );
  }

  static Pointer<Void> modifySubscriptionsCompletionBlock(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifySubscriptionsCompletionBlock"),
    );
  }

  static void performCKOperation(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> savedSubscriptions(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedSubscriptions"),
    );
  }

  static void setDeletedSubscriptionIDs(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeletedSubscriptionIDs:"),
      arg,
    );
  }

  static void setModifySubscriptionsCompletionBlock(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifySubscriptionsCompletionBlock:"),
      arg,
    );
  }

  static void setSavedSubscriptions(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedSubscriptions:"),
      arg,
    );
  }

  static void setSubscriptionErrors(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionErrors:"),
      arg,
    );
  }

  static void setSubscriptionIDsToDelete(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionIDsToDelete:"),
      arg,
    );
  }

  static void setSubscriptionsBySubscriptionIDs(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionsBySubscriptionIDs:"),
      arg,
    );
  }

  static void setSubscriptionsToSave(
    Pointer<CKModifySubscriptionsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionsToSave:"),
      arg,
    );
  }

  static Pointer<Void> subscriptionErrors(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionErrors"),
    );
  }

  static Pointer<Void> subscriptionIDsToDelete(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionIDsToDelete"),
    );
  }

  static Pointer<Void> subscriptionsBySubscriptionIDs(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionsBySubscriptionIDs"),
    );
  }

  static Pointer<Void> subscriptionsToSave(
    Pointer<CKModifySubscriptionsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionsToSave"),
    );
  }
}

/// Objective-C class _CKModifySubscriptionsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifySubscriptionsOperationInfo
    extends Struct<CKModifySubscriptionsOperationInfo> {
  factory CKModifySubscriptionsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifySubscriptionsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifySubscriptionsOperationInfo")
        .cast<CKModifySubscriptionsOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setSubscriptionIDsToDelete(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionIDsToDelete:"),
      arg,
    );
  }

  static void setSubscriptionsToSave(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionsToSave:"),
      arg,
    );
  }

  static Pointer<Void> subscriptionIDsToDelete(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionIDsToDelete"),
    );
  }

  static Pointer<Void> subscriptionsToSave(
    Pointer<CKModifySubscriptionsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionsToSave"),
    );
  }
}

/// Objective-C class _CKModifyWebSharingOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyWebSharingOperation extends Struct<CKModifyWebSharingOperation> {
  factory CKModifyWebSharingOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyWebSharingOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyWebSharingOperation")
        .cast<CKModifyWebSharingOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithRecordIDsToWebShare(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordIDsToUnshare,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordIDsToWebShare:recordIDsToUnshare:"),
      arg,
      recordIDsToUnshare,
    );
  }

  static void performCKOperation(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> recordErrors(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordErrors"),
    );
  }

  static Pointer<Void> recordIDsToShare(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToShare"),
    );
  }

  static Pointer<Void> recordIDsToShareReadWrite(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToShareReadWrite"),
    );
  }

  static Pointer<Void> recordIDsToUnshare(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToUnshare"),
    );
  }

  static Pointer<Void> recordSharedBlock(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordSharedBlock"),
    );
  }

  static Pointer<Void> recordUnsharedBlock(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordUnsharedBlock"),
    );
  }

  static void setRecordErrors(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordErrors:"),
      arg,
    );
  }

  static void setRecordIDsToShare(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToShare:"),
      arg,
    );
  }

  static void setRecordIDsToShareReadWrite(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToShareReadWrite:"),
      arg,
    );
  }

  static void setRecordIDsToUnshare(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToUnshare:"),
      arg,
    );
  }

  static void setRecordSharedBlock(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordSharedBlock:"),
      arg,
    );
  }

  static void setRecordUnsharedBlock(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordUnsharedBlock:"),
      arg,
    );
  }

  static void setSharedRecordIDs(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedRecordIDs:"),
      arg,
    );
  }

  static void setUnsharedRecordIDs(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUnsharedRecordIDs:"),
      arg,
    );
  }

  static void setWebShareRecordsCompletionBlock(
    Pointer<CKModifyWebSharingOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebShareRecordsCompletionBlock:"),
      arg,
    );
  }

  static Pointer<Void> sharedRecordIDs(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedRecordIDs"),
    );
  }

  static Pointer<Void> unsharedRecordIDs(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("unsharedRecordIDs"),
    );
  }

  static Pointer<Void> webShareRecordsCompletionBlock(
    Pointer<CKModifyWebSharingOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webShareRecordsCompletionBlock"),
    );
  }
}

/// Objective-C class _CKModifyWebSharingOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKModifyWebSharingOperationInfo
    extends Struct<CKModifyWebSharingOperationInfo> {
  factory CKModifyWebSharingOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKModifyWebSharingOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKModifyWebSharingOperationInfo")
        .cast<CKModifyWebSharingOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKModifyWebSharingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKModifyWebSharingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordIDsToShare(
    Pointer<CKModifyWebSharingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToShare"),
    );
  }

  static Pointer<Void> recordIDsToShareReadWrite(
    Pointer<CKModifyWebSharingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToShareReadWrite"),
    );
  }

  static Pointer<Void> recordIDsToUnshare(
    Pointer<CKModifyWebSharingOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDsToUnshare"),
    );
  }

  static void setRecordIDsToShare(
    Pointer<CKModifyWebSharingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToShare:"),
      arg,
    );
  }

  static void setRecordIDsToShareReadWrite(
    Pointer<CKModifyWebSharingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToShareReadWrite:"),
      arg,
    );
  }

  static void setRecordIDsToUnshare(
    Pointer<CKModifyWebSharingOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDsToUnshare:"),
      arg,
    );
  }
}

/// Objective-C class _CKNilValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKNilValidator extends Struct<CKNilValidator> {
  factory CKNilValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKNilValidator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKNilValidator").cast<CKNilValidator>();
  }

  static int validate(
    Pointer<CKNilValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKNotification extends Struct<CKNotification> {
  factory CKNotification._() {
    throw UnimplementedError();
  }
  static Pointer<CKNotification> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKNotification").cast<CKNotification>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> alertActionLocalizationKey(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertActionLocalizationKey"),
    );
  }

  static Pointer<Void> alertBody(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertBody"),
    );
  }

  static Pointer<Void> alertLaunchImage(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLaunchImage"),
    );
  }

  static Pointer<Void> alertLocalizationArgs(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLocalizationArgs"),
    );
  }

  static Pointer<Void> alertLocalizationKey(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLocalizationKey"),
    );
  }

  static Pointer<Void> badge(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("badge"),
    );
  }

  static Pointer<Void> category(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("category"),
    );
  }

  static Pointer<Void> containerIdentifier(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRemoteNotificationDictionary(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRemoteNotificationDictionary:"),
      arg,
    );
  }

  static int isPruned(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPruned"),
    );
  }

  static int isRead(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRead"),
    );
  }

  static Pointer<Void> notificationID(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationID"),
    );
  }

  static int notificationType(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("notificationType"),
    );
  }

  static void setAlertActionLocalizationKey(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertActionLocalizationKey:"),
      arg,
    );
  }

  static void setAlertBody(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertBody:"),
      arg,
    );
  }

  static void setAlertLaunchImage(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLaunchImage:"),
      arg,
    );
  }

  static void setAlertLocalizationArgs(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLocalizationArgs:"),
      arg,
    );
  }

  static void setAlertLocalizationKey(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLocalizationKey:"),
      arg,
    );
  }

  static void setBadge(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBadge:"),
      arg,
    );
  }

  static void setCategory(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCategory:"),
      arg,
    );
  }

  static void setContainerIdentifier(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerIdentifier:"),
      arg,
    );
  }

  static void setIsPruned(
    Pointer<CKNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsPruned:"),
      arg,
    );
  }

  static void setNotificationID(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationID:"),
      arg,
    );
  }

  static void setNotificationType(
    Pointer<CKNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setNotificationType:"),
      arg,
    );
  }

  static void setSoundName(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSoundName:"),
      arg,
    );
  }

  static void setSubscriptionID(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionID:"),
      arg,
    );
  }

  static void setSubtitle(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitle:"),
      arg,
    );
  }

  static void setSubtitleLocalizationArgs(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitleLocalizationArgs:"),
      arg,
    );
  }

  static void setSubtitleLocalizationKey(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitleLocalizationKey:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setTitleLocalizationArgs(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitleLocalizationArgs:"),
      arg,
    );
  }

  static void setTitleLocalizationKey(
    Pointer<CKNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitleLocalizationKey:"),
      arg,
    );
  }

  static Pointer<Void> soundName(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("soundName"),
    );
  }

  static Pointer<Void> subscriptionID(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionID"),
    );
  }

  static Pointer<Void> subtitle(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitle"),
    );
  }

  static Pointer<Void> subtitleLocalizationArgs(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitleLocalizationArgs"),
    );
  }

  static Pointer<Void> subtitleLocalizationKey(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitleLocalizationKey"),
    );
  }

  static Pointer<Void> title(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer<Void> titleLocalizationArgs(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("titleLocalizationArgs"),
    );
  }

  static Pointer<Void> titleLocalizationKey(
    Pointer<CKNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("titleLocalizationKey"),
    );
  }
}

/// Objective-C class _CKNotificationID_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKNotificationID extends Struct<CKNotificationID> {
  factory CKNotificationID._() {
    throw UnimplementedError();
  }
  static Pointer<CKNotificationID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKNotificationID").cast<CKNotificationID>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKNotificationID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> CKXPCSuitableString(
    Pointer<CKNotificationID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKXPCSuitableString"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKNotificationID> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKNotificationID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKNotificationID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKNotificationID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKNotificationID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKNotificationID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> notificationUUID(
    Pointer<CKNotificationID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationUUID"),
    );
  }

  static void setNotificationUUID(
    Pointer<CKNotificationID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationUUID:"),
      arg,
    );
  }
}

/// Objective-C class _CKNotificationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKNotificationInfo extends Struct<CKNotificationInfo> {
  factory CKNotificationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKNotificationInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKNotificationInfo").cast<CKNotificationInfo>();
  }

  static Pointer<Void> alertActionLocalizationKey(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertActionLocalizationKey"),
    );
  }

  static Pointer<Void> alertBody(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertBody"),
    );
  }

  static Pointer<Void> alertLaunchImage(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLaunchImage"),
    );
  }

  static Pointer<Void> alertLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLocalizationArgs"),
    );
  }

  static Pointer<Void> alertLocalizationKey(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alertLocalizationKey"),
    );
  }

  static Pointer<Void> category(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("category"),
    );
  }

  static Pointer<Void> collapseIDKey(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("collapseIDKey"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKNotificationInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setAlertActionLocalizationKey(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertActionLocalizationKey:"),
      arg,
    );
  }

  static void setAlertBody(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertBody:"),
      arg,
    );
  }

  static void setAlertLaunchImage(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLaunchImage:"),
      arg,
    );
  }

  static void setAlertLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLocalizationArgs:"),
      arg,
    );
  }

  static void setAlertLocalizationKey(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAlertLocalizationKey:"),
      arg,
    );
  }

  static void setCategory(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCategory:"),
      arg,
    );
  }

  static void setCollapseIDKey(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCollapseIDKey:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setShouldBadge(
    Pointer<CKNotificationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldBadge:"),
      arg,
    );
  }

  static void setShouldSendContentAvailable(
    Pointer<CKNotificationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldSendContentAvailable:"),
      arg,
    );
  }

  static void setShouldSendMutableContent(
    Pointer<CKNotificationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldSendMutableContent:"),
      arg,
    );
  }

  static void setSoundName(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSoundName:"),
      arg,
    );
  }

  static void setSubtitle(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitle:"),
      arg,
    );
  }

  static void setSubtitleLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitleLocalizationArgs:"),
      arg,
    );
  }

  static void setSubtitleLocalizationKey(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubtitleLocalizationKey:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setTitleLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitleLocalizationArgs:"),
      arg,
    );
  }

  static void setTitleLocalizationKey(
    Pointer<CKNotificationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitleLocalizationKey:"),
      arg,
    );
  }

  static int shouldBadge(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBadge"),
    );
  }

  static int shouldSendContentAvailable(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSendContentAvailable"),
    );
  }

  static int shouldSendMutableContent(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSendMutableContent"),
    );
  }

  static Pointer<Void> soundName(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("soundName"),
    );
  }

  static Pointer<Void> subtitle(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitle"),
    );
  }

  static Pointer<Void> subtitleLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitleLocalizationArgs"),
    );
  }

  static Pointer<Void> subtitleLocalizationKey(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subtitleLocalizationKey"),
    );
  }

  static Pointer<Void> title(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer<Void> titleLocalizationArgs(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("titleLocalizationArgs"),
    );
  }

  static Pointer<Void> titleLocalizationKey(
    Pointer<CKNotificationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("titleLocalizationKey"),
    );
  }
}

/// Objective-C class _CKObjCClass_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKObjCClass extends Struct<CKObjCClass> {
  factory CKObjCClass._() {
    throw UnimplementedError();
  }
  static Pointer<CKObjCClass> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKObjCClass").cast<CKObjCClass>();
  }

  static Pointer<Void> allProperties(
    Pointer<CKObjCClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allProperties"),
    );
  }

  static Pointer<Void> handle(
    Pointer<CKObjCClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("handle"),
    );
  }

  static Pointer<Void> initWithHandle(
    Pointer<CKObjCClass> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithHandle:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<CKObjCClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> propertiesByName(
    Pointer<CKObjCClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("propertiesByName"),
    );
  }

  static Pointer<Void> propertyForName(
    Pointer<CKObjCClass> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForName:"),
      arg,
    );
  }

  static Pointer<Void> sortedProperties(
    Pointer<CKObjCClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sortedProperties"),
    );
  }
}

/// Objective-C class _CKObjCProperty_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKObjCProperty extends Struct<CKObjCProperty> {
  factory CKObjCProperty._() {
    throw UnimplementedError();
  }
  static Pointer<CKObjCProperty> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKObjCProperty").cast<CKObjCProperty>();
  }

  static Pointer<Void> classHandle(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classHandle"),
    );
  }

  static int compare(
    Pointer<CKObjCProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static int compareToProperty(
    Pointer<CKObjCProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareToProperty:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int flags(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("flags"),
    );
  }

  static Pointer<Void> getFromObject(
    Pointer<CKObjCProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("getFromObject:"),
      arg,
    );
  }

  static Pointer<Void> getterMethodSignature(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("getterMethodSignature"),
    );
  }

  static Pointer<Void> getterSelector(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("getterSelector"),
    );
  }

  static Pointer<Void> getterSelectorName(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("getterSelectorName"),
    );
  }

  static Pointer<Void> initWithClass(
    Pointer<CKObjCProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> property,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClass:property:"),
      arg,
      property,
    );
  }

  static Pointer<Void> instanceVariableName(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("instanceVariableName"),
    );
  }

  static Pointer<Void> name(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setValue(
    Pointer<CKObjCProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:onObject:"),
      arg,
      onObject,
    );
  }

  static Pointer<Void> setterMethodSignature(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setterMethodSignature"),
    );
  }

  static Pointer<Void> setterSelector(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setterSelector"),
    );
  }

  static Pointer<Void> setterSelectorName(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setterSelectorName"),
    );
  }

  static Pointer<Void> type(
    Pointer<CKObjCProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Objective-C class _CKObjCType_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKObjCType extends Struct<CKObjCType> {
  factory CKObjCType._() {
    throw UnimplementedError();
  }
  static Pointer<CKObjCType> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKObjCType").cast<CKObjCType>();
  }

  static Pointer<Void> className(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("className"),
    );
  }

  static int code(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("code"),
    );
  }

  static Pointer<Void> encoding(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encoding"),
    );
  }

  static int flags(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("flags"),
    );
  }

  static void getBytes(
    Pointer<CKObjCType> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getBytes:forObject:"),
      arg,
      forObject,
    );
  }

  static Pointer<Void> initWithCode(
    Pointer<CKObjCType> _self,
    int arg, {
    @required Pointer<Void> encoding,
    @required Pointer<Void> name,
    @required Pointer<Void> className,
    @required int size,
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCode:encoding:name:className:size:flags:"),
      arg,
      encoding,
      name,
      className,
      size,
      flags,
    );
  }

  static int isFloatingPointNumber(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFloatingPointNumber"),
    );
  }

  static int isIntegerNumber(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isIntegerNumber"),
    );
  }

  static int isNumber(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNumber"),
    );
  }

  static int isObject(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isObject"),
    );
  }

  static Pointer<Void> name(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objectWithBytes(
    Pointer<CKObjCType> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectWithBytes:"),
      arg,
    );
  }

  static int size(
    Pointer<CKObjCType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }
}

/// Objective-C class _CKObject_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKObject extends Struct<CKObject> {
  factory CKObject._() {
    throw UnimplementedError();
  }
  static Pointer<CKObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKObject").cast<CKObject>();
  }

  static Pointer<Void> description(
    Pointer<CKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryPropertyEncoding(
    Pointer<CKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryPropertyEncoding"),
    );
  }

  static int hash(
    Pointer<CKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithPropertyDictionary(
    Pointer<CKObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPropertyDictionary:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> objcClass(
    Pointer<CKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClass"),
    );
  }

  static Pointer<Void> propertyNamesNotToEncode(
    Pointer<CKObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("propertyNamesNotToEncode"),
    );
  }
}

/// Objective-C class _CKOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperation extends Struct<CKOperation> {
  factory CKOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKOperation").cast<CKOperation>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKOperation> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static int CKOperationShouldRun(
    Pointer<CKOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> MMCSRequestOptions(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("MMCSRequestOptions"),
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> additionalRequestHTTPHeaders(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("additionalRequestHTTPHeaders"),
    );
  }

  static int allowsBackgroundNetworking(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsBackgroundNetworking"),
    );
  }

  static int allowsCellularAccess(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static Pointer<Void> callbackQueue(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("callbackQueue"),
    );
  }

  static void cancel(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> cancelError(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cancelError"),
    );
  }

  static void cancelWithUnderlyingError(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelWithUnderlyingError:"),
      arg,
    );
  }

  static Pointer<Void> clientVoucher(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientVoucher"),
    );
  }

  static int clouddConnectionInterrupted(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("clouddConnectionInterrupted"),
    );
  }

  static Pointer<Void> configuration(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("configuration"),
    );
  }

  static Pointer<Void> container(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer<Void> context(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("context"),
    );
  }

  static Pointer<Void> daemon(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daemon"),
    );
  }

  static void dealloc(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> deviceIdentifier(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceIdentifier"),
    );
  }

  static Pointer<Void> error(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static void finishWithError(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("finishWithError:"),
      arg,
    );
  }

  static Pointer<Void> flowControlKey(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("flowControlKey"),
    );
  }

  static Pointer<Void> group(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("group"),
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isConcurrent(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConcurrent"),
    );
  }

  static int isExecuting(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static int isFinishingOnCallbackQueue(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinishingOnCallbackQueue"),
    );
  }

  static int isLongLived(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLongLived"),
    );
  }

  static int isOutstandingOperation(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOutstandingOperation"),
    );
  }

  static Pointer<Void> longLivedOperationWasPersistedBlock(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("longLivedOperationWasPersistedBlock"),
    );
  }

  static void main(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer<Void> metrics(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("metrics"),
    );
  }

  static Pointer<Void> operationClass(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationClass"),
    );
  }

  static Pointer<Void> operationID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationID"),
    );
  }

  static Pointer<Void> operationInfo(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfo"),
    );
  }

  static Pointer<Void> operationInfoClass(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationInfoClass"),
    );
  }

  static Pointer<Void> operationMetric(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationMetric"),
    );
  }

  static Pointer<Void> osActivity(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("osActivity"),
    );
  }

  static Pointer<Void> parentSectionID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentSectionID"),
    );
  }

  static void performCKOperation(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> placeholderOperation(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("placeholderOperation"),
    );
  }

  static int preferAnonymousRequests(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preferAnonymousRequests"),
    );
  }

  static void processOperationResult(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processOperationResult:"),
      arg,
    );
  }

  static int qualityOfService(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static int queueHasStarted(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("queueHasStarted"),
    );
  }

  static Pointer<Void> requestCompletedBlock(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestCompletedBlock"),
    );
  }

  static Pointer<Void> requestUUIDs(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestUUIDs"),
    );
  }

  static Pointer<Void> resolvedConfiguration(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resolvedConfiguration"),
    );
  }

  static Pointer<Void> responseHTTPHeadersByRequestUUID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseHTTPHeadersByRequestUUID"),
    );
  }

  static Pointer<Void> savedRequestUUIDs(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedRequestUUIDs"),
    );
  }

  static Pointer<Void> savedResponseHTTPHeadersByRequestUUID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedResponseHTTPHeadersByRequestUUID"),
    );
  }

  static Pointer<Void> savedW3CNavigationTimingByRequestUUID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("savedW3CNavigationTimingByRequestUUID"),
    );
  }

  static Pointer<Void> sectionID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sectionID"),
    );
  }

  static void setAdditionalRequestHTTPHeaders(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAdditionalRequestHTTPHeaders:"),
      arg,
    );
  }

  static void setAllowsBackgroundNetworking(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsBackgroundNetworking:"),
      arg,
    );
  }

  static void setAllowsCellularAccess(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsCellularAccess:"),
      arg,
    );
  }

  static void setCallbackQueue(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCallbackQueue:"),
      arg,
    );
  }

  static void setCancelError(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCancelError:"),
      arg,
    );
  }

  static void setClientVoucher(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientVoucher:"),
      arg,
    );
  }

  static void setClouddConnectionInterrupted(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setClouddConnectionInterrupted:"),
      arg,
    );
  }

  static void setCompletionBlock(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompletionBlock:"),
      arg,
    );
  }

  static void setConfiguration(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConfiguration:"),
      arg,
    );
  }

  static void setContainer(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }

  static void setDeviceIdentifier(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceIdentifier:"),
      arg,
    );
  }

  static void setError(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setGroup(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGroup:"),
      arg,
    );
  }

  static void setIsExecuting(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsExecuting:"),
      arg,
    );
  }

  static void setIsFinished(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFinished:"),
      arg,
    );
  }

  static void setIsOutstandingOperation(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsOutstandingOperation:"),
      arg,
    );
  }

  static void setLongLived(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLongLived:"),
      arg,
    );
  }

  static void setLongLivedOperationWasPersistedBlock(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLongLivedOperationWasPersistedBlock:"),
      arg,
    );
  }

  static void setMMCSRequestOptions(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMMCSRequestOptions:"),
      arg,
    );
  }

  static void setMetrics(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMetrics:"),
      arg,
    );
  }

  static void setOperationID(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationID:"),
      arg,
    );
  }

  static void setOsActivity(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOsActivity:"),
      arg,
    );
  }

  static void setPlaceholderOperation(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPlaceholderOperation:"),
      arg,
    );
  }

  static void setPreferAnonymousRequests(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPreferAnonymousRequests:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setQueueHasStarted(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setQueueHasStarted:"),
      arg,
    );
  }

  static void setRequestCompletedBlock(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestCompletedBlock:"),
      arg,
    );
  }

  static void setSavedRequestUUIDs(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedRequestUUIDs:"),
      arg,
    );
  }

  static void setSavedResponseHTTPHeadersByRequestUUID(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedResponseHTTPHeadersByRequestUUID:"),
      arg,
    );
  }

  static void setSavedW3CNavigationTimingByRequestUUID(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSavedW3CNavigationTimingByRequestUUID:"),
      arg,
    );
  }

  static void setSectionID(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSectionID:"),
      arg,
    );
  }

  static void setSourceApplicationBundleIdentifier(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationBundleIdentifier:"),
      arg,
    );
  }

  static void setSourceApplicationSecondaryIdentifier(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationSecondaryIdentifier:"),
      arg,
    );
  }

  static void setTimeLogger(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeLogger:"),
      arg,
    );
  }

  static void setTimeoutIntervalForRequest(
    Pointer<CKOperation> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimeoutIntervalForRequest:"),
      arg,
    );
  }

  static void setTimeoutIntervalForResource(
    Pointer<CKOperation> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimeoutIntervalForResource:"),
      arg,
    );
  }

  static void setTimeoutSource(
    Pointer<CKOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeoutSource:"),
      arg,
    );
  }

  static void setUsesBackgroundSession(
    Pointer<CKOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesBackgroundSession:"),
      arg,
    );
  }

  static Pointer<Void> sourceApplicationBundleIdentifier(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationBundleIdentifier"),
    );
  }

  static Pointer<Void> sourceApplicationSecondaryIdentifier(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationSecondaryIdentifier"),
    );
  }

  static void start(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static Pointer<Void> timeLogger(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeLogger"),
    );
  }

  static double timeoutIntervalForRequest(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForRequest"),
    );
  }

  static double timeoutIntervalForResource(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForResource"),
    );
  }

  static Pointer<Void> timeoutSource(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeoutSource"),
    );
  }

  static int usesBackgroundSession(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesBackgroundSession"),
    );
  }

  static Pointer<Void> w3cNavigationTimingByRequestUUID(
    Pointer<CKOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("w3cNavigationTimingByRequestUUID"),
    );
  }
}

/// Objective-C class _CKOperationCallbackManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationCallbackManager extends Struct<CKOperationCallbackManager> {
  factory CKOperationCallbackManager._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationCallbackManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationCallbackManager")
        .cast<CKOperationCallbackManager>();
  }

  static Pointer<Void> checkpointCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("checkpointCallbacks"),
    );
  }

  static Pointer<Void> commandCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandCallbacks"),
    );
  }

  static Pointer<Void> completionCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completionCallbacks"),
    );
  }

  static void handleOperationCheckpoint(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCheckpoint:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationCompletion(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationCompletion:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static void handleOperationProgress(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationProgress:forOperationWithID:reply:"),
      arg,
      forOperationWithID,
      reply,
    );
  }

  static void handleOperationStatistics(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperationWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleOperationStatistics:forOperationWithID:"),
      arg,
      forOperationWithID,
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> operationsByID(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationsByID"),
    );
  }

  static Pointer<Void> progressCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("progressCallbacks"),
    );
  }

  static void registerCheckpointCallback(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerCheckpointCallback:forOperation:"),
      arg,
      forOperation,
    );
  }

  static void registerCommandCallback(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerCommandCallback:forOperation:"),
      arg,
      forOperation,
    );
  }

  static void registerCompletionCallback(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerCompletionCallback:forOperation:"),
      arg,
      forOperation,
    );
  }

  static void registerProgressCallback(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerProgressCallback:forOperation:"),
      arg,
      forOperation,
    );
  }

  static void registerStatisticsCallback(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forOperation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerStatisticsCallback:forOperation:"),
      arg,
      forOperation,
    );
  }

  static void removeAllCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllCallbacks"),
    );
  }

  static void setCheckpointCallbacks(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCheckpointCallbacks:"),
      arg,
    );
  }

  static void setCommandCallbacks(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCommandCallbacks:"),
      arg,
    );
  }

  static void setCompletionCallbacks(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompletionCallbacks:"),
      arg,
    );
  }

  static void setOperationsByID(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationsByID:"),
      arg,
    );
  }

  static void setProgressCallbacks(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProgressCallbacks:"),
      arg,
    );
  }

  static void setStatisticsCallbacks(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatisticsCallbacks:"),
      arg,
    );
  }

  static Pointer<Void> statisticsCallbacks(
    Pointer<CKOperationCallbackManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statisticsCallbacks"),
    );
  }

  static void unregisterAllCallbacksForOperation(
    Pointer<CKOperationCallbackManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unregisterAllCallbacksForOperation:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationConfiguration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationConfiguration extends Struct<CKOperationConfiguration> {
  factory CKOperationConfiguration._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationConfiguration> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationConfiguration")
        .cast<CKOperationConfiguration>();
  }

  static Pointer<Void> additionalRequestHTTPHeaders(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("additionalRequestHTTPHeaders"),
    );
  }

  static int allowsBackgroundNetworking(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsBackgroundNetworking"),
    );
  }

  static int allowsCellularAccess(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static int automaticallyRetryNetworkFailures(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticallyRetryNetworkFailures"),
    );
  }

  static Pointer<Void> container(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int discretionaryNetworkBehavior(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("discretionaryNetworkBehavior"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hasAdditionalRequestHTTPHeaders(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAdditionalRequestHTTPHeaders"),
    );
  }

  static int hasAllowsBackgroundNetworking(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAllowsBackgroundNetworking"),
    );
  }

  static int hasAllowsCellularAccess(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAllowsCellularAccess"),
    );
  }

  static int hasAutomaticallyRetryNetworkFailures(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAutomaticallyRetryNetworkFailures"),
    );
  }

  static int hasContainer(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasContainer"),
    );
  }

  static int hasDiscretionaryNetworkBehavior(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasDiscretionaryNetworkBehavior"),
    );
  }

  static int hasLongLived(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLongLived"),
    );
  }

  static int hasPreferAnonymousRequests(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPreferAnonymousRequests"),
    );
  }

  static int hasQualityOfService(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasQualityOfService"),
    );
  }

  static int hasShouldSkipZonePCSUpdate(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasShouldSkipZonePCSUpdate"),
    );
  }

  static int hasSourceApplicationBundleIdentifier(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSourceApplicationBundleIdentifier"),
    );
  }

  static int hasSourceApplicationSecondaryIdentifier(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSourceApplicationSecondaryIdentifier"),
    );
  }

  static int hasTimeoutIntervalForRequest(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasTimeoutIntervalForRequest"),
    );
  }

  static int hasTimeoutIntervalForResource(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasTimeoutIntervalForResource"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isLongLived(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLongLived"),
    );
  }

  static int preferAnonymousRequests(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preferAnonymousRequests"),
    );
  }

  static int qualityOfService(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static Pointer<Void> resolveAgainstGenericConfiguration(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("resolveAgainstGenericConfiguration:"),
      arg,
    );
  }

  static void setAdditionalRequestHTTPHeaders(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAdditionalRequestHTTPHeaders:"),
      arg,
    );
  }

  static void setAllowsBackgroundNetworking(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsBackgroundNetworking:"),
      arg,
    );
  }

  static void setAllowsCellularAccess(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsCellularAccess:"),
      arg,
    );
  }

  static void setAutomaticallyRetryNetworkFailures(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticallyRetryNetworkFailures:"),
      arg,
    );
  }

  static void setContainer(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }

  static void setDiscretionaryNetworkBehavior(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDiscretionaryNetworkBehavior:"),
      arg,
    );
  }

  static void setHasAdditionalRequestHTTPHeaders(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasAdditionalRequestHTTPHeaders:"),
      arg,
    );
  }

  static void setHasAllowsBackgroundNetworking(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasAllowsBackgroundNetworking:"),
      arg,
    );
  }

  static void setHasAllowsCellularAccess(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasAllowsCellularAccess:"),
      arg,
    );
  }

  static void setHasAutomaticallyRetryNetworkFailures(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasAutomaticallyRetryNetworkFailures:"),
      arg,
    );
  }

  static void setHasContainer(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasContainer:"),
      arg,
    );
  }

  static void setHasDiscretionaryNetworkBehavior(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasDiscretionaryNetworkBehavior:"),
      arg,
    );
  }

  static void setHasLongLived(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasLongLived:"),
      arg,
    );
  }

  static void setHasPreferAnonymousRequests(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasPreferAnonymousRequests:"),
      arg,
    );
  }

  static void setHasQualityOfService(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasQualityOfService:"),
      arg,
    );
  }

  static void setHasShouldSkipZonePCSUpdate(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasShouldSkipZonePCSUpdate:"),
      arg,
    );
  }

  static void setHasSourceApplicationBundleIdentifier(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSourceApplicationBundleIdentifier:"),
      arg,
    );
  }

  static void setHasSourceApplicationSecondaryIdentifier(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSourceApplicationSecondaryIdentifier:"),
      arg,
    );
  }

  static void setHasTimeoutIntervalForRequest(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasTimeoutIntervalForRequest:"),
      arg,
    );
  }

  static void setHasTimeoutIntervalForResource(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasTimeoutIntervalForResource:"),
      arg,
    );
  }

  static void setLongLived(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLongLived:"),
      arg,
    );
  }

  static void setPreferAnonymousRequests(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPreferAnonymousRequests:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setQualityOfServiceWithoutQoSChecks(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfServiceWithoutQoSChecks:"),
      arg,
    );
  }

  static void setShouldSkipZonePCSUpdate(
    Pointer<CKOperationConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldSkipZonePCSUpdate:"),
      arg,
    );
  }

  static void setSourceApplicationBundleIdentifier(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationBundleIdentifier:"),
      arg,
    );
  }

  static void setSourceApplicationSecondaryIdentifier(
    Pointer<CKOperationConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSourceApplicationSecondaryIdentifier:"),
      arg,
    );
  }

  static void setTimeoutIntervalForRequest(
    Pointer<CKOperationConfiguration> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimeoutIntervalForRequest:"),
      arg,
    );
  }

  static void setTimeoutIntervalForResource(
    Pointer<CKOperationConfiguration> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTimeoutIntervalForResource:"),
      arg,
    );
  }

  static int shouldSkipZonePCSUpdate(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSkipZonePCSUpdate"),
    );
  }

  static Pointer<Void> sourceApplicationBundleIdentifier(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationBundleIdentifier"),
    );
  }

  static Pointer<Void> sourceApplicationSecondaryIdentifier(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationSecondaryIdentifier"),
    );
  }

  static double timeoutIntervalForRequest(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForRequest"),
    );
  }

  static double timeoutIntervalForResource(
    Pointer<CKOperationConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForResource"),
    );
  }
}

/// Objective-C class _CKOperationFlowControlInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationFlowControlInfo extends Struct<CKOperationFlowControlInfo> {
  factory CKOperationFlowControlInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationFlowControlInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationFlowControlInfo")
        .cast<CKOperationFlowControlInfo>();
  }

  static Pointer<Void> flowControlEndDate(
    Pointer<CKOperationFlowControlInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("flowControlEndDate"),
    );
  }

  static Pointer<Void> lastError(
    Pointer<CKOperationFlowControlInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastError"),
    );
  }

  static void setFlowControlEndDate(
    Pointer<CKOperationFlowControlInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFlowControlEndDate:"),
      arg,
    );
  }

  static void setLastError(
    Pointer<CKOperationFlowControlInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastError:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationFlowControlManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationFlowControlManager
    extends Struct<CKOperationFlowControlManager> {
  factory CKOperationFlowControlManager._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationFlowControlManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationFlowControlManager")
        .cast<CKOperationFlowControlManager>();
  }

  static Pointer<Void> CKStatusReportArray(
    Pointer<CKOperationFlowControlManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKStatusReportArray"),
    );
  }

  static Pointer<Void> flowControlledOperationKeys(
    Pointer<CKOperationFlowControlManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("flowControlledOperationKeys"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperationFlowControlManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isOperationLimited(
    Pointer<CKOperationFlowControlManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> outLimitError,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOperationLimited:outLimitError:"),
      arg,
      outLimitError,
    );
  }

  static void limitOperation(
    Pointer<CKOperationFlowControlManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> retryAfter,
    @required Pointer<Void> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("limitOperation:retryAfter:error:"),
      arg,
      retryAfter,
      error,
    );
  }

  static double secondsUntilUnlimited(
    Pointer<CKOperationFlowControlManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("secondsUntilUnlimited:"),
      arg,
    );
  }

  static void unlimitAllOperations(
    Pointer<CKOperationFlowControlManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlimitAllOperations"),
    );
  }
}

/// Objective-C class _CKOperationGroup_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationGroup extends Struct<CKOperationGroup> {
  factory CKOperationGroup._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationGroup> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKOperationGroup").cast<CKOperationGroup>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKOperationGroup> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static int approximateReceiveBytes(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("approximateReceiveBytes"),
    );
  }

  static int approximateSendBytes(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("approximateSendBytes"),
    );
  }

  static Pointer<Void> authPromptReason(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("authPromptReason"),
    );
  }

  static Pointer<Void> defaultConfiguration(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultConfiguration"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int expectedReceiveSize(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedReceiveSize"),
    );
  }

  static int expectedSendSize(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedSendSize"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> operationGroupID(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationGroupID"),
    );
  }

  static int quantity(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("quantity"),
    );
  }

  static Pointer<Void> quantityNumber(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("quantityNumber"),
    );
  }

  static int resolvedNetworkServiceTypeForConfig(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resolvedNetworkServiceTypeForConfig:"),
      arg,
    );
  }

  static void setAuthPromptReason(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAuthPromptReason:"),
      arg,
    );
  }

  static void setDefaultConfiguration(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultConfiguration:"),
      arg,
    );
  }

  static void setExpectedReceiveSize(
    Pointer<CKOperationGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setExpectedReceiveSize:"),
      arg,
    );
  }

  static void setExpectedSendSize(
    Pointer<CKOperationGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setExpectedSendSize:"),
      arg,
    );
  }

  static void setName(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setQuantity(
    Pointer<CKOperationGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setQuantity:"),
      arg,
    );
  }

  static void setQuantityNumber(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQuantityNumber:"),
      arg,
    );
  }

  static void setSystemImposedInfo(
    Pointer<CKOperationGroup> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSystemImposedInfo:"),
      arg,
    );
  }

  static Pointer<Void> systemImposedInfo(
    Pointer<CKOperationGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("systemImposedInfo"),
    );
  }
}

/// Objective-C class _CKOperationGroupSystemImposedInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationGroupSystemImposedInfo
    extends Struct<CKOperationGroupSystemImposedInfo> {
  factory CKOperationGroupSystemImposedInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationGroupSystemImposedInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationGroupSystemImposedInfo")
        .cast<CKOperationGroupSystemImposedInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int expectedReceiveSize(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedReceiveSize"),
    );
  }

  static int expectedSendSize(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedSendSize"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> networkServiceTypePerConfig(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("networkServiceTypePerConfig"),
    );
  }

  static void setExpectedReceiveSize(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setExpectedReceiveSize:"),
      arg,
    );
  }

  static void setExpectedSendSize(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setExpectedSendSize:"),
      arg,
    );
  }

  static void setNetworkServiceTypePerConfig(
    Pointer<CKOperationGroupSystemImposedInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNetworkServiceTypePerConfig:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationGroupSystemImposedInfoConfiguration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationGroupSystemImposedInfoConfiguration
    extends Struct<CKOperationGroupSystemImposedInfoConfiguration> {
  factory CKOperationGroupSystemImposedInfoConfiguration._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationGroupSystemImposedInfoConfiguration> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationGroupSystemImposedInfoConfiguration")
        .cast<CKOperationGroupSystemImposedInfoConfiguration>();
  }

  static int allowsCellularAccess(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isUplink(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUplink"),
    );
  }

  static void setAllowsCellularAccess(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsCellularAccess:"),
      arg,
    );
  }

  static void setIsUplink(
    Pointer<CKOperationGroupSystemImposedInfoConfiguration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsUplink:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationInfo extends Struct<CKOperationInfo> {
  factory CKOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKOperationInfo").cast<CKOperationInfo>();
  }

  static Pointer<Void> MMCSRequestOptions(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("MMCSRequestOptions"),
    );
  }

  static Pointer<Void> additionalRequestHTTPHeaders(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("additionalRequestHTTPHeaders"),
    );
  }

  static int allowsBackgroundNetworking(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsBackgroundNetworking"),
    );
  }

  static int allowsCellularAccess(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsCellularAccess"),
    );
  }

  static Pointer<Void> authPromptReason(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("authPromptReason"),
    );
  }

  static int automaticallyRetryNetworkFailures(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticallyRetryNetworkFailures"),
    );
  }

  static int clientSDKVersion(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("clientSDKVersion"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKOperationInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> deviceIdentifier(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceIdentifier"),
    );
  }

  static int discretionaryNetworkBehavior(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("discretionaryNetworkBehavior"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> group(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("group"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isLongLived(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLongLived"),
    );
  }

  static int isOutstandingOperation(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOutstandingOperation"),
    );
  }

  static Pointer<Void> name(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> operationClass(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationClass"),
    );
  }

  static Pointer<Void> operationID(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationID"),
    );
  }

  static Pointer<Void> parentOperation(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentOperation"),
    );
  }

  static Pointer<Void> parentSectionID(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentSectionID"),
    );
  }

  static Pointer<Void> perOpConfiguration(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perOpConfiguration"),
    );
  }

  static int preferAnonymousRequests(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("preferAnonymousRequests"),
    );
  }

  static int qualityOfService(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static Pointer<Void> resolvedConfiguration(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resolvedConfiguration"),
    );
  }

  static void setClientSDKVersion(
    Pointer<CKOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setClientSDKVersion:"),
      arg,
    );
  }

  static void setDeviceIdentifier(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceIdentifier:"),
      arg,
    );
  }

  static void setGroup(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGroup:"),
      arg,
    );
  }

  static void setIsLongLived(
    Pointer<CKOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsLongLived:"),
      arg,
    );
  }

  static void setIsOutstandingOperation(
    Pointer<CKOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsOutstandingOperation:"),
      arg,
    );
  }

  static void setMMCSRequestOptions(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMMCSRequestOptions:"),
      arg,
    );
  }

  static void setName(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setOperationClass(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationClass:"),
      arg,
    );
  }

  static void setOperationID(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationID:"),
      arg,
    );
  }

  static void setParentOperation(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentOperation:"),
      arg,
    );
  }

  static void setParentSectionID(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentSectionID:"),
      arg,
    );
  }

  static void setPerOpConfiguration(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerOpConfiguration:"),
      arg,
    );
  }

  static void setSetupInfo(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSetupInfo:"),
      arg,
    );
  }

  static void setWantsRequestStatistics(
    Pointer<CKOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsRequestStatistics:"),
      arg,
    );
  }

  static Pointer<Void> setupInfo(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setupInfo"),
    );
  }

  static int shouldSkipZonePCSUpdate(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSkipZonePCSUpdate"),
    );
  }

  static Pointer<Void> sourceApplicationBundleIdentifier(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationBundleIdentifier"),
    );
  }

  static Pointer<Void> sourceApplicationSecondaryIdentifier(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceApplicationSecondaryIdentifier"),
    );
  }

  static void takeValuesFrom(
    Pointer<CKOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("takeValuesFrom:"),
      arg,
    );
  }

  static double timeoutIntervalForRequest(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForRequest"),
    );
  }

  static double timeoutIntervalForResource(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeoutIntervalForResource"),
    );
  }

  static int wantsRequestStatistics(
    Pointer<CKOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsRequestStatistics"),
    );
  }
}

/// Objective-C class _CKOperationMMCSRequestOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationMMCSRequestOptions
    extends Struct<CKOperationMMCSRequestOptions> {
  factory CKOperationMMCSRequestOptions._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationMMCSRequestOptions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKOperationMMCSRequestOptions")
        .cast<CKOperationMMCSRequestOptions>();
  }

  static void encodeWithCoder(
    Pointer<CKOperationMMCSRequestOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationMMCSRequestOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int resumableContainerLimpMode(
    Pointer<CKOperationMMCSRequestOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("resumableContainerLimpMode"),
    );
  }

  static void setResumableContainerLimpMode(
    Pointer<CKOperationMMCSRequestOptions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setResumableContainerLimpMode:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationMetrics_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationMetrics extends Struct<CKOperationMetrics> {
  factory CKOperationMetrics._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationMetrics> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKOperationMetrics").cast<CKOperationMetrics>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKOperationMetrics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> MMCSMetrics(
    Pointer<CKOperationMetrics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("MMCSMetrics"),
    );
  }

  static Pointer<Void> cloudKitMetrics(
    Pointer<CKOperationMetrics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cloudKitMetrics"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKOperationMetrics> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKOperationMetrics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<CKOperationMetrics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationMetrics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationMetrics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setCloudKitMetrics(
    Pointer<CKOperationMetrics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCloudKitMetrics:"),
      arg,
    );
  }

  static void setMMCSMetrics(
    Pointer<CKOperationMetrics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMMCSMetrics:"),
      arg,
    );
  }

  static void unionMetrics(
    Pointer<CKOperationMetrics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionMetrics:"),
      arg,
    );
  }
}

/// Objective-C class _CKOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKOperationResult extends Struct<CKOperationResult> {
  factory CKOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKOperationResult").cast<CKOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> description(
    Pointer<CKOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> error(
    Pointer<CKOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> metrics(
    Pointer<CKOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("metrics"),
    );
  }

  static Pointer<Void> operationID(
    Pointer<CKOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationID"),
    );
  }

  static void setError(
    Pointer<CKOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setMetrics(
    Pointer<CKOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMetrics:"),
      arg,
    );
  }

  static void setOperationID(
    Pointer<CKOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationID:"),
      arg,
    );
  }
}

/// Objective-C class _CKPCSDiagnosticInformation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPCSDiagnosticInformation extends Struct<CKPCSDiagnosticInformation> {
  factory CKPCSDiagnosticInformation._() {
    throw UnimplementedError();
  }
  static Pointer<CKPCSDiagnosticInformation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKPCSDiagnosticInformation")
        .cast<CKPCSDiagnosticInformation>();
  }

  static void encodeWithCoder(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> identityInfo(
    Pointer<CKPCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identityInfo"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKPCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> notFoundZoneIDs(
    Pointer<CKPCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notFoundZoneIDs"),
    );
  }

  static Pointer<Void> pcsInfoByZoneID(
    Pointer<CKPCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pcsInfoByZoneID"),
    );
  }

  static Pointer<Void> serviceIdentityInfo(
    Pointer<CKPCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serviceIdentityInfo"),
    );
  }

  static void setIdentityInfo(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentityInfo:"),
      arg,
    );
  }

  static void setNotFoundZoneIDs(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotFoundZoneIDs:"),
      arg,
    );
  }

  static void setPcsInfoByZoneID(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPcsInfoByZoneID:"),
      arg,
    );
  }

  static void setServiceIdentityInfo(
    Pointer<CKPCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setServiceIdentityInfo:"),
      arg,
    );
  }
}

/// Objective-C class _CKPackage_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPackage extends Struct<CKPackage> {
  factory CKPackage._() {
    throw UnimplementedError();
  }
  static Pointer<CKPackage> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPackage").cast<CKPackage>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKPackage> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> UUID(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUID"),
    );
  }

  static void addItem(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addItem:"),
      arg,
    );
  }

  static void addSection(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addSection:"),
      arg,
    );
  }

  static Pointer<Void> archiverInfo(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archiverInfo"),
    );
  }

  static Pointer<Void> assets(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assets"),
    );
  }

  static void beginTransaction(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginTransaction"),
    );
  }

  static int claimOwnershipWithError(
    Pointer<CKPackage> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("claimOwnershipWithError:"),
      arg,
    );
  }

  static void close(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("close"),
    );
  }

  static Pointer<Void> databaseBasePath(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("databaseBasePath"),
    );
  }

  static void dealloc(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int downloaded(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("downloaded"),
    );
  }

  static double earliestUploadReceiptExpiration(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("earliestUploadReceiptExpiration"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void endTransaction(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endTransaction"),
    );
  }

  static void handleChangeStateAction$(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("handleChangeStateAction:"),
      arg,
    );
  }

  static int handleChangeStateAction$error$(
    Pointer<CKPackage> _self,
    int arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("handleChangeStateAction:error:"),
      arg,
      error,
    );
  }

  static int hasSize(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSize"),
    );
  }

  static int inTransaction(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("inTransaction"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initUnreachablePackageWithUUID(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initUnreachablePackageWithUUID:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isOpen(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOpen"),
    );
  }

  static Pointer<Void> itemAtIndex(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("itemAtIndex:"),
      arg,
    );
  }

  static int itemCount(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("itemCount"),
    );
  }

  static Pointer<Void> itemEnumerator(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemEnumerator"),
    );
  }

  static Pointer<Void> itemEnumeratorForSectionAtIndex(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("itemEnumeratorForSectionAtIndex:"),
      arg,
    );
  }

  static int movePackagesDatabaseInDirection(
    Pointer<CKPackage> _self,
    int arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("movePackagesDatabaseInDirection:error:"),
      arg,
      error,
    );
  }

  static int nextItemIndex(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("nextItemIndex"),
    );
  }

  static void open(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("open"),
    );
  }

  static int openWithError(
    Pointer<CKPackage> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("openWithError:"),
      arg,
    );
  }

  static int packageID(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("packageID"),
    );
  }

  static int prepareDBWithError(
    Pointer<CKPackage> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("prepareDBWithError:"),
      arg,
    );
  }

  static Pointer<Void> queue(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queue"),
    );
  }

  static Pointer<Void> record(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("record"),
    );
  }

  static Pointer<Void> recordKey(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordKey"),
    );
  }

  static Pointer<Pointer<Void>> recordPCS(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordPCS"),
    );
  }

  static void releaseDB(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("releaseDB"),
    );
  }

  static void releaseDBWithRemove(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("releaseDBWithRemove:"),
      arg,
    );
  }

  static void removeDB(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeDB"),
    );
  }

  static Pointer<Void> sectionAtIndex(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("sectionAtIndex:"),
      arg,
    );
  }

  static int sectionCount(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sectionCount"),
    );
  }

  static void setArchiverInfo$(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArchiverInfo:"),
      arg,
    );
  }

  static int setArchiverInfo$error$(
    Pointer<CKPackage> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setArchiverInfo:error:"),
      arg,
      error,
    );
  }

  static void setAssets(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssets:"),
      arg,
    );
  }

  static void setDatabaseBasePath(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDatabaseBasePath:"),
      arg,
    );
  }

  static void setDownloaded(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDownloaded:"),
      arg,
    );
  }

  static void setHasSize(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasSize:"),
      arg,
    );
  }

  static void setNextItemIndex(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setNextItemIndex:"),
      arg,
    );
  }

  static void setOpen(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOpen:"),
      arg,
    );
  }

  static void setPackageID(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPackageID:"),
      arg,
    );
  }

  static void setQueue(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueue:"),
      arg,
    );
  }

  static void setRecord(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecord:"),
      arg,
    );
  }

  static void setRecordKey(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordKey:"),
      arg,
    );
  }

  static void setRecordPCS(
    Pointer<CKPackage> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordPCS:"),
      arg,
    );
  }

  static void setShouldReadRawEncryptedData(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReadRawEncryptedData:"),
      arg,
    );
  }

  static void setSignature(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSignature:"),
      arg,
    );
  }

  static void setSize(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSize:"),
      arg,
    );
  }

  static void setSqlite(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSqlite:"),
      arg,
    );
  }

  static void setState(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setState:"),
      arg,
    );
  }

  static void setStorageGroupingPolicy(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStorageGroupingPolicy:"),
      arg,
    );
  }

  static void setTransaction(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTransaction:"),
      arg,
    );
  }

  static void setUUID(
    Pointer<CKPackage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUUID:"),
      arg,
    );
  }

  static void setUploadRank(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUploadRank:"),
      arg,
    );
  }

  static void setUploaded(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUploaded:"),
      arg,
    );
  }

  static void setWasCached(
    Pointer<CKPackage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWasCached:"),
      arg,
    );
  }

  static int shouldReadRawEncryptedData(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReadRawEncryptedData"),
    );
  }

  static Pointer<Void> signature(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signature"),
    );
  }

  static int size(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }

  static Pointer<Void> sqlite(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sqlite"),
    );
  }

  static Pointer<Void> sqliteOrRaise(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sqliteOrRaise"),
    );
  }

  static int state(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("state"),
    );
  }

  static int storageGroupingPolicy(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("storageGroupingPolicy"),
    );
  }

  static void updateItemAtIndex$withFileURL$(
    Pointer<CKPackage> _self,
    int arg, {
    @required Pointer<Void> withFileURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("updateItemAtIndex:withFileURL:"),
      arg,
      withFileURL,
    );
  }

  static void updateItemAtIndex$withSignature$size$itemID$sectionIndex$(
    Pointer<CKPackage> _self,
    int arg, {
    @required Pointer<Void> withSignature,
    @required int size,
    @required int itemID,
    @required int sectionIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector(
          "updateItemAtIndex:withSignature:size:itemID:sectionIndex:"),
      arg,
      withSignature,
      size,
      itemID,
      sectionIndex,
    );
  }

  static void updateItemsAtIndexes(
    Pointer<CKPackage> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fileURLs,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateItemsAtIndexes:fileURLs:"),
      arg,
      fileURLs,
    );
  }

  static int uploadRank(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("uploadRank"),
    );
  }

  static int uploaded(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("uploaded"),
    );
  }

  static int wasCached(
    Pointer<CKPackage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wasCached"),
    );
  }
}

/// Objective-C class _CKPackageDB_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPackageDB extends Struct<CKPackageDB> {
  factory CKPackageDB._() {
    throw UnimplementedError();
  }
  static Pointer<CKPackageDB> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPackageDB").cast<CKPackageDB>();
  }
}

/// Objective-C class _CKPackageDBDelegate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPackageDBDelegate extends Struct<CKPackageDBDelegate> {
  factory CKPackageDBDelegate._() {
    throw UnimplementedError();
  }
  static Pointer<CKPackageDBDelegate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPackageDBDelegate").cast<CKPackageDBDelegate>();
  }

  static int migrateDatabase(
    Pointer<CKPackageDBDelegate> _self,
    Pointer<Void> arg, {
    @required int fromVersion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_Int8(
      _self,
      _objc.getSelector("migrateDatabase:fromVersion:"),
      arg,
      fromVersion,
    );
  }

  static int userVersion(
    Pointer<CKPackageDBDelegate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("userVersion"),
    );
  }
}

/// Objective-C class _CKPackageItem_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPackageItem extends Struct<CKPackageItem> {
  factory CKPackageItem._() {
    throw UnimplementedError();
  }
  static Pointer<CKPackageItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPackageItem").cast<CKPackageItem>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> deviceID(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deviceID"),
    );
  }

  static Pointer<Void> fileID(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileID"),
    );
  }

  static Pointer<Void> fileURL(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileURL"),
    );
  }

  static Pointer<Void> generationID(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generationID"),
    );
  }

  static Pointer<Void> initWithDeviceID(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fileID,
    @required Pointer<Void> generationID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDeviceID:fileID:generationID:"),
      arg,
      fileID,
      generationID,
    );
  }

  static Pointer<Void> initWithFileURL(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileURL:"),
      arg,
    );
  }

  static int itemID(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("itemID"),
    );
  }

  static Pointer<Void> itemTypeHint(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemTypeHint"),
    );
  }

  static int offset(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("offset"),
    );
  }

  static int packageIndex(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("packageIndex"),
    );
  }

  static int sectionIndex(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("sectionIndex"),
    );
  }

  static void setDeviceID(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDeviceID:"),
      arg,
    );
  }

  static void setFileID(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileID:"),
      arg,
    );
  }

  static void setFileURL(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileURL:"),
      arg,
    );
  }

  static void setGenerationID(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGenerationID:"),
      arg,
    );
  }

  static void setItemID(
    Pointer<CKPackageItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setItemID:"),
      arg,
    );
  }

  static void setItemTypeHint(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemTypeHint:"),
      arg,
    );
  }

  static void setOffset(
    Pointer<CKPackageItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setOffset:"),
      arg,
    );
  }

  static void setPackageIndex(
    Pointer<CKPackageItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPackageIndex:"),
      arg,
    );
  }

  static void setSectionIndex(
    Pointer<CKPackageItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setSectionIndex:"),
      arg,
    );
  }

  static void setSignature(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSignature:"),
      arg,
    );
  }

  static void setSize(
    Pointer<CKPackageItem> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSize:"),
      arg,
    );
  }

  static void setWrappedAssetKey(
    Pointer<CKPackageItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWrappedAssetKey:"),
      arg,
    );
  }

  static Pointer<Void> signature(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signature"),
    );
  }

  static int size(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("size"),
    );
  }

  static Pointer<Void> wrappedAssetKey(
    Pointer<CKPackageItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("wrappedAssetKey"),
    );
  }
}

/// Objective-C class _CKPackageSection_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPackageSection extends Struct<CKPackageSection> {
  factory CKPackageSection._() {
    throw UnimplementedError();
  }
  static Pointer<CKPackageSection> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPackageSection").cast<CKPackageSection>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKPackageSection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKPackageSection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int index(
    Pointer<CKPackageSection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("index"),
    );
  }

  static Pointer<Void> initWithIndex(
    Pointer<CKPackageSection> _self,
    int arg, {
    @required Pointer<Void> signature,
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithIndex:signature:size:"),
      arg,
      signature,
      size,
    );
  }

  static void setSize(
    Pointer<CKPackageSection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSize:"),
      arg,
    );
  }

  static Pointer<Void> signature(
    Pointer<CKPackageSection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signature"),
    );
  }

  static int size(
    Pointer<CKPackageSection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }
}

/// Objective-C class _CKPlaceholderOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPlaceholderOperation extends Struct<CKPlaceholderOperation> {
  factory CKPlaceholderOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKPlaceholderOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKPlaceholderOperation")
        .cast<CKPlaceholderOperation>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKPlaceholderOperation> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static void cancel(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> context(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("context"),
    );
  }

  static Pointer<Void> daemonInvokeBlock(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("daemonInvokeBlock"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> initWithOperation(
    Pointer<CKPlaceholderOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> daemonInvocationBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOperation:daemonInvocationBlock:"),
      arg,
      daemonInvocationBlock,
    );
  }

  static int isConcurrent(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConcurrent"),
    );
  }

  static int isExecuting(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static void main(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer<Void> operationID(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationID"),
    );
  }

  static Pointer<Void> sectionID(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sectionID"),
    );
  }

  static void setContext(
    Pointer<CKPlaceholderOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContext:"),
      arg,
    );
  }

  static void setIsExecuting(
    Pointer<CKPlaceholderOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsExecuting:"),
      arg,
    );
  }

  static void setIsFinished(
    Pointer<CKPlaceholderOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsFinished:"),
      arg,
    );
  }

  static void setSectionID(
    Pointer<CKPlaceholderOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSectionID:"),
      arg,
    );
  }

  static void setStartDate(
    Pointer<CKPlaceholderOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartDate:"),
      arg,
    );
  }

  static void start(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static Pointer<Void> startDate(
    Pointer<CKPlaceholderOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Objective-C class _CKPredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPredicateValidator extends Struct<CKPredicateValidator> {
  factory CKPredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKPredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPredicateValidator").cast<CKPredicateValidator>();
  }

  static int validate(
    Pointer<CKPredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKPredicateValidatorInstance_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPredicateValidatorInstance
    extends Struct<CKPredicateValidatorInstance> {
  factory CKPredicateValidatorInstance._() {
    throw UnimplementedError();
  }
  static Pointer<CKPredicateValidatorInstance> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKPredicateValidatorInstance")
        .cast<CKPredicateValidatorInstance>();
  }

  static Pointer<Void> description(
    Pointer<CKPredicateValidatorInstance> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int validate(
    Pointer<CKPredicateValidatorInstance> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKPrettyError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPrettyError extends Struct<CKPrettyError> {
  factory CKPrettyError._() {
    throw UnimplementedError();
  }
  static Pointer<CKPrettyError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPrettyError").cast<CKPrettyError>();
  }

  static Pointer<Void> CKPartialErrorDescription(
    Pointer<CKPrettyError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPartialErrorDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKPrettyError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKPrettyError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }
}

/// Objective-C class _CKPublicKey_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPublicKey extends Struct<CKPublicKey> {
  factory CKPublicKey._() {
    throw UnimplementedError();
  }
  static Pointer<CKPublicKey> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKPublicKey").cast<CKPublicKey>();
  }

  static Pointer<Void> certData(
    Pointer<CKPublicKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("certData"),
    );
  }

  static Pointer<Void> expiration(
    Pointer<CKPublicKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("expiration"),
    );
  }

  static int hasExpired(
    Pointer<CKPublicKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasExpired"),
    );
  }

  static Pointer<Void> initWithPublicKey(
    Pointer<CKPublicKey> _self,
    Pointer<Void> arg, {
    @required int version,
    @required Pointer<Void> expiration,
    @required Pointer<Void> certificateData,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_p_returns_p(
      _self,
      _objc
          .getSelector("initWithPublicKey:version:expiration:certificateData:"),
      arg,
      version,
      expiration,
      certificateData,
    );
  }

  static Pointer<Void> publicKey(
    Pointer<CKPublicKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicKey"),
    );
  }

  static int version(
    Pointer<CKPublicKey> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("version"),
    );
  }
}

/// Objective-C class _CKPublishAssetsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPublishAssetsOperation extends Struct<CKPublishAssetsOperation> {
  factory CKPublishAssetsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKPublishAssetsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKPublishAssetsOperation")
        .cast<CKPublishAssetsOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static int URLOptions(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("URLOptions"),
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetPublishedBlock(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetPublishedBlock"),
    );
  }

  static Pointer<Void> fileNamesByAssetFieldNames(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileNamesByAssetFieldNames"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithRecordIDs(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordIDs:"),
      arg,
    );
  }

  static Pointer<Void> perItemErrorsByRecordID(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perItemErrorsByRecordID"),
    );
  }

  static void performCKOperation(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> publishAssetCompletionBlock(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publishAssetCompletionBlock"),
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static int requestedTTL(
    Pointer<CKPublishAssetsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("requestedTTL"),
    );
  }

  static void setAssetPublishedBlock(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetPublishedBlock:"),
      arg,
    );
  }

  static void setFileNamesByAssetFieldNames(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileNamesByAssetFieldNames:"),
      arg,
    );
  }

  static void setPerItemErrorsByRecordID(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerItemErrorsByRecordID:"),
      arg,
    );
  }

  static void setPublishAssetCompletionBlock(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublishAssetCompletionBlock:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKPublishAssetsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setRequestedTTL(
    Pointer<CKPublishAssetsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRequestedTTL:"),
      arg,
    );
  }

  static void setURLOptions(
    Pointer<CKPublishAssetsOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setURLOptions:"),
      arg,
    );
  }
}

/// Objective-C class _CKPublishAssetsOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKPublishAssetsOperationInfo
    extends Struct<CKPublishAssetsOperationInfo> {
  factory CKPublishAssetsOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKPublishAssetsOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKPublishAssetsOperationInfo")
        .cast<CKPublishAssetsOperationInfo>();
  }

  static int URLOptions(
    Pointer<CKPublishAssetsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("URLOptions"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKPublishAssetsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileNamesByAssetFieldNames(
    Pointer<CKPublishAssetsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileNamesByAssetFieldNames"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKPublishAssetsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> recordIDs(
    Pointer<CKPublishAssetsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordIDs"),
    );
  }

  static int requestedTTL(
    Pointer<CKPublishAssetsOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("requestedTTL"),
    );
  }

  static void setFileNamesByAssetFieldNames(
    Pointer<CKPublishAssetsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileNamesByAssetFieldNames:"),
      arg,
    );
  }

  static void setRecordIDs(
    Pointer<CKPublishAssetsOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordIDs:"),
      arg,
    );
  }

  static void setRequestedTTL(
    Pointer<CKPublishAssetsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRequestedTTL:"),
      arg,
    );
  }

  static void setURLOptions(
    Pointer<CKPublishAssetsOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setURLOptions:"),
      arg,
    );
  }
}

/// Objective-C class _CKQuery_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQuery extends Struct<CKQuery> {
  factory CKQuery._() {
    throw UnimplementedError();
  }
  static Pointer<CKQuery> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQuery").cast<CKQuery>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKQuery> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType(
    Pointer<CKQuery> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> predicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:predicate:"),
      arg,
      predicate,
    );
  }

  static Pointer<Void> predicate(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer<Void> recordType(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordType"),
    );
  }

  static void setPredicate(
    Pointer<CKQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static void setRecordType(
    Pointer<CKQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordType:"),
      arg,
    );
  }

  static void setSortDescriptors(
    Pointer<CKQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSortDescriptors:"),
      arg,
    );
  }

  static Pointer<Void> sortDescriptors(
    Pointer<CKQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sortDescriptors"),
    );
  }
}

/// Objective-C class _CKQueryCursor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQueryCursor extends Struct<CKQueryCursor> {
  factory CKQueryCursor._() {
    throw UnimplementedError();
  }
  static Pointer<CKQueryCursor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQueryCursor").cast<CKQueryCursor>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKQueryCursor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKQueryCursor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<CKQueryCursor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKQueryCursor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKQueryCursor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKQueryCursor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKQueryCursor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<CKQueryCursor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> zoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:zoneID:"),
      arg,
      zoneID,
    );
  }

  static void setData(
    Pointer<CKQueryCursor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setData:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKQueryCursor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKQueryCursor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

/// Objective-C class _CKQueryNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQueryNotification extends Struct<CKQueryNotification> {
  factory CKQueryNotification._() {
    throw UnimplementedError();
  }
  static Pointer<CKQueryNotification> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQueryNotification").cast<CKQueryNotification>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int databaseScope(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKQueryNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKQueryNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRemoteNotificationDictionary(
    Pointer<CKQueryNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRemoteNotificationDictionary:"),
      arg,
    );
  }

  static int isPublicDatabase(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPublicDatabase"),
    );
  }

  static int queryNotificationReason(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("queryNotificationReason"),
    );
  }

  static Pointer<Void> recordFields(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordFields"),
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKQueryNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static void setDatabaseScope(
    Pointer<CKQueryNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDatabaseScope:"),
      arg,
    );
  }

  static void setQueryNotificationReason(
    Pointer<CKQueryNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQueryNotificationReason:"),
      arg,
    );
  }

  static void setRecordFields(
    Pointer<CKQueryNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordFields:"),
      arg,
    );
  }

  static void setRecordID(
    Pointer<CKQueryNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordID:"),
      arg,
    );
  }
}

/// Objective-C class _CKQueryOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQueryOperation extends Struct<CKQueryOperation> {
  factory CKQueryOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKQueryOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQueryOperation").cast<CKQueryOperation>();
  }

  static int CKOperationShouldRun(
    Pointer<CKQueryOperation> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKOperationShouldRun:"),
      arg,
    );
  }

  static Pointer<Void> activityCreate(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static Pointer<Void> assetTransferOptionsByKey(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByKey"),
    );
  }

  static Pointer<Void> cursor(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cursor"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static int fetchAllResults(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllResults"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCursor(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCursor:"),
      arg,
    );
  }

  static Pointer<Void> initWithQuery(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithQuery:"),
      arg,
    );
  }

  static void performCKOperation(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static Pointer<Void> query(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("query"),
    );
  }

  static Pointer<Void> queryCompletionBlock(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queryCompletionBlock"),
    );
  }

  static Pointer<Void> queryCursorFetchedBlock(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queryCursorFetchedBlock"),
    );
  }

  static Pointer<Void> recordFetchedBlock(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordFetchedBlock"),
    );
  }

  static Pointer<Void> resultsCursor(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resultsCursor"),
    );
  }

  static int resultsLimit(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setAssetTransferOptionsByKey(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByKey:"),
      arg,
    );
  }

  static void setCursor(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCursor:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchAllResults(
    Pointer<CKQueryOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllResults:"),
      arg,
    );
  }

  static void setQuery(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQuery:"),
      arg,
    );
  }

  static void setQueryCompletionBlock(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueryCompletionBlock:"),
      arg,
    );
  }

  static void setQueryCursorFetchedBlock(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueryCursorFetchedBlock:"),
      arg,
    );
  }

  static void setRecordFetchedBlock(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordFetchedBlock:"),
      arg,
    );
  }

  static void setResultsCursor(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResultsCursor:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKQueryOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKQueryOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKQueryOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKQueryOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

/// Objective-C class _CKQueryOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQueryOperationInfo extends Struct<CKQueryOperationInfo> {
  factory CKQueryOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKQueryOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQueryOperationInfo").cast<CKQueryOperationInfo>();
  }

  static Pointer<Void> assetTransferOptionsByKey(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assetTransferOptionsByKey"),
    );
  }

  static Pointer<Void> cursor(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cursor"),
    );
  }

  static Pointer<Void> desiredKeys(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("desiredKeys"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fetchAllResults(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("fetchAllResults"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> query(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("query"),
    );
  }

  static int resultsLimit(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultsLimit"),
    );
  }

  static void setAssetTransferOptionsByKey(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAssetTransferOptionsByKey:"),
      arg,
    );
  }

  static void setCursor(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCursor:"),
      arg,
    );
  }

  static void setDesiredKeys(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDesiredKeys:"),
      arg,
    );
  }

  static void setFetchAllResults(
    Pointer<CKQueryOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFetchAllResults:"),
      arg,
    );
  }

  static void setQuery(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQuery:"),
      arg,
    );
  }

  static void setResultsLimit(
    Pointer<CKQueryOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setResultsLimit:"),
      arg,
    );
  }

  static void setShouldFetchAssetContent(
    Pointer<CKQueryOperationInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldFetchAssetContent:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKQueryOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static int shouldFetchAssetContent(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldFetchAssetContent"),
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKQueryOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

/// Objective-C class _CKQueryOperationResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQueryOperationResult extends Struct<CKQueryOperationResult> {
  factory CKQueryOperationResult._() {
    throw UnimplementedError();
  }
  static Pointer<CKQueryOperationResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKQueryOperationResult")
        .cast<CKQueryOperationResult>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKQueryOperationResult> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> cursor(
    Pointer<CKQueryOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cursor"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKQueryOperationResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKQueryOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKQueryOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setCursor(
    Pointer<CKQueryOperationResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCursor:"),
      arg,
    );
  }
}

/// Objective-C class _CKQuerySubscription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKQuerySubscription extends Struct<CKQuerySubscription> {
  factory CKQuerySubscription._() {
    throw UnimplementedError();
  }
  static Pointer<CKQuerySubscription> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKQuerySubscription").cast<CKQuerySubscription>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKQuerySubscription> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$predicate$options$(
    Pointer<CKQuerySubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> predicate,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:predicate:options:"),
      arg,
      predicate,
      options,
    );
  }

  static Pointer<Void> initWithRecordType$predicate$subscriptionID$options$(
    Pointer<CKQuerySubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> predicate,
    @required Pointer<Void> subscriptionID,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:predicate:subscriptionID:options:"),
      arg,
      predicate,
      subscriptionID,
      options,
    );
  }

  static int querySubscriptionOptions(
    Pointer<CKQuerySubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("querySubscriptionOptions"),
    );
  }
}

/// Objective-C class _CKRecord_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecord extends Struct<CKRecord> {
  factory CKRecord._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecord> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecord").cast<CKRecord>();
  }

  static void CKAssignToContainerWithID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("CKAssignToContainerWithID:"),
      arg,
    );
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKRecord> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> URL(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer<Void> allKeys(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> allTokens(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allTokens"),
    );
  }

  static Pointer<Void> allValues(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allValues"),
    );
  }

  static int assetCount(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("assetCount"),
    );
  }

  static int assetDiskSize(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("assetDiskSize"),
    );
  }

  static Pointer<Void> baseToken(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseToken"),
    );
  }

  static Pointer<Void> chainParentPublicKeyID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("chainParentPublicKeyID"),
    );
  }

  static Pointer<Void> chainPrivateKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("chainPrivateKey"),
    );
  }

  static Pointer<Void> chainProtectionInfo(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("chainProtectionInfo"),
    );
  }

  static Pointer<Void> changedKeys(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeys"),
    );
  }

  static Pointer<Void> changedKeysSet(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeysSet"),
    );
  }

  static void claimPackagesWithSuccessBlock(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> failureBlock,
    @required Pointer<Void> completionBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "claimPackagesWithSuccessBlock:failureBlock:completionBlock:"),
      arg,
      failureBlock,
      completionBlock,
    );
  }

  static Pointer<Void> conflictLoserEtags(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conflictLoserEtags"),
    );
  }

  static Pointer<Void> containerID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static int containsAssetValues(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsAssetValues"),
    );
  }

  static int containsPackageValues(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsPackageValues"),
    );
  }

  static Pointer<Void> copyWithOriginalValues(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithOriginalValues"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecord> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> creationDate(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationDate"),
    );
  }

  static Pointer<Void> creatorUserRecordID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creatorUserRecordID"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> decryptFullToken(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decryptFullToken:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> displayedHostname(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayedHostname"),
    );
  }

  static void encodeSystemFieldsWithCoder(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeSystemFieldsWithCoder:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedFullTokenData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedFullTokenData"),
    );
  }

  static Pointer<Void> encryptedPublicSharingKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedPublicSharingKey"),
    );
  }

  static Pointer<Void> encryptedValueStore(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedValueStore"),
    );
  }

  static Pointer<Void> encryptedValuesByKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedValuesByKey"),
    );
  }

  static Pointer<Void> etag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("etag"),
    );
  }

  static Pointer<Void> fullToken(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fullToken"),
    );
  }

  static int hasEncryptedData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasEncryptedData"),
    );
  }

  static int hasModifiedEncryptedData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasModifiedEncryptedData"),
    );
  }

  static int hasModifiedPropertiesRequiringEncryption(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasModifiedPropertiesRequiringEncryption"),
    );
  }

  static int hasPropertiesRequiringDecryption(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPropertiesRequiringDecryption"),
    );
  }

  static int hasPropertiesRequiringEncryption(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPropertiesRequiringEncryption"),
    );
  }

  static int hasUpdatedParent(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUpdatedParent"),
    );
  }

  static int hasUpdatedShare(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasUpdatedShare"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$recordID$(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:recordID:"),
      arg,
      recordID,
    );
  }

  static Pointer<Void> initWithRecordType$(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$zoneID$(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> zoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:zoneID:"),
      arg,
      zoneID,
    );
  }

  static int isKnownToServer(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isKnownToServer"),
    );
  }

  static Pointer<Void> lastModifiedUserRecordID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastModifiedUserRecordID"),
    );
  }

  static Pointer<Void> modificationDate(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modificationDate"),
    );
  }

  static Pointer<Void> modifiedByDevice(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modifiedByDevice"),
    );
  }

  static Pointer<Void> mutableEncryptedPSK(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableEncryptedPSK"),
    );
  }

  static Pointer<Void> mutableEncryptedPublicSharingKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableEncryptedPublicSharingKey"),
    );
  }

  static Pointer<Void> mutableEncryptedPublicSharingKeyData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableEncryptedPublicSharingKeyData"),
    );
  }

  static Pointer<Void> mutableURL(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableURL"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static Pointer<Void> objectForKeyedSubscript(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKeyedSubscript:"),
      arg,
    );
  }

  static Pointer<Void> originalValues(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalValues"),
    );
  }

  static Pointer<Void> parent(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parent"),
    );
  }

  static Pointer<Void> pcsKeyID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pcsKeyID"),
    );
  }

  static int permission(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("permission"),
    );
  }

  static Pointer<Void> pluginFields(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pluginFields"),
    );
  }

  static Pointer<Void> previousParent(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousParent"),
    );
  }

  static Pointer<Void> previousProtectionEtag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousProtectionEtag"),
    );
  }

  static Pointer<Void> previousProtectionEtagFromUnitTest(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousProtectionEtagFromUnitTest"),
    );
  }

  static Pointer<Void> previousShare(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousShare"),
    );
  }

  static Pointer<Void> privateToken(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateToken"),
    );
  }

  static Pointer<Void> protectionData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectionData"),
    );
  }

  static Pointer<Void> protectionEtag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectionEtag"),
    );
  }

  static Pointer<Void> recordChangeTag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordChangeTag"),
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static Pointer<Void> recordType(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordType"),
    );
  }

  static void releasePackages(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("releasePackages"),
    );
  }

  static void removePackages(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removePackages"),
    );
  }

  static void resetChangedKeys(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetChangedKeys"),
    );
  }

  static Pointer<Void> routingKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("routingKey"),
    );
  }

  static int serializeProtectionData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("serializeProtectionData"),
    );
  }

  static void setBaseToken(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseToken:"),
      arg,
    );
  }

  static void setChainParentPublicKeyID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChainParentPublicKeyID:"),
      arg,
    );
  }

  static void setChainPrivateKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChainPrivateKey:"),
      arg,
    );
  }

  static void setChainProtectionInfo(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChainProtectionInfo:"),
      arg,
    );
  }

  static void setChangedKeysSet(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedKeysSet:"),
      arg,
    );
  }

  static void setConflictLoserEtags(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConflictLoserEtags:"),
      arg,
    );
  }

  static void setContainerID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setCreationDate(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreationDate:"),
      arg,
    );
  }

  static void setCreatorUserRecordID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCreatorUserRecordID:"),
      arg,
    );
  }

  static void setDisplayedHostname(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDisplayedHostname:"),
      arg,
    );
  }

  static void setEncryptedValueStore(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedValueStore:"),
      arg,
    );
  }

  static void setEtag(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEtag:"),
      arg,
    );
  }

  static void setHasUpdatedParent(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasUpdatedParent:"),
      arg,
    );
  }

  static void setHasUpdatedShare(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasUpdatedShare:"),
      arg,
    );
  }

  static void setKnownToServer(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setKnownToServer:"),
      arg,
    );
  }

  static void setLastModifiedUserRecordID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastModifiedUserRecordID:"),
      arg,
    );
  }

  static void setModificationDate(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModificationDate:"),
      arg,
    );
  }

  static void setModifiedByDevice(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setModifiedByDevice:"),
      arg,
    );
  }

  static void setMutableEncryptedPSK(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMutableEncryptedPSK:"),
      arg,
    );
  }

  static void setMutableEncryptedPublicSharingKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMutableEncryptedPublicSharingKey:"),
      arg,
    );
  }

  static void setMutableEncryptedPublicSharingKeyData(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMutableEncryptedPublicSharingKeyData:"),
      arg,
    );
  }

  static void setMutableURL(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMutableURL:"),
      arg,
    );
  }

  static void setNilValueForKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNilValueForKey:"),
      arg,
    );
  }

  static void setObject$forKey$(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setObject$forKeyedSubscript$(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyedSubscript,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKeyedSubscript:"),
      arg,
      forKeyedSubscript,
    );
  }

  static void setObjectNoValidate(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectNoValidate:forKey:"),
      arg,
      forKey,
    );
  }

  static void setParent(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParent:"),
      arg,
    );
  }

  static void setParentReferenceFromRecord(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentReferenceFromRecord:"),
      arg,
    );
  }

  static void setParentReferenceFromRecordID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentReferenceFromRecordID:"),
      arg,
    );
  }

  static void setPcsKeyID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPcsKeyID:"),
      arg,
    );
  }

  static void setPermission(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPermission:"),
      arg,
    );
  }

  static void setPluginFields(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPluginFields:"),
      arg,
    );
  }

  static void setPreviousParent(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousParent:"),
      arg,
    );
  }

  static void setPreviousProtectionEtag(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousProtectionEtag:"),
      arg,
    );
  }

  static void setPreviousProtectionEtagFromUnitTest(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousProtectionEtagFromUnitTest:"),
      arg,
    );
  }

  static void setPreviousShare(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousShare:"),
      arg,
    );
  }

  static void setProtectionData(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectionData:"),
      arg,
    );
  }

  static void setProtectionEtag(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectionEtag:"),
      arg,
    );
  }

  static void setRecordID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordID:"),
      arg,
    );
  }

  static void setRecordType(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordType:"),
      arg,
    );
  }

  static void setRoutingKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoutingKey:"),
      arg,
    );
  }

  static void setSerializeProtectionData(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSerializeProtectionData:"),
      arg,
    );
  }

  static void setShare(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShare:"),
      arg,
    );
  }

  static void setShareEtag(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareEtag:"),
      arg,
    );
  }

  static void setTombstonedPublicKeyIDs(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTombstonedPublicKeyIDs:"),
      arg,
    );
  }

  static void setTrackChanges(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTrackChanges:"),
      arg,
    );
  }

  static void setUseLightweightPCS(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUseLightweightPCS:"),
      arg,
    );
  }

  static void setValue(
    Pointer<CKRecord> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setValueStore(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValueStore:"),
      arg,
    );
  }

  static void setWantsChainPCS(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsChainPCS:"),
      arg,
    );
  }

  static void setWantsPublicSharingKey(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsPublicSharingKey:"),
      arg,
    );
  }

  static void setWasCached(
    Pointer<CKRecord> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWasCached:"),
      arg,
    );
  }

  static void setZoneProtectionEtag(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneProtectionEtag:"),
      arg,
    );
  }

  static void setZoneishKeyID(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneishKeyID:"),
      arg,
    );
  }

  static Pointer<Void> share(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("share"),
    );
  }

  static Pointer<Void> shareEtag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareEtag"),
    );
  }

  static Pointer<Void> shortSharingToken(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortSharingToken"),
    );
  }

  static Pointer<Void> shortSharingTokenData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortSharingTokenData"),
    );
  }

  static Pointer<Void> shortSharingTokenHashData(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortSharingTokenHashData"),
    );
  }

  static Pointer<Void> shortToken(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortToken"),
    );
  }

  static int size(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }

  static Pointer<Void> tombstonedPublicKeyIDs(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("tombstonedPublicKeyIDs"),
    );
  }

  static int trackChanges(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackChanges"),
    );
  }

  static Pointer<Void> uncachedURL(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uncachedURL"),
    );
  }

  static int useLightweightPCS(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("useLightweightPCS"),
    );
  }

  static Pointer<Void> valueForKey(
    Pointer<CKRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static Pointer<Void> valueStore(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valueStore"),
    );
  }

  static Pointer<Void> values(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("values"),
    );
  }

  static Pointer<Void> valuesByKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valuesByKey"),
    );
  }

  static int wantsChainPCS(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsChainPCS"),
    );
  }

  static int wantsPublicSharingKey(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsPublicSharingKey"),
    );
  }

  static int wasCached(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wasCached"),
    );
  }

  static Pointer<Void> zoneProtectionEtag(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneProtectionEtag"),
    );
  }

  static Pointer<Void> zoneishKeyID(
    Pointer<CKRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneishKeyID"),
    );
  }
}

/// Objective-C class _CKRecordGraph_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordGraph extends Struct<CKRecordGraph> {
  factory CKRecordGraph._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordGraph> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordGraph").cast<CKRecordGraph>();
  }

  static int addRecords(
    Pointer<CKRecordGraph> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("addRecords:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordGraph> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKRecordGraph> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> nodes(
    Pointer<CKRecordGraph> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nodes"),
    );
  }

  static Pointer<Void> recordsByTopologicalSortWithError(
    Pointer<CKRecordGraph> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("recordsByTopologicalSortWithError:"),
      arg,
    );
  }

  static void setNodes(
    Pointer<CKRecordGraph> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNodes:"),
      arg,
    );
  }

  static void setSortedRecords(
    Pointer<CKRecordGraph> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSortedRecords:"),
      arg,
    );
  }

  static Pointer<Void> sortedRecords(
    Pointer<CKRecordGraph> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sortedRecords"),
    );
  }
}

/// Objective-C class _CKRecordGraphNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordGraphNode extends Struct<CKRecordGraphNode> {
  factory CKRecordGraphNode._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordGraphNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordGraphNode").cast<CKRecordGraphNode>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> edges(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("edges"),
    );
  }

  static int hash(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indegree(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indegree"),
    );
  }

  static Pointer<Void> indegrees(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("indegrees"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEqual(
    Pointer<CKRecordGraphNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> record(
    Pointer<CKRecordGraphNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("record"),
    );
  }

  static void setEdges(
    Pointer<CKRecordGraphNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEdges:"),
      arg,
    );
  }

  static void setRecord(
    Pointer<CKRecordGraphNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecord:"),
      arg,
    );
  }
}

/// Objective-C class _CKRecordID_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordID extends Struct<CKRecordID> {
  factory CKRecordID._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordID").cast<CKRecordID>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKRecordID> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> CKPropertiesDescriptionWithProperties(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescriptionWithProperties:"),
      arg,
    );
  }

  static Pointer<Void> CKXPCSuitableString(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKXPCSuitableString"),
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static int compareToRecordID(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareToRecordID:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecordID> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordName$zoneID$(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> zoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordName:zoneID:"),
      arg,
      zoneID,
    );
  }

  static Pointer<Void> initWithRecordName$(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordName:"),
      arg,
    );
  }

  static Pointer<Void> initWithSqliteRepresentation(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSqliteRepresentation:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> recordName(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordName"),
    );
  }

  static void setRecordName(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordName:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKRecordID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static Pointer<Void> sqliteRepresentation(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sqliteRepresentation"),
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKRecordID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

/// Objective-C class _CKRecordValueStore_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordValueStore extends Struct<CKRecordValueStore> {
  factory CKRecordValueStore._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordValueStore> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordValueStore").cast<CKRecordValueStore>();
  }

  static Pointer<Void> allKeys(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> changedKeys(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeys"),
    );
  }

  static Pointer<Void> changedKeysSet(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changedKeysSet"),
    );
  }

  static int checkProperties(
    Pointer<CKRecordValueStore> _self,
    int arg, {
    @required Pointer<Void> withValueCheckBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("checkProperties:withValueCheckBlock:"),
      arg,
      withValueCheckBlock,
    );
  }

  static int checkPropertiesWithModifiedPropertiesOnly(
    Pointer<CKRecordValueStore> _self,
    int arg, {
    @required int includingAllArrayItems,
    @required Pointer<Void> withValueCheckBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "checkPropertiesWithModifiedPropertiesOnly:includingAllArrayItems:withValueCheckBlock:"),
      arg,
      includingAllArrayItems,
      withValueCheckBlock,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecordValueStore> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecord(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecord:"),
      arg,
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static Pointer<Void> objectForKeyedSubscript(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKeyedSubscript:"),
      arg,
    );
  }

  static Pointer<Void> originalValues(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalValues"),
    );
  }

  static Pointer<Void> record(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("record"),
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static void resetChangedKeys(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetChangedKeys"),
    );
  }

  static void setChangedKeysSet(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChangedKeysSet:"),
      arg,
    );
  }

  static void setNilValueForKey(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNilValueForKey:"),
      arg,
    );
  }

  static void setObject$forKey$(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setObject$forKeyedSubscript$(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyedSubscript,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKeyedSubscript:"),
      arg,
      forKeyedSubscript,
    );
  }

  static void setObjectNoValidate(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectNoValidate:forKey:"),
      arg,
      forKey,
    );
  }

  static void setOriginalValues(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalValues:"),
      arg,
    );
  }

  static void setRecord(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecord:"),
      arg,
    );
  }

  static void setTrackChanges(
    Pointer<CKRecordValueStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTrackChanges:"),
      arg,
    );
  }

  static void setValue(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void setValues(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValues:"),
      arg,
    );
  }

  static int trackChanges(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("trackChanges"),
    );
  }

  static Pointer<Void> valueForKey(
    Pointer<CKRecordValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static Pointer<Void> values(
    Pointer<CKRecordValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("values"),
    );
  }
}

/// Objective-C class _CKRecordZone_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordZone extends Struct<CKRecordZone> {
  factory CKRecordZone._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordZone> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordZone").cast<CKRecordZone>();
  }

  static void CKAssignToContainerWithID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("CKAssignToContainerWithID:"),
      arg,
    );
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKRecordZone> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int assetQuotaUsage(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("assetQuotaUsage"),
    );
  }

  static int capabilities(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("capabilities"),
    );
  }

  static Pointer<Void> clientChangeToken(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clientChangeToken"),
    );
  }

  static Pointer<Void> containerID(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecordZone> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> currentServerChangeToken(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentServerChangeToken"),
    );
  }

  static Pointer<Void> currentServerContinuationToken(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentServerContinuationToken"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int deviceCount(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("deviceCount"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedLastZoneishPCSRollDate(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedLastZoneishPCSRollDate"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithZoneID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneID:"),
      arg,
    );
  }

  static Pointer<Void> initWithZoneName(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneName:"),
      arg,
    );
  }

  static int metadataQuotaUsage(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("metadataQuotaUsage"),
    );
  }

  static int needsZoneishPCSRolled(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsZoneishPCSRolled"),
    );
  }

  static Pointer<Void> pcsKeyID(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pcsKeyID"),
    );
  }

  static Pointer<Void> previousProtectionEtag(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousProtectionEtag"),
    );
  }

  static Pointer<Void> protectionData(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectionData"),
    );
  }

  static Pointer<Void> protectionEtag(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectionEtag"),
    );
  }

  static int serializeProtectionData(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("serializeProtectionData"),
    );
  }

  static void setAssetQuotaUsage(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setAssetQuotaUsage:"),
      arg,
    );
  }

  static void setCapabilities(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCapabilities:"),
      arg,
    );
  }

  static void setClientChangeToken(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClientChangeToken:"),
      arg,
    );
  }

  static void setContainerID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setCurrentServerChangeToken(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentServerChangeToken:"),
      arg,
    );
  }

  static void setDeviceCount(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setDeviceCount:"),
      arg,
    );
  }

  static void setEncryptedLastZoneishPCSRollDate(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedLastZoneishPCSRollDate:"),
      arg,
    );
  }

  static void setMetadataQuotaUsage(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setMetadataQuotaUsage:"),
      arg,
    );
  }

  static void setNeedsZoneishPCSRolled(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNeedsZoneishPCSRolled:"),
      arg,
    );
  }

  static void setPcsKeyID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPcsKeyID:"),
      arg,
    );
  }

  static void setPreviousProtectionEtag(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousProtectionEtag:"),
      arg,
    );
  }

  static void setProtectionData(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectionData:"),
      arg,
    );
  }

  static void setProtectionEtag(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectionEtag:"),
      arg,
    );
  }

  static void setSerializeProtectionData(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSerializeProtectionData:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static void setZoneKeyRollAllowed(
    Pointer<CKRecordZone> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setZoneKeyRollAllowed:"),
      arg,
    );
  }

  static void setZonePCSLastModifierDevice(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZonePCSLastModifierDevice:"),
      arg,
    );
  }

  static void setZonePCSModificationDate(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZonePCSModificationDate:"),
      arg,
    );
  }

  static void setZoneishKeyID(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneishKeyID:"),
      arg,
    );
  }

  static void setZoneishProtectionData(
    Pointer<CKRecordZone> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneishProtectionData:"),
      arg,
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }

  static int zoneKeyRollAllowed(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("zoneKeyRollAllowed"),
    );
  }

  static Pointer<Void> zonePCSLastModifierDevice(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zonePCSLastModifierDevice"),
    );
  }

  static Pointer<Void> zonePCSModificationDate(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zonePCSModificationDate"),
    );
  }

  static Pointer<Void> zoneishKeyID(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneishKeyID"),
    );
  }

  static Pointer<Void> zoneishProtectionData(
    Pointer<CKRecordZone> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneishProtectionData"),
    );
  }
}

/// Objective-C class _CKRecordZoneID_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordZoneID extends Struct<CKRecordZoneID> {
  factory CKRecordZoneID._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordZoneID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRecordZoneID").cast<CKRecordZoneID>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKRecordZoneID> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> CKPropertiesDescriptionWithProperties(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescriptionWithProperties:"),
      arg,
    );
  }

  static Pointer<Void> CKXPCSuitableString(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKXPCSuitableString"),
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static int compareToRecordZoneID(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareToRecordZoneID:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecordZoneID> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithSqliteRepresentation(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSqliteRepresentation:"),
      arg,
    );
  }

  static Pointer<Void> initWithZoneName(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ownerName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneName:ownerName:"),
      arg,
      ownerName,
    );
  }

  static int isDefaultRecordZoneID(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDefaultRecordZoneID"),
    );
  }

  static int isEqual(
    Pointer<CKRecordZoneID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> ownerName(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerName"),
    );
  }

  static Pointer<Void> sqliteRepresentation(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sqliteRepresentation"),
    );
  }

  static Pointer<Void> zoneName(
    Pointer<CKRecordZoneID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneName"),
    );
  }
}

/// Objective-C class _CKRecordZoneNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordZoneNotification extends Struct<CKRecordZoneNotification> {
  factory CKRecordZoneNotification._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordZoneNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKRecordZoneNotification")
        .cast<CKRecordZoneNotification>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecordZoneNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static int databaseScope(
    Pointer<CKRecordZoneNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("databaseScope"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKRecordZoneNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKRecordZoneNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRecordZoneNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRemoteNotificationDictionary(
    Pointer<CKRecordZoneNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRemoteNotificationDictionary:"),
      arg,
    );
  }

  static Pointer<Void> recordZoneID(
    Pointer<CKRecordZoneNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordZoneID"),
    );
  }

  static void setDatabaseScope(
    Pointer<CKRecordZoneNotification> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDatabaseScope:"),
      arg,
    );
  }

  static void setRecordZoneID(
    Pointer<CKRecordZoneNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordZoneID:"),
      arg,
    );
  }
}

/// Objective-C class _CKRecordZoneSubscription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecordZoneSubscription extends Struct<CKRecordZoneSubscription> {
  factory CKRecordZoneSubscription._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecordZoneSubscription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKRecordZoneSubscription")
        .cast<CKRecordZoneSubscription>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKRecordZoneSubscription> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> initWithZoneID$subscriptionID$(
    Pointer<CKRecordZoneSubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> subscriptionID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneID:subscriptionID:"),
      arg,
      subscriptionID,
    );
  }

  static Pointer<Void> initWithZoneID$(
    Pointer<CKRecordZoneSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneID:"),
      arg,
    );
  }
}

/// Objective-C class _CKRecursivePredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRecursivePredicateValidator
    extends Struct<CKRecursivePredicateValidator> {
  factory CKRecursivePredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKRecursivePredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKRecursivePredicateValidator")
        .cast<CKRecursivePredicateValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKRecursivePredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValidator(
    Pointer<CKRecursivePredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValidator:"),
      arg,
    );
  }

  static void setValidator(
    Pointer<CKRecursivePredicateValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValidator:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKRecursivePredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> validator(
    Pointer<CKRecursivePredicateValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("validator"),
    );
  }
}

/// Objective-C class _CKReference_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKReference extends Struct<CKReference> {
  factory CKReference._() {
    throw UnimplementedError();
  }
  static Pointer<CKReference> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKReference").cast<CKReference>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKReference> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKReference> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecord(
    Pointer<CKReference> _self,
    Pointer<Void> arg, {
    @required int action,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecord:action:"),
      arg,
      action,
    );
  }

  static Pointer<Void> initWithRecordID(
    Pointer<CKReference> _self,
    Pointer<Void> arg, {
    @required int action,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecordID:action:"),
      arg,
      action,
    );
  }

  static int isEqual(
    Pointer<CKReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> recordID(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordID"),
    );
  }

  static int referenceAction(
    Pointer<CKReference> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("referenceAction"),
    );
  }

  static void setRecordID(
    Pointer<CKReference> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordID:"),
      arg,
    );
  }
}

/// Objective-C class _CKRepairZonePCSOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRepairZonePCSOperation extends Struct<CKRepairZonePCSOperation> {
  factory CKRepairZonePCSOperation._() {
    throw UnimplementedError();
  }
  static Pointer<CKRepairZonePCSOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKRepairZonePCSOperation")
        .cast<CKRepairZonePCSOperation>();
  }

  static Pointer<Void> activityCreate(
    Pointer<CKRepairZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityCreate"),
    );
  }

  static void fillFromOperationInfo(
    Pointer<CKRepairZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillFromOperationInfo:"),
      arg,
    );
  }

  static void fillOutOperationInfo(
    Pointer<CKRepairZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fillOutOperationInfo:"),
      arg,
    );
  }

  static int hasCKOperationCallbacksSet(
    Pointer<CKRepairZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasCKOperationCallbacksSet"),
    );
  }

  static Pointer<Void> initWithZoneIDsToRepair(
    Pointer<CKRepairZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithZoneIDsToRepair:"),
      arg,
    );
  }

  static void performCKOperation(
    Pointer<CKRepairZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performCKOperation"),
    );
  }

  static void setZoneIDs(
    Pointer<CKRepairZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneIDs:"),
      arg,
    );
  }

  static void setZoneRepairedBlock(
    Pointer<CKRepairZonePCSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneRepairedBlock:"),
      arg,
    );
  }

  static Pointer<Void> zoneIDs(
    Pointer<CKRepairZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneIDs"),
    );
  }

  static Pointer<Void> zoneRepairedBlock(
    Pointer<CKRepairZonePCSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneRepairedBlock"),
    );
  }
}

/// Objective-C class _CKRepairZonePCSOperationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRepairZonePCSOperationInfo
    extends Struct<CKRepairZonePCSOperationInfo> {
  factory CKRepairZonePCSOperationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKRepairZonePCSOperationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKRepairZonePCSOperationInfo")
        .cast<CKRepairZonePCSOperationInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKRepairZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRepairZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setZoneIDs(
    Pointer<CKRepairZonePCSOperationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneIDs:"),
      arg,
    );
  }

  static Pointer<Void> zoneIDs(
    Pointer<CKRepairZonePCSOperationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneIDs"),
    );
  }
}

/// Objective-C class _CKRequestInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKRequestInfo extends Struct<CKRequestInfo> {
  factory CKRequestInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKRequestInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKRequestInfo").cast<CKRequestInfo>();
  }

  static void encodeWithCoder(
    Pointer<CKRequestInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKRequestInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRequestUUID(
    Pointer<CKRequestInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> responseHTTPHeaders,
    @required Pointer<Void> w3cTiming,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRequestUUID:responseHTTPHeaders:w3cTiming:"),
      arg,
      responseHTTPHeaders,
      w3cTiming,
    );
  }

  static Pointer<Void> requestUUID(
    Pointer<CKRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestUUID"),
    );
  }

  static Pointer<Void> responseHTTPHeaders(
    Pointer<CKRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("responseHTTPHeaders"),
    );
  }

  static Pointer<Void> w3cNavigationTiming(
    Pointer<CKRequestInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("w3cNavigationTiming"),
    );
  }
}

/// Objective-C class _CKSQLite_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSQLite extends Struct<CKSQLite> {
  factory CKSQLite._() {
    throw UnimplementedError();
  }
  static Pointer<CKSQLite> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSQLite").cast<CKSQLite>();
  }

  static Pointer<Void> allTableNames(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allTableNames"),
    );
  }

  static void analyze(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("analyze"),
    );
  }

  static void begin(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("begin"),
    );
  }

  static int changes(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("changes"),
    );
  }

  static void close(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("close"),
    );
  }

  static Pointer<Void> columnNamesForTable(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("columnNamesForTable:"),
      arg,
    );
  }

  static int corrupt(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("corrupt"),
    );
  }

  static Pointer<Void> creationDate(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("creationDate"),
    );
  }

  static Pointer<Void> dateFormatter(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateFormatter"),
    );
  }

  static Pointer<Void> datePropertyForKey(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("datePropertyForKey:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> db(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("db"),
    );
  }

  static int dbUserVersion(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("dbUserVersion"),
    );
  }

  static void dealloc(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static int deleteAllObjectsOfClass(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("deleteAllObjectsOfClass:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static int deleteExactObject(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("deleteExactObject:"),
      arg,
    );
  }

  static void deleteFrom$matchingValues$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> matchingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteFrom:matchingValues:"),
      arg,
      matchingValues,
    );
  }

  static void deleteFrom$where$bindings$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteFrom:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static void dropAllTables(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dropAllTables"),
    );
  }

  static void end(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("end"),
    );
  }

  static void executeSQL$arguments$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeSQL:arguments:"),
      arg,
      arguments,
    );
  }

  static void executeSQL$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeSQL:"),
      arg,
    );
  }

  static int hasMigrated(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasMigrated"),
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> schema,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:schema:"),
      arg,
      schema,
    );
  }

  static int insertOrReplaceInto(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> values,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("insertOrReplaceInto:values:"),
      arg,
      values,
    );
  }

  static int insertOrReplaceObject(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("insertOrReplaceObject:"),
      arg,
    );
  }

  static int isOpen(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOpen"),
    );
  }

  static int lastInsertRowID(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("lastInsertRowID"),
    );
  }

  static Pointer<Void> objectClassPrefix(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectClassPrefix"),
    );
  }

  static void open(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("open"),
    );
  }

  static int openCount(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("openCount"),
    );
  }

  static int openWithError(
    Pointer<CKSQLite> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("openWithError:"),
      arg,
    );
  }

  static Pointer<Void> path(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static void raise(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("raise:"),
      arg,
    );
  }

  static void remove(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("remove"),
    );
  }

  static void removeAllStatements(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllStatements"),
    );
  }

  static void removePropertyForKey(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePropertyForKey:"),
      arg,
    );
  }

  static void rollback(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rollback"),
    );
  }

  static Pointer<Void> schema(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("schema"),
    );
  }

  static Pointer<Void> schemaVersion(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("schemaVersion"),
    );
  }

  static Pointer<Void> select$from$where$bindings$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> from,
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("select:from:where:bindings:"),
      arg,
      from,
      where,
      bindings,
    );
  }

  static void select$from$where$bindings$orderBy$limit$block$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> from,
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> orderBy,
    @required Pointer<Void> limit,
    @required Pointer<Void> block,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("select:from:where:bindings:orderBy:limit:block:"),
      arg,
      from,
      where,
      bindings,
      orderBy,
      limit,
      block,
    );
  }

  static Pointer<Void> select$from$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> from,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("select:from:"),
      arg,
      from,
    );
  }

  static Pointer<Void> selectAllFrom(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectAllFrom:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static void selectAllObjectsOfClass$where$bindings$orderBy$limit$block$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> orderBy,
    @required Pointer<Void> limit,
    @required Pointer<Void> block,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "selectAllObjectsOfClass:where:bindings:orderBy:limit:block:"),
      arg,
      where,
      bindings,
      orderBy,
      limit,
      block,
    );
  }

  static Pointer<Void> selectAllObjectsOfClass$where$bindings$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectAllObjectsOfClass:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static Pointer<Void> selectAllObjectsOfClass$where$bindings$limit$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> limit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectAllObjectsOfClass:where:bindings:limit:"),
      arg,
      where,
      bindings,
      limit,
    );
  }

  static Pointer<Void> selectAllObjectsOfClass$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectAllObjectsOfClass:"),
      arg,
    );
  }

  static int selectCountFrom(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("selectCountFrom:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static Pointer<Void> selectFrom$where$bindings$limit$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> limit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectFrom:where:bindings:limit:"),
      arg,
      where,
      bindings,
      limit,
    );
  }

  static void selectFrom$where$bindings$orderBy$limit$block$(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> orderBy,
    @required Pointer<Void> limit,
    @required Pointer<Void> block,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("selectFrom:where:bindings:orderBy:limit:block:"),
      arg,
      where,
      bindings,
      orderBy,
      limit,
      block,
    );
  }

  static Pointer<Void> selectObjectOfClass(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectObjectOfClass:where:bindings:"),
      arg,
      where,
      bindings,
    );
  }

  static void setCorrupt(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCorrupt:"),
      arg,
    );
  }

  static void setDateFormatter(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateFormatter:"),
      arg,
    );
  }

  static void setDateProperty(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateProperty:forKey:"),
      arg,
      forKey,
    );
  }

  static void setDb(
    Pointer<CKSQLite> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDb:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setObjectClassPrefix(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectClassPrefix:"),
      arg,
    );
  }

  static void setOpenCount(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOpenCount:"),
      arg,
    );
  }

  static void setProperty(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProperty:forKey:"),
      arg,
      forKey,
    );
  }

  static void setShouldVacuum(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldVacuum:"),
      arg,
    );
  }

  static void setSynchronousMode(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSynchronousMode:"),
      arg,
    );
  }

  static void setTraced(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTraced:"),
      arg,
    );
  }

  static void setUserVersion(
    Pointer<CKSQLite> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setUserVersion:"),
      arg,
    );
  }

  static int shouldVacuum(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldVacuum"),
    );
  }

  static Pointer<Void> statementForSQL(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("statementForSQL:"),
      arg,
    );
  }

  static Pointer<Void> statementsBySQL(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statementsBySQL"),
    );
  }

  static int synchronousMode(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("synchronousMode"),
    );
  }

  static int traced(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("traced"),
    );
  }

  static void update(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> set,
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
    @required Pointer<Void> limit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("update:set:where:bindings:limit:"),
      arg,
      set,
      where,
      bindings,
      limit,
    );
  }

  static void updateAllObjectsOfClass(
    Pointer<CKSQLite> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> set,
    @required Pointer<Void> where,
    @required Pointer<Void> bindings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateAllObjectsOfClass:set:where:bindings:"),
      arg,
      set,
      where,
      bindings,
    );
  }

  static int userVersion(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("userVersion"),
    );
  }

  static void vacuum(
    Pointer<CKSQLite> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("vacuum"),
    );
  }
}

/// Objective-C class _CKSQLiteError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSQLiteError extends Struct<CKSQLiteError> {
  factory CKSQLiteError._() {
    throw UnimplementedError();
  }
  static Pointer<CKSQLiteError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSQLiteError").cast<CKSQLiteError>();
  }
}

/// Objective-C class _CKSQLitePool_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSQLitePool extends Struct<CKSQLitePool> {
  factory CKSQLitePool._() {
    throw UnimplementedError();
  }
  static Pointer<CKSQLitePool> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSQLitePool").cast<CKSQLitePool>();
  }

  static Pointer<Void> acquireDatabase(
    Pointer<CKSQLitePool> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("acquireDatabase:"),
      arg,
    );
  }

  static Pointer<Void> acquireDatabaseWithError(
    Pointer<CKSQLitePool> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("acquireDatabaseWithError:"),
      arg,
    );
  }

  static void closeAll(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("closeAll"),
    );
  }

  static Pointer<Void> dbs(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dbs"),
    );
  }

  static int drainScheduled(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("drainScheduled"),
    );
  }

  static Pointer<Void> factory(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("factory"),
    );
  }

  static Pointer<Void> initWithFactory$queueAttr$(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queueAttr,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFactory:queueAttr:"),
      arg,
      queueAttr,
    );
  }

  static Pointer<Void> initWithFactory$(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFactory:"),
      arg,
    );
  }

  static void performWithDatabase$(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performWithDatabase:"),
      arg,
    );
  }

  static int performWithDatabase$error$(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performWithDatabase:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> queue(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queue"),
    );
  }

  static void releaseDatabase(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("releaseDatabase:"),
      arg,
    );
  }

  static void setDbs(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDbs:"),
      arg,
    );
  }

  static void setDrainScheduled(
    Pointer<CKSQLitePool> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDrainScheduled:"),
      arg,
    );
  }

  static void setQueue(
    Pointer<CKSQLitePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueue:"),
      arg,
    );
  }

  static void setTraced(
    Pointer<CKSQLitePool> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setTraced:"),
      arg,
    );
  }

  static int traced(
    Pointer<CKSQLitePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("traced"),
    );
  }
}

/// Objective-C class _CKSQLiteStatement_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSQLiteStatement extends Struct<CKSQLiteStatement> {
  factory CKSQLiteStatement._() {
    throw UnimplementedError();
  }
  static Pointer<CKSQLiteStatement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSQLiteStatement").cast<CKSQLiteStatement>();
  }

  static Pointer<Void> SQL(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("SQL"),
    );
  }

  static Pointer<Void> SQLite(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("SQLite"),
    );
  }

  static Pointer<Void> allObjects(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjects"),
    );
  }

  static Pointer<Void> allObjectsByColumnName(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjectsByColumnName"),
    );
  }

  static void bindBlob(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("bindBlob:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindDouble(
    Pointer<CKSQLiteStatement> _self,
    double arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Uint64_returns_void(
      _self,
      _objc.getSelector("bindDouble:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindInt(
    Pointer<CKSQLiteStatement> _self,
    int arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Uint64_returns_void(
      _self,
      _objc.getSelector("bindInt:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindInt64(
    Pointer<CKSQLiteStatement> _self,
    int arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Uint64_returns_void(
      _self,
      _objc.getSelector("bindInt64:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindNullAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("bindNullAtIndex:"),
      arg,
    );
  }

  static void bindText(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("bindText:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindValue(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("bindValue:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void bindValues(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("bindValues:"),
      arg,
    );
  }

  static Pointer<Void> blobAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("blobAtIndex:"),
      arg,
    );
  }

  static int columnCount(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("columnCount"),
    );
  }

  static Pointer<Void> columnNameAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("columnNameAtIndex:"),
      arg,
    );
  }

  static int columnTypeAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int32(
      _self,
      _objc.getSelector("columnTypeAtIndex:"),
      arg,
    );
  }

  static double doubleAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_float64(
      _self,
      _objc.getSelector("doubleAtIndex:"),
      arg,
    );
  }

  static void finalizeStatement(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalizeStatement"),
    );
  }

  static Pointer<Pointer<Void>> handle(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("handle"),
    );
  }

  static Pointer<Void> initWithSQLite(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> SQL,
    @required Pointer<Pointer<Void>> handle,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSQLite:SQL:handle:"),
      arg,
      SQL,
      handle,
    );
  }

  static int int64AtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int64(
      _self,
      _objc.getSelector("int64AtIndex:"),
      arg,
    );
  }

  static int intAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int32(
      _self,
      _objc.getSelector("intAtIndex:"),
      arg,
    );
  }

  static int isReset(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReset"),
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static void reset(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void resetAfterStepError(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetAfterStepError"),
    );
  }

  static Pointer<Void> retainedTemporaryBoundObject(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("retainedTemporaryBoundObject:"),
      arg,
    );
  }

  static void setReset(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setReset:"),
      arg,
    );
  }

  static void setTemporaryBoundObjects(
    Pointer<CKSQLiteStatement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTemporaryBoundObjects:"),
      arg,
    );
  }

  static int step(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("step"),
    );
  }

  static Pointer<Void> temporaryBoundObjects(
    Pointer<CKSQLiteStatement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("temporaryBoundObjects"),
    );
  }

  static Pointer<Void> textAtIndex(
    Pointer<CKSQLiteStatement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("textAtIndex:"),
      arg,
    );
  }
}

/// Objective-C class _CKSQLiteStatementEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSQLiteStatementEnumerator extends Struct<CKSQLiteStatementEnumerator> {
  factory CKSQLiteStatementEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<CKSQLiteStatementEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKSQLiteStatementEnumerator")
        .cast<CKSQLiteStatementEnumerator>();
  }

  static Pointer<Void> block(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("block"),
    );
  }

  static void close(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("close"),
    );
  }

  static int closed(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("closed"),
    );
  }

  static void dealloc(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithStatement(
    Pointer<CKSQLiteStatementEnumerator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> block,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStatement:block:"),
      arg,
      block,
    );
  }

  static Pointer<Void> nextObject(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }

  static void setBlock(
    Pointer<CKSQLiteStatementEnumerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBlock:"),
      arg,
    );
  }

  static void setClosed(
    Pointer<CKSQLiteStatementEnumerator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setClosed:"),
      arg,
    );
  }

  static void setStatement(
    Pointer<CKSQLiteStatementEnumerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStatement:"),
      arg,
    );
  }

  static Pointer<Void> statement(
    Pointer<CKSQLiteStatementEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statement"),
    );
  }
}

/// Objective-C class _CKServerChangeToken_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKServerChangeToken extends Struct<CKServerChangeToken> {
  factory CKServerChangeToken._() {
    throw UnimplementedError();
  }
  static Pointer<CKServerChangeToken> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKServerChangeToken").cast<CKServerChangeToken>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKServerChangeToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKServerChangeToken> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<CKServerChangeToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKServerChangeToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKServerChangeToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<CKServerChangeToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKServerChangeToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKServerChangeToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<CKServerChangeToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKServerChangeToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setData(
    Pointer<CKServerChangeToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setData:"),
      arg,
    );
  }
}

/// Objective-C class _CKShare_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKShare extends Struct<CKShare> {
  factory CKShare._() {
    throw UnimplementedError();
  }
  static Pointer<CKShare> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKShare").cast<CKShare>();
  }

  static void CKAssignToContainerWithID(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("CKAssignToContainerWithID:"),
      arg,
    );
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKShare> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static void addParticipant(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addParticipant:"),
      arg,
    );
  }

  static Pointer<Void> addedParticipantIDs(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addedParticipantIDs"),
    );
  }

  static Pointer<Void> addedParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addedParticipants"),
    );
  }

  static Pointer<Void> allParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allParticipants"),
    );
  }

  static int allowsAnonymousPublicAccess(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsAnonymousPublicAccess"),
    );
  }

  static int allowsReadOnlyParticipantsToSeeEachOther(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsReadOnlyParticipantsToSeeEachOther"),
    );
  }

  static void clearModifiedParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearModifiedParticipants"),
    );
  }

  static Pointer<Void> containerID(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerID"),
    );
  }

  static Pointer<Void> copyWithOriginalValues(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithOriginalValues"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKShare> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> currentUserParticipant(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentUserParticipant"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeSystemFieldsWithCoder(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeSystemFieldsWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedPublicSharingKey(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedPublicSharingKey"),
    );
  }

  static int hasEncryptedData(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasEncryptedData"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$recordID$(
    Pointer<CKShare> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> recordID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:recordID:"),
      arg,
      recordID,
    );
  }

  static Pointer<Void> initWithRecordType$(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$zoneID$(
    Pointer<CKShare> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> zoneID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:zoneID:"),
      arg,
      zoneID,
    );
  }

  static Pointer<Void> initWithRootRecord$(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRootRecord:"),
      arg,
    );
  }

  static Pointer<Void> initWithRootRecord$shareID$(
    Pointer<CKShare> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shareID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRootRecord:shareID:"),
      arg,
      shareID,
    );
  }

  static Pointer<Void> invitedKeysToRemove(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invitedKeysToRemove"),
    );
  }

  static Pointer<Void> invitedProtectionData(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invitedProtectionData"),
    );
  }

  static Pointer<Void> invitedProtectionEtag(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invitedProtectionEtag"),
    );
  }

  static Pointer<Void> lastFetchedParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastFetchedParticipants"),
    );
  }

  static Pointer<Void> owner(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("owner"),
    );
  }

  static Pointer<Void> participants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participants"),
    );
  }

  static Pointer<Void> previousInvitedProtectionEtag(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousInvitedProtectionEtag"),
    );
  }

  static Pointer<Void> previousPublicProtectionEtag(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousPublicProtectionEtag"),
    );
  }

  static Pointer<Void> privateToken(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateToken"),
    );
  }

  static int publicPermission(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("publicPermission"),
    );
  }

  static Pointer<Void> publicProtectionData(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicProtectionData"),
    );
  }

  static Pointer<Void> publicProtectionEtag(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicProtectionEtag"),
    );
  }

  static Pointer<Void> publicSharingIdentity(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicSharingIdentity"),
    );
  }

  static void registerFetchedParticipant(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerFetchedParticipant:"),
      arg,
    );
  }

  static void removeParticipant(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeParticipant:"),
      arg,
    );
  }

  static Pointer<Void> removedParticipantIDs(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("removedParticipantIDs"),
    );
  }

  static Pointer<Void> removedParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("removedParticipants"),
    );
  }

  static void resetFetchedParticipants(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetFetchedParticipants"),
    );
  }

  static Pointer<Void> rootRecordID(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecordID"),
    );
  }

  static int serializePersonalInfo(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("serializePersonalInfo"),
    );
  }

  static void setAddedParticipantIDs(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAddedParticipantIDs:"),
      arg,
    );
  }

  static void setAllParticipants(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAllParticipants:"),
      arg,
    );
  }

  static void setAllowsAnonymousPublicAccess(
    Pointer<CKShare> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsAnonymousPublicAccess:"),
      arg,
    );
  }

  static void setAllowsReadOnlyParticipantsToSeeEachOther(
    Pointer<CKShare> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsReadOnlyParticipantsToSeeEachOther:"),
      arg,
    );
  }

  static void setContainerID(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerID:"),
      arg,
    );
  }

  static void setInvitedKeysToRemove(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInvitedKeysToRemove:"),
      arg,
    );
  }

  static void setInvitedProtectionData(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInvitedProtectionData:"),
      arg,
    );
  }

  static void setInvitedProtectionEtag(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInvitedProtectionEtag:"),
      arg,
    );
  }

  static void setLastFetchedParticipants(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLastFetchedParticipants:"),
      arg,
    );
  }

  static void setPreviousInvitedProtectionEtag(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousInvitedProtectionEtag:"),
      arg,
    );
  }

  static void setPreviousPublicProtectionEtag(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviousPublicProtectionEtag:"),
      arg,
    );
  }

  static void setPublicPermission(
    Pointer<CKShare> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPublicPermission:"),
      arg,
    );
  }

  static void setPublicProtectionData(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicProtectionData:"),
      arg,
    );
  }

  static void setPublicProtectionEtag(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicProtectionEtag:"),
      arg,
    );
  }

  static void setPublicSharingIdentity(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicSharingIdentity:"),
      arg,
    );
  }

  static void setRemovedParticipantIDs(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRemovedParticipantIDs:"),
      arg,
    );
  }

  static void setRootRecordID(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecordID:"),
      arg,
    );
  }

  static void setSerializePersonalInfo(
    Pointer<CKShare> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSerializePersonalInfo:"),
      arg,
    );
  }

  static void setShareID(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareID:"),
      arg,
    );
  }

  static void setWantsPublicSharingKey(
    Pointer<CKShare> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsPublicSharingKey:"),
      arg,
    );
  }

  static Pointer<Void> shareID(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareID"),
    );
  }

  static Pointer<Void> shareURL(
    Pointer<CKShare> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareURL"),
    );
  }

  static Pointer<Void> updateFromServerShare(
    Pointer<CKShare> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("updateFromServerShare:"),
      arg,
    );
  }
}

/// Objective-C class _CKShareMetadata_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKShareMetadata extends Struct<CKShareMetadata> {
  factory CKShareMetadata._() {
    throw UnimplementedError();
  }
  static Pointer<CKShareMetadata> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKShareMetadata").cast<CKShareMetadata>();
  }

  static void CKAssignToContainerWithID(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("CKAssignToContainerWithID:"),
      arg,
    );
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKShareMetadata> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static int acceptedInProcess(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("acceptedInProcess"),
    );
  }

  static Pointer<Void> baseToken(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseToken"),
    );
  }

  static Pointer<Void> callingParticipant(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("callingParticipant"),
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static Pointer<Void> containerIdentifier(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerIdentifier"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKShareMetadata> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedData(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedData"),
    );
  }

  static int environment(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("environment"),
    );
  }

  static int hash(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> outOfNetworkMatches(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("outOfNetworkMatches"),
    );
  }

  static Pointer<Void> ownerIdentity(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownerIdentity"),
    );
  }

  static int participantPermission(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantPermission"),
    );
  }

  static int participantRole(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantRole"),
    );
  }

  static int participantStatus(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantStatus"),
    );
  }

  static int participantType(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("participantType"),
    );
  }

  static Pointer<Void> privateToken(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateToken"),
    );
  }

  static Pointer<Void> protectedFullToken(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectedFullToken"),
    );
  }

  static Pointer<Void> publicToken(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicToken"),
    );
  }

  static Pointer<Void> rootRecord(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecord"),
    );
  }

  static Pointer<Void> rootRecordID(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecordID"),
    );
  }

  static Pointer<Void> rootRecordType(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootRecordType"),
    );
  }

  static void setAcceptedInProcess(
    Pointer<CKShareMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAcceptedInProcess:"),
      arg,
    );
  }

  static void setCallingParticipant(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCallingParticipant:"),
      arg,
    );
  }

  static void setContainerIdentifier(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerIdentifier:"),
      arg,
    );
  }

  static void setEncryptedData(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedData:"),
      arg,
    );
  }

  static void setEnvironment(
    Pointer<CKShareMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setEnvironment:"),
      arg,
    );
  }

  static void setOutOfNetworkMatches(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOutOfNetworkMatches:"),
      arg,
    );
  }

  static void setOwnerIdentity(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwnerIdentity:"),
      arg,
    );
  }

  static void setParticipantPermission(
    Pointer<CKShareMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantPermission:"),
      arg,
    );
  }

  static void setParticipantRole(
    Pointer<CKShareMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantRole:"),
      arg,
    );
  }

  static void setParticipantStatus(
    Pointer<CKShareMetadata> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setParticipantStatus:"),
      arg,
    );
  }

  static void setPrivateToken(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrivateToken:"),
      arg,
    );
  }

  static void setProtectedFullToken(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectedFullToken:"),
      arg,
    );
  }

  static void setPublicToken(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicToken:"),
      arg,
    );
  }

  static void setRootRecord(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecord:"),
      arg,
    );
  }

  static void setRootRecordID(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecordID:"),
      arg,
    );
  }

  static void setRootRecordType(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootRecordType:"),
      arg,
    );
  }

  static void setShare(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShare:"),
      arg,
    );
  }

  static void setSharedItemHierarchy(
    Pointer<CKShareMetadata> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSharedItemHierarchy:"),
      arg,
    );
  }

  static Pointer<Void> share(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("share"),
    );
  }

  static Pointer<Void> sharedItemHierarchy(
    Pointer<CKShareMetadata> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedItemHierarchy"),
    );
  }
}

/// Objective-C class _CKShareParticipant_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKShareParticipant extends Struct<CKShareParticipant> {
  factory CKShareParticipant._() {
    throw UnimplementedError();
  }
  static Pointer<CKShareParticipant> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKShareParticipant").cast<CKShareParticipant>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKShareParticipant> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static int acceptanceStatus(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("acceptanceStatus"),
    );
  }

  static int acceptedInProcess(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("acceptedInProcess"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKShareParticipant> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int createdInProcess(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("createdInProcess"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedPersonalInfo(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedPersonalInfo"),
    );
  }

  static int hash(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> inviterID(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inviterID"),
    );
  }

  static int isCurrentUser(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCurrentUser"),
    );
  }

  static int isEqual(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isOrgAdminUser(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOrgAdminUser"),
    );
  }

  static int originalAcceptanceStatus(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("originalAcceptanceStatus"),
    );
  }

  static int originalParticipantRole(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("originalParticipantRole"),
    );
  }

  static int originalPermission(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("originalPermission"),
    );
  }

  static Pointer<Void> participantID(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("participantID"),
    );
  }

  static int permission(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("permission"),
    );
  }

  static Pointer<Void> protectionInfo(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protectionInfo"),
    );
  }

  static int role(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("role"),
    );
  }

  static void setAcceptanceStatus(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setAcceptanceStatus:"),
      arg,
    );
  }

  static void setAcceptedInProcess(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAcceptedInProcess:"),
      arg,
    );
  }

  static void setCreatedInProcess(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCreatedInProcess:"),
      arg,
    );
  }

  static void setEncryptedPersonalInfo(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedPersonalInfo:"),
      arg,
    );
  }

  static void setInviterID(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInviterID:"),
      arg,
    );
  }

  static void setIsCurrentUser(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsCurrentUser:"),
      arg,
    );
  }

  static void setIsOrgAdminUser(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsOrgAdminUser:"),
      arg,
    );
  }

  static void setOriginalAcceptanceStatus(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setOriginalAcceptanceStatus:"),
      arg,
    );
  }

  static void setOriginalParticipantRole(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setOriginalParticipantRole:"),
      arg,
    );
  }

  static void setOriginalPermission(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setOriginalPermission:"),
      arg,
    );
  }

  static void setParticipantID(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParticipantID:"),
      arg,
    );
  }

  static void setPermission(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPermission:"),
      arg,
    );
  }

  static void setProtectionInfo(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtectionInfo:"),
      arg,
    );
  }

  static void setRole(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setRole:"),
      arg,
    );
  }

  static void setShareRecordID(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShareRecordID:"),
      arg,
    );
  }

  static void setType(
    Pointer<CKShareParticipant> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static void setUserIdentity(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserIdentity:"),
      arg,
    );
  }

  static Pointer<Void> shareRecordID(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shareRecordID"),
    );
  }

  static int type(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("type"),
    );
  }

  static Pointer<Void> unifiedContactsInStore(
    Pointer<CKShareParticipant> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> keysToFetch,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("unifiedContactsInStore:keysToFetch:error:"),
      arg,
      keysToFetch,
      error,
    );
  }

  static Pointer<Void> userIdentity(
    Pointer<CKShareParticipant> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userIdentity"),
    );
  }
}

/// Objective-C class _CKSignatureGenerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSignatureGenerator extends Struct<CKSignatureGenerator> {
  factory CKSignatureGenerator._() {
    throw UnimplementedError();
  }
  static Pointer<CKSignatureGenerator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSignatureGenerator").cast<CKSignatureGenerator>();
  }

  static Pointer<Void> dataByFinishingSignature(
    Pointer<CKSignatureGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dataByFinishingSignature"),
    );
  }

  static void dealloc(
    Pointer<CKSignatureGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> generator(
    Pointer<CKSignatureGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generator"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKSignatureGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isValid(
    Pointer<CKSignatureGenerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static void setGenerator(
    Pointer<CKSignatureGenerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGenerator:"),
      arg,
    );
  }

  static void setValid(
    Pointer<CKSignatureGenerator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setValid:"),
      arg,
    );
  }

  static void updateWithBytes(
    Pointer<CKSignatureGenerator> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("updateWithBytes:length:"),
      arg,
      length,
    );
  }

  static void updateWithData(
    Pointer<CKSignatureGenerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("updateWithData:"),
      arg,
    );
  }
}

/// Objective-C class _CKStringValueValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKStringValueValidator extends Struct<CKStringValueValidator> {
  factory CKStringValueValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKStringValueValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKStringValueValidator")
        .cast<CKStringValueValidator>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKStringValueValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> initWithValue(
    Pointer<CKStringValueValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithValue:"),
      arg,
    );
  }

  static void setValue(
    Pointer<CKStringValueValidator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static int validate(
    Pointer<CKStringValueValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> value(
    Pointer<CKStringValueValidator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _CKSubscription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKSubscription extends Struct<CKSubscription> {
  factory CKSubscription._() {
    throw UnimplementedError();
  }
  static Pointer<CKSubscription> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKSubscription").cast<CKSubscription>();
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKSubscription> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRecordType$predicate$options$(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> predicate,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:predicate:options:"),
      arg,
      predicate,
      options,
    );
  }

  static Pointer<Void> initWithRecordType$predicate$subscriptionID$options$(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> predicate,
    @required Pointer<Void> subscriptionID,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithRecordType:predicate:subscriptionID:options:"),
      arg,
      predicate,
      subscriptionID,
      options,
    );
  }

  static Pointer<Void> initWithZoneID$options$(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithZoneID:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithZoneID$subscriptionID$options$(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> subscriptionID,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithZoneID:subscriptionID:options:"),
      arg,
      subscriptionID,
      options,
    );
  }

  static Pointer<Void> notificationInfo(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notificationInfo"),
    );
  }

  static Pointer<Void> predicate(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer<Void> recordType(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordType"),
    );
  }

  static void setNotificationInfo(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotificationInfo:"),
      arg,
    );
  }

  static void setPredicate(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static void setRecordType(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRecordType:"),
      arg,
    );
  }

  static void setSubscriptionID(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubscriptionID:"),
      arg,
    );
  }

  static void setSubscriptionOptions(
    Pointer<CKSubscription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSubscriptionOptions:"),
      arg,
    );
  }

  static void setSubscriptionType(
    Pointer<CKSubscription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setSubscriptionType:"),
      arg,
    );
  }

  static void setZoneID(
    Pointer<CKSubscription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZoneID:"),
      arg,
    );
  }

  static Pointer<Void> subscriptionID(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subscriptionID"),
    );
  }

  static int subscriptionOptions(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("subscriptionOptions"),
    );
  }

  static int subscriptionType(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("subscriptionType"),
    );
  }

  static Pointer<Void> zoneID(
    Pointer<CKSubscription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zoneID"),
    );
  }
}

/// Objective-C class _CKTimeLogger_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKTimeLogger extends Struct<CKTimeLogger> {
  factory CKTimeLogger._() {
    throw UnimplementedError();
  }
  static Pointer<CKTimeLogger> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKTimeLogger").cast<CKTimeLogger>();
  }

  static Pointer<Void> CKStatusReportArray(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKStatusReportArray"),
    );
  }

  static void addChildLogger(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChildLogger:"),
      arg,
    );
  }

  static void addCustomLogOfType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
    @required double from,
    @required double to,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("addCustomLogOfType:message:from:to:"),
      arg,
      message,
      from,
      to,
    );
  }

  static void addLog(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addLog:forType:"),
      arg,
      forType,
    );
  }

  static void appendBriefStatusReportToString(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendBriefStatusReportToString:"),
      arg,
    );
  }

  static void appendStatusReportForType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toString,
    @required int withIndent,
    @required int showingPointers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector(
          "appendStatusReportForType:toString:withIndent:showingPointers:"),
      arg,
      toString,
      withIndent,
      showingPointers,
    );
  }

  static void appendStatusReportToString(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required int withIndent,
    @required int showingPointers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector(
          "appendStatusReportToString:withIndent:showingPointers:"),
      arg,
      withIndent,
      showingPointers,
    );
  }

  static void beginLoggingSessionOfType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoggingSessionOfType:message:"),
      arg,
      message,
    );
  }

  static Pointer<Void> childLoggers(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("childLoggers"),
    );
  }

  static Pointer<Void> currentSessions(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentSessions"),
    );
  }

  static void dealloc(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void dumpLogs(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dumpLogs"),
    );
  }

  static void dumpLogsForType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("dumpLogsForType:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void endLoggingSessionOfType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("endLoggingSessionOfType:message:"),
      arg,
      message,
    );
  }

  static Pointer<Void> init(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initForObject(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForObject:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void intervalLoggingSessionOfType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("intervalLoggingSessionOfType:message:"),
      arg,
      message,
    );
  }

  static Pointer<Void> logs(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("logs"),
    );
  }

  static Pointer<Void> logsForType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("logsForType:"),
      arg,
    );
  }

  static Pointer<Void> observedObjectClassName(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("observedObjectClassName"),
    );
  }

  static Pointer<Void> observedObjectDescription(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("observedObjectDescription"),
    );
  }

  static Pointer<Void> parentLogger(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentLogger"),
    );
  }

  static Pointer<Void> parentLoggerDescription(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parentLoggerDescription"),
    );
  }

  static void relateAsChildToParent(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("relateAsChildToParent:message:"),
      arg,
      message,
    );
  }

  static Pointer<Void> relationMessage(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relationMessage"),
    );
  }

  static double relationTime(
    Pointer<CKTimeLogger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("relationTime"),
    );
  }

  static void removeChildLogger(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeChildLogger:"),
      arg,
    );
  }

  static void setCurrentSessions(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentSessions:"),
      arg,
    );
  }

  static void setObservedObject(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservedObject:"),
      arg,
    );
  }

  static void setObservedObjectClassName(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservedObjectClassName:"),
      arg,
    );
  }

  static void setObservedObjectDescription(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservedObjectDescription:"),
      arg,
    );
  }

  static void setParentLogger(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentLogger:"),
      arg,
    );
  }

  static void setParentLoggerDescription(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParentLoggerDescription:"),
      arg,
    );
  }

  static void setRelationMessage(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelationMessage:"),
      arg,
    );
  }

  static void setRelationTime(
    Pointer<CKTimeLogger> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRelationTime:"),
      arg,
    );
  }

  static void togglePauseLoggingSessionOfType(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("togglePauseLoggingSessionOfType:message:"),
      arg,
      message,
    );
  }

  static void treeTraversalWithBlock(
    Pointer<CKTimeLogger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("treeTraversalWithBlock:"),
      arg,
    );
  }
}

/// Objective-C class _CKTimeLoggerLog_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKTimeLoggerLog extends Struct<CKTimeLoggerLog> {
  factory CKTimeLoggerLog._() {
    throw UnimplementedError();
  }
  static Pointer<CKTimeLoggerLog> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKTimeLoggerLog").cast<CKTimeLoggerLog>();
  }

  static void appendStatusReportToString(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg, {
    @required int withIndent,
    @required int showingPointers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector(
          "appendStatusReportToString:withIndent:showingPointers:"),
      arg,
      withIndent,
      showingPointers,
    );
  }

  static double beginTime(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("beginTime"),
    );
  }

  static Pointer<Void> beginningMessage(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("beginningMessage"),
    );
  }

  static void dealloc(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double elapsedTime(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("elapsedTime"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static double endTime(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("endTime"),
    );
  }

  static Pointer<Void> endingMessage(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endingMessage"),
    );
  }

  static Pointer<Void> init(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> pauseRecords(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pauseRecords"),
    );
  }

  static void setBeginTime(
    Pointer<CKTimeLoggerLog> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setBeginTime:"),
      arg,
    );
  }

  static void setBeginningMessage(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBeginningMessage:"),
      arg,
    );
  }

  static void setEndTime(
    Pointer<CKTimeLoggerLog> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setEndTime:"),
      arg,
    );
  }

  static void setEndingMessage(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndingMessage:"),
      arg,
    );
  }

  static void setPauseRecords(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPauseRecords:"),
      arg,
    );
  }

  static void setType(
    Pointer<CKTimeLoggerLog> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setType:"),
      arg,
    );
  }

  static void togglePauseWithTime(
    Pointer<CKTimeLoggerLog> _self,
    double arg, {
    @required Pointer<Void> message,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("togglePauseWithTime:message:"),
      arg,
      message,
    );
  }

  static Pointer<Void> type(
    Pointer<CKTimeLoggerLog> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("type"),
    );
  }
}

/// Objective-C class _CKTimeLoggerLogPauseRecord_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKTimeLoggerLogPauseRecord extends Struct<CKTimeLoggerLogPauseRecord> {
  factory CKTimeLoggerLogPauseRecord._() {
    throw UnimplementedError();
  }
  static Pointer<CKTimeLoggerLogPauseRecord> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKTimeLoggerLogPauseRecord")
        .cast<CKTimeLoggerLogPauseRecord>();
  }

  static Pointer<Void> message(
    Pointer<CKTimeLoggerLogPauseRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("message"),
    );
  }

  static void setMessage(
    Pointer<CKTimeLoggerLogPauseRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMessage:"),
      arg,
    );
  }

  static void setTime(
    Pointer<CKTimeLoggerLogPauseRecord> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTime:"),
      arg,
    );
  }

  static double time(
    Pointer<CKTimeLoggerLogPauseRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("time"),
    );
  }
}

/// Objective-C class _CKTruePredicateValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKTruePredicateValidator extends Struct<CKTruePredicateValidator> {
  factory CKTruePredicateValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKTruePredicateValidator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKTruePredicateValidator")
        .cast<CKTruePredicateValidator>();
  }

  static int validate(
    Pointer<CKTruePredicateValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKTrueValidator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKTrueValidator extends Struct<CKTrueValidator> {
  factory CKTrueValidator._() {
    throw UnimplementedError();
  }
  static Pointer<CKTrueValidator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKTrueValidator").cast<CKTrueValidator>();
  }

  static int validate(
    Pointer<CKTrueValidator> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validate:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _CKUserIdentity_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKUserIdentity extends Struct<CKUserIdentity> {
  factory CKUserIdentity._() {
    throw UnimplementedError();
  }
  static Pointer<CKUserIdentity> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("CKUserIdentity").cast<CKUserIdentity>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKUserIdentity> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static Pointer<Void> contactIdentifiers(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contactIdentifiers"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKUserIdentity> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedPersonalInfo(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedPersonalInfo"),
    );
  }

  static Pointer<Void> firstName(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstName"),
    );
  }

  static int hash(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int hasiCloudAccount(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasiCloudAccount"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithUserRecordID(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUserRecordID:"),
      arg,
    );
  }

  static int isCached(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCached"),
    );
  }

  static int isEqual(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEquivalentToUserIdentity(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEquivalentToUserIdentity:"),
      arg,
    );
  }

  static int isEquivalentToUserIdentityOrPublicKey(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEquivalentToUserIdentityOrPublicKey:"),
      arg,
    );
  }

  static int isOutOfNetwork(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOutOfNetwork"),
    );
  }

  static Pointer<Void> lastName(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastName"),
    );
  }

  static Pointer<Void> lookupInfo(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lookupInfo"),
    );
  }

  static Pointer<Void> nameComponents(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameComponents"),
    );
  }

  static Pointer<Void> outOfNetworkPrivateKey(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("outOfNetworkPrivateKey"),
    );
  }

  static int publicKeyVersion(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("publicKeyVersion"),
    );
  }

  static Pointer<Void> publicSharingKey(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicSharingKey"),
    );
  }

  static void setContactIdentifiers(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContactIdentifiers:"),
      arg,
    );
  }

  static void setEncryptedPersonalInfo(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedPersonalInfo:"),
      arg,
    );
  }

  static void setHasiCloudAccount(
    Pointer<CKUserIdentity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasiCloudAccount:"),
      arg,
    );
  }

  static void setIsCached(
    Pointer<CKUserIdentity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIsCached:"),
      arg,
    );
  }

  static void setLookupInfo(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLookupInfo:"),
      arg,
    );
  }

  static void setNameComponents(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNameComponents:"),
      arg,
    );
  }

  static void setOutOfNetworkPrivateKey(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOutOfNetworkPrivateKey:"),
      arg,
    );
  }

  static void setPublicKeyVersion(
    Pointer<CKUserIdentity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setPublicKeyVersion:"),
      arg,
    );
  }

  static void setPublicSharingKey(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicSharingKey:"),
      arg,
    );
  }

  static void setUserRecordID(
    Pointer<CKUserIdentity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserRecordID:"),
      arg,
    );
  }

  static Pointer<Void> userRecordID(
    Pointer<CKUserIdentity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userRecordID"),
    );
  }
}

/// Objective-C class _CKUserIdentityLookupInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKUserIdentityLookupInfo extends Struct<CKUserIdentityLookupInfo> {
  factory CKUserIdentityLookupInfo._() {
    throw UnimplementedError();
  }
  static Pointer<CKUserIdentityLookupInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKUserIdentityLookupInfo")
        .cast<CKUserIdentityLookupInfo>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<CKUserIdentityLookupInfo> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> CKPropertiesDescription(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKPropertiesDescription"),
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> emailAddress(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("emailAddress"),
    );
  }

  static void encodeWithCoder(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> encryptedPersonalInfo(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encryptedPersonalInfo"),
    );
  }

  static int hash(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithEmailAddress(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEmailAddress:"),
      arg,
    );
  }

  static Pointer<Void> initWithPhoneNumber(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPhoneNumber:"),
      arg,
    );
  }

  static Pointer<Void> initWithUserRecordID(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUserRecordID:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int lookupField(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("lookupField"),
    );
  }

  static Pointer<Void> lookupValue(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lookupValue"),
    );
  }

  static Pointer<Void> phoneNumber(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static void setEmailAddress(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEmailAddress:"),
      arg,
    );
  }

  static void setEncryptedPersonalInfo(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEncryptedPersonalInfo:"),
      arg,
    );
  }

  static void setPhoneNumber(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPhoneNumber:"),
      arg,
    );
  }

  static void setShouldReportMissingIdentity(
    Pointer<CKUserIdentityLookupInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportMissingIdentity:"),
      arg,
    );
  }

  static void setUserRecordID(
    Pointer<CKUserIdentityLookupInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserRecordID:"),
      arg,
    );
  }

  static int shouldReportMissingIdentity(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportMissingIdentity"),
    );
  }

  static Pointer<Void> userRecordID(
    Pointer<CKUserIdentityLookupInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userRecordID"),
    );
  }
}

/// Objective-C class _CKUserNotificationUtilities_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKUserNotificationUtilities extends Struct<CKUserNotificationUtilities> {
  factory CKUserNotificationUtilities._() {
    throw UnimplementedError();
  }
  static Pointer<CKUserNotificationUtilities> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKUserNotificationUtilities")
        .cast<CKUserNotificationUtilities>();
  }
}

/// Objective-C class _CKZonePCSDiagnosticInformation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/cloudkit?language=objc).
@unsized
class CKZonePCSDiagnosticInformation
    extends Struct<CKZonePCSDiagnosticInformation> {
  factory CKZonePCSDiagnosticInformation._() {
    throw UnimplementedError();
  }
  static Pointer<CKZonePCSDiagnosticInformation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("CKZonePCSDiagnosticInformation")
        .cast<CKZonePCSDiagnosticInformation>();
  }

  static void encodeWithCoder(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> pcsDiagnosticString(
    Pointer<CKZonePCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pcsDiagnosticString"),
    );
  }

  static Pointer<Void> pcsError(
    Pointer<CKZonePCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pcsError"),
    );
  }

  static int pcsStatus(
    Pointer<CKZonePCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("pcsStatus"),
    );
  }

  static void setPcsDiagnosticString(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPcsDiagnosticString:"),
      arg,
    );
  }

  static void setPcsError(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPcsError:"),
      arg,
    );
  }

  static void setPcsStatus(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setPcsStatus:"),
      arg,
    );
  }

  static void setWasRepaired(
    Pointer<CKZonePCSDiagnosticInformation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWasRepaired:"),
      arg,
    );
  }

  static int wasRepaired(
    Pointer<CKZonePCSDiagnosticInformation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wasRepaired"),
    );
  }
}

final _call_objc_p_p_Int32_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Uint64_returns_void_C,
        _call_objc_p_p_Int32_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Uint64 atIndex);
typedef _call_objc_p_p_Int32_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int atIndex);

final _call_objc_p_p_Int32_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_p_p_returns_p_C,
    _call_objc_p_p_Int32_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Pointer format, Pointer args);
typedef _call_objc_p_p_Int32_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer format, Pointer args);

final _call_objc_p_p_Int32_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_p_returns_p_C,
    _call_objc_p_p_Int32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Pointer format);
typedef _call_objc_p_p_Int32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer format);

final _call_objc_p_p_Int32_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_Int32_C,
    _call_objc_p_p_Int32_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_p_C,
    _call_objc_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_void_C,
    _call_objc_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_Uint64_returns_void_C,
        _call_objc_p_p_Int64_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Uint64 atIndex);
typedef _call_objc_p_p_Int64_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int atIndex);

final _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void_C,
            _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void_C
    = Void Function(Pointer _arg0, Pointer _arg1, Int64 arg,
        Pointer withSignature, Uint64 size, Uint64 itemID, Uint64 sectionIndex);
typedef _call_objc_p_p_Int64_p_Uint64_Uint64_Uint64_returns_void_Dart
    = void Function(Pointer _arg0, Pointer _arg1, int arg,
        Pointer withSignature, int size, int itemID, int sectionIndex);

final _call_objc_p_p_Int64_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_Uint64_returns_p_C,
        _call_objc_p_p_Int64_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer signature, Uint64 size);
typedef _call_objc_p_p_Int64_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer signature, int size);

final _call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p_C,
            _call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int64 arg,
    Pointer encoding,
    Pointer name,
    Pointer className,
    Uint64 size,
    Uint64 flags);
typedef _call_objc_p_p_Int64_p_p_p_Uint64_Uint64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, Pointer encoding,
        Pointer name, Pointer className, int size, int flags);

final _call_objc_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer error);
typedef _call_objc_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer error);

final _call_objc_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer withFileURL);
typedef _call_objc_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer withFileURL);

final _call_objc_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_p_C,
    _call_objc_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_void_C,
    _call_objc_p_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Int8_Int8_returns_p_C,
        _call_objc_p_p_Int8_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Int8 private, Int8 shouldExpand);
typedef _call_objc_p_p_Int8_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int private, int shouldExpand);

final _call_objc_p_p_Int8_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Int8_p_returns_Int8_C,
        _call_objc_p_p_Int8_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Int8 includingAllArrayItems,
    Pointer withValueCheckBlock);
typedef _call_objc_p_p_Int8_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int includingAllArrayItems,
    Pointer withValueCheckBlock);

final _call_objc_p_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_p_returns_Int8_C,
    _call_objc_p_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Pointer withValueCheckBlock);
typedef _call_objc_p_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer withValueCheckBlock);

final _call_objc_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_Int8_C,
    _call_objc_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_p_C,
    _call_objc_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_void_C,
    _call_objc_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint32_returns_void_C,
    _call_objc_p_p_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_objc_p_p_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_Int8_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int8_p_returns_void_C,
        _call_objc_p_p_Uint64_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int8_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Int8 enabled,
    Pointer completionHandler);
typedef _call_objc_p_p_Uint64_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int enabled,
    Pointer completionHandler);

final _call_objc_p_p_Uint64_Uint32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint32_returns_p_C,
        _call_objc_p_p_Uint64_Uint32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint32 qosClass);
typedef _call_objc_p_p_Uint64_Uint32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int qosClass);

final _call_objc_p_p_Uint64_float64_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_float64_float64_returns_p_C,
        _call_objc_p_p_Uint64_float64_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_float64_float64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Float withMaximumThrottleTime,
    Float andRegenerationPerSecond);
typedef _call_objc_p_p_Uint64_float64_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    double withMaximumThrottleTime,
    double andRegenerationPerSecond);

final _call_objc_p_p_Uint64_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_p_returns_void_C,
        _call_objc_p_p_Uint64_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer container,
    Pointer participantVettingInitiatedBlock,
    Pointer participantVettingInitiationCompletionBlock);
typedef _call_objc_p_p_Uint64_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer container,
    Pointer participantVettingInitiatedBlock,
    Pointer participantVettingInitiationCompletionBlock);

final _call_objc_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer completionHandler);
typedef _call_objc_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer completionHandler);

final _call_objc_p_p_Uint64_returns_Int32 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_Int32_C,
        _call_objc_p_p_Uint64_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_Int64_C,
        _call_objc_p_p_Uint64_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_Uint64_C,
        _call_objc_p_p_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_float64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_float64_C,
        _call_objc_p_p_Uint64_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_p_C,
    _call_objc_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_void_C,
    _call_objc_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_float64_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_Uint64_returns_void_C,
        _call_objc_p_p_float64_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg, Uint64 atIndex);
typedef _call_objc_p_p_float64_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg, int atIndex);

final _call_objc_p_p_float64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_p_returns_void_C,
        _call_objc_p_p_float64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg, Pointer message);
typedef _call_objc_p_p_float64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg, Pointer message);

final _call_objc_p_p_float64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_Int8_C,
        _call_objc_p_p_float64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_float64_returns_p_C,
    _call_objc_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_void_C,
        _call_objc_p_p_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_p_Int32_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int32_returns_Int8_C,
        _call_objc_p_p_p_Int32_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int32_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int32 fromVersion);
typedef _call_objc_p_p_p_Int32_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int fromVersion);

final _call_objc_p_p_p_Int64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_p_returns_p_C,
        _call_objc_p_p_p_Int64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 version,
    Pointer expiration,
    Pointer certificateData);
typedef _call_objc_p_p_p_Int64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int version,
    Pointer expiration,
    Pointer certificateData);

final _call_objc_p_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int64_returns_p_C,
    _call_objc_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 environment);
typedef _call_objc_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int environment);

final _call_objc_p_p_p_Uint64_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_returns_void_C,
        _call_objc_p_p_p_Uint64_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 withIndent,
    Int8 showingPointers);
typedef _call_objc_p_p_p_Uint64_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withIndent,
    int showingPointers);

final _call_objc_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Uint64_returns_p_C,
    _call_objc_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 options);
typedef _call_objc_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int options);

final _call_objc_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 length);
typedef _call_objc_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int length);

final _call_objc_p_p_p_p_Uint64_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_Int8_returns_void_C,
        _call_objc_p_p_p_p_Uint64_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toString,
    Uint64 withIndent,
    Int8 showingPointers);
typedef _call_objc_p_p_p_p_Uint64_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toString,
    int withIndent,
    int showingPointers);

final _call_objc_p_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_returns_p_C,
        _call_objc_p_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer subscriptionID, Uint64 options);
typedef _call_objc_p_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer subscriptionID,
    int options);

final _call_objc_p_p_p_p_float64_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_float64_float64_returns_void_C,
        _call_objc_p_p_p_p_float64_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_float64_float64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer message,
    Float from,
    Float to);
typedef _call_objc_p_p_p_p_float64_float64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer message,
    double from,
    double to);

final _call_objc_p_p_p_p_p_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int32_returns_void_C,
        _call_objc_p_p_p_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forNextRequestOfClassName,
    Pointer forItemID,
    Int32 withLifetime);
typedef _call_objc_p_p_p_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forNextRequestOfClassName,
    Pointer forItemID,
    int withLifetime);

final _call_objc_p_p_p_p_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_returns_p_C,
        _call_objc_p_p_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer functionName,
    Pointer serializedParameters,
    Int8 local);
typedef _call_objc_p_p_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer functionName,
    Pointer serializedParameters,
    int local);

final _call_objc_p_p_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_returns_p_C,
        _call_objc_p_p_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer predicate,
    Pointer subscriptionID,
    Uint64 options);
typedef _call_objc_p_p_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer predicate,
    Pointer subscriptionID,
    int options);

final _call_objc_p_p_p_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer from,
    Pointer where,
    Pointer bindings,
    Pointer orderBy,
    Pointer limit,
    Pointer block);
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer from,
    Pointer where,
    Pointer bindings,
    Pointer orderBy,
    Pointer limit,
    Pointer block);

final _call_objc_p_p_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer where,
    Pointer bindings,
    Pointer orderBy,
    Pointer limit,
    Pointer block);
typedef _call_objc_p_p_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer where,
    Pointer bindings,
    Pointer orderBy,
    Pointer limit,
    Pointer block);

final _call_objc_p_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer set,
    Pointer where,
    Pointer bindings,
    Pointer limit);
typedef _call_objc_p_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer set,
    Pointer where,
    Pointer bindings,
    Pointer limit);

final _call_objc_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer where, Pointer bindings, Pointer limit);
typedef _call_objc_p_p_p_p_p_p_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer where, Pointer bindings, Pointer limit);

final _call_objc_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer set, Pointer where, Pointer bindings);
typedef _call_objc_p_p_p_p_p_p_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer set, Pointer where, Pointer bindings);

final _call_objc_p_p_p_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_Int32_C,
    _call_objc_p_p_p_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);
typedef _call_objc_p_p_p_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);

final _call_objc_p_p_p_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_returns_Uint64_C,
        _call_objc_p_p_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);
typedef _call_objc_p_p_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);

final _call_objc_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer keysToFetch, Pointer error);
typedef _call_objc_p_p_p_p_p_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer keysToFetch, Pointer error);

final _call_objc_p_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);
typedef _call_objc_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer where, Pointer bindings);

final _call_objc_p_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer values);
typedef _call_objc_p_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer values);

final _call_objc_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);
typedef _call_objc_p_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);

final _call_objc_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer shareID);
typedef _call_objc_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer shareID);

final _call_objc_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer message);
typedef _call_objc_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer message);

final _call_objc_p_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int32_C,
    _call_objc_p_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Uint64_C,
    _call_objc_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_float64_C,
    _call_objc_p_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_p_C,
    _call_objc_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_void_C,
    _call_objc_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int32_C,
    _call_objc_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int64_C,
    _call_objc_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int8_C,
    _call_objc_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint32_C,
    _call_objc_p_p_returns_Uint32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint64_C,
    _call_objc_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_float64_C,
    _call_objc_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_returns_p_C, _call_objc_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_void_C,
    _call_objc_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1);
