/// [Foundation](https://developer.apple.com/documentation/foundation?language=objc) (Objective-C library).
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
library cupertino_ffi.foundation;

import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:meta/meta.dart';
import 'package:cupertino_ffi/objective_c.dart' as _objc;

bool _isDynamicLibraryOpened = false;

/// Ensures that the Objective-C library has been loaded.
void _openDynamicLibrary() {
  if (!_isDynamicLibraryOpened) {
    _isDynamicLibraryOpened = true;
    DynamicLibrary.open(
        "/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation");
  }
}

/// Objective-C class _NSAEDescriptorTranslator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAEDescriptorTranslator extends Struct<NSAEDescriptorTranslator> {
  factory NSAEDescriptorTranslator._() {
    throw UnimplementedError();
  }
  static Pointer<NSAEDescriptorTranslator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAEDescriptorTranslator")
        .cast<NSAEDescriptorTranslator>();
  }

  static void dealloc(
    Pointer<NSAEDescriptorTranslator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> descriptorByTranslatingObject(
    Pointer<NSAEDescriptorTranslator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofType,
    @required Pointer<Void> inSuite,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptorByTranslatingObject:ofType:inSuite:"),
      arg,
      ofType,
      inSuite,
    );
  }

  static Pointer<Void> init(
    Pointer<NSAEDescriptorTranslator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> objectByTranslatingDescriptor(
    Pointer<NSAEDescriptorTranslator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toType,
    @required Pointer<Void> inSuite,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByTranslatingDescriptor:toType:inSuite:"),
      arg,
      toType,
      inSuite,
    );
  }

  static void registerTranslator$selector$toTranslateFromDescriptorType$(
    Pointer<NSAEDescriptorTranslator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required int toTranslateFromDescriptorType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector(
          "registerTranslator:selector:toTranslateFromDescriptorType:"),
      arg,
      selector,
      toTranslateFromDescriptorType,
    );
  }

  static void registerTranslator$selector$toTranslateFromClass$(
    Pointer<NSAEDescriptorTranslator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> toTranslateFromClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerTranslator:selector:toTranslateFromClass:"),
      arg,
      selector,
      toTranslateFromClass,
    );
  }
}

/// Objective-C class _NSAKDeserializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAKDeserializer extends Struct<NSAKDeserializer> {
  factory NSAKDeserializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSAKDeserializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAKDeserializer").cast<NSAKDeserializer>();
  }

  static void dealloc(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> deserializeData(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeData:"),
      arg,
    );
  }

  static Pointer<Void> deserializeList(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeList:"),
      arg,
    );
  }

  static Pointer<Void> deserializeListItemIn(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg, {
    @required int at,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("deserializeListItemIn:at:length:"),
      arg,
      at,
      length,
    );
  }

  static Pointer<Void> deserializeNewData(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewData"),
    );
  }

  static Pointer<Void> deserializeNewKeyString(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewKeyString"),
    );
  }

  static Pointer<Void> deserializeNewList(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewList"),
    );
  }

  static Pointer<Void> deserializeNewObject(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewObject"),
    );
  }

  static Pointer<Void> deserializeNewPList(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewPList"),
    );
  }

  static Pointer<Void> deserializeNewString(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewString"),
    );
  }

  static Pointer<Void> deserializePList(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializePList:"),
      arg,
    );
  }

  static Pointer<Void> deserializePListKeyIn(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializePListKeyIn:"),
      arg,
    );
  }

  static Pointer<Void> deserializePListValueIn(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("deserializePListValueIn:key:length:"),
      arg,
      key,
      length,
    );
  }

  static Pointer<Void> deserializeString(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeString:"),
      arg,
    );
  }

  static Pointer<Void> deserializerStream(
    Pointer<NSAKDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializerStream"),
    );
  }

  static Pointer<Void> initForDeserializerStream(
    Pointer<NSAKDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForDeserializerStream:"),
      arg,
    );
  }
}

/// Objective-C class _NSAKDeserializerStream_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAKDeserializerStream extends Struct<NSAKDeserializerStream> {
  factory NSAKDeserializerStream._() {
    throw UnimplementedError();
  }
  static Pointer<NSAKDeserializerStream> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAKDeserializerStream")
        .cast<NSAKDeserializerStream>();
  }

  static void dealloc(
    Pointer<NSAKDeserializerStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initFromMemoryNoCopy(
    Pointer<NSAKDeserializerStream> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initFromMemoryNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initFromPath(
    Pointer<NSAKDeserializerStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initFromPath:"),
      arg,
    );
  }

  static int readAlignedDataSize(
    Pointer<NSAKDeserializerStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("readAlignedDataSize"),
    );
  }

  static void readData(
    Pointer<NSAKDeserializerStream> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("readData:length:"),
      arg,
      length,
    );
  }

  static int readInt(
    Pointer<NSAKDeserializerStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("readInt"),
    );
  }
}

/// Objective-C class _NSAKSerializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAKSerializer extends Struct<NSAKSerializer> {
  factory NSAKSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSAKSerializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAKSerializer").cast<NSAKSerializer>();
  }

  static void dealloc(
    Pointer<NSAKSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initForSerializerStream(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForSerializerStream:"),
      arg,
    );
  }

  static int serializeData(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializeData:"),
      arg,
    );
  }

  static int serializeList(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializeList:"),
      arg,
    );
  }

  static int serializeListItemIn(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg, {
    @required int at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("serializeListItemIn:at:"),
      arg,
      at,
    );
  }

  static int serializeObject(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializeObject:"),
      arg,
    );
  }

  static int serializePListKeyIn(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializePListKeyIn:key:value:"),
      arg,
      key,
      value,
    );
  }

  static int serializePListValueIn(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializePListValueIn:key:value:"),
      arg,
      key,
      value,
    );
  }

  static int serializePropertyList(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializePropertyList:"),
      arg,
    );
  }

  static int serializeString(
    Pointer<NSAKSerializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializeString:"),
      arg,
    );
  }

  static Pointer<Void> serializerStream(
    Pointer<NSAKSerializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serializerStream"),
    );
  }
}

/// Objective-C class _NSAKSerializerStream_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAKSerializerStream extends Struct<NSAKSerializerStream> {
  factory NSAKSerializerStream._() {
    throw UnimplementedError();
  }
  static Pointer<NSAKSerializerStream> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAKSerializerStream").cast<NSAKSerializerStream>();
  }

  static void copySerializationInto(
    Pointer<NSAKSerializerStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("copySerializationInto:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSAKSerializerStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int writeAlignedDataSize(
    Pointer<NSAKSerializerStream> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("writeAlignedDataSize:"),
      arg,
    );
  }

  static int writeData(
    Pointer<NSAKSerializerStream> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("writeData:length:"),
      arg,
      length,
    );
  }

  static void writeDelayedInt(
    Pointer<NSAKSerializerStream> _self,
    int arg, {
    @required int $$$for,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int32_returns_void(
      _self,
      _objc.getSelector("writeDelayedInt:for:"),
      arg,
      $$$for,
    );
  }

  static int writeInt(
    Pointer<NSAKSerializerStream> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("writeInt:"),
      arg,
    );
  }

  static int writeRoomForInt(
    Pointer<NSAKSerializerStream> _self,
    Pointer<Int32> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("writeRoomForInt:"),
      arg,
    );
  }

  static int writeToPath(
    Pointer<NSAKSerializerStream> _self,
    Pointer<Void> arg, {
    @required int safely,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("writeToPath:safely:"),
      arg,
      safely,
    );
  }
}

/// Objective-C class _NSASCIIEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSASCIIEncodingDetector extends Struct<NSASCIIEncodingDetector> {
  factory NSASCIIEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSASCIIEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSASCIIEncodingDetector")
        .cast<NSASCIIEncodingDetector>();
  }

  static double confidence(
    Pointer<NSASCIIEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("confidence"),
    );
  }

  static int recognizeString(
    Pointer<NSASCIIEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSAbstractLayoutGuide_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAbstractLayoutGuide extends Struct<NSAbstractLayoutGuide> {
  factory NSAbstractLayoutGuide._() {
    throw UnimplementedError();
  }
  static Pointer<NSAbstractLayoutGuide> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAbstractLayoutGuide")
        .cast<NSAbstractLayoutGuide>();
  }

  static void dealloc(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> frame(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("frame"),
    );
  }

  static Pointer<Void> heightVariable(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("heightVariable"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithConcreteLayoutGuide(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithConcreteLayoutGuide:"),
      arg,
    );
  }

  static Pointer<Void> layoutFrame(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("layoutFrame"),
    );
  }

  static Pointer<Void> minXVariable(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minXVariable"),
    );
  }

  static Pointer<Void> minYVariable(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minYVariable"),
    );
  }

  static Pointer<Void> nsis_descriptionOfVariable(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsis_descriptionOfVariable:"),
      arg,
    );
  }

  static int nsis_orientationHintForVariable(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("nsis_orientationHintForVariable:"),
      arg,
    );
  }

  static int nsis_shouldIntegralizeVariable(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_shouldIntegralizeVariable:"),
      arg,
    );
  }

  static void nsis_valueOfVariable(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeInEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsis_valueOfVariable:didChangeInEngine:"),
      arg,
      didChangeInEngine,
    );
  }

  static int nsis_valueOfVariableIsUserObservable(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_valueOfVariableIsUserObservable:"),
      arg,
    );
  }

  static void nsli_addConstraint(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsli_addConstraint:"),
      arg,
    );
  }

  static int nsli_autoresizingMask(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("nsli_autoresizingMask"),
    );
  }

  static Pointer<Void> nsli_convertSizeFromEngineSpace(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_convertSizeFromEngineSpace:"),
      arg,
    );
  }

  static Pointer<Void> nsli_convertSizeToEngineSpace(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_convertSizeToEngineSpace:"),
      arg,
    );
  }

  static Pointer<Void> nsli_description(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_description"),
    );
  }

  static int nsli_descriptionIncludesPointer(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsli_descriptionIncludesPointer"),
    );
  }

  static Pointer<Void> nsli_installedConstraints(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_installedConstraints"),
    );
  }

  static int nsli_isFlipped(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsli_isFlipped"),
    );
  }

  static Pointer<Void> nsli_layoutEngine(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_layoutEngine"),
    );
  }

  static int nsli_lowerAttribute$intoExpression$withCoefficient$forConstraint$(
    Pointer<NSAbstractLayoutGuide> _self,
    int arg, {
    @required Pointer<Void> intoExpression,
    @required double withCoefficient,
    @required Pointer<Void> forConstraint,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_float64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:"),
      arg,
      intoExpression,
      withCoefficient,
      forConstraint,
    );
  }

  static int nsli_lowerAttribute$intoExpression$withCoefficient$container$(
    Pointer<NSAbstractLayoutGuide> _self,
    int arg, {
    @required Pointer<Void> intoExpression,
    @required double withCoefficient,
    @required Pointer<Void> container,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_float64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "nsli_lowerAttribute:intoExpression:withCoefficient:container:"),
      arg,
      intoExpression,
      withCoefficient,
      container,
    );
  }

  static double nsli_marginOffsetForAttribute(
    Pointer<NSAbstractLayoutGuide> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_float64(
      _self,
      _objc.getSelector("nsli_marginOffsetForAttribute:"),
      arg,
    );
  }

  static int nsli_removeConstraint(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsli_removeConstraint:"),
      arg,
    );
  }

  static int nsli_resolvedValue(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Float> arg, {
    @required Pointer<Void> forSymbolicConstant,
    @required Pointer<Void> inConstraint,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "nsli_resolvedValue:forSymbolicConstant:inConstraint:error:"),
      arg,
      forSymbolicConstant,
      inConstraint,
      error,
    );
  }

  static Pointer<Void> nsli_superitem(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_superitem"),
    );
  }

  static Pointer<Void> owningView(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("owningView"),
    );
  }

  static void setIdentifier(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setOwningView(
    Pointer<NSAbstractLayoutGuide> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOwningView:"),
      arg,
    );
  }

  static Pointer<Void> widthVariable(
    Pointer<NSAbstractLayoutGuide> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("widthVariable"),
    );
  }
}

/// Objective-C class _NSAddressCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAddressCheckingResult extends Struct<NSAddressCheckingResult> {
  factory NSAddressCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSAddressCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAddressCheckingResult")
        .cast<NSAddressCheckingResult>();
  }

  static Pointer<Void> components(
    Pointer<NSAddressCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("components"),
    );
  }

  static void dealloc(
    Pointer<NSAddressCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAddressCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAddressCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange$components$underlyingResult$(
    Pointer<NSAddressCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> underlyingResult,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:components:underlyingResult:"),
      arg,
      components,
      underlyingResult,
    );
  }

  static Pointer<Void> initWithRange$components$(
    Pointer<NSAddressCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:components:"),
      arg,
      components,
    );
  }

  static Pointer<Void> range(
    Pointer<NSAddressCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSAddressCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSAddressCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static Pointer<Void> underlyingResult(
    Pointer<NSAddressCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingResult"),
    );
  }
}

/// Objective-C class _NSAffineTransform_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAffineTransform extends Struct<NSAffineTransform> {
  factory NSAffineTransform._() {
    throw UnimplementedError();
  }
  static Pointer<NSAffineTransform> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAffineTransform").cast<NSAffineTransform>();
  }

  static Pointer<Void> CAMLType(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAMLType"),
    );
  }

  static Pointer<Void> CA_addValue(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg, {
    @required int multipliedBy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("CA_addValue:multipliedBy:"),
      arg,
      multipliedBy,
    );
  }

  static int CA_copyNumericValue(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("CA_copyNumericValue:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> CA_copyRenderValue(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CA_copyRenderValue"),
    );
  }

  static Pointer<Void> CA_interpolateValue(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg, {
    @required double byFraction,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float32_returns_p(
      _self,
      _objc.getSelector("CA_interpolateValue:byFraction:"),
      arg,
      byFraction,
    );
  }

  static void appendTransform(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendTransform:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAffineTransform> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static void encodeWithCAMLWriter(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCAMLWriter:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithTransform(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTransform:"),
      arg,
    );
  }

  static void invert(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invert"),
    );
  }

  static int isEqual(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void prependTransform(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("prependTransform:"),
      arg,
    );
  }

  static void rotateByDegrees(
    Pointer<NSAffineTransform> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("rotateByDegrees:"),
      arg,
    );
  }

  static void rotateByRadians(
    Pointer<NSAffineTransform> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("rotateByRadians:"),
      arg,
    );
  }

  static void scaleBy(
    Pointer<NSAffineTransform> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("scaleBy:"),
      arg,
    );
  }

  static void scaleXBy(
    Pointer<NSAffineTransform> _self,
    double arg, {
    @required double yBy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("scaleXBy:yBy:"),
      arg,
      yBy,
    );
  }

  static void setTransformStruct(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTransformStruct:"),
      arg,
    );
  }

  static Pointer<Void> transformPoint(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformPoint:"),
      arg,
    );
  }

  static Pointer<Void> transformSize(
    Pointer<NSAffineTransform> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformSize:"),
      arg,
    );
  }

  static Pointer<Void> transformStruct(
    Pointer<NSAffineTransform> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("transformStruct"),
    );
  }

  static void translateXBy(
    Pointer<NSAffineTransform> _self,
    double arg, {
    @required double yBy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("translateXBy:yBy:"),
      arg,
      yBy,
    );
  }
}

/// Objective-C class _NSAggregateExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAggregateExpression extends Struct<NSAggregateExpression> {
  factory NSAggregateExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSAggregateExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAggregateExpression")
        .cast<NSAggregateExpression>();
  }

  static void acceptVisitor(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> collection(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("collection"),
    );
  }

  static Pointer<Void> constantValue(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constantValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAggregateExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCollection(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCollection:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAggregateExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSAggregateExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSAlignmentLayoutRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAlignmentLayoutRule extends Struct<NSAlignmentLayoutRule> {
  factory NSAlignmentLayoutRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSAlignmentLayoutRule> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAlignmentLayoutRule")
        .cast<NSAlignmentLayoutRule>();
  }

  static Pointer<Void> alignedAnchors(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alignedAnchors"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAlignmentLayoutRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithAlignedAnchors(
    Pointer<NSAlignmentLayoutRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAlignedAnchors:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAlignmentLayoutRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSAlignmentLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }
}

/// Objective-C class _NSAllDescendantPathsEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAllDescendantPathsEnumerator
    extends Struct<NSAllDescendantPathsEnumerator> {
  factory NSAllDescendantPathsEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSAllDescendantPathsEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAllDescendantPathsEnumerator")
        .cast<NSAllDescendantPathsEnumerator>();
  }

  static Pointer<Void> currentSubdirectoryAttributes(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentSubdirectoryAttributes"),
    );
  }

  static void dealloc(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> directoryAttributes(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("directoryAttributes"),
    );
  }

  static Pointer<Void> fileAttributes(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileAttributes"),
    );
  }

  static int level(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("level"),
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }

  static void skipDescendants(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendants"),
    );
  }

  static void skipDescendents(
    Pointer<NSAllDescendantPathsEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendents"),
    );
  }
}

/// Objective-C class _NSAnyKeyExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAnyKeyExpression extends Struct<NSAnyKeyExpression> {
  factory NSAnyKeyExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSAnyKeyExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAnyKeyExpression").cast<NSAnyKeyExpression>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAnyKeyExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSAnyKeyExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSAnyKeyExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAnyKeyExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAnyKeyExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void release(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSAnyKeyExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSAppleEventDescriptor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAppleEventDescriptor extends Struct<NSAppleEventDescriptor> {
  factory NSAppleEventDescriptor._() {
    throw UnimplementedError();
  }
  static Pointer<NSAppleEventDescriptor> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAppleEventDescriptor")
        .cast<NSAppleEventDescriptor>();
  }

  static Pointer<Pointer<Void>> aeDesc(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("aeDesc"),
    );
  }

  static Pointer<Void> attributeDescriptorForKeyword(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("attributeDescriptorForKeyword:"),
      arg,
    );
  }

  static int booleanValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint8(
      _self,
      _objc.getSelector("booleanValue"),
    );
  }

  static Pointer<Void> coerceToDescriptorType(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("coerceToDescriptorType:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static Pointer<Void> dateValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateValue"),
    );
  }

  static void dealloc(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptorAtIndex(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("descriptorAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> descriptorForKeyword(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("descriptorForKeyword:"),
      arg,
    );
  }

  static int descriptorType(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("descriptorType"),
    );
  }

  static double doubleValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int enumCodeValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("enumCodeValue"),
    );
  }

  static int eventClass(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("eventClass"),
    );
  }

  static int eventID(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("eventID"),
    );
  }

  static Pointer<Void> fileURLValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileURLValue"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initListDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("initListDescriptor"),
    );
  }

  static Pointer<Void> initRecordDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("initRecordDescriptor"),
    );
  }

  static Pointer<Void> initWithAEDescNoCopy(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAEDescNoCopy:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDescriptorType$data$(
    Pointer<NSAppleEventDescriptor> _self,
    int arg, {
    @required Pointer<Void> data,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_returns_p(
      _self,
      _objc.getSelector("initWithDescriptorType:data:"),
      arg,
      data,
    );
  }

  static Pointer<Void> initWithDescriptorType$bytes$length$(
    Pointer<NSAppleEventDescriptor> _self,
    int arg, {
    @required Pointer<Void> bytes,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithDescriptorType:bytes:length:"),
      arg,
      bytes,
      length,
    );
  }

  static Pointer<Void> initWithEventClass(
    Pointer<NSAppleEventDescriptor> _self,
    int arg, {
    @required int eventID,
    @required Pointer<Void> targetDescriptor,
    @required int returnID,
    @required int transactionID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p(
      _self,
      _objc.getSelector(
          "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:"),
      arg,
      eventID,
      targetDescriptor,
      returnID,
      transactionID,
    );
  }

  static void insertDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("insertDescriptor:atIndex:"),
      arg,
      atIndex,
    );
  }

  static int int32Value(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("int32Value"),
    );
  }

  static int isEqual(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isRecordDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRecordDescriptor"),
    );
  }

  static int keywordForDescriptorAtIndex(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Uint32(
      _self,
      _objc.getSelector("keywordForDescriptorAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> ls_initWithAEDesc(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ls_initWithAEDesc:"),
      arg,
    );
  }

  static int numberOfItems(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("numberOfItems"),
    );
  }

  static Pointer<Void> paramDescriptorForKeyword(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("paramDescriptorForKeyword:"),
      arg,
    );
  }

  static void removeDecriptorAtIndex(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("removeDecriptorAtIndex:"),
      arg,
    );
  }

  static void removeDescriptorAtIndex(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("removeDescriptorAtIndex:"),
      arg,
    );
  }

  static void removeDescriptorWithKeyword(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("removeDescriptorWithKeyword:"),
      arg,
    );
  }

  static void removeParamDescriptorWithKeyword(
    Pointer<NSAppleEventDescriptor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("removeParamDescriptorWithKeyword:"),
      arg,
    );
  }

  static int returnID(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int16(
      _self,
      _objc.getSelector("returnID"),
    );
  }

  static Pointer<Void> sendEventWithOptions(
    Pointer<NSAppleEventDescriptor> _self,
    int arg, {
    @required double timeout,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_float64_p_returns_p(
      _self,
      _objc.getSelector("sendEventWithOptions:timeout:error:"),
      arg,
      timeout,
      error,
    );
  }

  static void setAttributeDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg, {
    @required int forKeyword,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setAttributeDescriptor:forKeyword:"),
      arg,
      forKeyword,
    );
  }

  static void setDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg, {
    @required int forKeyword,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setDescriptor:forKeyword:"),
      arg,
      forKeyword,
    );
  }

  static void setParamDescriptor(
    Pointer<NSAppleEventDescriptor> _self,
    Pointer<Void> arg, {
    @required int forKeyword,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setParamDescriptor:forKeyword:"),
      arg,
      forKeyword,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static int transactionID(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("transactionID"),
    );
  }

  static int typeCodeValue(
    Pointer<NSAppleEventDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("typeCodeValue"),
    );
  }
}

/// Objective-C class _NSAppleEventHandling_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAppleEventHandling extends Struct<NSAppleEventHandling> {
  factory NSAppleEventHandling._() {
    throw UnimplementedError();
  }
  static Pointer<NSAppleEventHandling> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAppleEventHandling").cast<NSAppleEventHandling>();
  }

  static void dealloc(
    Pointer<NSAppleEventHandling> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> event(
    Pointer<NSAppleEventHandling> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("event"),
    );
  }

  static Pointer<Void> initWithEvent(
    Pointer<NSAppleEventHandling> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> replyEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEvent:replyEvent:"),
      arg,
      replyEvent,
    );
  }

  static Pointer<Void> replyEvent(
    Pointer<NSAppleEventHandling> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("replyEvent"),
    );
  }

  static void resumeWithScriptCommandResult(
    Pointer<NSAppleEventHandling> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resumeWithScriptCommandResult:"),
      arg,
    );
  }

  static Pointer<Void> scriptCommand(
    Pointer<NSAppleEventHandling> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scriptCommand"),
    );
  }

  static void setScriptCommand(
    Pointer<NSAppleEventHandling> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScriptCommand:"),
      arg,
    );
  }

  static void suspend(
    Pointer<NSAppleEventHandling> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("suspend"),
    );
  }
}

/// Objective-C class _NSAppleEventManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAppleEventManager extends Struct<NSAppleEventManager> {
  factory NSAppleEventManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSAppleEventManager> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAppleEventManager").cast<NSAppleEventManager>();
  }

  static Pointer<Void> appleEventForSuspensionID(
    Pointer<NSAppleEventManager> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("appleEventForSuspensionID:"),
      arg,
    );
  }

  static Pointer<Void> currentAppleEvent(
    Pointer<NSAppleEventManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentAppleEvent"),
    );
  }

  static Pointer<Void> currentReplyAppleEvent(
    Pointer<NSAppleEventManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentReplyAppleEvent"),
    );
  }

  static int dispatchRawAppleEvent(
    Pointer<NSAppleEventManager> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> withRawReply,
    @required Pointer<Void> handlerRefCon,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int16(
      _self,
      _objc.getSelector("dispatchRawAppleEvent:withRawReply:handlerRefCon:"),
      arg,
      withRawReply,
      handlerRefCon,
    );
  }

  static Pointer<Void> init(
    Pointer<NSAppleEventManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void removeEventHandlerForEventClass(
    Pointer<NSAppleEventManager> _self,
    int arg, {
    @required int andEventID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_Uint32_returns_void(
      _self,
      _objc.getSelector("removeEventHandlerForEventClass:andEventID:"),
      arg,
      andEventID,
    );
  }

  static Pointer<Void> replyAppleEventForSuspensionID(
    Pointer<NSAppleEventManager> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replyAppleEventForSuspensionID:"),
      arg,
    );
  }

  static void resumeWithSuspensionID(
    Pointer<NSAppleEventManager> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resumeWithSuspensionID:"),
      arg,
    );
  }

  static void setCurrentAppleEventAndReplyEventWithSuspensionID(
    Pointer<NSAppleEventManager> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentAppleEventAndReplyEventWithSuspensionID:"),
      arg,
    );
  }

  static void setEventHandler(
    Pointer<NSAppleEventManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andSelector,
    @required int forEventClass,
    @required int andEventID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_Uint32_returns_void(
      _self,
      _objc
          .getSelector("setEventHandler:andSelector:forEventClass:andEventID:"),
      arg,
      andSelector,
      forEventClass,
      andEventID,
    );
  }

  static Pointer<Pointer<Void>> suspendCurrentAppleEvent(
    Pointer<NSAppleEventManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suspendCurrentAppleEvent"),
    );
  }
}

/// Objective-C class _NSAppleScript_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAppleScript extends Struct<NSAppleScript> {
  factory NSAppleScript._() {
    throw UnimplementedError();
  }
  static Pointer<NSAppleScript> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAppleScript").cast<NSAppleScript>();
  }

  static int compileAndReturnError(
    Pointer<NSAppleScript> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("compileAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAppleScript> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSAppleScript> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> executeAndReturnError(
    Pointer<NSAppleScript> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("executeAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> executeAppleEvent(
    Pointer<NSAppleScript> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("executeAppleEvent:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSAppleScript> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> initWithSource(
    Pointer<NSAppleScript> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSource:"),
      arg,
    );
  }

  static int isCompiled(
    Pointer<NSAppleScript> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompiled"),
    );
  }

  static Pointer<Void> source(
    Pointer<NSAppleScript> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("source"),
    );
  }
}

/// Objective-C class _NSArchiver_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSArchiver extends Struct<NSArchiver> {
  factory NSArchiver._() {
    throw UnimplementedError();
  }
  static Pointer<NSArchiver> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSArchiver").cast<NSArchiver>();
  }

  static Pointer<Void> archiverData(
    Pointer<NSArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archiverData"),
    );
  }

  static Pointer<Void> classNameEncodedForTrueClassName(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classNameEncodedForTrueClassName:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<NSArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static void dealloc(
    Pointer<NSArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeArrayOfObjCType(
    Pointer<NSArchiver> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static void encodeBytes(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:"),
      arg,
      length,
    );
  }

  static void encodeClassName(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> intoClassName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeClassName:intoClassName:"),
      arg,
      intoClassName,
    );
  }

  static void encodeConditionalObject(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:"),
      arg,
    );
  }

  static void encodeDataObject(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeObject(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:"),
      arg,
    );
  }

  static void encodePropertyList(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePropertyList:"),
      arg,
    );
  }

  static void encodeRootObject(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRootObject:"),
      arg,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSArchiver> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void encodeValuesOfObjCTypes(
    Pointer<NSArchiver> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static Pointer<Void> initForWritingWithMutableData(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForWritingWithMutableData:"),
      arg,
    );
  }

  static void replaceObject(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObject:withObject:"),
      arg,
      withObject,
    );
  }

  static int versionForClassName(
    Pointer<NSArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSArrayChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSArrayChange extends Struct<NSArrayChange> {
  factory NSArrayChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSArrayChange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSArrayChange").cast<NSArrayChange>();
  }

  static int changeType(
    Pointer<NSArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static int destinationIndex(
    Pointer<NSArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("destinationIndex"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSArrayChange> _self,
    int arg, {
    @required int sourceIndex,
    @required int destinationIndex,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:sourceIndex:destinationIndex:value:"),
      arg,
      sourceIndex,
      destinationIndex,
      value,
    );
  }

  static int sourceIndex(
    Pointer<NSArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sourceIndex"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSArrayChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSArrayChanges extends Struct<NSArrayChanges> {
  factory NSArrayChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSArrayChanges> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSArrayChanges").cast<NSArrayChanges>();
  }

  static void addChange(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static void addChanges(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChanges:"),
      arg,
    );
  }

  static void addObject(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void applyChangesToArray(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChangesToArray:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSArrayChanges> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateChanges(
    Pointer<NSArrayChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void exchangeObjectAtIndex(
    Pointer<NSArrayChanges> _self,
    int arg, {
    @required int withObjectAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector("exchangeObjectAtIndex:withObjectAtIndex:"),
      arg,
      withObjectAtIndex,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void moveObjectAtIndex(
    Pointer<NSArrayChanges> _self,
    int arg, {
    @required int toIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector("moveObjectAtIndex:toIndex:"),
      arg,
      toIndex,
    );
  }

  static void moveObjectsAtIndexes(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg, {
    @required int toIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("moveObjectsAtIndexes:toIndex:"),
      arg,
      toIndex,
    );
  }

  static void removeLastObject(
    Pointer<NSArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSArrayChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSArrayChanges> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void sortUsingFunction(
    Pointer<NSArrayChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("sortUsingFunction:context:"),
      arg,
      context,
    );
  }

  static void sortUsingSelector(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("sortUsingSelector:"),
      arg,
    );
  }

  static void updateObject(
    Pointer<NSArrayChanges> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("updateObject:atIndex:"),
      arg,
      atIndex,
    );
  }
}

/// Objective-C class _NSAssertionHandler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAssertionHandler extends Struct<NSAssertionHandler> {
  factory NSAssertionHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSAssertionHandler> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAssertionHandler").cast<NSAssertionHandler>();
  }

  static void handleFailureInFunction(
    Pointer<NSAssertionHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> file,
    @required int lineNumber,
    @required Pointer<Void> description,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("handleFailureInFunction:file:lineNumber:description:"),
      arg,
      file,
      lineNumber,
      description,
    );
  }

  static void handleFailureInMethod(
    Pointer<NSAssertionHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> file,
    @required int lineNumber,
    @required Pointer<Void> description,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector(
          "handleFailureInMethod:object:file:lineNumber:description:"),
      arg,
      object,
      file,
      lineNumber,
      description,
    );
  }
}

/// Objective-C class _NSAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAttributedString extends Struct<NSAttributedString> {
  factory NSAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAttributedString").cast<NSAttributedString>();
  }

  static Pointer<Void> attribute$atIndex$effectiveRange$(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:effectiveRange:"),
      arg,
      atIndex,
      effectiveRange,
    );
  }

  static Pointer<Void> attribute$atIndex$longestEffectiveRange$inRange$(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> longestEffectiveRange,
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:longestEffectiveRange:inRange:"),
      arg,
      atIndex,
      longestEffectiveRange,
      inRange,
    );
  }

  static Pointer<Void> attributedStringByWeaklyAddingAttributes(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributedStringByWeaklyAddingAttributes:"),
      arg,
    );
  }

  static Pointer<Void> attributedSubstringFromRange$(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributedSubstringFromRange:"),
      arg,
    );
  }

  static Pointer<Void>
      attributedSubstringFromRange$replacingCharactersInRanges$numberOfRanges$withString$(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> replacingCharactersInRanges,
    @required int numberOfRanges,
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector(
          "attributedSubstringFromRange:replacingCharactersInRanges:numberOfRanges:withString:"),
      arg,
      replacingCharactersInRanges,
      numberOfRanges,
      withString,
    );
  }

  static Pointer<Void> attributesAtIndex$longestEffectiveRange$inRange$(
    Pointer<NSAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> longestEffectiveRange,
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:longestEffectiveRange:inRange:"),
      arg,
      longestEffectiveRange,
      inRange,
    );
  }

  static Pointer<Void> attributesAtIndex$effectiveRange$(
    Pointer<NSAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAttributedString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateAttribute(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inRange,
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateAttribute:inRange:options:usingBlock:"),
      arg,
      inRange,
      options,
      usingBlock,
    );
  }

  static void enumerateAttributesInRange(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateAttributesInRange:options:usingBlock:"),
      arg,
      options,
      usingBlock,
    );
  }

  static int hash(
    Pointer<NSAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToAttributedString(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToAttributedString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSAttributedString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int scriptingBeginsWith(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingBeginsWith:"),
      arg,
    );
  }

  static int scriptingContains(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingContains:"),
      arg,
    );
  }

  static int scriptingEndsWith(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingEndsWith:"),
      arg,
    );
  }

  static int scriptingIsEqualTo(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsEqualTo:"),
      arg,
    );
  }

  static int scriptingIsGreaterThan(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsGreaterThan:"),
      arg,
    );
  }

  static int scriptingIsGreaterThanOrEqualTo(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsGreaterThanOrEqualTo:"),
      arg,
    );
  }

  static int scriptingIsLessThan(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsLessThan:"),
      arg,
    );
  }

  static int scriptingIsLessThanOrEqualTo(
    Pointer<NSAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsLessThanOrEqualTo:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<NSAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSAutoContentAccessingProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAutoContentAccessingProxy extends Struct<NSAutoContentAccessingProxy> {
  factory NSAutoContentAccessingProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSAutoContentAccessingProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAutoContentAccessingProxy")
        .cast<NSAutoContentAccessingProxy>();
  }

  static void dealloc(
    Pointer<NSAutoContentAccessingProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void forwardInvocation(
    Pointer<NSAutoContentAccessingProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> forwardingTargetForSelector(
    Pointer<NSAutoContentAccessingProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("forwardingTargetForSelector:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSAutoContentAccessingProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }
}

/// Objective-C class _NSAutoLocale_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAutoLocale extends Struct<NSAutoLocale> {
  factory NSAutoLocale._() {
    throw UnimplementedError();
  }
  static Pointer<NSAutoLocale> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAutoLocale").cast<NSAutoLocale>();
  }

  static Pointer<Void> classForCoder(
    Pointer<NSAutoLocale> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSAutoLocale> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSAutoLocale> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSAutoLocale> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> displayNameForKey(
    Pointer<NSAutoLocale> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("displayNameForKey:value:"),
      arg,
      value,
    );
  }

  static void encodeWithCoder(
    Pointer<NSAutoLocale> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSAutoLocale> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSAutoLocale> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithLocaleIdentifier(
    Pointer<NSAutoLocale> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLocaleIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSAutoLocale> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSAutoreleasePool_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAutoreleasePool extends Struct<NSAutoreleasePool> {
  factory NSAutoreleasePool._() {
    throw UnimplementedError();
  }
  static Pointer<NSAutoreleasePool> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSAutoreleasePool").cast<NSAutoreleasePool>();
  }

  static void addObject(
    Pointer<NSAutoreleasePool> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static Pointer<Void> autorelease(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static void dealloc(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void drain(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("drain"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSAutoreleasePool> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static void release(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSAutoreleasePool> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSAutoresizingMaskLayoutConstraint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSAutoresizingMaskLayoutConstraint
    extends Struct<NSAutoresizingMaskLayoutConstraint> {
  factory NSAutoresizingMaskLayoutConstraint._() {
    throw UnimplementedError();
  }
  static Pointer<NSAutoresizingMaskLayoutConstraint> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSAutoresizingMaskLayoutConstraint")
        .cast<NSAutoresizingMaskLayoutConstraint>();
  }

  static Pointer<Void> descriptionAccessory(
    Pointer<NSAutoresizingMaskLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionAccessory"),
    );
  }
}

/// Objective-C class _NSBackgroundActivityScheduler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBackgroundActivityScheduler
    extends Struct<NSBackgroundActivityScheduler> {
  factory NSBackgroundActivityScheduler._() {
    throw UnimplementedError();
  }
  static Pointer<NSBackgroundActivityScheduler> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBackgroundActivityScheduler")
        .cast<NSBackgroundActivityScheduler>();
  }

  static Pointer<Void> checkInHandler(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("checkInHandler"),
    );
  }

  static void dealloc(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static double delay(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("delay"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithIdentifier(
    Pointer<NSBackgroundActivityScheduler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithIdentifier:"),
      arg,
    );
  }

  static double interval(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("interval"),
    );
  }

  static void invalidate(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isPreregistered(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPreregistered"),
    );
  }

  static int qualityOfService(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static int repeats(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("repeats"),
    );
  }

  static void scheduleWithBlock(
    Pointer<NSBackgroundActivityScheduler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleWithBlock:"),
      arg,
    );
  }

  static void setCheckInHandler(
    Pointer<NSBackgroundActivityScheduler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCheckInHandler:"),
      arg,
    );
  }

  static void setDelay(
    Pointer<NSBackgroundActivityScheduler> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setDelay:"),
      arg,
    );
  }

  static void setInterval(
    Pointer<NSBackgroundActivityScheduler> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setInterval:"),
      arg,
    );
  }

  static void setPreregistered(
    Pointer<NSBackgroundActivityScheduler> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPreregistered:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSBackgroundActivityScheduler> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setRepeats(
    Pointer<NSBackgroundActivityScheduler> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRepeats:"),
      arg,
    );
  }

  static void setTolerance(
    Pointer<NSBackgroundActivityScheduler> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTolerance:"),
      arg,
    );
  }

  static void set_appRefresh(
    Pointer<NSBackgroundActivityScheduler> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("set_appRefresh:"),
      arg,
    );
  }

  static int shouldDefer(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldDefer"),
    );
  }

  static double tolerance(
    Pointer<NSBackgroundActivityScheduler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("tolerance"),
    );
  }
}

/// Objective-C class _NSBetweenPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBetweenPredicateOperator extends Struct<NSBetweenPredicateOperator> {
  factory NSBetweenPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSBetweenPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBetweenPredicateOperator")
        .cast<NSBetweenPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSBetweenPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSBetweenPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }
}

/// Objective-C class _NSBig5EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBig5EncodingDetector extends Struct<NSBig5EncodingDetector> {
  factory NSBig5EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSBig5EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBig5EncodingDetector")
        .cast<NSBig5EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSBig5EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSBig5HKSCSEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBig5HKSCSEncodingDetector extends Struct<NSBig5HKSCSEncodingDetector> {
  factory NSBig5HKSCSEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSBig5HKSCSEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBig5HKSCSEncodingDetector")
        .cast<NSBig5HKSCSEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSBig5HKSCSEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSBigEEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBigEEncodingDetector extends Struct<NSBigEEncodingDetector> {
  factory NSBigEEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSBigEEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBigEEncodingDetector")
        .cast<NSBigEEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSBigEEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSBigMutableString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBigMutableString extends Struct<NSBigMutableString> {
  factory NSBigMutableString._() {
    throw UnimplementedError();
  }
  static Pointer<NSBigMutableString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBigMutableString").cast<NSBigMutableString>();
  }

  static int characterAtIndex(
    Pointer<NSBigMutableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSBigMutableString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSBigMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getCharacters(
    Pointer<NSBigMutableString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> initWithStorage(
    Pointer<NSBigMutableString> _self,
    Pointer<Pointer<Void>> arg, {
    @required int length,
    @required int isUnicode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithStorage:length:isUnicode:"),
      arg,
      length,
      isUnicode,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSBigMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSBigMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSBigMutableString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static void replaceCharactersInRange(
    Pointer<NSBigMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }
}

/// Objective-C class _NSBlockExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBlockExpression extends Struct<NSBlockExpression> {
  factory NSBlockExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSBlockExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBlockExpression").cast<NSBlockExpression>();
  }

  static void acceptVisitor(
    Pointer<NSBlockExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer<Void> arguments(
    Pointer<NSBlockExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSBlockExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSBlockExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSBlockExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionBlock(
    Pointer<NSBlockExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("expressionBlock"),
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSBlockExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSBlockExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSBlockExpression> _self,
    int arg, {
    @required Pointer<Void> block,
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithType:block:arguments:"),
      arg,
      block,
      arguments,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSBlockExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSBlockObservationSink_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBlockObservationSink extends Struct<NSBlockObservationSink> {
  factory NSBlockObservationSink._() {
    throw UnimplementedError();
  }
  static Pointer<NSBlockObservationSink> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBlockObservationSink")
        .cast<NSBlockObservationSink>();
  }

  static void dealloc(
    Pointer<NSBlockObservationSink> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSBlockObservationSink> _self,
    Pointer<Void> arg, {
    @required int tag,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithBlock:tag:"),
      arg,
      tag,
    );
  }
}

/// Objective-C class _NSBlockOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBlockOperation extends Struct<NSBlockOperation> {
  factory NSBlockOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSBlockOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBlockOperation").cast<NSBlockOperation>();
  }

  static void addExecutionBlock(
    Pointer<NSBlockOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addExecutionBlock:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSBlockOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> executionBlocks(
    Pointer<NSBlockOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executionBlocks"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSBlockOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSBlockOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:"),
      arg,
    );
  }

  static void main(
    Pointer<NSBlockOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }
}

/// Objective-C class _NSBlockPredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBlockPredicate extends Struct<NSBlockPredicate> {
  factory NSBlockPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSBlockPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBlockPredicate").cast<NSBlockPredicate>();
  }

  static void acceptVisitor(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSBlockPredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSBlockPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSBlockPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> predicateWithSubstitutionVariables(
    Pointer<NSBlockPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateWithSubstitutionVariables:"),
      arg,
    );
  }
}

/// Objective-C class _NSBoundKeyPath_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBoundKeyPath extends Struct<NSBoundKeyPath> {
  factory NSBoundKeyPath._() {
    throw UnimplementedError();
  }
  static Pointer<NSBoundKeyPath> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBoundKeyPath").cast<NSBoundKeyPath>();
  }

  static void dealloc(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int hash(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSBoundKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyPath(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPath"),
    );
  }

  static Pointer<Void> mutableArrayValue(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableArrayValue"),
    );
  }

  static Pointer<Void> mutableOrderedSetValue(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableOrderedSetValue"),
    );
  }

  static Pointer<Void> mutableSetValue(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableSetValue"),
    );
  }

  static Pointer<Void> rootObject(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootObject"),
    );
  }

  static void setRootObject(
    Pointer<NSBoundKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootObject:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSBoundKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static int validateValue(
    Pointer<NSBoundKeyPath> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateValue:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> value(
    Pointer<NSBoundKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSBoundedByPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBoundedByPredicateOperator
    extends Struct<NSBoundedByPredicateOperator> {
  factory NSBoundedByPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSBoundedByPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBoundedByPredicateOperator")
        .cast<NSBoundedByPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSBoundedByPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSBoundedByPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> selector(
    Pointer<NSBoundedByPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSBoundedByPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSBuiltinCharacterSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBuiltinCharacterSet extends Struct<NSBuiltinCharacterSet> {
  factory NSBuiltinCharacterSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSBuiltinCharacterSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBuiltinCharacterSet")
        .cast<NSBuiltinCharacterSet>();
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSBuiltinCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSBundle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBundle extends Struct<NSBundle> {
  factory NSBundle._() {
    throw UnimplementedError();
  }
  static Pointer<NSBundle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSBundle").cast<NSBundle>();
  }

  static Pointer<Void> URLForAuxiliaryExecutable(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLForAuxiliaryExecutable:"),
      arg,
    );
  }

  static Pointer<Void> URLForResource$withExtension$subdirectory$localization$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withExtension,
    @required Pointer<Void> subdirectory,
    @required Pointer<Void> localization,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "URLForResource:withExtension:subdirectory:localization:"),
      arg,
      withExtension,
      subdirectory,
      localization,
    );
  }

  static Pointer<Void> URLForResource$withExtension$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withExtension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLForResource:withExtension:"),
      arg,
      withExtension,
    );
  }

  static Pointer<Void> URLForResource$withExtension$subdirectory$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withExtension,
    @required Pointer<Void> subdirectory,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLForResource:withExtension:subdirectory:"),
      arg,
      withExtension,
      subdirectory,
    );
  }

  static Pointer<Void> URLsForResourcesWithExtension$subdirectory$localization$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> subdirectory,
    @required Pointer<Void> localization,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "URLsForResourcesWithExtension:subdirectory:localization:"),
      arg,
      subdirectory,
      localization,
    );
  }

  static Pointer<Void> URLsForResourcesWithExtension$subdirectory$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> subdirectory,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLsForResourcesWithExtension:subdirectory:"),
      arg,
      subdirectory,
    );
  }

  static Pointer<Void> appStoreReceiptURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("appStoreReceiptURL"),
    );
  }

  static Pointer<Void> builtInPlugInsPath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("builtInPlugInsPath"),
    );
  }

  static Pointer<Void> builtInPlugInsURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("builtInPlugInsURL"),
    );
  }

  static Pointer<Void> bundleIdentifier(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundleIdentifier"),
    );
  }

  static Pointer<Void> bundleLanguages(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundleLanguages"),
    );
  }

  static Pointer<Void> bundlePath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundlePath"),
    );
  }

  static Pointer<Void> bundleURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundleURL"),
    );
  }

  static Pointer<Void> classNamed(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classNamed:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> developmentLocalization(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("developmentLocalization"),
    );
  }

  static Pointer<Void> executableArchitectures(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executableArchitectures"),
    );
  }

  static Pointer<Void> executablePath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executablePath"),
    );
  }

  static Pointer<Void> executableURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executableURL"),
    );
  }

  static Pointer<Void> findBundleResourceURLsCallingMethod(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("findBundleResourceURLsCallingMethod:passingTest:"),
      arg,
      passingTest,
    );
  }

  static Pointer<Void> infoDictionary(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("infoDictionary"),
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static void invalidateResourceCache(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidateResourceCache"),
    );
  }

  static int isLoaded(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLoaded"),
    );
  }

  static int load(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("load"),
    );
  }

  static int loadAndReturnError(
    Pointer<NSBundle> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("loadAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> localizations(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizations"),
    );
  }

  static Pointer<Void> localizedInfoDictionary(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedInfoDictionary"),
    );
  }

  static Pointer<Void> localizedStringForKey(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> table,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("localizedStringForKey:value:table:"),
      arg,
      value,
      table,
    );
  }

  static Pointer<Void> objectForInfoDictionaryKey(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForInfoDictionaryKey:"),
      arg,
    );
  }

  static Pointer<Void> pathForAuxiliaryExecutable(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathForAuxiliaryExecutable:"),
      arg,
    );
  }

  static Pointer<Void> pathForResource$ofType$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathForResource:ofType:"),
      arg,
      ofType,
    );
  }

  static Pointer<Void> pathForResource$ofType$inDirectory$forLanguage$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofType,
    @required Pointer<Void> inDirectory,
    @required Pointer<Void> forLanguage,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathForResource:ofType:inDirectory:forLanguage:"),
      arg,
      ofType,
      inDirectory,
      forLanguage,
    );
  }

  static Pointer<Void> pathForResource$ofType$inDirectory$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofType,
    @required Pointer<Void> inDirectory,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathForResource:ofType:inDirectory:"),
      arg,
      ofType,
      inDirectory,
    );
  }

  static Pointer<Void> pathForResource$ofType$inDirectory$forLocalization$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofType,
    @required Pointer<Void> inDirectory,
    @required Pointer<Void> forLocalization,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathForResource:ofType:inDirectory:forLocalization:"),
      arg,
      ofType,
      inDirectory,
      forLocalization,
    );
  }

  static Pointer<Void> pathsForResourcesOfType$inDirectory$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inDirectory,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathsForResourcesOfType:inDirectory:"),
      arg,
      inDirectory,
    );
  }

  static Pointer<Void> pathsForResourcesOfType$inDirectory$forLanguage$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inDirectory,
    @required Pointer<Void> forLanguage,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathsForResourcesOfType:inDirectory:forLanguage:"),
      arg,
      inDirectory,
      forLanguage,
    );
  }

  static Pointer<Void> pathsForResourcesOfType$inDirectory$forLocalization$(
    Pointer<NSBundle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inDirectory,
    @required Pointer<Void> forLocalization,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathsForResourcesOfType:inDirectory:forLocalization:"),
      arg,
      inDirectory,
      forLocalization,
    );
  }

  static Pointer<Void> preferredLocalizations(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preferredLocalizations"),
    );
  }

  static int preflightAndReturnError(
    Pointer<NSBundle> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("preflightAndReturnError:"),
      arg,
    );
  }

  static double preservationPriorityForTag(
    Pointer<NSBundle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("preservationPriorityForTag:"),
      arg,
    );
  }

  static Pointer<Void> principalClass(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("principalClass"),
    );
  }

  static Pointer<Void> privateFrameworksPath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateFrameworksPath"),
    );
  }

  static Pointer<Void> privateFrameworksURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("privateFrameworksURL"),
    );
  }

  static Pointer<Void> resourcePath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resourcePath"),
    );
  }

  static Pointer<Void> resourceURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resourceURL"),
    );
  }

  static void setPreservationPriority$forTags$(
    Pointer<NSBundle> _self,
    double arg, {
    @required Pointer<Void> forTags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("setPreservationPriority:forTags:"),
      arg,
      forTags,
    );
  }

  static void setPreservationPriority$forTag$(
    Pointer<NSBundle> _self,
    double arg, {
    @required Pointer<Void> forTag,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("setPreservationPriority:forTag:"),
      arg,
      forTag,
    );
  }

  static Pointer<Void> sharedFrameworksPath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedFrameworksPath"),
    );
  }

  static Pointer<Void> sharedFrameworksURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedFrameworksURL"),
    );
  }

  static Pointer<Void> sharedSupportPath(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedSupportPath"),
    );
  }

  static Pointer<Void> sharedSupportURL(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sharedSupportURL"),
    );
  }

  static int unload(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("unload"),
    );
  }

  static int versionNumber(
    Pointer<NSBundle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("versionNumber"),
    );
  }
}

/// Objective-C class _NSBundleResourceRequest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSBundleResourceRequest extends Struct<NSBundleResourceRequest> {
  factory NSBundleResourceRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSBundleResourceRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSBundleResourceRequest")
        .cast<NSBundleResourceRequest>();
  }

  static void beginAccessingResourcesWithCompletionHandler(
    Pointer<NSBundleResourceRequest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("beginAccessingResourcesWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> bundle(
    Pointer<NSBundleResourceRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundle"),
    );
  }

  static void conditionallyBeginAccessingResourcesWithCompletionHandler(
    Pointer<NSBundleResourceRequest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "conditionallyBeginAccessingResourcesWithCompletionHandler:"),
      arg,
    );
  }

  static void endAccessingResources(
    Pointer<NSBundleResourceRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endAccessingResources"),
    );
  }

  static Pointer<Void> initWithTags$(
    Pointer<NSBundleResourceRequest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTags:"),
      arg,
    );
  }

  static Pointer<Void> initWithTags$bundle$(
    Pointer<NSBundleResourceRequest> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> bundle,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTags:bundle:"),
      arg,
      bundle,
    );
  }

  static double loadingPriority(
    Pointer<NSBundleResourceRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("loadingPriority"),
    );
  }

  static Pointer<Void> progress(
    Pointer<NSBundleResourceRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("progress"),
    );
  }

  static void setLoadingPriority(
    Pointer<NSBundleResourceRequest> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setLoadingPriority:"),
      arg,
    );
  }

  static Pointer<Void> tags(
    Pointer<NSBundleResourceRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("tags"),
    );
  }
}

/// Objective-C class _NSByteCountFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSByteCountFormatter extends Struct<NSByteCountFormatter> {
  factory NSByteCountFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSByteCountFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSByteCountFormatter").cast<NSByteCountFormatter>();
  }

  static int allowedUnits(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("allowedUnits"),
    );
  }

  static int allowsNonnumericFormatting(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsNonnumericFormatting"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int countStyle(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("countStyle"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int formattingContext(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("formattingContext"),
    );
  }

  static int getObjectValue(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int includesActualByteCount(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("includesActualByteCount"),
    );
  }

  static int includesCount(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("includesCount"),
    );
  }

  static int includesUnit(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("includesUnit"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isAdaptive(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAdaptive"),
    );
  }

  static int isPartialStringValid(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> proposedSelectedRange,
    @required Pointer<Void> originalString,
    @required Pointer<Void> originalSelectedRange,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:"),
      arg,
      proposedSelectedRange,
      originalString,
      originalSelectedRange,
      errorDescription,
    );
  }

  static void receiveObservedValue(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setAdaptive(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAdaptive:"),
      arg,
    );
  }

  static void setAllowedUnits(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setAllowedUnits:"),
      arg,
    );
  }

  static void setAllowsNonnumericFormatting(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsNonnumericFormatting:"),
      arg,
    );
  }

  static void setCountStyle(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setCountStyle:"),
      arg,
    );
  }

  static void setFormattingContext(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setFormattingContext:"),
      arg,
    );
  }

  static void setIncludesActualByteCount(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesActualByteCount:"),
      arg,
    );
  }

  static void setIncludesCount(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesCount:"),
      arg,
    );
  }

  static void setIncludesUnit(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesUnit:"),
      arg,
    );
  }

  static void setZeroPadsFractionDigits(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setZeroPadsFractionDigits:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSByteCountFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromByteCount(
    Pointer<NSByteCountFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("stringFromByteCount:"),
      arg,
    );
  }

  static int zeroPadsFractionDigits(
    Pointer<NSByteCountFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("zeroPadsFractionDigits"),
    );
  }
}

/// Objective-C class _NSCFAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFAttributedString extends Struct<NSCFAttributedString> {
  factory NSCFAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFAttributedString").cast<NSCFAttributedString>();
  }

  static void addAttribute(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttribute:value:range:"),
      arg,
      value,
      range,
    );
  }

  static void addAttributes(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttributes:range:"),
      arg,
      range,
    );
  }

  static void appendAttributedString(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendAttributedString:"),
      arg,
    );
  }

  static Pointer<Void> attribute$atIndex$effectiveRange$(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:effectiveRange:"),
      arg,
      atIndex,
      effectiveRange,
    );
  }

  static Pointer<Void> attribute$atIndex$longestEffectiveRange$inRange$(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> longestEffectiveRange,
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:longestEffectiveRange:inRange:"),
      arg,
      atIndex,
      longestEffectiveRange,
      inRange,
    );
  }

  static Pointer<Void> attributedSubstringFromRange(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributedSubstringFromRange:"),
      arg,
    );
  }

  static Pointer<Void> attributesAtIndex$longestEffectiveRange$inRange$(
    Pointer<NSCFAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> longestEffectiveRange,
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:longestEffectiveRange:inRange:"),
      arg,
      longestEffectiveRange,
      inRange,
    );
  }

  static Pointer<Void> attributesAtIndex$effectiveRange$(
    Pointer<NSCFAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCFAttributedString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void deleteCharactersInRange(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteCharactersInRange:"),
      arg,
    );
  }

  static void insertAttributedString(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertAttributedString:atIndex:"),
      arg,
      atIndex,
    );
  }

  static int isEqual(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToAttributedString(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToAttributedString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSCFAttributedString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static void release(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeAttribute(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAttribute:range:"),
      arg,
      range,
    );
  }

  static void replaceCharactersInRange$withString$(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static void replaceCharactersInRange$withAttributedString$(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withAttributedString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withAttributedString:"),
      arg,
      withAttributedString,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setAttributedString(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedString:"),
      arg,
    );
  }

  static void setAttributes(
    Pointer<NSCFAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributes:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> string(
    Pointer<NSCFAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSCFCharacterSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFCharacterSet extends Struct<NSCFCharacterSet> {
  factory NSCFCharacterSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFCharacterSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFCharacterSet").cast<NSCFCharacterSet>();
  }

  static void addCharactersInRange(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addCharactersInRange:"),
      arg,
    );
  }

  static void addCharactersInString(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addCharactersInString:"),
      arg,
    );
  }

  static int allowsWeakReference(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static Pointer<Void> bitmapRepresentation(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bitmapRepresentation"),
    );
  }

  static int characterIsMember(
    Pointer<NSCFCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_Int8(
      _self,
      _objc.getSelector("characterIsMember:"),
      arg,
    );
  }

  static Pointer<Void> classForArchiver(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForArchiver"),
    );
  }

  static Pointer<Void> classForKeyedArchiver(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForKeyedArchiver"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void formIntersectionWithCharacterSet(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("formIntersectionWithCharacterSet:"),
      arg,
    );
  }

  static void formUnionWithCharacterSet(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("formUnionWithCharacterSet:"),
      arg,
    );
  }

  static int hasMemberInPlane(
    Pointer<NSCFCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_Int8(
      _self,
      _objc.getSelector("hasMemberInPlane:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static void invert(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invert"),
    );
  }

  static Pointer<Void> invertedSet(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invertedSet"),
    );
  }

  static int isEqual(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isSupersetOfSet(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSupersetOfSet:"),
      arg,
    );
  }

  static int longCharacterIsMember(
    Pointer<NSCFCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("longCharacterIsMember:"),
      arg,
    );
  }

  static void makeCharacterSetCompact(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeCharacterSetCompact"),
    );
  }

  static void makeCharacterSetFast(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeCharacterSetFast"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static void release(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeCharactersInRange(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCharactersInRange:"),
      arg,
    );
  }

  static void removeCharactersInString(
    Pointer<NSCFCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCharactersInString:"),
      arg,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }
}

/// Objective-C class _NSCFData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFData extends Struct<NSCFData> {
  factory NSCFData._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFData").cast<NSCFData>();
  }

  static int allowsWeakReference(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static Pointer<Void> bytes(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCFData> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSCFData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int length(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableBytes(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableBytes"),
    );
  }

  static void release(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static void setLength(
    Pointer<NSCFData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLength:"),
      arg,
    );
  }
}

/// Objective-C class _NSCFError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFError extends Struct<NSCFError> {
  factory NSCFError._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFError").cast<NSCFError>();
  }

  static int allowsWeakReference(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int code(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("code"),
    );
  }

  static Pointer<Void> domain(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("domain"),
    );
  }

  static int hash(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSCFError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void release(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSCFError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSCFInputStream_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFInputStream extends Struct<NSCFInputStream> {
  factory NSCFInputStream._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFInputStream> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFInputStream").cast<NSCFInputStream>();
  }

  static int allowsWeakReference(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static void close(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("close"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static int getBuffer(
    Pointer<NSCFInputStream> _self,
    Pointer<Pointer<Utf8>> arg, {
    @required Pointer<Uint64> length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getBuffer:length:"),
      arg,
      length,
    );
  }

  static int hasBytesAvailable(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasBytesAvailable"),
    );
  }

  static int hash(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:"),
      arg,
    );
  }

  static Pointer<Void> initWithFileAtPath(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileAtPath:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void open(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("open"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static int read(
    Pointer<NSCFInputStream> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int64(
      _self,
      _objc.getSelector("read:maxLength:"),
      arg,
      maxLength,
    );
  }

  static void release(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeFromRunLoop(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static void setDelegate(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int setProperty(
    Pointer<NSCFInputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setProperty:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> streamError(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("streamError"),
    );
  }

  static int streamStatus(
    Pointer<NSCFInputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("streamStatus"),
    );
  }
}

/// Objective-C class _NSCFOutputStream_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFOutputStream extends Struct<NSCFOutputStream> {
  factory NSCFOutputStream._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFOutputStream> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFOutputStream").cast<NSCFOutputStream>();
  }

  static int allowsWeakReference(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static void close(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("close"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static int hasSpaceAvailable(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSpaceAvailable"),
    );
  }

  static int hash(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initToBuffer(
    Pointer<NSCFOutputStream> _self,
    Pointer<Utf8> arg, {
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initToBuffer:capacity:"),
      arg,
      capacity,
    );
  }

  static Pointer<Void> initToFileAtPath(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg, {
    @required int append,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initToFileAtPath:append:"),
      arg,
      append,
    );
  }

  static Pointer<Void> initToMemory(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("initToMemory"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg, {
    @required int append,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:append:"),
      arg,
      append,
    );
  }

  static int isEqual(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void open(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("open"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static void release(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeFromRunLoop(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static void setDelegate(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int setProperty(
    Pointer<NSCFOutputStream> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setProperty:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> streamError(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("streamError"),
    );
  }

  static int streamStatus(
    Pointer<NSCFOutputStream> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("streamStatus"),
    );
  }

  static int write(
    Pointer<NSCFOutputStream> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int64(
      _self,
      _objc.getSelector("write:maxLength:"),
      arg,
      maxLength,
    );
  }
}

/// Objective-C class _NSCFTimer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFTimer extends Struct<NSCFTimer> {
  factory NSCFTimer._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFTimer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFTimer").cast<NSCFTimer>();
  }

  static int allowsWeakReference(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static void fire(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("fire"),
    );
  }

  static Pointer<Void> fireDate(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fireDate"),
    );
  }

  static int hash(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithFireDate(
    Pointer<NSCFTimer> _self,
    Pointer<Void> arg, {
    @required double interval,
    @required Pointer<Void> target,
    @required Pointer<Void> selector,
    @required Pointer<Void> userInfo,
    @required int repeats,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithFireDate:interval:target:selector:userInfo:repeats:"),
      arg,
      interval,
      target,
      selector,
      userInfo,
      repeats,
    );
  }

  static void invalidate(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isEqual(
    Pointer<NSCFTimer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isValid(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static void release(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static void setFireDate(
    Pointer<NSCFTimer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFireDate:"),
      arg,
    );
  }

  static void setTolerance(
    Pointer<NSCFTimer> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setTolerance:"),
      arg,
    );
  }

  static double timeInterval(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeInterval"),
    );
  }

  static double tolerance(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("tolerance"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSCFTimer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSCFType_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCFType extends Struct<NSCFType> {
  factory NSCFType._() {
    throw UnimplementedError();
  }
  static Pointer<NSCFType> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCFType").cast<NSCFType>();
  }

  static int allowsWeakReference(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static int hash(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSCFType> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void release(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSCFType> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }
}

/// Objective-C class _NSCalendarDate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCalendarDate extends Struct<NSCalendarDate> {
  factory NSCalendarDate._() {
    throw UnimplementedError();
  }
  static Pointer<NSCalendarDate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCalendarDate").cast<NSCalendarDate>();
  }

  static Pointer<Void> addTimeInterval(
    Pointer<NSCalendarDate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("addTimeInterval:"),
      arg,
    );
  }

  static Pointer<Void> calendarFormat(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendarFormat"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCalendarDate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> dateByAddingYears(
    Pointer<NSCalendarDate> _self,
    int arg, {
    @required int months,
    @required int days,
    @required int hours,
    @required int minutes,
    @required int seconds,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p(
      _self,
      _objc.getSelector("dateByAddingYears:months:days:hours:minutes:seconds:"),
      arg,
      months,
      days,
      hours,
      minutes,
      seconds,
    );
  }

  static int dayOfCommonEra(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("dayOfCommonEra"),
    );
  }

  static int dayOfMonth(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("dayOfMonth"),
    );
  }

  static int dayOfWeek(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("dayOfWeek"),
    );
  }

  static int dayOfYear(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("dayOfYear"),
    );
  }

  static void dealloc(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithCalendarFormat$locale$(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithCalendarFormat:locale:"),
      arg,
      locale,
    );
  }

  static Pointer<Void> descriptionWithCalendarFormat$(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithCalendarFormat:"),
      arg,
    );
  }

  static Pointer<Void> descriptionWithLocale(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithLocale:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hourOfDay(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("hourOfDay"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$calendarFormat$locale$(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> calendarFormat,
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:calendarFormat:locale:"),
      arg,
      calendarFormat,
      locale,
    );
  }

  static Pointer<Void> initWithString$calendarFormat$(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> calendarFormat,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:calendarFormat:"),
      arg,
      calendarFormat,
    );
  }

  static Pointer<Void> initWithTimeIntervalSinceReferenceDate(
    Pointer<NSCalendarDate> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithTimeIntervalSinceReferenceDate:"),
      arg,
    );
  }

  static Pointer<Void> initWithYear(
    Pointer<NSCalendarDate> _self,
    int arg, {
    @required int month,
    @required int day,
    @required int hour,
    @required int minute,
    @required int second,
    @required Pointer<Void> timeZone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithYear:month:day:hour:minute:second:timeZone:"),
      arg,
      month,
      day,
      hour,
      minute,
      second,
      timeZone,
    );
  }

  static int microsecondOfSecond(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("microsecondOfSecond"),
    );
  }

  static int minuteOfHour(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("minuteOfHour"),
    );
  }

  static int monthOfYear(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("monthOfYear"),
    );
  }

  static void release(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int secondOfMinute(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("secondOfMinute"),
    );
  }

  static void setCalendarFormat(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendarFormat:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<NSCalendarDate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static double timeIntervalSinceReferenceDate(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timeIntervalSinceReferenceDate"),
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer<Void> timeZoneDetail(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZoneDetail"),
    );
  }

  static int yearOfCommonEra(
    Pointer<NSCalendarDate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("yearOfCommonEra"),
    );
  }

  static void years(
    Pointer<NSCalendarDate> _self,
    Pointer<Int64> arg, {
    @required Pointer<Int64> months,
    @required Pointer<Int64> days,
    @required Pointer<Int64> hours,
    @required Pointer<Int64> minutes,
    @required Pointer<Int64> seconds,
    @required Pointer<Void> sinceDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("years:months:days:hours:minutes:seconds:sinceDate:"),
      arg,
      months,
      days,
      hours,
      minutes,
      seconds,
      sinceDate,
    );
  }
}

/// Objective-C class _NSCharacterSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCharacterSet extends Struct<NSCharacterSet> {
  factory NSCharacterSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSCharacterSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCharacterSet").cast<NSCharacterSet>();
  }

  static Pointer<Void> bitmapRepresentation(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bitmapRepresentation"),
    );
  }

  static int characterIsMember(
    Pointer<NSCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_Int8(
      _self,
      _objc.getSelector("characterIsMember:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hasMemberInPlane(
    Pointer<NSCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_Int8(
      _self,
      _objc.getSelector("hasMemberInPlane:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> invertedSet(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invertedSet"),
    );
  }

  static int isEmpty(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEmpty"),
    );
  }

  static int isEqual(
    Pointer<NSCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isMutable(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMutable"),
    );
  }

  static int isSupersetOfSet(
    Pointer<NSCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSupersetOfSet:"),
      arg,
    );
  }

  static int longCharacterIsMember(
    Pointer<NSCharacterSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("longCharacterIsMember:"),
      arg,
    );
  }

  static void makeImmutable(
    Pointer<NSCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeImmutable"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSCheapMutableString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCheapMutableString extends Struct<NSCheapMutableString> {
  factory NSCheapMutableString._() {
    throw UnimplementedError();
  }
  static Pointer<NSCheapMutableString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCheapMutableString").cast<NSCheapMutableString>();
  }

  static Pointer<Utf8> cString(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cString"),
    );
  }

  static int cStringLength(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cStringLength"),
    );
  }

  static int characterAtIndex(
    Pointer<NSCheapMutableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fastestEncoding(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fastestEncoding"),
    );
  }

  static int getBytes(
    Pointer<NSCheapMutableString> _self,
    Pointer<Void> arg, {
    @required int maxLength,
    @required Pointer<Uint64> usedLength,
    @required int encoding,
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:"),
      arg,
      maxLength,
      usedLength,
      encoding,
      options,
      range,
      remainingRange,
    );
  }

  static void getCharacters(
    Pointer<NSCheapMutableString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static int length(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Utf8> lossyCString(
    Pointer<NSCheapMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lossyCString"),
    );
  }

  static void setContentsNoCopy(
    Pointer<NSCheapMutableString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int freeWhenDone,
    @required int isUnicode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Int8_returns_void(
      _self,
      _objc.getSelector("setContentsNoCopy:length:freeWhenDone:isUnicode:"),
      arg,
      length,
      freeWhenDone,
      isUnicode,
    );
  }
}

/// Objective-C class _NSClassDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSClassDescription extends Struct<NSClassDescription> {
  factory NSClassDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSClassDescription> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSClassDescription").cast<NSClassDescription>();
  }

  static Pointer<Void> allAttributeKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allAttributeKeys"),
    );
  }

  static Pointer<Void> allToManyRelationshipKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allToManyRelationshipKeys"),
    );
  }

  static Pointer<Void> allToOneRelationshipKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allToOneRelationshipKeys"),
    );
  }

  static Pointer<Void> attributeKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributeKeys"),
    );
  }

  static Pointer<Void> classDescriptionForDestinationKey(
    Pointer<NSClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptionForDestinationKey:"),
      arg,
    );
  }

  static Pointer<Void> classDescriptionForKeyPath(
    Pointer<NSClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptionForKeyPath:"),
      arg,
    );
  }

  static Pointer<Void> classPropertyKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classPropertyKeys"),
    );
  }

  static Pointer<Void> displayNameForKey(
    Pointer<NSClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("displayNameForKey:"),
      arg,
    );
  }

  static Pointer<Void> entityName(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("entityName"),
    );
  }

  static Pointer<Void> inverseForRelationshipKey(
    Pointer<NSClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("inverseForRelationshipKey:"),
      arg,
    );
  }

  static int ownsDestinationObjectsForRelationshipKey(
    Pointer<NSClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("ownsDestinationObjectsForRelationshipKey:"),
      arg,
    );
  }

  static Pointer<Void> toManyRelationshipKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("toManyRelationshipKeys"),
    );
  }

  static Pointer<Void> toOneRelationshipKeys(
    Pointer<NSClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("toOneRelationshipKeys"),
    );
  }

  static Pointer<Void> validateValue(
    Pointer<NSClassDescription> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("validateValue:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSClassicHashTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSClassicHashTable extends Struct<NSClassicHashTable> {
  factory NSClassicHashTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSClassicHashTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSClassicHashTable").cast<NSClassicHashTable>();
  }

  static void addObject(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static Pointer<Void> allObjects(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjects"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static int count(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> getItem(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("getItem:"),
      arg,
    );
  }

  static void getKeys(
    Pointer<NSClassicHashTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Uint64> count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getKeys:count:"),
      arg,
      count,
    );
  }

  static int hash(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void insertItem(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertItem:"),
      arg,
    );
  }

  static void insertKnownAbsentItem(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertKnownAbsentItem:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void removeAllItems(
    Pointer<NSClassicHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeItem(
    Pointer<NSClassicHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItem:"),
      arg,
    );
  }
}

/// Objective-C class _NSClassicMapTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSClassicMapTable extends Struct<NSClassicMapTable> {
  factory NSClassicMapTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSClassicMapTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSClassicMapTable").cast<NSClassicMapTable>();
  }

  static Pointer<Void> allKeys(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> allValues(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allValues"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static int count(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> existingItemForSetItem(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("existingItemForSetItem:forAbsentKey:"),
      arg,
      forAbsentKey,
    );
  }

  static int getKeys(
    Pointer<NSClassicMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> values,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("getKeys:values:"),
      arg,
      values,
    );
  }

  static Pointer<Void> init(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEqual(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int mapMember(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> originalKey,
    @required Pointer<Pointer<Void>> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("mapMember:originalKey:value:"),
      arg,
      originalKey,
      value,
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void removeAllItems(
    Pointer<NSClassicMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeObjectForKey(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static void setItem(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKnownAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forKnownAbsentKey:"),
      arg,
      forKnownAbsentKey,
    );
  }

  static void setObject(
    Pointer<NSClassicMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSCloneCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCloneCommand extends Struct<NSCloneCommand> {
  factory NSCloneCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloneCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCloneCommand").cast<NSCloneCommand>();
  }

  static void dealloc(
    Pointer<NSCloneCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSCloneCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSCloneCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCloneCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> keySpecifier(
    Pointer<NSCloneCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keySpecifier"),
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSCloneCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static void setReceiversSpecifier(
    Pointer<NSCloneCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReceiversSpecifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSCloseCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCloseCommand extends Struct<NSCloseCommand> {
  factory NSCloseCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSCloseCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCloseCommand").cast<NSCloseCommand>();
  }

  static int saveOptions(
    Pointer<NSCloseCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("saveOptions"),
    );
  }
}

/// Objective-C class _NSCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCoder extends Struct<NSCoder> {
  factory NSCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCoder").cast<NSCoder>();
  }

  static int CA_decodeCGFloatArray(
    Pointer<NSCoder> _self,
    Pointer<Float> arg, {
    @required int count,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("CA_decodeCGFloatArray:count:forKey:"),
      arg,
      count,
      forKey,
    );
  }

  static Pointer<Void> CA_decodeObjectForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CA_decodeObjectForKey:"),
      arg,
    );
  }

  static void CA_encodeCGFloatArray(
    Pointer<NSCoder> _self,
    Pointer<Float> arg, {
    @required int count,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("CA_encodeCGFloatArray:count:forKey:"),
      arg,
      count,
      forKey,
    );
  }

  static void CA_encodeObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required int conditional,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("CA_encodeObject:forKey:conditional:"),
      arg,
      forKey,
      conditional,
    );
  }

  static Pointer<Void> allowedClasses(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allowedClasses"),
    );
  }

  static int allowsKeyedCoding(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static int containsValueForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsValueForKey:"),
      arg,
    );
  }

  static void decodeArrayOfObjCType(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("decodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static int decodeBoolForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("decodeBoolForKey:"),
      arg,
    );
  }

  static Pointer<Utf8> decodeBytesForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> returnedLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesForKey:returnedLength:"),
      arg,
      returnedLength,
    );
  }

  static Pointer<Void> decodeBytesWithReturnedLength(
    Pointer<NSCoder> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesWithReturnedLength:"),
      arg,
    );
  }

  static Pointer<Void> decodeDataObject(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObject"),
    );
  }

  static double decodeDoubleForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("decodeDoubleForKey:"),
      arg,
    );
  }

  static double decodeFloatForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float32(
      _self,
      _objc.getSelector("decodeFloatForKey:"),
      arg,
    );
  }

  static int decodeInt32ForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeInt32ForKey:"),
      arg,
    );
  }

  static int decodeInt64ForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeInt64ForKey:"),
      arg,
    );
  }

  static int decodeIntForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeIntForKey:"),
      arg,
    );
  }

  static int decodeIntegerForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeIntegerForKey:"),
      arg,
    );
  }

  static int decodeLongForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeLongForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeNXObject(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeNXObject"),
    );
  }

  static Pointer<Void> decodeObject(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObject"),
    );
  }

  static Pointer<Void> decodeObjectForKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeObjectForKey$error$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectForKey:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> decodeObjectOfClass$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClass:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> decodeObjectOfClass$forKey$error$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClass:forKey:error:"),
      arg,
      forKey,
      error,
    );
  }

  static Pointer<Void> decodeObjectOfClasses$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClasses:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> decodeObjectOfClasses$forKey$error$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClasses:forKey:error:"),
      arg,
      forKey,
      error,
    );
  }

  static Pointer<Void> decodePoint(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePoint"),
    );
  }

  static Pointer<Void> decodePointForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodePointForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodePropertyList(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyList"),
    );
  }

  static Pointer<Void> decodePropertyListForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyListForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeRect(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeRect"),
    );
  }

  static Pointer<Void> decodeRectForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeRectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeSize(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeSize"),
    );
  }

  static Pointer<Void> decodeSizeForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeSizeForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeTopLevelObjectAndReturnError(
    Pointer<NSCoder> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeTopLevelObjectAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> decodeTopLevelObjectForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeTopLevelObjectForKey:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> decodeTopLevelObjectOfClass(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeTopLevelObjectOfClass:forKey:error:"),
      arg,
      forKey,
      error,
    );
  }

  static Pointer<Void> decodeTopLevelObjectOfClasses(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeTopLevelObjectOfClasses:forKey:error:"),
      arg,
      forKey,
      error,
    );
  }

  static void decodeValueOfObjCType$at$(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void decodeValueOfObjCType$at$size$(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:size:"),
      arg,
      at,
      size,
    );
  }

  static void decodeValuesOfObjCTypes(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static int decodingFailurePolicy(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodingFailurePolicy"),
    );
  }

  static void encodeArrayOfObjCType(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static void encodeBool(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("encodeBool:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeBycopyObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeBycopyObject:"),
      arg,
    );
  }

  static void encodeByrefObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeByrefObject:"),
      arg,
    );
  }

  static void encodeBytes$length$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:forKey:"),
      arg,
      length,
      forKey,
    );
  }

  static void encodeBytes$length$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:"),
      arg,
      length,
    );
  }

  static void encodeConditionalObject$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeConditionalObject$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:"),
      arg,
    );
  }

  static void encodeDataObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeDouble(
    Pointer<NSCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("encodeDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeFloat(
    Pointer<NSCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_p_returns_void(
      _self,
      _objc.getSelector("encodeFloat:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt32(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt32:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt64(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInt64:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInteger(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInteger:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeLong(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeLong:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeNXObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeNXObject:"),
      arg,
    );
  }

  static void encodeObject$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:"),
      arg,
    );
  }

  static void encodePoint$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePoint:"),
      arg,
    );
  }

  static void encodePoint$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePoint:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodePropertyList(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePropertyList:"),
      arg,
    );
  }

  static void encodeRect$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRect:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeRect$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRect:"),
      arg,
    );
  }

  static void encodeRootObject(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRootObject:"),
      arg,
    );
  }

  static void encodeSize$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeSize:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeSize$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeSize:"),
      arg,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void encodeValuesOfObjCTypes(
    Pointer<NSCoder> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static Pointer<Void> error(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static void failWithError(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("failWithError:"),
      arg,
    );
  }

  static double geo_decodeGEOMachAbsoluteTimeForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("geo_decodeGEOMachAbsoluteTimeForKey:"),
      arg,
    );
  }

  static void geo_encodeGEOMachAbsoluteTime(
    Pointer<NSCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("geo_encodeGEOMachAbsoluteTime:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> ls_decodeArrayWithValuesOfClass(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("ls_decodeArrayWithValuesOfClass:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> ls_decodeDictionaryWithKeysOfClass$valuesOfClass$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> valuesOfClass,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "ls_decodeDictionaryWithKeysOfClass:valuesOfClass:forKey:"),
      arg,
      valuesOfClass,
      forKey,
    );
  }

  static Pointer<Void>
      ls_decodeDictionaryWithKeysOfClass$valuesOfClasses$forKey$(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> valuesOfClasses,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "ls_decodeDictionaryWithKeysOfClass:valuesOfClasses:forKey:"),
      arg,
      valuesOfClasses,
      forKey,
    );
  }

  static Pointer<Void> ls_decodeSetWithValuesOfClass(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("ls_decodeSetWithValuesOfClass:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Pointer<Void>> objectZone(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectZone"),
    );
  }

  static int requiresSecureCoding(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("requiresSecureCoding"),
    );
  }

  static void setAllowedClasses(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAllowedClasses:"),
      arg,
    );
  }

  static void setObjectZone(
    Pointer<NSCoder> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectZone:"),
      arg,
    );
  }

  static int systemVersion(
    Pointer<NSCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("systemVersion"),
    );
  }

  static int validateAllowedClass(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateAllowedClass:forKey:"),
      arg,
      forKey,
    );
  }

  static int validateClassSupportsSecureCoding(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateClassSupportsSecureCoding:"),
      arg,
    );
  }

  static int versionForClassName(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }

  static Pointer<Void> vn_decode3x3MatrixForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("vn_decode3x3MatrixForKey:"),
      arg,
    );
  }

  static Pointer<Void> vn_decode4x4MatrixForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("vn_decode4x4MatrixForKey:"),
      arg,
    );
  }

  static Pointer<Void> vn_decodeCGAffineTransformForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("vn_decodeCGAffineTransformForKey:"),
      arg,
    );
  }

  static int vn_decodeCodingVersionForKey(
    Pointer<NSCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint32(
      _self,
      _objc.getSelector("vn_decodeCodingVersionForKey:"),
      arg,
    );
  }

  static void vn_encode3x3Matrix(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("vn_encode3x3Matrix:forKey:"),
      arg,
      forKey,
    );
  }

  static void vn_encode4x4Matrix(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("vn_encode4x4Matrix:forKey:"),
      arg,
      forKey,
    );
  }

  static void vn_encodeCGAffineTransform(
    Pointer<NSCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("vn_encodeCGAffineTransform:forKey:"),
      arg,
      forKey,
    );
  }

  static void vn_encodeCodingVersion(
    Pointer<NSCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_returns_void(
      _self,
      _objc.getSelector("vn_encodeCodingVersion:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSCoercionHandler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCoercionHandler extends Struct<NSCoercionHandler> {
  factory NSCoercionHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSCoercionHandler> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCoercionHandler").cast<NSCoercionHandler>();
  }
}

/// Objective-C class _NSComparisonPredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSComparisonPredicate extends Struct<NSComparisonPredicate> {
  factory NSComparisonPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSComparisonPredicate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSComparisonPredicate")
        .cast<NSComparisonPredicate>();
  }

  static void acceptVisitor(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static int comparisonPredicateModifier(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("comparisonPredicateModifier"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> customSelector(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("customSelector"),
    );
  }

  static void dealloc(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static Pointer<Void> generateMetadataDescription(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generateMetadataDescription"),
    );
  }

  static int hash(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithLeftExpression$rightExpression$modifier$type$options$(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> rightExpression,
    @required int modifier,
    @required int type,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "initWithLeftExpression:rightExpression:modifier:type:options:"),
      arg,
      rightExpression,
      modifier,
      type,
      options,
    );
  }

  static Pointer<Void> initWithLeftExpression$rightExpression$customSelector$(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> rightExpression,
    @required Pointer<Void> customSelector,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithLeftExpression:rightExpression:customSelector:"),
      arg,
      rightExpression,
      customSelector,
    );
  }

  static Pointer<Void>
      initWithPredicateOperator$leftExpression$rightExpression$(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> leftExpression,
    @required Pointer<Void> rightExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithPredicateOperator:leftExpression:rightExpression:"),
      arg,
      leftExpression,
      rightExpression,
    );
  }

  static Pointer<Void> initWithPredicateOperator$leftKeyPath$rightValue$(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> leftKeyPath,
    @required Pointer<Void> rightValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPredicateOperator:leftKeyPath:rightValue:"),
      arg,
      leftKeyPath,
      rightValue,
    );
  }

  static Pointer<Void> initWithPredicateOperator$leftKeyPath$rightKeyPath$(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> leftKeyPath,
    @required Pointer<Void> rightKeyPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPredicateOperator:leftKeyPath:rightKeyPath:"),
      arg,
      leftKeyPath,
      rightKeyPath,
    );
  }

  static int isEqual(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyPathExpressionForString(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyPathExpressionForString:"),
      arg,
    );
  }

  static Pointer<Void> leftExpression(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftExpression"),
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static int options(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> predicateOperator(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateOperator"),
    );
  }

  static int predicateOperatorType(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("predicateOperatorType"),
    );
  }

  static Pointer<Void> predicateWithSubstitutionVariables(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateWithSubstitutionVariables:"),
      arg,
    );
  }

  static Pointer<Void> rightExpression(
    Pointer<NSComparisonPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightExpression"),
    );
  }

  static void setPredicateOperator(
    Pointer<NSComparisonPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPredicateOperator:"),
      arg,
    );
  }
}

/// Objective-C class _NSComparisonPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSComparisonPredicateOperator
    extends Struct<NSComparisonPredicateOperator> {
  factory NSComparisonPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSComparisonPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSComparisonPredicateOperator")
        .cast<NSComparisonPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$variant$(
    Pointer<NSComparisonPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int variant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:variant:"),
      arg,
      modifier,
      variant,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$variant$options$(
    Pointer<NSComparisonPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int variant,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:variant:options:"),
      arg,
      modifier,
      variant,
      options,
    );
  }

  static int isEqual(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofPredicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:ofPredicate:"),
      arg,
      ofPredicate,
    );
  }

  static int options(
    Pointer<NSComparisonPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSComparisonPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSComparisonPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static int variant(
    Pointer<NSComparisonPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("variant"),
    );
  }
}

/// Objective-C class _NSCompletionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCompletionCheckingResult extends Struct<NSCompletionCheckingResult> {
  factory NSCompletionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSCompletionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCompletionCheckingResult")
        .cast<NSCompletionCheckingResult>();
  }

  static int resultType(
    Pointer<NSCompletionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSComplexOrthography_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSComplexOrthography extends Struct<NSComplexOrthography> {
  factory NSComplexOrthography._() {
    throw UnimplementedError();
  }
  static Pointer<NSComplexOrthography> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSComplexOrthography").cast<NSComplexOrthography>();
  }

  static void dealloc(
    Pointer<NSComplexOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> dominantScript(
    Pointer<NSComplexOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantScript"),
    );
  }

  static Pointer<Void> initWithDominantScript(
    Pointer<NSComplexOrthography> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> languageMap,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDominantScript:languageMap:"),
      arg,
      languageMap,
    );
  }

  static Pointer<Void> languageMap(
    Pointer<NSComplexOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("languageMap"),
    );
  }

  static int orthographyFlags(
    Pointer<NSComplexOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("orthographyFlags"),
    );
  }
}

/// Objective-C class _NSComplexRegularExpressionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSComplexRegularExpressionCheckingResult
    extends Struct<NSComplexRegularExpressionCheckingResult> {
  factory NSComplexRegularExpressionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSComplexRegularExpressionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSComplexRegularExpressionCheckingResult")
        .cast<NSComplexRegularExpressionCheckingResult>();
  }

  static void dealloc(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithRangeArray(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRangeArray:regularExpression:"),
      arg,
      regularExpression,
    );
  }

  static Pointer<Void> initWithRanges(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithRanges:count:regularExpression:"),
      arg,
      count,
      regularExpression,
    );
  }

  static int numberOfRanges(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfRanges"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> rangeArray(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeArray"),
    );
  }

  static Pointer<Void> rangeAtIndex(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> regularExpression(
    Pointer<NSComplexRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularExpression"),
    );
  }
}

/// Objective-C class _NSCompoundPredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCompoundPredicate extends Struct<NSCompoundPredicate> {
  factory NSCompoundPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSCompoundPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCompoundPredicate").cast<NSCompoundPredicate>();
  }

  static void acceptVisitor(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static int compoundPredicateType(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("compoundPredicateType"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static Pointer<Void> generateMetadataDescription(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generateMetadataDescription"),
    );
  }

  static int hash(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSCompoundPredicate> _self,
    int arg, {
    @required Pointer<Void> subpredicates,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:subpredicates:"),
      arg,
      subpredicates,
    );
  }

  static int isEqual(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> predicateOperator(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateOperator"),
    );
  }

  static Pointer<Void> predicateWithSubstitutionVariables(
    Pointer<NSCompoundPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateWithSubstitutionVariables:"),
      arg,
    );
  }

  static Pointer<Void> subpredicates(
    Pointer<NSCompoundPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subpredicates"),
    );
  }
}

/// Objective-C class _NSCompoundPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCompoundPredicateOperator extends Struct<NSCompoundPredicateOperator> {
  factory NSCompoundPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSCompoundPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCompoundPredicateOperator")
        .cast<NSCompoundPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCompoundPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int evaluatePredicates$withObject$substitutionVariables$(
    Pointer<NSCompoundPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluatePredicates:withObject:substitutionVariables:"),
      arg,
      withObject,
      substitutionVariables,
    );
  }

  static int evaluatePredicates$withObject$(
    Pointer<NSCompoundPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluatePredicates:withObject:"),
      arg,
      withObject,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSCompoundPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofPredicates,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:ofPredicates:"),
      arg,
      ofPredicates,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSCompoundPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSCompoundPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSConcreteArrayChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteArrayChange extends Struct<NSConcreteArrayChange> {
  factory NSConcreteArrayChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteArrayChange> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteArrayChange")
        .cast<NSConcreteArrayChange>();
  }

  static int changeType(
    Pointer<NSConcreteArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int destinationIndex(
    Pointer<NSConcreteArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("destinationIndex"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSConcreteArrayChange> _self,
    int arg, {
    @required int sourceIndex,
    @required int destinationIndex,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:sourceIndex:destinationIndex:value:"),
      arg,
      sourceIndex,
      destinationIndex,
      value,
    );
  }

  static int sourceIndex(
    Pointer<NSConcreteArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sourceIndex"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSConcreteArrayChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSConcreteArrayChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteArrayChanges extends Struct<NSConcreteArrayChanges> {
  factory NSConcreteArrayChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteArrayChanges> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteArrayChanges")
        .cast<NSConcreteArrayChanges>();
  }

  static void addChange(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static void applyChangesToArray(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChangesToArray:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSConcreteArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSConcreteArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcreteArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void enumerateChanges(
    Pointer<NSConcreteArrayChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void getObjects(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteArrayChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSConcreteArrayChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSConcreteArrayChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static void sortRange(
    Pointer<NSConcreteArrayChanges> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingComparator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("sortRange:options:usingComparator:"),
      arg,
      options,
      usingComparator,
    );
  }
}

/// Objective-C class _NSConcreteAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteAttributedString extends Struct<NSConcreteAttributedString> {
  factory NSConcreteAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteAttributedString")
        .cast<NSConcreteAttributedString>();
  }

  static Pointer<Void> attribute(
    Pointer<NSConcreteAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:effectiveRange:"),
      arg,
      atIndex,
      effectiveRange,
    );
  }

  static Pointer<Void> attributesAtIndex(
    Pointer<NSConcreteAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteAttributedString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConcreteAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithAttributedString(
    Pointer<NSConcreteAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAttributedString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$(
    Pointer<NSConcreteAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$attributes$(
    Pointer<NSConcreteAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:attributes:"),
      arg,
      attributes,
    );
  }

  static int length(
    Pointer<NSConcreteAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> string(
    Pointer<NSConcreteAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSConcreteData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteData extends Struct<NSConcreteData> {
  factory NSConcreteData._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteData").cast<NSConcreteData>();
  }

  static Pointer<Void> bytes(
    Pointer<NSConcreteData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteData> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConcreteData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getBytes$range$(
    Pointer<NSConcreteData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getBytes:range:"),
      arg,
      range,
    );
  }

  static void getBytes$length$(
    Pointer<NSConcreteData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getBytes:length:"),
      arg,
      length,
    );
  }

  static void getBytes$(
    Pointer<NSConcreteData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getBytes:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes$length$copy$deallocator$(
    Pointer<NSConcreteData> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int copy,
    @required Pointer<Void> deallocator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:copy:deallocator:"),
      arg,
      length,
      copy,
      deallocator,
    );
  }

  static Pointer<Void> initWithBytes$length$copy$freeWhenDone$bytesAreVM$(
    Pointer<NSConcreteData> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int copy,
    @required int freeWhenDone,
    @required int bytesAreVM,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:copy:freeWhenDone:bytesAreVM:"),
      arg,
      length,
      copy,
      freeWhenDone,
      bytesAreVM,
    );
  }

  static int length(
    Pointer<NSConcreteData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

/// Objective-C class _NSConcreteDistantObjectRequest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteDistantObjectRequest
    extends Struct<NSConcreteDistantObjectRequest> {
  factory NSConcreteDistantObjectRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteDistantObjectRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteDistantObjectRequest")
        .cast<NSConcreteDistantObjectRequest>();
  }

  static Pointer<Void> connection(
    Pointer<NSConcreteDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static Pointer<Void> conversation(
    Pointer<NSConcreteDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conversation"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithInvocation(
    Pointer<NSConcreteDistantObjectRequest> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> conversation,
    @required int sequence,
    @required Pointer<Void> importedObjects,
    @required Pointer<Void> connection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithInvocation:conversation:sequence:importedObjects:connection:"),
      arg,
      conversation,
      sequence,
      importedObjects,
      connection,
    );
  }

  static Pointer<Void> invocation(
    Pointer<NSConcreteDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invocation"),
    );
  }

  static void replyWithException(
    Pointer<NSConcreteDistantObjectRequest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("replyWithException:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcreteFileHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteFileHandle extends Struct<NSConcreteFileHandle> {
  factory NSConcreteFileHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteFileHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteFileHandle").cast<NSConcreteFileHandle>();
  }

  static void acceptConnectionInBackgroundAndNotify(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("acceptConnectionInBackgroundAndNotify"),
    );
  }

  static void acceptConnectionInBackgroundAndNotifyForModes(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("acceptConnectionInBackgroundAndNotifyForModes:"),
      arg,
    );
  }

  static Pointer<Void> availableData(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availableData"),
    );
  }

  static void closeFile(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("closeFile"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fileDescriptor(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("fileDescriptor"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithFileDescriptor$closeOnDealloc$(
    Pointer<NSConcreteFileHandle> _self,
    int arg, {
    @required int closeOnDealloc,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Int8_returns_p(
      _self,
      _objc.getSelector("initWithFileDescriptor:closeOnDealloc:"),
      arg,
      closeOnDealloc,
    );
  }

  static Pointer<Void> initWithFileDescriptor$(
    Pointer<NSConcreteFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithFileDescriptor:"),
      arg,
    );
  }

  static Pointer<Void> initWithPath$flags$createMode$error$(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:flags:createMode:error:"),
      arg,
      flags,
      createMode,
      error,
    );
  }

  static Pointer<Void> initWithPath$flags$createMode$(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector("initWithPath:flags:createMode:"),
      arg,
      flags,
      createMode,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:flags:createMode:error:"),
      arg,
      flags,
      createMode,
      error,
    );
  }

  static int offsetInFile(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("offsetInFile"),
    );
  }

  static void performActivity(
    Pointer<NSConcreteFileHandle> _self,
    int arg, {
    @required Pointer<Void> modes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("performActivity:modes:"),
      arg,
      modes,
    );
  }

  static Pointer<Void> port(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("port"),
    );
  }

  static Pointer<Void> readDataOfLength$(
    Pointer<NSConcreteFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("readDataOfLength:"),
      arg,
    );
  }

  static int readDataOfLength$buffer$(
    Pointer<NSConcreteFileHandle> _self,
    int arg, {
    @required Pointer<Utf8> buffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("readDataOfLength:buffer:"),
      arg,
      buffer,
    );
  }

  static Pointer<Void> readDataToEndOfFile(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readDataToEndOfFile"),
    );
  }

  static void readInBackgroundAndNotify(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("readInBackgroundAndNotify"),
    );
  }

  static void readInBackgroundAndNotifyForModes(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("readInBackgroundAndNotifyForModes:"),
      arg,
    );
  }

  static void readToEndOfFileInBackgroundAndNotify(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("readToEndOfFileInBackgroundAndNotify"),
    );
  }

  static void readToEndOfFileInBackgroundAndNotifyForModes(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("readToEndOfFileInBackgroundAndNotifyForModes:"),
      arg,
    );
  }

  static Pointer<Void> readabilityHandler(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readabilityHandler"),
    );
  }

  static int seekToEndOfFile(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("seekToEndOfFile"),
    );
  }

  static void seekToFileOffset(
    Pointer<NSConcreteFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("seekToFileOffset:"),
      arg,
    );
  }

  static void setPort(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPort:"),
      arg,
    );
  }

  static void setReadabilityHandler(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReadabilityHandler:"),
      arg,
    );
  }

  static void setWriteabilityHandler(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWriteabilityHandler:"),
      arg,
    );
  }

  static void synchronizeFile(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("synchronizeFile"),
    );
  }

  static void truncateFileAtOffset(
    Pointer<NSConcreteFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("truncateFileAtOffset:"),
      arg,
    );
  }

  static void waitForDataInBackgroundAndNotify(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("waitForDataInBackgroundAndNotify"),
    );
  }

  static void waitForDataInBackgroundAndNotifyForModes(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("waitForDataInBackgroundAndNotifyForModes:"),
      arg,
    );
  }

  static void writeData(
    Pointer<NSConcreteFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static Pointer<Void> writeabilityHandler(
    Pointer<NSConcreteFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("writeabilityHandler"),
    );
  }
}

/// Objective-C class _NSConcreteHashTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteHashTable extends Struct<NSConcreteHashTable> {
  factory NSConcreteHashTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteHashTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteHashTable").cast<NSConcreteHashTable>();
  }

  static void addObject(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static Pointer<Void> allObjects(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjects"),
    );
  }

  static void assign(
    Pointer<NSConcreteHashTable> _self,
    int arg, {
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("assign:key:"),
      arg,
      key,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static int count(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> getItem(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("getItem:"),
      arg,
    );
  }

  static void getKeys(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Uint64> count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getKeys:count:"),
      arg,
      count,
    );
  }

  static int hash(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static void hashGrow(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("hashGrow"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSConcreteHashTable> _self,
    int arg, {
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:capacity:"),
      arg,
      capacity,
    );
  }

  static Pointer<Void> initWithPointerFunctions(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg, {
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithPointerFunctions:capacity:"),
      arg,
      capacity,
    );
  }

  static void insertItem(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertItem:"),
      arg,
    );
  }

  static void insertKnownAbsentItem(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertKnownAbsentItem:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static Pointer<Void> pointerFunctions(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointerFunctions"),
    );
  }

  static void raiseCountUnderflowException(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("raiseCountUnderflowException"),
    );
  }

  static void rehash(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rehash"),
    );
  }

  static int rehashAround(
    Pointer<NSConcreteHashTable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("rehashAround:"),
      arg,
    );
  }

  static void removeAllItems(
    Pointer<NSConcreteHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeItem(
    Pointer<NSConcreteHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItem:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcreteMapTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteMapTable extends Struct<NSConcreteMapTable> {
  factory NSConcreteMapTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteMapTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteMapTable").cast<NSConcreteMapTable>();
  }

  static Pointer<Void> allKeys(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> allValues(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allValues"),
    );
  }

  static void assign(
    Pointer<NSConcreteMapTable> _self,
    int arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> value,
    @required int isNew,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("assign:key:value:isNew:"),
      arg,
      key,
      value,
      isNew,
    );
  }

  static void checkCount(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("checkCount:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int containsKeys(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> values,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("containsKeys:values:count:"),
      arg,
      values,
      count,
    );
  }

  static Pointer<Void> copy(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static int count(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dump(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dump"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> existingItemForSetItem(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("existingItemForSetItem:forAbsentKey:"),
      arg,
      forAbsentKey,
    );
  }

  static int getKeys(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> values,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("getKeys:values:"),
      arg,
      values,
    );
  }

  static void grow(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("grow"),
    );
  }

  static int hash(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithKeyOptions(
    Pointer<NSConcreteMapTable> _self,
    int arg, {
    @required int valueOptions,
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKeyOptions:valueOptions:capacity:"),
      arg,
      valueOptions,
      capacity,
    );
  }

  static Pointer<Void> initWithKeyPointerFunctions(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> valuePointerFunctions,
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "initWithKeyPointerFunctions:valuePointerFunctions:capacity:"),
      arg,
      valuePointerFunctions,
      capacity,
    );
  }

  static int isEqual(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> keyPointerFunctions(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPointerFunctions"),
    );
  }

  static int mapMember(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> originalKey,
    @required Pointer<Pointer<Void>> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("mapMember:originalKey:value:"),
      arg,
      originalKey,
      value,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void raiseCountUnderflowException(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("raiseCountUnderflowException"),
    );
  }

  static int realCount(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("realCount"),
    );
  }

  static void rehash(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rehash"),
    );
  }

  static int rehashAround(
    Pointer<NSConcreteMapTable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("rehashAround:"),
      arg,
    );
  }

  static void removeAllItems(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeObjectForKey(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static void replaceItem(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forExistingKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceItem:forExistingKey:"),
      arg,
      forExistingKey,
    );
  }

  static void setItem$forAbsentKey$(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forAbsentKey:"),
      arg,
      forAbsentKey,
    );
  }

  static void setItem$forKnownAbsentKey$(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKnownAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forKnownAbsentKey:"),
      arg,
      forKnownAbsentKey,
    );
  }

  static void setObject(
    Pointer<NSConcreteMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> valuePointerFunctions(
    Pointer<NSConcreteMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valuePointerFunctions"),
    );
  }
}

/// Objective-C class _NSConcreteMapTableValueEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteMapTableValueEnumerator
    extends Struct<NSConcreteMapTableValueEnumerator> {
  factory NSConcreteMapTableValueEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteMapTableValueEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteMapTableValueEnumerator")
        .cast<NSConcreteMapTableValueEnumerator>();
  }

  static void dealloc(
    Pointer<NSConcreteMapTableValueEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSConcreteMapTableValueEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }
}

/// Objective-C class _NSConcreteMutableAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteMutableAttributedString
    extends Struct<NSConcreteMutableAttributedString> {
  factory NSConcreteMutableAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteMutableAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteMutableAttributedString")
        .cast<NSConcreteMutableAttributedString>();
  }

  static void addAttribute(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttribute:value:range:"),
      arg,
      value,
      range,
    );
  }

  static Pointer<Void> attribute$atIndex$effectiveRange$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:effectiveRange:"),
      arg,
      atIndex,
      effectiveRange,
    );
  }

  static Pointer<Void> attribute$atIndex$longestEffectiveRange$inRange$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
    @required Pointer<Pointer<Void>> longestEffectiveRange,
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("attribute:atIndex:longestEffectiveRange:inRange:"),
      arg,
      atIndex,
      longestEffectiveRange,
      inRange,
    );
  }

  static Pointer<Void> attributesAtIndex(
    Pointer<NSConcreteMutableAttributedString> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("attributesAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSConcreteMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void edited(
    Pointer<NSConcreteMutableAttributedString> _self,
    int arg, {
    @required Pointer<Void> range,
    @required int changeInLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_Int64_returns_void(
      _self,
      _objc.getSelector("edited:range:changeInLength:"),
      arg,
      range,
      changeInLength,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithAttributedString(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAttributedString:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$attributes$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:attributes:"),
      arg,
      attributes,
    );
  }

  static int length(
    Pointer<NSConcreteMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void replaceCharactersInRange$withString$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static void replaceCharactersInRange$withAttributedString$(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withAttributedString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withAttributedString:"),
      arg,
      withAttributedString,
    );
  }

  static void setAttributes(
    Pointer<NSConcreteMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributes:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> string(
    Pointer<NSConcreteMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSConcreteMutableData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteMutableData extends Struct<NSConcreteMutableData> {
  factory NSConcreteMutableData._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteMutableData> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteMutableData")
        .cast<NSConcreteMutableData>();
  }

  static void appendBytes(
    Pointer<NSConcreteMutableData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("appendBytes:length:"),
      arg,
      length,
    );
  }

  static void appendData(
    Pointer<NSConcreteMutableData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendData:"),
      arg,
    );
  }

  static Pointer<Void> bytes(
    Pointer<NSConcreteMutableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteMutableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void increaseLengthBy(
    Pointer<NSConcreteMutableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("increaseLengthBy:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteMutableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSConcreteMutableData> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int copy,
    @required Pointer<Void> deallocator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:copy:deallocator:"),
      arg,
      length,
      copy,
      deallocator,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSConcreteMutableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithLength(
    Pointer<NSConcreteMutableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithLength:"),
      arg,
    );
  }

  static int length(
    Pointer<NSConcreteMutableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableBytes(
    Pointer<NSConcreteMutableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableBytes"),
    );
  }

  static void replaceBytesInRange(
    Pointer<NSConcreteMutableData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBytes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceBytesInRange:withBytes:"),
      arg,
      withBytes,
    );
  }

  static void resetBytesInRange(
    Pointer<NSConcreteMutableData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resetBytesInRange:"),
      arg,
    );
  }

  static void setLength(
    Pointer<NSConcreteMutableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLength:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcreteNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteNotification extends Struct<NSConcreteNotification> {
  factory NSConcreteNotification._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteNotification> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteNotification")
        .cast<NSConcreteNotification>();
  }

  static void dealloc(
    Pointer<NSConcreteNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSConcreteNotification> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:object:userInfo:"),
      arg,
      object,
      userInfo,
    );
  }

  static Pointer<Void> name(
    Pointer<NSConcreteNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> object(
    Pointer<NSConcreteNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("object"),
    );
  }

  static void recycle(
    Pointer<NSConcreteNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("recycle"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSConcreteNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSConcreteObservationBuffer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteObservationBuffer extends Struct<NSConcreteObservationBuffer> {
  factory NSConcreteObservationBuffer._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteObservationBuffer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteObservationBuffer")
        .cast<NSConcreteObservationBuffer>();
  }

  static int automaticallyEmitsObjects(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticallyEmitsObjects"),
    );
  }

  static Pointer<Void> bufferFullHandler(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bufferFullHandler"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void emitAllObjects(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("emitAllObjects"),
    );
  }

  static void emitObject(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("emitObject"),
    );
  }

  static Pointer<Void> initWithMaximumObjectCount(
    Pointer<NSConcreteObservationBuffer> _self,
    int arg, {
    @required int fullPolicy,
    @required Pointer<Void> outputQueue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithMaximumObjectCount:fullPolicy:outputQueue:"),
      arg,
      fullPolicy,
      outputQueue,
    );
  }

  static int isMemoryPressureSensitive(
    Pointer<NSConcreteObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMemoryPressureSensitive"),
    );
  }

  static void setAutomaticallyEmitsObjects(
    Pointer<NSConcreteObservationBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticallyEmitsObjects:"),
      arg,
    );
  }

  static void setBufferFullHandler(
    Pointer<NSConcreteObservationBuffer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBufferFullHandler:"),
      arg,
    );
  }

  static void setMemoryPressureSensitive(
    Pointer<NSConcreteObservationBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMemoryPressureSensitive:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcreteOrderedSetChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteOrderedSetChange extends Struct<NSConcreteOrderedSetChange> {
  factory NSConcreteOrderedSetChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteOrderedSetChange> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteOrderedSetChange")
        .cast<NSConcreteOrderedSetChange>();
  }

  static int changeType(
    Pointer<NSConcreteOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int destinationIndex(
    Pointer<NSConcreteOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("destinationIndex"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSConcreteOrderedSetChange> _self,
    int arg, {
    @required int sourceIndex,
    @required int destinationIndex,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:sourceIndex:destinationIndex:value:"),
      arg,
      sourceIndex,
      destinationIndex,
      value,
    );
  }

  static int sourceIndex(
    Pointer<NSConcreteOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sourceIndex"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSConcreteOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSConcreteOrderedSetChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteOrderedSetChanges extends Struct<NSConcreteOrderedSetChanges> {
  factory NSConcreteOrderedSetChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteOrderedSetChanges> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteOrderedSetChanges")
        .cast<NSConcreteOrderedSetChanges>();
  }

  static void addChange(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSConcreteOrderedSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSConcreteOrderedSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcreteOrderedSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void enumerateChanges(
    Pointer<NSConcreteOrderedSetChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void getObjects(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteOrderedSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSConcreteOrderedSetChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static void sortRange(
    Pointer<NSConcreteOrderedSetChanges> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingComparator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("sortRange:options:usingComparator:"),
      arg,
      options,
      usingComparator,
    );
  }
}

/// Objective-C class _NSConcretePipe_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcretePipe extends Struct<NSConcretePipe> {
  factory NSConcretePipe._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcretePipe> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcretePipe").cast<NSConcretePipe>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcretePipe> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConcretePipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> fileHandleForReading(
    Pointer<NSConcretePipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileHandleForReading"),
    );
  }

  static Pointer<Void> fileHandleForWriting(
    Pointer<NSConcretePipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileHandleForWriting"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcretePipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSConcretePointerArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcretePointerArray extends Struct<NSConcretePointerArray> {
  factory NSConcretePointerArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcretePointerArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcretePointerArray")
        .cast<NSConcretePointerArray>();
  }

  static void addPointer(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPointer:"),
      arg,
    );
  }

  static void arrayGrow(
    Pointer<NSConcretePointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("arrayGrow:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void compact(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("compact"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indexOfPointer(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfPointer:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSConcretePointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static Pointer<Void> initWithPointerFunctions(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPointerFunctions:"),
      arg,
    );
  }

  static void insertPointer(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertPointer:atIndex:"),
      arg,
      atIndex,
    );
  }

  static int isEqual(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> pointerAtIndex(
    Pointer<NSConcretePointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("pointerAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> pointerFunctions(
    Pointer<NSConcretePointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointerFunctions"),
    );
  }

  static void removePointer(
    Pointer<NSConcretePointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePointer:"),
      arg,
    );
  }

  static void removePointerAtIndex(
    Pointer<NSConcretePointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removePointerAtIndex:"),
      arg,
    );
  }

  static void replacePointerAtIndex(
    Pointer<NSConcretePointerArray> _self,
    int arg, {
    @required Pointer<Void> withPointer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replacePointerAtIndex:withPointer:"),
      arg,
      withPointer,
    );
  }

  static void setCount(
    Pointer<NSConcretePointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCount:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcretePointerFunctions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcretePointerFunctions extends Struct<NSConcretePointerFunctions> {
  factory NSConcretePointerFunctions._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcretePointerFunctions> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcretePointerFunctions")
        .cast<NSConcretePointerFunctions>();
  }

  static Pointer<Pointer<Void>> acquireFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acquireFunction"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> descriptionFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionFunction"),
    );
  }

  static int hash(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Pointer<Void>> hashFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("hashFunction"),
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSConcretePointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> isEqualFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isEqualFunction"),
    );
  }

  static Pointer<Pointer<Void>> relinquishFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relinquishFunction"),
    );
  }

  static void setAcquireFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcquireFunction:"),
      arg,
    );
  }

  static void setDescriptionFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDescriptionFunction:"),
      arg,
    );
  }

  static void setHashFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setHashFunction:"),
      arg,
    );
  }

  static void setIsEqualFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIsEqualFunction:"),
      arg,
    );
  }

  static void setRelinquishFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelinquishFunction:"),
      arg,
    );
  }

  static void setSizeFunction(
    Pointer<NSConcretePointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSizeFunction:"),
      arg,
    );
  }

  static void setUsesStrongWriteBarrier(
    Pointer<NSConcretePointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesStrongWriteBarrier:"),
      arg,
    );
  }

  static void setUsesWeakReadAndWriteBarriers(
    Pointer<NSConcretePointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesWeakReadAndWriteBarriers:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> sizeFunction(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sizeFunction"),
    );
  }

  static int usesStrongWriteBarrier(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesStrongWriteBarrier"),
    );
  }

  static int usesWeakReadAndWriteBarriers(
    Pointer<NSConcretePointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesWeakReadAndWriteBarriers"),
    );
  }
}

/// Objective-C class _NSConcretePortCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcretePortCoder extends Struct<NSConcretePortCoder> {
  factory NSConcretePortCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcretePortCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcretePortCoder").cast<NSConcretePortCoder>();
  }

  static void dealloc(
    Pointer<NSConcretePortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSConcreteProtocolChecker_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteProtocolChecker extends Struct<NSConcreteProtocolChecker> {
  factory NSConcreteProtocolChecker._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteProtocolChecker> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConcreteProtocolChecker")
        .cast<NSConcreteProtocolChecker>();
  }

  static void dealloc(
    Pointer<NSConcreteProtocolChecker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSConcreteProtocolChecker> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> protocol,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:protocol:"),
      arg,
      protocol,
    );
  }

  static Pointer<Void> protocol(
    Pointer<NSConcreteProtocolChecker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protocol"),
    );
  }

  static Pointer<Void> target(
    Pointer<NSConcreteProtocolChecker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("target"),
    );
  }
}

/// Objective-C class _NSConcreteScanner_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteScanner extends Struct<NSConcreteScanner> {
  factory NSConcreteScanner._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteScanner> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteScanner").cast<NSConcreteScanner>();
  }

  static int caseSensitive(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("caseSensitive"),
    );
  }

  static Pointer<Void> charactersToBeSkipped(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("charactersToBeSkipped"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSConcreteScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> locale(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static int scanInt(
    Pointer<NSConcreteScanner> _self,
    Pointer<Int32> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanInt:"),
      arg,
    );
  }

  static int scanLocation(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("scanLocation"),
    );
  }

  static int scanLongLong(
    Pointer<NSConcreteScanner> _self,
    Pointer<Int64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanLongLong:"),
      arg,
    );
  }

  static void setCaseSensitive(
    Pointer<NSConcreteScanner> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCaseSensitive:"),
      arg,
    );
  }

  static void setCharactersToBeSkipped(
    Pointer<NSConcreteScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCharactersToBeSkipped:"),
      arg,
    );
  }

  static void setLocale(
    Pointer<NSConcreteScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setScanLocation(
    Pointer<NSConcreteScanner> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setScanLocation:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<NSConcreteScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSConcreteSetChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteSetChange extends Struct<NSConcreteSetChange> {
  factory NSConcreteSetChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteSetChange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteSetChange").cast<NSConcreteSetChange>();
  }

  static int changeType(
    Pointer<NSConcreteSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSConcreteSetChange> _self,
    int arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:object:"),
      arg,
      object,
    );
  }

  static Pointer<Void> value(
    Pointer<NSConcreteSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSConcreteSetChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteSetChanges extends Struct<NSConcreteSetChanges> {
  factory NSConcreteSetChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteSetChanges> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteSetChanges").cast<NSConcreteSetChanges>();
  }

  static void addChange(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void enumerateChanges(
    Pointer<NSConcreteSetChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void filterObjectsWithTest(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("filterObjectsWithTest:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSConcreteSetChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> initWithSet(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSet:"),
      arg,
    );
  }

  static void intersectSet(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectSet:"),
      arg,
    );
  }

  static Pointer<Void> member(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static void minusSet(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusSet:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static void removeAllObjects(
    Pointer<NSConcreteSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void setSet(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSet:"),
      arg,
    );
  }

  static void transformObjectsWithBlock(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("transformObjectsWithBlock:"),
      arg,
    );
  }

  static void unionSet(
    Pointer<NSConcreteSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionSet:"),
      arg,
    );
  }
}

/// Objective-C class _NSConcreteTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteTask extends Struct<NSConcreteTask> {
  factory NSConcreteTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteTask> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteTask").cast<NSConcreteTask>();
  }

  static Pointer<Void> arguments(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> currentDirectoryPath(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentDirectoryPath"),
    );
  }

  static void dealloc(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> environment(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("environment"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void interrupt(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("interrupt"),
    );
  }

  static int isRunning(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRunning"),
    );
  }

  static void launch(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("launch"),
    );
  }

  static int launchAndReturnError(
    Pointer<NSConcreteTask> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("launchAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> launchPath(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("launchPath"),
    );
  }

  static int launchWithDictionary(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("launchWithDictionary:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> preferredArchitectures(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preferredArchitectures"),
    );
  }

  static int processIdentifier(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("processIdentifier"),
    );
  }

  static int qualityOfService(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static int resume(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static void setArguments(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArguments:"),
      arg,
    );
  }

  static void setCurrentDirectoryPath(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentDirectoryPath:"),
      arg,
    );
  }

  static void setEnvironment(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEnvironment:"),
      arg,
    );
  }

  static void setLaunchPath(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLaunchPath:"),
      arg,
    );
  }

  static void setPreferredArchitectures(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreferredArchitectures:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSConcreteTask> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setStandardError(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardError:"),
      arg,
    );
  }

  static void setStandardInput(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardInput:"),
      arg,
    );
  }

  static void setStandardOutput(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardOutput:"),
      arg,
    );
  }

  static void setStartsNewProcessGroup(
    Pointer<NSConcreteTask> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStartsNewProcessGroup:"),
      arg,
    );
  }

  static void setTaskDictionary(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTaskDictionary:"),
      arg,
    );
  }

  static void setTerminationHandler(
    Pointer<NSConcreteTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTerminationHandler:"),
      arg,
    );
  }

  static Pointer<Void> standardError(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardError"),
    );
  }

  static Pointer<Void> standardInput(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardInput"),
    );
  }

  static Pointer<Void> standardOutput(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardOutput"),
    );
  }

  static int suspend(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suspend"),
    );
  }

  static int suspendCount(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("suspendCount"),
    );
  }

  static Pointer<Void> taskDictionary(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("taskDictionary"),
    );
  }

  static void terminate(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("terminate"),
    );
  }

  static void terminateTask(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("terminateTask"),
    );
  }

  static Pointer<Void> terminationHandler(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("terminationHandler"),
    );
  }

  static int terminationReason(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("terminationReason"),
    );
  }

  static int terminationStatus(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("terminationStatus"),
    );
  }

  static void waitUntilExit(
    Pointer<NSConcreteTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("waitUntilExit"),
    );
  }
}

/// Objective-C class _NSConcreteValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConcreteValue extends Struct<NSConcreteValue> {
  factory NSConcreteValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSConcreteValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConcreteValue").cast<NSConcreteValue>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConcreteValue> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSConcreteValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConcreteValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getValue$(
    Pointer<NSConcreteValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getValue:"),
      arg,
    );
  }

  static void getValue$size$(
    Pointer<NSConcreteValue> _self,
    Pointer<Void> arg, {
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getValue:size:"),
      arg,
      size,
    );
  }

  static int hash(
    Pointer<NSConcreteValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqualToValue(
    Pointer<NSConcreteValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToValue:"),
      arg,
    );
  }

  static Pointer<Utf8> objCType(
    Pointer<NSConcreteValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objCType"),
    );
  }
}

/// Objective-C class _NSCondition_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCondition extends Struct<NSCondition> {
  factory NSCondition._() {
    throw UnimplementedError();
  }
  static Pointer<NSCondition> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCondition").cast<NSCondition>();
  }

  static void broadcast(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("broadcast"),
    );
  }

  static void dealloc(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void lock(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSCondition> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void signal(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("signal"),
    );
  }

  static void unlock(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }

  static void wait(
    Pointer<NSCondition> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("wait"),
    );
  }

  static int waitUntilDate(
    Pointer<NSCondition> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("waitUntilDate:"),
      arg,
    );
  }
}

/// Objective-C class _NSConditionLock_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConditionLock extends Struct<NSConditionLock> {
  factory NSConditionLock._() {
    throw UnimplementedError();
  }
  static Pointer<NSConditionLock> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConditionLock").cast<NSConditionLock>();
  }

  static int condition(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("condition"),
    );
  }

  static void dealloc(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCondition(
    Pointer<NSConditionLock> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithCondition:"),
      arg,
    );
  }

  static void lock(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static int lockBeforeDate(
    Pointer<NSConditionLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("lockBeforeDate:"),
      arg,
    );
  }

  static int lockWhenCondition$beforeDate$(
    Pointer<NSConditionLock> _self,
    int arg, {
    @required Pointer<Void> beforeDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector("lockWhenCondition:beforeDate:"),
      arg,
      beforeDate,
    );
  }

  static void lockWhenCondition$(
    Pointer<NSConditionLock> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("lockWhenCondition:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSConditionLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static int tryLock(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static int tryLockWhenCondition(
    Pointer<NSConditionLock> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("tryLockWhenCondition:"),
      arg,
    );
  }

  static void unlock(
    Pointer<NSConditionLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }

  static void unlockWithCondition(
    Pointer<NSConditionLock> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("unlockWithCondition:"),
      arg,
    );
  }
}

/// Objective-C class _NSConnection_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConnection extends Struct<NSConnection> {
  factory NSConnection._() {
    throw UnimplementedError();
  }
  static Pointer<NSConnection> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConnection").cast<NSConnection>();
  }

  static void addClassNamed(
    Pointer<NSConnection> _self,
    Pointer<Utf8> arg, {
    @required int version,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addClassNamed:version:"),
      arg,
      version,
    );
  }

  static void addPortsToRunLoop(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPortsToRunLoop:"),
      arg,
    );
  }

  static void addRequestMode(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addRequestMode:"),
      arg,
    );
  }

  static void addRunLoop(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addRunLoop:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decodeReleasedProxies(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeReleasedProxies:"),
      arg,
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dispatchInvocation(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dispatchInvocation:"),
      arg,
    );
  }

  static void dispatchWithComponents(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("dispatchWithComponents:"),
      arg,
    );
  }

  static void enableMultipleThreads(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableMultipleThreads"),
    );
  }

  static void encodeReleasedProxies(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeReleasedProxies:"),
      arg,
    );
  }

  static void handleKeyedReleasedProxies(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleKeyedReleasedProxies:"),
      arg,
    );
  }

  static void handlePortCoder(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePortCoder:"),
      arg,
    );
  }

  static void handlePortMessage(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePortMessage:"),
      arg,
    );
  }

  static void handleRequest(
    Pointer<NSConnection> _self,
    Pointer<Void> arg, {
    @required int sequence,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("handleRequest:sequence:"),
      arg,
      sequence,
    );
  }

  static void handleUnkeyedReleasedProxies(
    Pointer<NSConnection> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("handleUnkeyedReleasedProxies:length:"),
      arg,
      length,
    );
  }

  static int hasRunLoop(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasRunLoop:"),
      arg,
    );
  }

  static int independentConversationQueueing(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("independentConversationQueueing"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithReceivePort(
    Pointer<NSConnection> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> sendPort,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReceivePort:sendPort:"),
      arg,
      sendPort,
    );
  }

  static void invalidate(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isValid(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static Pointer<Void> keyedRootObject(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyedRootObject"),
    );
  }

  static Pointer<Void> localObjects(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localObjects"),
    );
  }

  static int multipleThreadsEnabled(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("multipleThreadsEnabled"),
    );
  }

  static Pointer<Void> newConversation(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("newConversation"),
    );
  }

  static Pointer<Void> portCoderWithComponents(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("portCoderWithComponents:"),
      arg,
    );
  }

  static Pointer<Void> receivePort(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("receivePort"),
    );
  }

  static int registerName$withNameServer$(
    Pointer<NSConnection> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withNameServer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerName:withNameServer:"),
      arg,
      withNameServer,
    );
  }

  static int registerName$(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerName:"),
      arg,
    );
  }

  static void release(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void releaseWireID(
    Pointer<NSConnection> _self,
    int arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_Uint64_returns_void(
      _self,
      _objc.getSelector("releaseWireID:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> remoteObjects(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjects"),
    );
  }

  static void removePortsFromRunLoop(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePortsFromRunLoop:"),
      arg,
    );
  }

  static void removeRequestMode(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeRequestMode:"),
      arg,
    );
  }

  static void removeRunLoop(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeRunLoop:"),
      arg,
    );
  }

  static Pointer<Void> replyMode(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("replyMode"),
    );
  }

  static double replyTimeout(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("replyTimeout"),
    );
  }

  static Pointer<Void> requestModes(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestModes"),
    );
  }

  static double requestTimeout(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("requestTimeout"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static void returnResult(
    Pointer<NSConnection> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> exception,
    @required int sequence,
    @required Pointer<Void> imports,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_p_returns_void(
      _self,
      _objc.getSelector("returnResult:exception:sequence:imports:"),
      arg,
      exception,
      sequence,
      imports,
    );
  }

  static Pointer<Void> rootObject(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootObject"),
    );
  }

  static Pointer<Void> rootProxy(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootProxy"),
    );
  }

  static void run(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("run"),
    );
  }

  static void runInNewThread(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("runInNewThread"),
    );
  }

  static void sendInvocation$internal$(
    Pointer<NSConnection> _self,
    Pointer<Void> arg, {
    @required int internal,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("sendInvocation:internal:"),
      arg,
      internal,
    );
  }

  static void sendInvocation$(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("sendInvocation:"),
      arg,
    );
  }

  static Pointer<Void> sendPort(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendPort"),
    );
  }

  static void sendReleasedProxies(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("sendReleasedProxies"),
    );
  }

  static int sendWireCountForWireID(
    Pointer<NSConnection> _self,
    int arg, {
    @required Pointer<Void> port,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_returns_Int8(
      _self,
      _objc.getSelector("sendWireCountForWireID:port:"),
      arg,
      port,
    );
  }

  static void setDelegate(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setIndependentConversationQueueing(
    Pointer<NSConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIndependentConversationQueueing:"),
      arg,
    );
  }

  static void setReplyMode(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReplyMode:"),
      arg,
    );
  }

  static void setReplyTimeout(
    Pointer<NSConnection> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setReplyTimeout:"),
      arg,
    );
  }

  static void setRequestTimeout(
    Pointer<NSConnection> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setRequestTimeout:"),
      arg,
    );
  }

  static void setRootObject(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootObject:"),
      arg,
    );
  }

  static Pointer<Void> statistics(
    Pointer<NSConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("statistics"),
    );
  }

  static int versionForClassNamed(
    Pointer<NSConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("versionForClassNamed:"),
      arg,
    );
  }
}

/// Objective-C class _NSConnectionHelper_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConnectionHelper extends Struct<NSConnectionHelper> {
  factory NSConnectionHelper._() {
    throw UnimplementedError();
  }
  static Pointer<NSConnectionHelper> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConnectionHelper").cast<NSConnectionHelper>();
  }

  static void dealloc(
    Pointer<NSConnectionHelper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSConnectionHelper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setWhitelist(
    Pointer<NSConnectionHelper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWhitelist:"),
      arg,
    );
  }
}

/// Objective-C class _NSConstantString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConstantString extends Struct<NSConstantString> {
  factory NSConstantString._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstantString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSConstantString").cast<NSConstantString>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Utf8> cString(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cString"),
    );
  }

  static int cStringLength(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cStringLength"),
    );
  }

  static int canBeConvertedToEncoding(
    Pointer<NSConstantString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToEncoding:"),
      arg,
    );
  }

  static int characterAtIndex(
    Pointer<NSConstantString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static int compare(
    Pointer<NSConstantString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int64(
      _self,
      _objc.getSelector("compare:options:range:"),
      arg,
      options,
      range,
    );
  }

  static Pointer<Void> copy(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConstantString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fastestEncoding(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fastestEncoding"),
    );
  }

  static void getCharacters(
    Pointer<NSConstantString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static int hash(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCharactersNoCopy(
    Pointer<NSConstantString> _self,
    Pointer<Uint16> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCharactersNoCopy:length:"),
      arg,
      length,
    );
  }

  static int isEqual(
    Pointer<NSConstantString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToString(
    Pointer<NSConstantString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Utf8> lossyCString(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lossyCString"),
    );
  }

  static void release(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int smallestEncoding(
    Pointer<NSConstantString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("smallestEncoding"),
    );
  }
}

/// Objective-C class _NSConstantValueExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSConstantValueExpression extends Struct<NSConstantValueExpression> {
  factory NSConstantValueExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSConstantValueExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSConstantValueExpression")
        .cast<NSConstantValueExpression>();
  }

  static Pointer<Void> constantValue(
    Pointer<NSConstantValueExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constantValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSConstantValueExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject$context$(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> expressionValueWithObject$(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSConstantValueExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithObject(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSConstantValueExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSConstantValueExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSContentSizeLayoutConstraint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSContentSizeLayoutConstraint
    extends Struct<NSContentSizeLayoutConstraint> {
  factory NSContentSizeLayoutConstraint._() {
    throw UnimplementedError();
  }
  static Pointer<NSContentSizeLayoutConstraint> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSContentSizeLayoutConstraint")
        .cast<NSContentSizeLayoutConstraint>();
  }

  static double compressionResistancePriority(
    Pointer<NSContentSizeLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("compressionResistancePriority"),
    );
  }

  static double huggingPriority(
    Pointer<NSContentSizeLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("huggingPriority"),
    );
  }

  static Pointer<Void> initWithLayoutItem(
    Pointer<NSContentSizeLayoutConstraint> _self,
    Pointer<Void> arg, {
    @required double value,
    @required double huggingPriority,
    @required double compressionResistancePriority,
    @required int orientation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_float64_Int64_returns_p(
      _self,
      _objc.getSelector(
          "initWithLayoutItem:value:huggingPriority:compressionResistancePriority:orientation:"),
      arg,
      value,
      huggingPriority,
      compressionResistancePriority,
      orientation,
    );
  }

  static double priorityForVariable(
    Pointer<NSContentSizeLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("priorityForVariable:"),
      arg,
    );
  }
}

/// Objective-C class _NSCorrectionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCorrectionCheckingResult extends Struct<NSCorrectionCheckingResult> {
  factory NSCorrectionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSCorrectionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCorrectionCheckingResult")
        .cast<NSCorrectionCheckingResult>();
  }

  static Pointer<Void> alternativeStrings(
    Pointer<NSCorrectionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alternativeStrings"),
    );
  }

  static void dealloc(
    Pointer<NSCorrectionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSCorrectionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSCorrectionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCorrectionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSCorrectionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> replacementString,
    @required Pointer<Void> alternativeStrings,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:replacementString:alternativeStrings:"),
      arg,
      replacementString,
      alternativeStrings,
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSCorrectionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSCorrectionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSCountCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCountCommand extends Struct<NSCountCommand> {
  factory NSCountCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSCountCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCountCommand").cast<NSCountCommand>();
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSCountCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }
}

/// Objective-C class _NSCountedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCountedSet extends Struct<NSCountedSet> {
  factory NSCountedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSCountedSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCountedSet").cast<NSCountedSet>();
  }

  static void addObject(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSCountedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCountedSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSCountedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSCountedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static int countForObject(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countForObject:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSCountedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> descriptionWithLocale(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithLocale:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getObjects(
    Pointer<NSCountedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getObjects:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> init(
    Pointer<NSCountedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithArray(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithArray:"),
      arg,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSCountedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSCountedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> initWithSet$(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSet:"),
      arg,
    );
  }

  static Pointer<Void> initWithSet$copyItems$(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg, {
    @required int copyItems,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithSet:copyItems:"),
      arg,
      copyItems,
    );
  }

  static Pointer<Void> member(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSCountedSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSCountedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static void removeObject(
    Pointer<NSCountedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }
}

/// Objective-C class _NSCreateCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCreateCommand extends Struct<NSCreateCommand> {
  factory NSCreateCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSCreateCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSCreateCommand").cast<NSCreateCommand>();
  }

  static Pointer<Void> createClassDescription(
    Pointer<NSCreateCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createClassDescription"),
    );
  }

  static void dealloc(
    Pointer<NSCreateCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSCreateCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> initWithCommandDescription(
    Pointer<NSCreateCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCommandDescription:"),
      arg,
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSCreateCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static Pointer<Void> resolvedKeyDictionary(
    Pointer<NSCreateCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resolvedKeyDictionary"),
    );
  }
}

/// Objective-C class _NSCreateCommandMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCreateCommandMoreIVars extends Struct<NSCreateCommandMoreIVars> {
  factory NSCreateCommandMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSCreateCommandMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCreateCommandMoreIVars")
        .cast<NSCreateCommandMoreIVars>();
  }
}

/// Objective-C class _NSCustomPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSCustomPredicateOperator extends Struct<NSCustomPredicateOperator> {
  factory NSCustomPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSCustomPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSCustomPredicateOperator")
        .cast<NSCustomPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCustomSelector(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Void> arg, {
    @required int modifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCustomSelector:modifier:"),
      arg,
      modifier,
    );
  }

  static int isEqual(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSCustomPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> selector(
    Pointer<NSCustomPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSCustomPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSDOStreamData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDOStreamData extends Struct<NSDOStreamData> {
  factory NSDOStreamData._() {
    throw UnimplementedError();
  }
  static Pointer<NSDOStreamData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDOStreamData").cast<NSDOStreamData>();
  }

  static Pointer<Void> bytes(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static void dealloc(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void finalize(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int length(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableBytes(
    Pointer<NSDOStreamData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableBytes"),
    );
  }
}

/// Objective-C class _NSDashCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDashCheckingResult extends Struct<NSDashCheckingResult> {
  factory NSDashCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSDashCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDashCheckingResult").cast<NSDashCheckingResult>();
  }

  static int resultType(
    Pointer<NSDashCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSDataDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDataDetector extends Struct<NSDataDetector> {
  factory NSDataDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSDataDetector> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDataDetector").cast<NSDataDetector>();
  }

  static int checkingTypes(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("checkingTypes"),
    );
  }

  static void dealloc(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDataDetector> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateMatchesInString(
    Pointer<NSDataDetector> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateMatchesInString:options:range:usingBlock:"),
      arg,
      options,
      range,
      usingBlock,
    );
  }

  static int hash(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDataDetector> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPattern(
    Pointer<NSDataDetector> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPattern:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithTypes(
    Pointer<NSDataDetector> _self,
    int arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithTypes:error:"),
      arg,
      error,
    );
  }

  static int isEqual(
    Pointer<NSDataDetector> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int numberOfCaptureGroups(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfCaptureGroups"),
    );
  }

  static int options(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer<Void> pattern(
    Pointer<NSDataDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pattern"),
    );
  }
}

/// Objective-C class _NSDateCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDateCheckingResult extends Struct<NSDateCheckingResult> {
  factory NSDateCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSDateCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDateCheckingResult").cast<NSDateCheckingResult>();
  }

  static Pointer<Void> date(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("date"),
    );
  }

  static void dealloc(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double duration(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("duration"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithRange$date$timeZone$duration$referenceDate$underlyingResult$timeIsSignificant$timeIsApproximate$timeIsPast$leadingText$trailingText$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
    @required Pointer<Void> referenceDate,
    @required Pointer<Void> underlyingResult,
    @required int timeIsSignificant,
    @required int timeIsApproximate,
    @required int timeIsPast,
    @required Pointer<Void> leadingText,
    @required Pointer<Void> trailingText,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithRange:date:timeZone:duration:referenceDate:underlyingResult:timeIsSignificant:timeIsApproximate:timeIsPast:leadingText:trailingText:"),
      arg,
      date,
      timeZone,
      duration,
      referenceDate,
      underlyingResult,
      timeIsSignificant,
      timeIsApproximate,
      timeIsPast,
      leadingText,
      trailingText,
    );
  }

  static Pointer<Void> initWithRange$date$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:date:"),
      arg,
      date,
    );
  }

  static Pointer<Void> initWithRange$date$timeZone$duration$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithRange:date:timeZone:duration:"),
      arg,
      date,
      timeZone,
      duration,
    );
  }

  static Pointer<Void> initWithRange$date$timeZone$duration$referenceDate$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
    @required Pointer<Void> referenceDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:date:timeZone:duration:referenceDate:"),
      arg,
      date,
      timeZone,
      duration,
      referenceDate,
    );
  }

  static Pointer<Void>
      initWithRange$date$timeZone$duration$referenceDate$underlyingResult$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
    @required Pointer<Void> referenceDate,
    @required Pointer<Void> underlyingResult,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithRange:date:timeZone:duration:referenceDate:underlyingResult:"),
      arg,
      date,
      timeZone,
      duration,
      referenceDate,
      underlyingResult,
    );
  }

  static Pointer<Void>
      initWithRange$date$timeZone$duration$referenceDate$underlyingResult$timeIsSignificant$timeIsApproximate$timeIsPast$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
    @required Pointer<Void> referenceDate,
    @required Pointer<Void> underlyingResult,
    @required int timeIsSignificant,
    @required int timeIsApproximate,
    @required int timeIsPast,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithRange:date:timeZone:duration:referenceDate:underlyingResult:timeIsSignificant:timeIsApproximate:timeIsPast:"),
      arg,
      date,
      timeZone,
      duration,
      referenceDate,
      underlyingResult,
      timeIsSignificant,
      timeIsApproximate,
      timeIsPast,
    );
  }

  static Pointer<Void>
      initWithRange$date$timeZone$duration$referenceDate$underlyingResult$timeIsSignificant$timeIsApproximate$(
    Pointer<NSDateCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> date,
    @required Pointer<Void> timeZone,
    @required double duration,
    @required Pointer<Void> referenceDate,
    @required Pointer<Void> underlyingResult,
    @required int timeIsSignificant,
    @required int timeIsApproximate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithRange:date:timeZone:duration:referenceDate:underlyingResult:timeIsSignificant:timeIsApproximate:"),
      arg,
      date,
      timeZone,
      duration,
      referenceDate,
      underlyingResult,
      timeIsSignificant,
      timeIsApproximate,
    );
  }

  static Pointer<Void> leadingText(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leadingText"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> referenceDate(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceDate"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSDateCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int timeIsApproximate(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsApproximate"),
    );
  }

  static int timeIsPast(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsPast"),
    );
  }

  static int timeIsSignificant(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsSignificant"),
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer<Void> trailingText(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trailingText"),
    );
  }

  static Pointer<Void> underlyingResult(
    Pointer<NSDateCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingResult"),
    );
  }
}

/// Objective-C class _NSDateComponentsFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDateComponentsFormatter extends Struct<NSDateComponentsFormatter> {
  factory NSDateComponentsFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSDateComponentsFormatter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDateComponentsFormatter")
        .cast<NSDateComponentsFormatter>();
  }

  static int allowedUnits(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("allowedUnits"),
    );
  }

  static int allowsFractionalUnits(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsFractionalUnits"),
    );
  }

  static Pointer<Void> calendar(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendar"),
    );
  }

  static int collapsesLargestUnit(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("collapsesLargestUnit"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static int formattingContext(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("formattingContext"),
    );
  }

  static int getObjectValue(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int includesApproximationPhrase(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("includesApproximationPhrase"),
    );
  }

  static int includesTimeRemainingPhrase(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("includesTimeRemainingPhrase"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int maximumUnitCount(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("maximumUnitCount"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static Pointer<Void> referenceDate(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceDate"),
    );
  }

  static void setAllowedUnits(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setAllowedUnits:"),
      arg,
    );
  }

  static void setAllowsFractionalUnits(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsFractionalUnits:"),
      arg,
    );
  }

  static void setCalendar(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendar:"),
      arg,
    );
  }

  static void setCollapsesLargestUnit(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCollapsesLargestUnit:"),
      arg,
    );
  }

  static void setFormattingContext(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setFormattingContext:"),
      arg,
    );
  }

  static void setIncludesApproximationPhrase(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesApproximationPhrase:"),
      arg,
    );
  }

  static void setIncludesTimeRemainingPhrase(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIncludesTimeRemainingPhrase:"),
      arg,
    );
  }

  static void setMaximumUnitCount(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setMaximumUnitCount:"),
      arg,
    );
  }

  static void setReferenceDate(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferenceDate:"),
      arg,
    );
  }

  static void setUnitsStyle(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitsStyle:"),
      arg,
    );
  }

  static void setZeroFormattingBehavior(
    Pointer<NSDateComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setZeroFormattingBehavior:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue$(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue$withReferenceDate$(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReferenceDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:withReferenceDate:"),
      arg,
      withReferenceDate,
    );
  }

  static Pointer<Void> stringFromDate(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDate:toDate:"),
      arg,
      toDate,
    );
  }

  static Pointer<Void> stringFromDateComponents(
    Pointer<NSDateComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDateComponents:"),
      arg,
    );
  }

  static Pointer<Void> stringFromTimeInterval(
    Pointer<NSDateComponentsFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("stringFromTimeInterval:"),
      arg,
    );
  }

  static int unitsStyle(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitsStyle"),
    );
  }

  static int zeroFormattingBehavior(
    Pointer<NSDateComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("zeroFormattingBehavior"),
    );
  }
}

/// Objective-C class _NSDateFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDateFormatter extends Struct<NSDateFormatter> {
  factory NSDateFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSDateFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDateFormatter").cast<NSDateFormatter>();
  }

  static Pointer<Void> AMSymbol(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("AMSymbol"),
    );
  }

  static Pointer<Void> PMSymbol(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("PMSymbol"),
    );
  }

  static int allowsNaturalLanguage(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsNaturalLanguage"),
    );
  }

  static Pointer<Void> calendar(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendar"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDateFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> dateFormat(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateFormat"),
    );
  }

  static Pointer<Void> dateFromString(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dateFromString:"),
      arg,
    );
  }

  static int dateStyle(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("dateStyle"),
    );
  }

  static void dealloc(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> defaultDate(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultDate"),
    );
  }

  static int doesRelativeDateFormatting(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("doesRelativeDateFormatting"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> eraSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("eraSymbols"),
    );
  }

  static int formatterBehavior(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("formatterBehavior"),
    );
  }

  static int formattingContext(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("formattingContext"),
    );
  }

  static int generatesCalendarDates(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("generatesCalendarDates"),
    );
  }

  static int getObjectValue$forString$errorDescription$(
    Pointer<NSDateFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int getObjectValue$forString$range$error$(
    Pointer<NSDateFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> range,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:range:error:"),
      arg,
      forString,
      range,
      error,
    );
  }

  static Pointer<Void> gregorianStartDate(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("gregorianStartDate"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDateFormat(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg, {
    @required int allowNaturalLanguage,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithDateFormat:allowNaturalLanguage:"),
      arg,
      allowNaturalLanguage,
    );
  }

  static int isLenient(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLenient"),
    );
  }

  static Pointer<Void> locale(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static Pointer<Void> longEraSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("longEraSymbols"),
    );
  }

  static Pointer<Void> monthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("monthSymbols"),
    );
  }

  static Pointer<Void> quarterSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("quarterSymbols"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setAMSymbol(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAMSymbol:"),
      arg,
    );
  }

  static void setCalendar(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendar:"),
      arg,
    );
  }

  static void setDateFormat(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateFormat:"),
      arg,
    );
  }

  static void setDateStyle(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDateStyle:"),
      arg,
    );
  }

  static void setDefaultDate(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDefaultDate:"),
      arg,
    );
  }

  static void setDoesRelativeDateFormatting(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDoesRelativeDateFormatting:"),
      arg,
    );
  }

  static void setEraSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEraSymbols:"),
      arg,
    );
  }

  static void setFormatterBehavior(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFormatterBehavior:"),
      arg,
    );
  }

  static void setFormattingContext(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setFormattingContext:"),
      arg,
    );
  }

  static void setGeneratesCalendarDates(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setGeneratesCalendarDates:"),
      arg,
    );
  }

  static void setGregorianStartDate(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGregorianStartDate:"),
      arg,
    );
  }

  static void setLenient(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLenient:"),
      arg,
    );
  }

  static void setLocale(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setLocalizedDateFormatFromTemplate(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalizedDateFormatFromTemplate:"),
      arg,
    );
  }

  static void setLongEraSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLongEraSymbols:"),
      arg,
    );
  }

  static void setMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMonthSymbols:"),
      arg,
    );
  }

  static void setPMSymbol(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPMSymbol:"),
      arg,
    );
  }

  static void setQuarterSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQuarterSymbols:"),
      arg,
    );
  }

  static void setShortMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortMonthSymbols:"),
      arg,
    );
  }

  static void setShortQuarterSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortQuarterSymbols:"),
      arg,
    );
  }

  static void setShortStandaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortStandaloneMonthSymbols:"),
      arg,
    );
  }

  static void setShortStandaloneQuarterSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortStandaloneQuarterSymbols:"),
      arg,
    );
  }

  static void setShortStandaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortStandaloneWeekdaySymbols:"),
      arg,
    );
  }

  static void setShortWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setShortWeekdaySymbols:"),
      arg,
    );
  }

  static void setStandaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandaloneMonthSymbols:"),
      arg,
    );
  }

  static void setStandaloneQuarterSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandaloneQuarterSymbols:"),
      arg,
    );
  }

  static void setStandaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandaloneWeekdaySymbols:"),
      arg,
    );
  }

  static void setTimeStyle(
    Pointer<NSDateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTimeStyle:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static void setTwoDigitStartDate(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTwoDigitStartDate:"),
      arg,
    );
  }

  static void setVeryShortMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVeryShortMonthSymbols:"),
      arg,
    );
  }

  static void setVeryShortStandaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVeryShortStandaloneMonthSymbols:"),
      arg,
    );
  }

  static void setVeryShortStandaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVeryShortStandaloneWeekdaySymbols:"),
      arg,
    );
  }

  static void setVeryShortWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVeryShortWeekdaySymbols:"),
      arg,
    );
  }

  static void setWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWeekdaySymbols:"),
      arg,
    );
  }

  static Pointer<Void> shortMonthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortMonthSymbols"),
    );
  }

  static Pointer<Void> shortQuarterSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortQuarterSymbols"),
    );
  }

  static Pointer<Void> shortStandaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortStandaloneMonthSymbols"),
    );
  }

  static Pointer<Void> shortStandaloneQuarterSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortStandaloneQuarterSymbols"),
    );
  }

  static Pointer<Void> shortStandaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortStandaloneWeekdaySymbols"),
    );
  }

  static Pointer<Void> shortWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("shortWeekdaySymbols"),
    );
  }

  static Pointer<Void> standaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standaloneMonthSymbols"),
    );
  }

  static Pointer<Void> standaloneQuarterSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standaloneQuarterSymbols"),
    );
  }

  static Pointer<Void> standaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standaloneWeekdaySymbols"),
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromDate(
    Pointer<NSDateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDate:"),
      arg,
    );
  }

  static int timeStyle(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("timeStyle"),
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer<Void> twoDigitStartDate(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("twoDigitStartDate"),
    );
  }

  static Pointer<Void> veryShortMonthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("veryShortMonthSymbols"),
    );
  }

  static Pointer<Void> veryShortStandaloneMonthSymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("veryShortStandaloneMonthSymbols"),
    );
  }

  static Pointer<Void> veryShortStandaloneWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("veryShortStandaloneWeekdaySymbols"),
    );
  }

  static Pointer<Void> veryShortWeekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("veryShortWeekdaySymbols"),
    );
  }

  static Pointer<Void> weekdaySymbols(
    Pointer<NSDateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weekdaySymbols"),
    );
  }
}

/// Objective-C class _NSDateInterval_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDateInterval extends Struct<NSDateInterval> {
  factory NSDateInterval._() {
    throw UnimplementedError();
  }
  static Pointer<NSDateInterval> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDateInterval").cast<NSDateInterval>();
  }

  static int compare(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static int containsDate(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsDate:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDateInterval> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double duration(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("duration"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> endDate(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endDate"),
    );
  }

  static int hash(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithStartDate$endDate$(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> endDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:endDate:"),
      arg,
      endDate,
    );
  }

  static Pointer<Void> initWithStartDate$duration$(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg, {
    @required double duration,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithStartDate:duration:"),
      arg,
      duration,
    );
  }

  static Pointer<Void> intersectionWithDateInterval(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("intersectionWithDateInterval:"),
      arg,
    );
  }

  static int intersectsDateInterval(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("intersectsDateInterval:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToDateInterval(
    Pointer<NSDateInterval> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToDateInterval:"),
      arg,
    );
  }

  static Pointer<Void> startDate(
    Pointer<NSDateInterval> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startDate"),
    );
  }
}

/// Objective-C class _NSDateIntervalFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDateIntervalFormatter extends Struct<NSDateIntervalFormatter> {
  factory NSDateIntervalFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSDateIntervalFormatter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDateIntervalFormatter")
        .cast<NSDateIntervalFormatter>();
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static int boundaryStyle(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("boundaryStyle"),
    );
  }

  static Pointer<Void> calendar(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("calendar"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int dateStyle(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("dateStyle"),
    );
  }

  static Pointer<Void> dateTemplate(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dateTemplate"),
    );
  }

  static void dealloc(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> editingStringForObjectValue(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("editingStringForObjectValue:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static int getObjectValue(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static Pointer<Void> init(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int
      isPartialStringValid$proposedSelectedRange$originalString$originalSelectedRange$errorDescription$(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> proposedSelectedRange,
    @required Pointer<Void> originalString,
    @required Pointer<Void> originalSelectedRange,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:"),
      arg,
      proposedSelectedRange,
      originalString,
      originalSelectedRange,
      errorDescription,
    );
  }

  static int isPartialStringValid$newEditingString$errorDescription$(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> newEditingString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isPartialStringValid:newEditingString:errorDescription:"),
      arg,
      newEditingString,
      errorDescription,
    );
  }

  static Pointer<Void> locale(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static void setBoundaryStyle(
    Pointer<NSDateIntervalFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setBoundaryStyle:"),
      arg,
    );
  }

  static void setCalendar(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCalendar:"),
      arg,
    );
  }

  static void setDateStyle(
    Pointer<NSDateIntervalFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDateStyle:"),
      arg,
    );
  }

  static void setDateTemplate(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDateTemplate:"),
      arg,
    );
  }

  static void setLocale(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setTimeStyle(
    Pointer<NSDateIntervalFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setTimeStyle:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromDate(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toDate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDate:toDate:"),
      arg,
      toDate,
    );
  }

  static Pointer<Void> stringFromDateInterval(
    Pointer<NSDateIntervalFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDateInterval:"),
      arg,
    );
  }

  static int timeStyle(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("timeStyle"),
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSDateIntervalFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }
}

/// Objective-C class _NSDebugString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDebugString extends Struct<NSDebugString> {
  factory NSDebugString._() {
    throw UnimplementedError();
  }
  static Pointer<NSDebugString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDebugString").cast<NSDebugString>();
  }

  static int characterAtIndex(
    Pointer<NSDebugString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDebugString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSDebugString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getCharacters(
    Pointer<NSDebugString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSDebugString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSDebugString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

/// Objective-C class _NSDecimalNumber_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDecimalNumber extends Struct<NSDecimalNumber> {
  factory NSDecimalNumber._() {
    throw UnimplementedError();
  }
  static Pointer<NSDecimalNumber> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDecimalNumber").cast<NSDecimalNumber>();
  }

  static int boolValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("boolValue"),
    );
  }

  static int charValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("charValue"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int compare(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer<Void> copy(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDecimalNumber> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByAdding$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByAdding:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByAdding$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByAdding:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberByDividingBy$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByDividingBy:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberByDividingBy$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByDividingBy:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByMultiplyingBy$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByMultiplyingBy:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByMultiplyingBy$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByMultiplyingBy:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberByMultiplyingByPowerOf10$(
    Pointer<NSDecimalNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int16_returns_p(
      _self,
      _objc.getSelector("decimalNumberByMultiplyingByPowerOf10:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByMultiplyingByPowerOf10$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    int arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int16_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByMultiplyingByPowerOf10:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberByRaisingToPower$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    int arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByRaisingToPower:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberByRaisingToPower$(
    Pointer<NSDecimalNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("decimalNumberByRaisingToPower:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberByRoundingAccordingToBehavior(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberByRoundingAccordingToBehavior:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberBySubstracting$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberBySubstracting:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberBySubstracting$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberBySubstracting:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalNumberBySubtracting$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberBySubtracting:"),
      arg,
    );
  }

  static Pointer<Void> decimalNumberBySubtracting$withBehavior$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decimalNumberBySubtracting:withBehavior:"),
      arg,
      withBehavior,
    );
  }

  static Pointer<Void> decimalValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decimalValue"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithLocale(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithLocale:"),
      arg,
    );
  }

  static double doubleValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static double floatValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float32(
      _self,
      _objc.getSelector("floatValue"),
    );
  }

  static void getValue(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getValue:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDecimal(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDecimal:"),
      arg,
    );
  }

  static Pointer<Void> initWithMantissa(
    Pointer<NSDecimalNumber> _self,
    int arg, {
    @required int exponent,
    @required int isNegative,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int16_Int8_returns_p(
      _self,
      _objc.getSelector("initWithMantissa:exponent:isNegative:"),
      arg,
      exponent,
      isNegative,
    );
  }

  static Pointer<Void> initWithString$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$locale$(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:locale:"),
      arg,
      locale,
    );
  }

  static int intValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("intValue"),
    );
  }

  static int isEqual(
    Pointer<NSDecimalNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int longLongValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longLongValue"),
    );
  }

  static int longValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longValue"),
    );
  }

  static Pointer<Utf8> objCType(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objCType"),
    );
  }

  static int shortValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int16(
      _self,
      _objc.getSelector("shortValue"),
    );
  }

  static int unsignedCharValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint8(
      _self,
      _objc.getSelector("unsignedCharValue"),
    );
  }

  static int unsignedIntValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("unsignedIntValue"),
    );
  }

  static int unsignedLongLongValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unsignedLongLongValue"),
    );
  }

  static int unsignedLongValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unsignedLongValue"),
    );
  }

  static int unsignedShortValue(
    Pointer<NSDecimalNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint16(
      _self,
      _objc.getSelector("unsignedShortValue"),
    );
  }
}

/// Objective-C class _NSDecimalNumberHandler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDecimalNumberHandler extends Struct<NSDecimalNumberHandler> {
  factory NSDecimalNumberHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSDecimalNumberHandler> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDecimalNumberHandler")
        .cast<NSDecimalNumberHandler>();
  }

  static void encodeWithCoder(
    Pointer<NSDecimalNumberHandler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> exceptionDuringOperation(
    Pointer<NSDecimalNumberHandler> _self,
    Pointer<Void> arg, {
    @required int error,
    @required Pointer<Void> leftOperand,
    @required Pointer<Void> rightOperand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "exceptionDuringOperation:error:leftOperand:rightOperand:"),
      arg,
      error,
      leftOperand,
      rightOperand,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDecimalNumberHandler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRoundingMode(
    Pointer<NSDecimalNumberHandler> _self,
    int arg, {
    @required int scale,
    @required int raiseOnExactness,
    @required int raiseOnOverflow,
    @required int raiseOnUnderflow,
    @required int raiseOnDivideByZero,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"),
      arg,
      scale,
      raiseOnExactness,
      raiseOnOverflow,
      raiseOnUnderflow,
      raiseOnDivideByZero,
    );
  }

  static int roundingMode(
    Pointer<NSDecimalNumberHandler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("roundingMode"),
    );
  }

  static int scale(
    Pointer<NSDecimalNumberHandler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int16(
      _self,
      _objc.getSelector("scale"),
    );
  }
}

/// Objective-C class _NSDecimalNumberPlaceholder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDecimalNumberPlaceholder extends Struct<NSDecimalNumberPlaceholder> {
  factory NSDecimalNumberPlaceholder._() {
    throw UnimplementedError();
  }
  static Pointer<NSDecimalNumberPlaceholder> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDecimalNumberPlaceholder")
        .cast<NSDecimalNumberPlaceholder>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSDecimalNumberPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDecimalNumberPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBool(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBool:"),
      arg,
    );
  }

  static Pointer<Void> initWithChar(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDecimalNumberPlaceholder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDecimal(
    Pointer<NSDecimalNumberPlaceholder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDecimal:"),
      arg,
    );
  }

  static Pointer<Void> initWithDouble(
    Pointer<NSDecimalNumberPlaceholder> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithDouble:"),
      arg,
    );
  }

  static Pointer<Void> initWithFloat(
    Pointer<NSDecimalNumberPlaceholder> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_returns_p(
      _self,
      _objc.getSelector("initWithFloat:"),
      arg,
    );
  }

  static Pointer<Void> initWithInt(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithInteger(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithLong(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithLongLong(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithMantissa(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg, {
    @required int exponent,
    @required int isNegative,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int16_Int8_returns_p(
      _self,
      _objc.getSelector("initWithMantissa:exponent:isNegative:"),
      arg,
      exponent,
      isNegative,
    );
  }

  static Pointer<Void> initWithShort(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int16_returns_p(
      _self,
      _objc.getSelector("initWithShort:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$(
    Pointer<NSDecimalNumberPlaceholder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithString$locale$(
    Pointer<NSDecimalNumberPlaceholder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:locale:"),
      arg,
      locale,
    );
  }

  static Pointer<Void> initWithUnsignedChar(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInt(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInteger(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLong(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLongLong(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedShort(
    Pointer<NSDecimalNumberPlaceholder> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedShort:"),
      arg,
    );
  }

  static void release(
    Pointer<NSDecimalNumberPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSDecimalNumberPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSDecimalNumberPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSDeleteCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDeleteCommand extends Struct<NSDeleteCommand> {
  factory NSDeleteCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSDeleteCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDeleteCommand").cast<NSDeleteCommand>();
  }

  static void dealloc(
    Pointer<NSDeleteCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDeleteCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDeleteCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDeleteCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> keySpecifier(
    Pointer<NSDeleteCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keySpecifier"),
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSDeleteCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static void setReceiversSpecifier(
    Pointer<NSDeleteCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReceiversSpecifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSDeserializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDeserializer extends Struct<NSDeserializer> {
  factory NSDeserializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSDeserializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDeserializer").cast<NSDeserializer>();
  }
}

/// Objective-C class _NSDictionaryEntry_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDictionaryEntry extends Struct<NSDictionaryEntry> {
  factory NSDictionaryEntry._() {
    throw UnimplementedError();
  }
  static Pointer<NSDictionaryEntry> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDictionaryEntry").cast<NSDictionaryEntry>();
  }

  static void dealloc(
    Pointer<NSDictionaryEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSDimension_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDimension extends Struct<NSDimension> {
  factory NSDimension._() {
    throw UnimplementedError();
  }
  static Pointer<NSDimension> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDimension").cast<NSDimension>();
  }

  static Pointer<Void> converter(
    Pointer<NSDimension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("converter"),
    );
  }

  static void dealloc(
    Pointer<NSDimension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> dimension(
    Pointer<NSDimension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dimension"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithSpecifier(
    Pointer<NSDimension> _self,
    int arg, {
    @required Pointer<Void> symbol,
    @required Pointer<Void> converter,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSpecifier:symbol:converter:"),
      arg,
      symbol,
      converter,
    );
  }

  static Pointer<Void> initWithSymbol(
    Pointer<NSDimension> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> converter,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSymbol:converter:"),
      arg,
      converter,
    );
  }

  static int isEqual(
    Pointer<NSDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int specifier(
    Pointer<NSDimension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("specifier"),
    );
  }
}

/// Objective-C class _NSDirInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirInfo extends Struct<NSDirInfo> {
  factory NSDirInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDirInfo").cast<NSDirInfo>();
  }

  static int count(
    Pointer<NSDirInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSDirInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDirInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSDirInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfFile(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithDictionary$(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDictionary:"),
      arg,
    );
  }

  static Pointer<Void> initWithDictionary$copyItems$(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg, {
    @required int copyItems,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithDictionary:copyItems:"),
      arg,
      copyItems,
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSDirInfo> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> forKeys,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:forKeys:count:"),
      arg,
      forKeys,
      count,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSDirInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void removeObjectForKey(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> serializeToData(
    Pointer<NSDirInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serializeToData"),
    );
  }

  static void setObject(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static int writePath(
    Pointer<NSDirInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
    @required Pointer<Void> errorHandler,
    @required int remapContents,
    @required Pointer<Void> hardLinkPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "writePath:docInfo:errorHandler:remapContents:hardLinkPath:"),
      arg,
      docInfo,
      errorHandler,
      remapContents,
      hardLinkPath,
    );
  }
}

/// Objective-C class _NSDirInfoDeserializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirInfoDeserializer extends Struct<NSDirInfoDeserializer> {
  factory NSDirInfoDeserializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirInfoDeserializer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDirInfoDeserializer")
        .cast<NSDirInfoDeserializer>();
  }

  static Pointer<Void> deserializePListValueIn(
    Pointer<NSDirInfoDeserializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("deserializePListValueIn:key:length:"),
      arg,
      key,
      length,
    );
  }
}

/// Objective-C class _NSDirInfoSerializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirInfoSerializer extends Struct<NSDirInfoSerializer> {
  factory NSDirInfoSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirInfoSerializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDirInfoSerializer").cast<NSDirInfoSerializer>();
  }

  static int serializePListValueIn(
    Pointer<NSDirInfoSerializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializePListValueIn:key:value:"),
      arg,
      key,
      value,
    );
  }
}

/// Objective-C class _NSDirectoryEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirectoryEnumerator extends Struct<NSDirectoryEnumerator> {
  factory NSDirectoryEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirectoryEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDirectoryEnumerator")
        .cast<NSDirectoryEnumerator>();
  }

  static Pointer<Void> directoryAttributes(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("directoryAttributes"),
    );
  }

  static Pointer<Void> fileAttributes(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileAttributes"),
    );
  }

  static int level(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("level"),
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }

  static void skipDescendants(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendants"),
    );
  }

  static void skipDescendents(
    Pointer<NSDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendents"),
    );
  }
}

/// Objective-C class _NSDirectorySubpathsOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirectorySubpathsOperation
    extends Struct<NSDirectorySubpathsOperation> {
  factory NSDirectorySubpathsOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirectorySubpathsOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDirectorySubpathsOperation")
        .cast<NSDirectorySubpathsOperation>();
  }

  static void dealloc(
    Pointer<NSDirectorySubpathsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void handlePathname(
    Pointer<NSDirectorySubpathsOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePathname:"),
      arg,
    );
  }

  static Pointer<Void> subpaths(
    Pointer<NSDirectorySubpathsOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subpaths"),
    );
  }
}

/// Objective-C class _NSDirectoryTraversalOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDirectoryTraversalOperation
    extends Struct<NSDirectoryTraversalOperation> {
  factory NSDirectoryTraversalOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSDirectoryTraversalOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDirectoryTraversalOperation")
        .cast<NSDirectoryTraversalOperation>();
  }

  static void dealloc(
    Pointer<NSDirectoryTraversalOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSDirectoryTraversalOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSDirectoryTraversalOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static void handlePathname(
    Pointer<NSDirectoryTraversalOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePathname:"),
      arg,
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSDirectoryTraversalOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static void main(
    Pointer<NSDirectoryTraversalOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static void setDelegate(
    Pointer<NSDirectoryTraversalOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int shouldProceedAfterError(
    Pointer<NSDirectoryTraversalOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldProceedAfterError:"),
      arg,
    );
  }
}

/// Objective-C class _NSDistantObject_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistantObject extends Struct<NSDistantObject> {
  factory NSDistantObject._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistantObject> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDistantObject").cast<NSDistantObject>();
  }

  static Pointer<Void> $class(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("class"),
    );
  }

  static void appendFormat(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendFormat:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int conformsToProtocol(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("conformsToProtocol:"),
      arg,
    );
  }

  static Pointer<Void> connectionForProxy(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connectionForProxy"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDistantObject> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void forwardInvocation(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithLocal(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> connection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLocal:connection:"),
      arg,
      connection,
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> connection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:connection:"),
      arg,
      connection,
    );
  }

  static int isEqual(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static Pointer<Void> mutableCopy(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopy"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSDistantObject> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> protocolForProxy(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protocolForProxy"),
    );
  }

  static void release(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void retainWireCount(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("retainWireCount"),
    );
  }

  static void setProtocolForProxy(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtocolForProxy:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingFormat(
    Pointer<NSDistantObject> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingFormat:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> zone(
    Pointer<NSDistantObject> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

/// Objective-C class _NSDistantObjectRequest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistantObjectRequest extends Struct<NSDistantObjectRequest> {
  factory NSDistantObjectRequest._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistantObjectRequest> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDistantObjectRequest")
        .cast<NSDistantObjectRequest>();
  }

  static Pointer<Void> connection(
    Pointer<NSDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static Pointer<Void> conversation(
    Pointer<NSDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("conversation"),
    );
  }

  static Pointer<Void> invocation(
    Pointer<NSDistantObjectRequest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invocation"),
    );
  }

  static void replyWithException(
    Pointer<NSDistantObjectRequest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("replyWithException:"),
      arg,
    );
  }
}

/// Objective-C class _NSDistantObjectTableEntry_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistantObjectTableEntry extends Struct<NSDistantObjectTableEntry> {
  factory NSDistantObjectTableEntry._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistantObjectTableEntry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDistantObjectTableEntry")
        .cast<NSDistantObjectTableEntry>();
  }

  static void dealloc(
    Pointer<NSDistantObjectTableEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDistantObjectTableEntry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }
}

/// Objective-C class _NSDistributedLock_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistributedLock extends Struct<NSDistributedLock> {
  factory NSDistributedLock._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistributedLock> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDistributedLock").cast<NSDistributedLock>();
  }

  static void breakLock(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("breakLock"),
    );
  }

  static void dealloc(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSDistributedLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static Pointer<Void> lockDate(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lockDate"),
    );
  }

  static int tryLock(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static void unlock(
    Pointer<NSDistributedLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }
}

/// Objective-C class _NSDistributedNotificationCenter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistributedNotificationCenter
    extends Struct<NSDistributedNotificationCenter> {
  factory NSDistributedNotificationCenter._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistributedNotificationCenter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDistributedNotificationCenter")
        .cast<NSDistributedNotificationCenter>();
  }

  static void addObserver$selector$name$object$suspensionBehavior$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> name,
    @required Pointer<Void> object,
    @required int suspensionBehavior,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addObserver:selector:name:object:suspensionBehavior:"),
      arg,
      selector,
      name,
      object,
      suspensionBehavior,
    );
  }

  static void addObserver$selector$name$object$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> name,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObserver:selector:name:object:"),
      arg,
      selector,
      name,
      object,
    );
  }

  static Pointer<Void> addObserverForName$object$queue$usingBlock$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> queue,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addObserverForName:object:queue:usingBlock:"),
      arg,
      object,
      queue,
      usingBlock,
    );
  }

  static Pointer<Void>
      addObserverForName$object$suspensionBehavior$queue$usingBlock$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required int suspensionBehavior,
    @required Pointer<Void> queue,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "addObserverForName:object:suspensionBehavior:queue:usingBlock:"),
      arg,
      object,
      suspensionBehavior,
      queue,
      usingBlock,
    );
  }

  static Pointer<Void> init(
    Pointer<NSDistributedNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void postNotification(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotification:"),
      arg,
    );
  }

  static void postNotificationName$object$userInfo$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotificationName:object:userInfo:"),
      arg,
      object,
      userInfo,
    );
  }

  static void postNotificationName$object$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotificationName:object:"),
      arg,
      object,
    );
  }

  static void postNotificationName$object$userInfo$deliverImmediately$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
    @required int deliverImmediately,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector(
          "postNotificationName:object:userInfo:deliverImmediately:"),
      arg,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  static void postNotificationName$object$userInfo$options$(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("postNotificationName:object:userInfo:options:"),
      arg,
      object,
      userInfo,
      options,
    );
  }

  static void removeObserver(
    Pointer<NSDistributedNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:name:object:"),
      arg,
      name,
      object,
    );
  }

  static void setSuspended(
    Pointer<NSDistributedNotificationCenter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuspended:"),
      arg,
    );
  }

  static int suspended(
    Pointer<NSDistributedNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suspended"),
    );
  }
}

/// Objective-C class _NSDistributedObjectsStatistics_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDistributedObjectsStatistics
    extends Struct<NSDistributedObjectsStatistics> {
  factory NSDistributedObjectsStatistics._() {
    throw UnimplementedError();
  }
  static Pointer<NSDistributedObjectsStatistics> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDistributedObjectsStatistics")
        .cast<NSDistributedObjectsStatistics>();
  }

  static void addStatistics(
    Pointer<NSDistributedObjectsStatistics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addStatistics:"),
      arg,
    );
  }

  static Pointer<Void> allKeys(
    Pointer<NSDistributedObjectsStatistics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDistributedObjectsStatistics> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSDistributedObjectsStatistics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSDistributedObjectsStatistics> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSDistributedObjectsStatistics> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSDocInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDocInfo extends Struct<NSDocInfo> {
  factory NSDocInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSDocInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDocInfo").cast<NSDocInfo>();
  }

  static Pointer<Void> copy(
    Pointer<NSDocInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSDocInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> initFromInfo(
    Pointer<NSDocInfo> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initFromInfo:"),
      arg,
    );
  }

  static Pointer<Void> initWithFileAttributes(
    Pointer<NSDocInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileAttributes:"),
      arg,
    );
  }
}

/// Objective-C class _NSDocumentDeserializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDocumentDeserializer extends Struct<NSDocumentDeserializer> {
  factory NSDocumentDeserializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSDocumentDeserializer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSDocumentDeserializer")
        .cast<NSDocumentDeserializer>();
  }

  static Pointer<Void> deserializeNewData(
    Pointer<NSDocumentDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewData"),
    );
  }

  static Pointer<Void> deserializeNewPList(
    Pointer<NSDocumentDeserializer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializeNewPList"),
    );
  }

  static void fixupDirInfo(
    Pointer<NSDocumentDeserializer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("fixupDirInfo:"),
      arg,
    );
  }
}

/// Objective-C class _NSDocumentSerializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSDocumentSerializer extends Struct<NSDocumentSerializer> {
  factory NSDocumentSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSDocumentSerializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSDocumentSerializer").cast<NSDocumentSerializer>();
  }

  static int serializePListValueIn(
    Pointer<NSDocumentSerializer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("serializePListValueIn:key:value:"),
      arg,
      key,
      value,
    );
  }
}

/// Objective-C class _NSEUCGB2312EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEUCGB2312EncodingDetector extends Struct<NSEUCGB2312EncodingDetector> {
  factory NSEUCGB2312EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSEUCGB2312EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEUCGB2312EncodingDetector")
        .cast<NSEUCGB2312EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSEUCGB2312EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSEUCJPEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEUCJPEncodingDetector extends Struct<NSEUCJPEncodingDetector> {
  factory NSEUCJPEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSEUCJPEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEUCJPEncodingDetector")
        .cast<NSEUCJPEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSEUCJPEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSEUCKREncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEUCKREncodingDetector extends Struct<NSEUCKREncodingDetector> {
  factory NSEUCKREncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSEUCKREncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEUCKREncodingDetector")
        .cast<NSEUCKREncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSEUCKREncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSEUCTWEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEUCTWEncodingDetector extends Struct<NSEUCTWEncodingDetector> {
  factory NSEUCTWEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSEUCTWEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEUCTWEncodingDetector")
        .cast<NSEUCTWEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSEUCTWEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSEmojiCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEmojiCheckingResult extends Struct<NSEmojiCheckingResult> {
  factory NSEmojiCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSEmojiCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEmojiCheckingResult")
        .cast<NSEmojiCheckingResult>();
  }

  static int resultType(
    Pointer<NSEmojiCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSEncodingDetectionBuffer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEncodingDetectionBuffer extends Struct<NSEncodingDetectionBuffer> {
  factory NSEncodingDetectionBuffer._() {
    throw UnimplementedError();
  }
  static Pointer<NSEncodingDetectionBuffer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEncodingDetectionBuffer")
        .cast<NSEncodingDetectionBuffer>();
  }

  static void appendByte(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_void(
      _self,
      _objc.getSelector("appendByte:"),
      arg,
    );
  }

  static void appendByte1$byte2$(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg, {
    @required int byte2,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_Uint8_returns_void(
      _self,
      _objc.getSelector("appendByte1:byte2:"),
      arg,
      byte2,
    );
  }

  static void appendByte1$byte2$byte3$byte4$(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg, {
    @required int byte2,
    @required int byte3,
    @required int byte4,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void(
      _self,
      _objc.getSelector("appendByte1:byte2:byte3:byte4:"),
      arg,
      byte2,
      byte3,
      byte4,
    );
  }

  static void appendByte1$byte2$byte3$(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg, {
    @required int byte2,
    @required int byte3,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_Uint8_Uint8_returns_void(
      _self,
      _objc.getSelector("appendByte1:byte2:byte3:"),
      arg,
      byte2,
      byte3,
    );
  }

  static void appendBytes(
    Pointer<NSEncodingDetectionBuffer> _self,
    Pointer<Utf8> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("appendBytes:count:"),
      arg,
      count,
    );
  }

  static void appendPlaceholder(
    Pointer<NSEncodingDetectionBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("appendPlaceholder"),
    );
  }

  static void appendUTF16Char(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_void(
      _self,
      _objc.getSelector("appendUTF16Char:"),
      arg,
    );
  }

  static void appendUTF32Char(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("appendUTF32Char:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSEncodingDetectionBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithNSStringEncoding(
    Pointer<NSEncodingDetectionBuffer> _self,
    int arg, {
    @required int CFStringEncoding,
    @required Pointer<Utf8> stackBuffer,
    @required int bufferLength,
    @required Pointer<Void> placeholder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithNSStringEncoding:CFStringEncoding:stackBuffer:bufferLength:placeholder:"),
      arg,
      CFStringEncoding,
      stackBuffer,
      bufferLength,
      placeholder,
    );
  }

  static Pointer<Void> stringWithLossySubsitutionString(
    Pointer<NSEncodingDetectionBuffer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringWithLossySubsitutionString:"),
      arg,
    );
  }
}

/// Objective-C class _NSEncodingDetectionPlaceholder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEncodingDetectionPlaceholder
    extends Struct<NSEncodingDetectionPlaceholder> {
  factory NSEncodingDetectionPlaceholder._() {
    throw UnimplementedError();
  }
  static Pointer<NSEncodingDetectionPlaceholder> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEncodingDetectionPlaceholder")
        .cast<NSEncodingDetectionPlaceholder>();
  }

  static Pointer<Utf8> bytes(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static int bytesLength(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("bytesLength"),
    );
  }

  static int cfEncoding(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("cfEncoding"),
    );
  }

  static void dealloc(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static int nsEncoding(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("nsEncoding"),
    );
  }

  static Pointer<Void> string(
    Pointer<NSEncodingDetectionPlaceholder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEncodingDetector extends Struct<NSEncodingDetector> {
  factory NSEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSEncodingDetector").cast<NSEncodingDetector>();
  }

  static double bytesRatio(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("bytesRatio"),
    );
  }

  static int cfEncoding(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("cfEncoding"),
    );
  }

  static double confidence(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("confidence"),
    );
  }

  static double confidenceWith2Chars(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("confidenceWith2Chars"),
    );
  }

  static Pointer<Void> initWithNSStringEncoding(
    Pointer<NSEncodingDetector> _self,
    int arg, {
    @required int CFStringEncoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithNSStringEncoding:CFStringEncoding:"),
      arg,
      CFStringEncoding,
    );
  }

  static int maxSkipBytes(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maxSkipBytes"),
    );
  }

  static double multiBytesRatio(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("multiBytesRatio"),
    );
  }

  static int nsEncoding(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("nsEncoding"),
    );
  }

  static int recognizeString(
    Pointer<NSEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }

  static void reset(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reset"),
    );
  }

  static void softReset(
    Pointer<NSEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("softReset"),
    );
  }
}

/// Objective-C class _NSEnergyFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEnergyFormatter extends Struct<NSEnergyFormatter> {
  factory NSEnergyFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSEnergyFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSEnergyFormatter").cast<NSEnergyFormatter>();
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSEnergyFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int getObjectValue(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static Pointer<Void> init(
    Pointer<NSEnergyFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isForFoodEnergyUse(
    Pointer<NSEnergyFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForFoodEnergyUse"),
    );
  }

  static Pointer<Void> numberFormatter(
    Pointer<NSEnergyFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("numberFormatter"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setForFoodEnergyUse(
    Pointer<NSEnergyFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForFoodEnergyUse:"),
      arg,
    );
  }

  static void setNumberFormatter(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNumberFormatter:"),
      arg,
    );
  }

  static void setUnitStyle(
    Pointer<NSEnergyFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitStyle:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSEnergyFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromJoules(
    Pointer<NSEnergyFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("stringFromJoules:"),
      arg,
    );
  }

  static Pointer<Void> stringFromValue(
    Pointer<NSEnergyFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("stringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int targetUnitFromJoules(
    Pointer<NSEnergyFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_Int64(
      _self,
      _objc.getSelector("targetUnitFromJoules:"),
      arg,
    );
  }

  static Pointer<Void> unitStringFromJoules(
    Pointer<NSEnergyFormatter> _self,
    double arg, {
    @required Pointer<Int64> usedUnit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("unitStringFromJoules:usedUnit:"),
      arg,
      usedUnit,
    );
  }

  static Pointer<Void> unitStringFromValue(
    Pointer<NSEnergyFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("unitStringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int unitStyle(
    Pointer<NSEnergyFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitStyle"),
    );
  }
}

/// Objective-C class _NSEqualityPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSEqualityPredicateOperator extends Struct<NSEqualityPredicateOperator> {
  factory NSEqualityPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSEqualityPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSEqualityPredicateOperator")
        .cast<NSEqualityPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSEqualityPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSEqualityPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSEqualityPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$negate$(
    Pointer<NSEqualityPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int negate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:negate:"),
      arg,
      modifier,
      negate,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$negate$options$(
    Pointer<NSEqualityPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int negate,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:negate:options:"),
      arg,
      modifier,
      negate,
      options,
    );
  }

  static int isEqual(
    Pointer<NSEqualityPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isNegation(
    Pointer<NSEqualityPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNegation"),
    );
  }

  static int options(
    Pointer<NSEqualityPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSEqualityPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSEqualityPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void setNegation(
    Pointer<NSEqualityPredicateOperator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNegation:"),
      arg,
    );
  }
}

/// Objective-C class _NSError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSError extends Struct<NSError> {
  factory NSError._() {
    throw UnimplementedError();
  }
  static Pointer<NSError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSError").cast<NSError>();
  }

  static Pointer<Void> CKClientSuitableError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKClientSuitableError"),
    );
  }

  static Pointer<Void> CKClientSuitableUnderlyingError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKClientSuitableUnderlyingError"),
    );
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<NSError> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static int CKHasCKErrorInChildChain(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKHasCKErrorInChildChain"),
    );
  }

  static int CKIsCKError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKIsCKError"),
    );
  }

  static int CKIsNotFoundError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("CKIsNotFoundError"),
    );
  }

  static int CKIsPOSIXErrorCode(
    Pointer<NSError> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("CKIsPOSIXErrorCode:"),
      arg,
    );
  }

  static Pointer<Void> ac_secureCodingError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ac_secureCodingError"),
    );
  }

  static void cl_json_serializeValue(
    Pointer<NSError> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cl_json_serializeValue:"),
      arg,
    );
  }

  static int code(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("code"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSError> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionBuilderWithMultilinePrefix(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionBuilderWithMultilinePrefix:"),
      arg,
    );
  }

  static Pointer<Void> descriptionWithMultilinePrefix(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithMultilinePrefix:"),
      arg,
    );
  }

  static Pointer<Void> domain(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("domain"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> helpAnchor(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("helpAnchor"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDomain(
    Pointer<NSError> _self,
    Pointer<Void> arg, {
    @required int code,
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithDomain:code:userInfo:"),
      arg,
      code,
      userInfo,
    );
  }

  static Pointer<Void> initWithIOAccelError(
    Pointer<NSError> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithIOAccelError:"),
      arg,
    );
  }

  static int isComparisonError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isComparisonError"),
    );
  }

  static int isEqual(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> localizedDescription(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedDescription"),
    );
  }

  static Pointer<Void> localizedFailureReason(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedFailureReason"),
    );
  }

  static Pointer<Void> localizedRecoveryOptions(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedRecoveryOptions"),
    );
  }

  static Pointer<Void> localizedRecoverySuggestion(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedRecoverySuggestion"),
    );
  }

  static Pointer<Void> recoveryAttempter(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recoveryAttempter"),
    );
  }

  static Pointer<Void> redactedDescription(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("redactedDescription"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static Pointer<Void> succinctDescription(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("succinctDescription"),
    );
  }

  static Pointer<Void> succinctDescriptionBuilder(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("succinctDescriptionBuilder"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer<Void> zilchDecoderTileLoadingError(
    Pointer<NSError> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zilchDecoderTileLoadingError"),
    );
  }
}

/// Objective-C class _NSExistsCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExistsCommand extends Struct<NSExistsCommand> {
  factory NSExistsCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSExistsCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSExistsCommand").cast<NSExistsCommand>();
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSExistsCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }
}

/// Objective-C class _NSExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExpression extends Struct<NSExpression> {
  factory NSExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSExpression").cast<NSExpression>();
  }

  static Pointer<Void> CKExpressionValue(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKExpressionValue"),
    );
  }

  static void acceptVisitor(
    Pointer<NSExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> arguments(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> collection(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("collection"),
    );
  }

  static Pointer<Void> constantValue(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constantValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionBlock(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("expressionBlock"),
    );
  }

  static int expressionType(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("expressionType"),
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> falseExpression(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("falseExpression"),
    );
  }

  static Pointer<Void> function(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("function"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithExpressionType(
    Pointer<NSExpression> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithExpressionType:"),
      arg,
    );
  }

  static Pointer<Void> keyPath(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPath"),
    );
  }

  static Pointer<Void> leftExpression(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftExpression"),
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> operand(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operand"),
    );
  }

  static Pointer<Void> predicate(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> rightExpression(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightExpression"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> subexpression(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subexpression"),
    );
  }

  static Pointer<Void> trueExpression(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trueExpression"),
    );
  }

  static Pointer<Void> variable(
    Pointer<NSExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variable"),
    );
  }
}

/// Objective-C class _NSExtendedRegularExpressionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExtendedRegularExpressionCheckingResult
    extends Struct<NSExtendedRegularExpressionCheckingResult> {
  factory NSExtendedRegularExpressionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSExtendedRegularExpressionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSExtendedRegularExpressionCheckingResult")
        .cast<NSExtendedRegularExpressionCheckingResult>();
  }

  static void dealloc(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithRangeArray(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRangeArray:regularExpression:"),
      arg,
      regularExpression,
    );
  }

  static Pointer<Void> initWithRanges(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithRanges:count:regularExpression:"),
      arg,
      count,
      regularExpression,
    );
  }

  static int numberOfRanges(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfRanges"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> rangeArray(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeArray"),
    );
  }

  static Pointer<Void> rangeAtIndex(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> regularExpression(
    Pointer<NSExtendedRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularExpression"),
    );
  }
}

/// Objective-C class _NSExtension_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExtension extends Struct<NSExtension> {
  factory NSExtension._() {
    throw UnimplementedError();
  }
  static Pointer<NSExtension> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSExtension").cast<NSExtension>();
  }

  static int attemptOptIn(
    Pointer<NSExtension> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("attemptOptIn:"),
      arg,
    );
  }

  static int attemptOptOut(
    Pointer<NSExtension> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("attemptOptOut:"),
      arg,
    );
  }

  static Pointer<Void> attributes(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static void beginExtensionRequestWithInputItems$listenerEndpoint$completion$(
    Pointer<NSExtension> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> listenerEndpoint,
    @required Pointer<Void> completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "beginExtensionRequestWithInputItems:listenerEndpoint:completion:"),
      arg,
      listenerEndpoint,
      completion,
    );
  }

  static Pointer<Void>
      beginExtensionRequestWithInputItems$listenerEndpoint$error$(
    Pointer<NSExtension> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> listenerEndpoint,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "beginExtensionRequestWithInputItems:listenerEndpoint:error:"),
      arg,
      listenerEndpoint,
      error,
    );
  }

  static Pointer<Void> beginExtensionRequestWithInputItems$error$(
    Pointer<NSExtension> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("beginExtensionRequestWithInputItems:error:"),
      arg,
      error,
    );
  }

  static void beginExtensionRequestWithInputItems$completion$(
    Pointer<NSExtension> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("beginExtensionRequestWithInputItems:completion:"),
      arg,
      completion,
    );
  }

  static void
      beginExtensionRequestWithOptions$inputItems$listenerEndpoint$completion$(
    Pointer<NSExtension> _self,
    int arg, {
    @required Pointer<Void> inputItems,
    @required Pointer<Void> listenerEndpoint,
    @required Pointer<Void> completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "beginExtensionRequestWithOptions:inputItems:listenerEndpoint:completion:"),
      arg,
      inputItems,
      listenerEndpoint,
      completion,
    );
  }

  static Pointer<Void>
      beginExtensionRequestWithOptions$inputItems$listenerEndpoint$error$(
    Pointer<NSExtension> _self,
    int arg, {
    @required Pointer<Void> inputItems,
    @required Pointer<Void> listenerEndpoint,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "beginExtensionRequestWithOptions:inputItems:listenerEndpoint:error:"),
      arg,
      inputItems,
      listenerEndpoint,
      error,
    );
  }

  static void beginExtensionRequestWithOptions$inputItems$completion$(
    Pointer<NSExtension> _self,
    int arg, {
    @required Pointer<Void> inputItems,
    @required Pointer<Void> completion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "beginExtensionRequestWithOptions:inputItems:completion:"),
      arg,
      inputItems,
      completion,
    );
  }

  static Pointer<Void> beginExtensionRequestWithOptions$inputItems$error$(
    Pointer<NSExtension> _self,
    int arg, {
    @required Pointer<Void> inputItems,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("beginExtensionRequestWithOptions:inputItems:error:"),
      arg,
      inputItems,
      error,
    );
  }

  static void cancelExtensionRequestWithIdentifier(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelExtensionRequestWithIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> connectionUUID(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connectionUUID"),
    );
  }

  static void dealloc(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> extensionContexts(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("extensionContexts"),
    );
  }

  static Pointer<Void> extensionPointIdentifier(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("extensionPointIdentifier"),
    );
  }

  static int hash(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> icons(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("icons"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> infoDictionary(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("infoDictionary"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEqual(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> newAssertionToBeginUsingPluginWithOptions(
    Pointer<NSExtension> _self,
    int arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("newAssertionToBeginUsingPluginWithOptions:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> objectForInfoDictionaryKey(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForInfoDictionaryKey:"),
      arg,
    );
  }

  static int optedIn(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("optedIn"),
    );
  }

  static int pidForRequestIdentifier(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("pidForRequestIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> requestCancellationBlock(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestCancellationBlock"),
    );
  }

  static Pointer<Void> requestCompletionBlock(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestCompletionBlock"),
    );
  }

  static Pointer<Void> requestInterruptionBlock(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requestInterruptionBlock"),
    );
  }

  static void setAttributes(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributes:"),
      arg,
    );
  }

  static void setConnectionUUID(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setConnectionUUID:"),
      arg,
    );
  }

  static void setExtensionPointIdentifier(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExtensionPointIdentifier:"),
      arg,
    );
  }

  static void setIdentifier(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setInfoDictionary(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInfoDictionary:"),
      arg,
    );
  }

  static void setRequestCancellationBlock(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestCancellationBlock:"),
      arg,
    );
  }

  static void setRequestCompletionBlock(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestCompletionBlock:"),
      arg,
    );
  }

  static void setRequestInterruptionBlock(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequestInterruptionBlock:"),
      arg,
    );
  }

  static void setVersion(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVersion:"),
      arg,
    );
  }

  static void setWantsDedicatedQueue(
    Pointer<NSExtension> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setWantsDedicatedQueue:"),
      arg,
    );
  }

  static void set_localizedName(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_localizedName:"),
      arg,
    );
  }

  static void set_localizedShortName(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_localizedShortName:"),
      arg,
    );
  }

  static void set_requestPostCompletionBlock(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_requestPostCompletionBlock:"),
      arg,
    );
  }

  static void set_requestPostCompletionBlockWithItems(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_requestPostCompletionBlockWithItems:"),
      arg,
    );
  }

  static void set_stashedPlugInConnection(
    Pointer<NSExtension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_stashedPlugInConnection:"),
      arg,
    );
  }

  static Pointer<Void> version(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("version"),
    );
  }

  static int wantsDedicatedQueue(
    Pointer<NSExtension> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("wantsDedicatedQueue"),
    );
  }
}

/// Objective-C class _NSExtensionContext_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExtensionContext extends Struct<NSExtensionContext> {
  factory NSExtensionContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSExtensionContext> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSExtensionContext").cast<NSExtensionContext>();
  }

  static void cancelRequestWithError(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelRequestWithError:"),
      arg,
    );
  }

  static void completeRequestReturningItems(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("completeRequestReturningItems:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSExtensionContext> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSExtensionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSExtensionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void didConnectToVendor(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("didConnectToVendor:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSExtensionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithInputItems$listenerEndpoint$contextUUID$(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> listenerEndpoint,
    @required Pointer<Void> contextUUID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInputItems:listenerEndpoint:contextUUID:"),
      arg,
      listenerEndpoint,
      contextUUID,
    );
  }

  static Pointer<Void> initWithInputItems$contextUUID$(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> contextUUID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInputItems:contextUUID:"),
      arg,
      contextUUID,
    );
  }

  static Pointer<Void> initWithInputItems$(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInputItems:"),
      arg,
    );
  }

  static Pointer<Void> inputItems(
    Pointer<NSExtensionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("inputItems"),
    );
  }

  static void invalidate(
    Pointer<NSExtensionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int listener(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static void openURL(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("openURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void set_UUID(
    Pointer<NSExtensionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_UUID:"),
      arg,
    );
  }
}

/// Objective-C class _NSExtensionItem_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSExtensionItem extends Struct<NSExtensionItem> {
  factory NSExtensionItem._() {
    throw UnimplementedError();
  }
  static Pointer<NSExtensionItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSExtensionItem").cast<NSExtensionItem>();
  }

  static Pointer<Void> attachments(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attachments"),
    );
  }

  static Pointer<Void> attributedContentText(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributedContentText"),
    );
  }

  static Pointer<Void> attributedTitle(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributedTitle"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSExtensionItem> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setAttachments(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttachments:"),
      arg,
    );
  }

  static void setAttributedContentText(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedContentText:"),
      arg,
    );
  }

  static void setAttributedTitle(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedTitle:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSExtensionItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSExtensionItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSFTPURLHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFTPURLHandle extends Struct<NSFTPURLHandle> {
  factory NSFTPURLHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSFTPURLHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFTPURLHandle").cast<NSFTPURLHandle>();
  }

  static void beginLoadInBackground(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoadInBackground"),
    );
  }

  static Pointer<Pointer<Void>> createFTPReadStream(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createFTPReadStream"),
    );
  }

  static void dealloc(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void endLoadInBackground(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endLoadInBackground"),
    );
  }

  static Pointer<Void> errorStringForFTPStatusCode(
    Pointer<NSFTPURLHandle> _self,
    int arg, {
    @required Pointer<Void> fromURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("errorStringForFTPStatusCode:fromURL:"),
      arg,
      fromURL,
    );
  }

  static int expectedResourceDataSize(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedResourceDataSize"),
    );
  }

  static void flushCachedData(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushCachedData"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSFTPURLHandle> _self,
    Pointer<Void> arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:cached:"),
      arg,
      cached,
    );
  }

  static Pointer<Void> loadInForeground(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("loadInForeground"),
    );
  }

  static void performStreamRead(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performStreamRead"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSFTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> propertyForKeyIfAvailable(
    Pointer<NSFTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKeyIfAvailable:"),
      arg,
    );
  }

  static void reportStreamError(
    Pointer<NSFTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reportStreamError"),
    );
  }

  static int writeData(
    Pointer<NSFTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static int writeProperty(
    Pointer<NSFTPURLHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeProperty:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSFalsePredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFalsePredicate extends Struct<NSFalsePredicate> {
  factory NSFalsePredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSFalsePredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFalsePredicate").cast<NSFalsePredicate>();
  }

  static void acceptVisitor(
    Pointer<NSFalsePredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer<Void> autorelease(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSFalsePredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSFalsePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<NSFalsePredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static int hash(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFalsePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSFalsePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void release(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSFalsePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSFileAccessArbiter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessArbiter extends Struct<NSFileAccessArbiter> {
  factory NSFileAccessArbiter._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessArbiter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileAccessArbiter").cast<NSFileAccessArbiter>();
  }

  static void addPresenter(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withID,
    @required Pointer<Void> fileURL,
    @required Pointer<Void> lastPresentedItemEventIdentifier,
    @required Pointer<Void> ubiquityAttributes,
    @required int options,
    @required int responses,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector(
          "addPresenter:withID:fileURL:lastPresentedItemEventIdentifier:ubiquityAttributes:options:responses:"),
      arg,
      withID,
      fileURL,
      lastPresentedItemEventIdentifier,
      ubiquityAttributes,
      options,
      responses,
    );
  }

  static void addProvider(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withID,
    @required Pointer<Void> uniqueID,
    @required Pointer<Void> forProvidedItemsURL,
    @required int options,
    @required Pointer<Void> withServer,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addProvider:withID:uniqueID:forProvidedItemsURL:options:withServer:reply:"),
      arg,
      withID,
      uniqueID,
      forProvidedItemsURL,
      options,
      withServer,
      reply,
    );
  }

  static void cancelAccessClaimForID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelAccessClaimForID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileAccessArbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getDebugInformationIncludingEverything(
    Pointer<NSFileAccessArbiter> _self,
    int arg, {
    @required Pointer<Void> withString,
    @required int fromPid,
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_Int32_p_returns_void(
      _self,
      _objc.getSelector(
          "getDebugInformationIncludingEverything:withString:fromPid:thenContinue:"),
      arg,
      withString,
      fromPid,
      thenContinue,
    );
  }

  static void getItemHasPresentersAtURL(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getItemHasPresentersAtURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void grantAccessClaim(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("grantAccessClaim:withReply:"),
      arg,
      withReply,
    );
  }

  static void grantSubarbitrationClaim(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withServer,
    @required Pointer<Void> reply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("grantSubarbitrationClaim:withServer:reply:"),
      arg,
      withServer,
      reply,
    );
  }

  static Pointer<Void> initWithQueue(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required int isSubarbiter,
    @required Pointer<Void> listener,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithQueue:isSubarbiter:listener:"),
      arg,
      isSubarbiter,
      listener,
    );
  }

  static int listener(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static void performBarrierWithCompletionHandler(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performBarrierWithCompletionHandler:"),
      arg,
    );
  }

  static void prepareToArbitrateForURLs(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("prepareToArbitrateForURLs:"),
      arg,
    );
  }

  static void provideDebugInfoWithLocalInfo(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("provideDebugInfoWithLocalInfo:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void provideSubarbiterDebugInfoIncludingEverything(
    Pointer<NSFileAccessArbiter> _self,
    int arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "provideSubarbiterDebugInfoIncludingEverything:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void removePresenterWithID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePresenterWithID:"),
      arg,
    );
  }

  static void removeProviderWithID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> uniqueID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeProviderWithID:uniqueID:"),
      arg,
      uniqueID,
    );
  }

  static void revokeAccessClaimForID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeAccessClaimForID:"),
      arg,
    );
  }

  static void revokeSubarbitrationClaimForID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeSubarbitrationClaimForID:"),
      arg,
    );
  }

  static Pointer<Void> rootNode(
    Pointer<NSFileAccessArbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootNode"),
    );
  }

  static void startArbitratingWithReply(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("startArbitratingWithReply:"),
      arg,
    );
  }

  static void stopArbitrating(
    Pointer<NSFileAccessArbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stopArbitrating"),
    );
  }

  static Pointer<Void> superarbitrationConnection(
    Pointer<NSFileAccessArbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("superarbitrationConnection"),
    );
  }

  static void tiePresenterForID(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("tiePresenterForID:toItemAtURL:"),
      arg,
      toItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityAttributes$ofItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityAttributes,
    @required Pointer<Void> ofItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didChangeUbiquityAttributes:ofItemAtURL:"),
      arg,
      didChangeUbiquityAttributes,
      ofItemAtURL,
    );
  }

  static void writerWithPurposeID$didMoveItemAtURL$toURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMoveItemAtURL,
    @required Pointer<Void> toURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMoveItemAtURL:toURL:"),
      arg,
      didMoveItemAtURL,
      toURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityOfItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeUbiquityOfItemAtURL:"),
      arg,
      didChangeUbiquityOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeSharingOfItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeSharingOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeSharingOfItemAtURL:"),
      arg,
      didChangeSharingOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didMakeItemDisappearAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMakeItemDisappearAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMakeItemDisappearAtURL:"),
      arg,
      didMakeItemDisappearAtURL,
    );
  }

  static void writerWithPurposeID$didChangeItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeItemAtURL:"),
      arg,
      didChangeItemAtURL,
    );
  }

  static void writerWithPurposeID$didDisconnectItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didDisconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didDisconnectItemAtURL:"),
      arg,
      didDisconnectItemAtURL,
    );
  }

  static void writerWithPurposeID$didReconnectItemAtURL$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didReconnectItemAtURL:"),
      arg,
      didReconnectItemAtURL,
    );
  }

  static void
      writerWithPurposeID$didVersionChangeOfKind$toItemAtURL$withClientID$name$(
    Pointer<NSFileAccessArbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didVersionChangeOfKind,
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Void> withClientID,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didVersionChangeOfKind:toItemAtURL:withClientID:name:"),
      arg,
      didVersionChangeOfKind,
      toItemAtURL,
      withClientID,
      name,
    );
  }
}

/// Objective-C class _NSFileAccessArbiterProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessArbiterProxy extends Struct<NSFileAccessArbiterProxy> {
  factory NSFileAccessArbiterProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessArbiterProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileAccessArbiterProxy")
        .cast<NSFileAccessArbiterProxy>();
  }

  static void addFilePresenter(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addFilePresenter:"),
      arg,
    );
  }

  static void addFileProvider(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addFileProvider:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void cancelAccessClaimForID(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelAccessClaimForID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileAccessArbiterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> filePresenters(
    Pointer<NSFileAccessArbiterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filePresenters"),
    );
  }

  static Pointer<Void> fileProviders(
    Pointer<NSFileAccessArbiterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileProviders"),
    );
  }

  static void getDebugInfoWithCompletionHandler(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getDebugInfoWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> grantAccessClaim(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required int synchronouslyIfPossible,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("grantAccessClaim:synchronouslyIfPossible:"),
      arg,
      synchronouslyIfPossible,
    );
  }

  static void grantSubarbitrationClaim(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withServer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("grantSubarbitrationClaim:withServer:"),
      arg,
      withServer,
    );
  }

  static void handleCanceledServer(
    Pointer<NSFileAccessArbiterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("handleCanceledServer"),
    );
  }

  static Pointer<Void> idForFileReactor(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("idForFileReactor:"),
      arg,
    );
  }

  static Pointer<Void> initWithServer(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithServer:queue:"),
      arg,
      queue,
    );
  }

  static int itemHasPresentersAtURL(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemHasPresentersAtURL:"),
      arg,
    );
  }

  static int listener(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static void performBarrier(
    Pointer<NSFileAccessArbiterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performBarrier"),
    );
  }

  static void performBarrierAsync(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performBarrierAsync:"),
      arg,
    );
  }

  static void removeFilePresenter(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFilePresenter:"),
      arg,
    );
  }

  static void removeFileProvider(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFileProvider:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForXPCConnection(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> encoder,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForXPCConnection:encoder:object:"),
      arg,
      encoder,
      object,
    );
  }

  static void revokeAccessClaimForID(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeAccessClaimForID:"),
      arg,
    );
  }

  static void revokeSubarbitrationClaimForID(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeSubarbitrationClaimForID:"),
      arg,
    );
  }

  static void tiePresenterForID(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("tiePresenterForID:toItemAtURL:"),
      arg,
      toItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityAttributes$ofItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityAttributes,
    @required Pointer<Void> ofItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didChangeUbiquityAttributes:ofItemAtURL:"),
      arg,
      didChangeUbiquityAttributes,
      ofItemAtURL,
    );
  }

  static void writerWithPurposeID$didMoveItemAtURL$toURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMoveItemAtURL,
    @required Pointer<Void> toURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMoveItemAtURL:toURL:"),
      arg,
      didMoveItemAtURL,
      toURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityOfItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeUbiquityOfItemAtURL:"),
      arg,
      didChangeUbiquityOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeSharingOfItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeSharingOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeSharingOfItemAtURL:"),
      arg,
      didChangeSharingOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didMakeItemDisappearAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMakeItemDisappearAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMakeItemDisappearAtURL:"),
      arg,
      didMakeItemDisappearAtURL,
    );
  }

  static void writerWithPurposeID$didChangeItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeItemAtURL:"),
      arg,
      didChangeItemAtURL,
    );
  }

  static void writerWithPurposeID$didDisconnectItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didDisconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didDisconnectItemAtURL:"),
      arg,
      didDisconnectItemAtURL,
    );
  }

  static void writerWithPurposeID$didReconnectItemAtURL$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didReconnectItemAtURL:"),
      arg,
      didReconnectItemAtURL,
    );
  }

  static void
      writerWithPurposeID$didVersionChangeOfKind$toItemAtURL$withClientID$name$(
    Pointer<NSFileAccessArbiterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didVersionChangeOfKind,
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Void> withClientID,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didVersionChangeOfKind:toItemAtURL:withClientID:name:"),
      arg,
      didVersionChangeOfKind,
      toItemAtURL,
      withClientID,
      name,
    );
  }
}

/// Objective-C class _NSFileAccessClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessClaim extends Struct<NSFileAccessClaim> {
  factory NSFileAccessClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessClaim> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileAccessClaim").cast<NSFileAccessClaim>();
  }

  static void acceptClaimFromClient(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arbiterQueue,
    @required Pointer<Void> grantHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("acceptClaimFromClient:arbiterQueue:grantHandler:"),
      arg,
      arbiterQueue,
      grantHandler,
    );
  }

  static void addPendingClaim(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPendingClaim:"),
      arg,
    );
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static void block(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("block"),
    );
  }

  static void blockClaimerForReason(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("blockClaimerForReason:"),
      arg,
    );
  }

  static int cameFromSuperarbiter(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("cameFromSuperarbiter"),
    );
  }

  static int canAccessLocations(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int forReading,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector("canAccessLocations:forReading:error:"),
      arg,
      forReading,
      error,
    );
  }

  static void cancelled(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancelled"),
    );
  }

  static int checkIfSymbolicLinkAtURL(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Int64> withResolutionCount,
    @required Pointer<Void> andIfSoThenReevaluateSelf,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "checkIfSymbolicLinkAtURL:withResolutionCount:andIfSoThenReevaluateSelf:"),
      arg,
      withResolutionCount,
      andIfSoThenReevaluateSelf,
    );
  }

  static Pointer<Void> claimID(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("claimID"),
    );
  }

  static Pointer<Void> claimerError(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("claimerError"),
    );
  }

  static int claimerInvokingIsBlockedByReactorWithID(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("claimerInvokingIsBlockedByReactorWithID:"),
      arg,
    );
  }

  static Pointer<Void> claimerWaiter(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("claimerWaiter"),
    );
  }

  static Pointer<Void> client(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("client"),
    );
  }

  static int clientProcessIdentifier(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("clientProcessIdentifier"),
    );
  }

  static void dealloc(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithIndenting:"),
      arg,
    );
  }

  static void devalueOldClaim(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("devalueOldClaim:"),
      arg,
    );
  }

  static void devalueSelf(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static int didWait(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("didWait"),
    );
  }

  static void disavowed(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disavowed"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void ensureProvidersOfItemsAtReadingLocations(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> writingLocations,
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "ensureProvidersOfItemsAtReadingLocations:writingLocations:thenContinue:"),
      arg,
      writingLocations,
      thenContinue,
    );
  }

  static void evaluateNewClaim(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("evaluateNewClaim:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void finished(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finished"),
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void givePriorityToClaim(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("givePriorityToClaim:"),
      arg,
    );
  }

  static void granted(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithClient(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> claimID,
    @required Pointer<Void> purposeID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClient:claimID:purposeID:"),
      arg,
      claimID,
      purposeID,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByClaimWithPurposeID(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByClaimWithPurposeID:"),
      arg,
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isGranted(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isGranted"),
    );
  }

  static int isRevoked(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRevoked"),
    );
  }

  static void itemAtLocation(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void makePresentersOfItemAtLocation(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int orContainedItem,
    @required Pointer<Void> relinquishUsingProcedureGetter,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "makePresentersOfItemAtLocation:orContainedItem:relinquishUsingProcedureGetter:"),
      arg,
      orContainedItem,
      relinquishUsingProcedureGetter,
    );
  }

  static void makeProviderOfItemAtLocation$providePhysicalURLThenContinue$(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> providePhysicalURLThenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "makeProviderOfItemAtLocation:providePhysicalURLThenContinue:"),
      arg,
      providePhysicalURLThenContinue,
    );
  }

  static void
      makeProviderOfItemAtLocation$provideIfNecessaryWithOptions$thenContinue$(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required int provideIfNecessaryWithOptions,
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "makeProviderOfItemAtLocation:provideIfNecessaryWithOptions:thenContinue:"),
      arg,
      provideIfNecessaryWithOptions,
      thenContinue,
    );
  }

  static void
      makeProviderOfItemAtLocation$provideOrAttachPhysicalURLIfNecessaryForPurposeID$readingOptions$thenContinue$(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> provideOrAttachPhysicalURLIfNecessaryForPurposeID,
    @required int readingOptions,
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "makeProviderOfItemAtLocation:provideOrAttachPhysicalURLIfNecessaryForPurposeID:readingOptions:thenContinue:"),
      arg,
      provideOrAttachPhysicalURLIfNecessaryForPurposeID,
      readingOptions,
      thenContinue,
    );
  }

  static void
      makeProviderOfItemAtLocation$provideOrAttachPhysicalURLIfNecessaryForPurposeID$writingOptions$thenContinue$(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> provideOrAttachPhysicalURLIfNecessaryForPurposeID,
    @required int writingOptions,
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "makeProviderOfItemAtLocation:provideOrAttachPhysicalURLIfNecessaryForPurposeID:writingOptions:thenContinue:"),
      arg,
      provideOrAttachPhysicalURLIfNecessaryForPurposeID,
      writingOptions,
      thenContinue,
    );
  }

  static Pointer<Void> pendingClaims(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pendingClaims"),
    );
  }

  static void prepareClaimForGrantingWithArbiterQueue(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("prepareClaimForGrantingWithArbiterQueue:"),
      arg,
    );
  }

  static void prepareItemForUploadingFromURL(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("prepareItemForUploadingFromURL:thenContinue:"),
      arg,
      thenContinue,
    );
  }

  static Pointer<Void> purposeID(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("purposeID"),
    );
  }

  static Pointer<Void> purposeIDOfClaimOnItemAtLocation(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMessagingPresenter,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "purposeIDOfClaimOnItemAtLocation:forMessagingPresenter:"),
      arg,
      forMessagingPresenter,
    );
  }

  static void removePendingClaims(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePendingClaims:"),
      arg,
    );
  }

  static void revoked(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("revoked"),
    );
  }

  static void scheduleBlockedClaim(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleBlockedClaim:"),
      arg,
    );
  }

  static void setCameFromSuperarbiter(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("setCameFromSuperarbiter"),
    );
  }

  static void setClaimerError(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClaimerError:"),
      arg,
    );
  }

  static int shouldBeRevokedPriorToInvokingAccessor(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeRevokedPriorToInvokingAccessor"),
    );
  }

  static int shouldCancelInsteadOfWaiting(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldCancelInsteadOfWaiting"),
    );
  }

  static int shouldInformProvidersAboutEndOfWriteWithOptions(
    Pointer<NSFileAccessClaim> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("shouldInformProvidersAboutEndOfWriteWithOptions:"),
      arg,
    );
  }

  static int shouldReadingWithOptions(
    Pointer<NSFileAccessClaim> _self,
    int arg, {
    @required Pointer<Void> causePresenterToRelinquish,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReadingWithOptions:causePresenterToRelinquish:"),
      arg,
      causePresenterToRelinquish,
    );
  }

  static void startObservingClientState(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("startObservingClientState"),
    );
  }

  static void unblock(
    Pointer<NSFileAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unblock"),
    );
  }

  static void unblockClaimerForReason(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unblockClaimerForReason:"),
      arg,
    );
  }

  static void whenDevaluedPerformProcedure(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("whenDevaluedPerformProcedure:"),
      arg,
    );
  }

  static void whenFinishedPerformProcedure(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("whenFinishedPerformProcedure:"),
      arg,
    );
  }

  static void whenRevokedPerformProcedure(
    Pointer<NSFileAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("whenRevokedPerformProcedure:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileAccessIntent_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessIntent extends Struct<NSFileAccessIntent> {
  factory NSFileAccessIntent._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessIntent> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileAccessIntent").cast<NSFileAccessIntent>();
  }

  static Pointer<Void> URL(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static void dealloc(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int isRead(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRead"),
    );
  }

  static int readingOptions(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("readingOptions"),
    );
  }

  static void setURL(
    Pointer<NSFileAccessIntent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static int writingOptions(
    Pointer<NSFileAccessIntent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("writingOptions"),
    );
  }
}

/// Objective-C class _NSFileAccessNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessNode extends Struct<NSFileAccessNode> {
  factory NSFileAccessNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileAccessNode").cast<NSFileAccessNode>();
  }

  static void addAccessClaim(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAccessClaim:"),
      arg,
    );
  }

  static void addPresenter(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPresenter:"),
      arg,
    );
  }

  static void addProgressPublisher(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addProgressPublisher:"),
      arg,
    );
  }

  static void addProgressSubscriber(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addProgressSubscriber:"),
      arg,
    );
  }

  static void assertDead(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("assertDead"),
    );
  }

  static void assertDescendantsLive(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("assertDescendantsLive"),
    );
  }

  static void assertLive(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("assertLive"),
    );
  }

  static Pointer<Void> biggestFilePackageLocation(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("biggestFilePackageLocation"),
    );
  }

  static Pointer<Void> childForRange(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("childForRange:ofPath:"),
      arg,
      ofPath,
    );
  }

  static void dealloc(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> descendantAtPath$componentRange$create$(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> componentRange,
    @required int create,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("descendantAtPath:componentRange:create:"),
      arg,
      componentRange,
      create,
    );
  }

  static Pointer<Void>
      descendantAtPath$componentRange$forAddingLeafNode$create$(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> componentRange,
    @required Pointer<Void> forAddingLeafNode,
    @required int create,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "descendantAtPath:componentRange:forAddingLeafNode:create:"),
      arg,
      componentRange,
      forAddingLeafNode,
      create,
    );
  }

  static Pointer<Void> descendantForFileURL(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descendantForFileURL:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required int excludingExcessNodes,
    @required int excludingReactors,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "descriptionWithIndenting:excludingExcessNodes:excludingReactors:"),
      arg,
      excludingExcessNodes,
      excludingReactors,
    );
  }

  static void forEachAccessClaimOnItemOrContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachAccessClaimOnItemOrContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachAccessClaimOnItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachAccessClaimOnItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachDescendantPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachDescendantPerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachPresenterOfContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfContainingFilePackagePerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachPresenterOfContainingFilePackagePerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfContainingItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachPresenterOfContainingItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfItemOrContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachPresenterOfItemOrContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfItemOrContainingItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachPresenterOfItemOrContainingItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachPresenterOfItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachPresenterOfItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachProgressPublisherOfItemOrContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachProgressPublisherOfItemOrContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachProgressPublisherOfItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachProgressPublisherOfItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachProgressSubscriberOfItemOrContainingItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachProgressSubscriberOfItemOrContainingItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachProgressSubscriberOfItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachProgressSubscriberOfItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachProgressThingOfItemOrContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachProgressThingOfItemOrContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachReactorToItemOrContainedItemPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachReactorToItemOrContainedItemPerformProcedure:"),
      arg,
    );
  }

  static void forEachRelevantAccessClaimForEvaluatingAgainstClaim(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> performProcedure,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forEachRelevantAccessClaimForEvaluatingAgainstClaim:performProcedure:"),
      arg,
      performProcedure,
    );
  }

  static void forEachRelevantAccessClaimPerformProcedure(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forEachRelevantAccessClaimPerformProcedure:"),
      arg,
    );
  }

  static Pointer<Void> initWithParent(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
    @required Pointer<Void> normalizedName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithParent:name:normalizedName:"),
      arg,
      name,
      normalizedName,
    );
  }

  static int itemIsFilePackage(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemIsFilePackage"),
    );
  }

  static int itemIsInItemAtLocation(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemIsInItemAtLocation:"),
      arg,
    );
  }

  static int itemIsItemAtLocation(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemIsItemAtLocation:"),
      arg,
    );
  }

  static int itemIsSubarbitrable(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("itemIsSubarbitrable"),
    );
  }

  static Pointer<Void> itemProvider(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemProvider"),
    );
  }

  static Pointer<Void> normalizationOfChildName(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("normalizationOfChildName:"),
      arg,
    );
  }

  static Pointer<Void> parent(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parent"),
    );
  }

  static Pointer<Void> pathExceptPrivate(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathExceptPrivate"),
    );
  }

  static Pointer<Void> pathFromAncestor(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathFromAncestor:"),
      arg,
    );
  }

  static Pointer<Void> pathToDescendantForFileURL(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> componentRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathToDescendantForFileURL:componentRange:"),
      arg,
      componentRange,
    );
  }

  static void removeAccessClaim(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAccessClaim:"),
      arg,
    );
  }

  static void removeChildForNormalizedName(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeChildForNormalizedName:"),
      arg,
    );
  }

  static void removePresenter(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePresenter:"),
      arg,
    );
  }

  static void removeProgressPublisher(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeProgressPublisher:"),
      arg,
    );
  }

  static void removeProgressSubscriber(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeProgressSubscriber:"),
      arg,
    );
  }

  static void removeProvider(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeProvider:"),
      arg,
    );
  }

  static void removeSelfIfUseless(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeSelfIfUseless"),
    );
  }

  static Pointer<Void> sensitiveDescription(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sensitiveDescription"),
    );
  }

  static Pointer<Void> sensitiveSubarbiterDescription(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sensitiveSubarbiterDescription"),
    );
  }

  static void setArbitrationBoundary(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("setArbitrationBoundary"),
    );
  }

  static void setChild(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forName,
    @required Pointer<Void> normalizedName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChild:forName:normalizedName:"),
      arg,
      forName,
      normalizedName,
    );
  }

  static void setParent(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setParent:name:"),
      arg,
      name,
    );
  }

  static int setProvider(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setProvider:"),
      arg,
    );
  }

  static void setSymbolicLinkDestination(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSymbolicLinkDestination:"),
      arg,
    );
  }

  static Pointer<Void> standardizedURL(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardizedURL"),
    );
  }

  static Pointer<Void> subarbiterDescription(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subarbiterDescription"),
    );
  }

  static Pointer<Void> url(
    Pointer<NSFileAccessNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }

  static Pointer<Void> urlOfSubitemAtPath(
    Pointer<NSFileAccessNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> plusPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("urlOfSubitemAtPath:plusPath:"),
      arg,
      plusPath,
    );
  }
}

/// Objective-C class _NSFileAccessProcessManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessProcessManager extends Struct<NSFileAccessProcessManager> {
  factory NSFileAccessProcessManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessProcessManager> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileAccessProcessManager")
        .cast<NSFileAccessProcessManager>();
  }

  static Pointer<Void> URLs(
    Pointer<NSFileAccessProcessManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URLs"),
    );
  }

  static void allowSuspension(
    Pointer<NSFileAccessProcessManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowSuspension"),
    );
  }

  static void dealloc(
    Pointer<NSFileAccessProcessManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithClient(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClient:queue:"),
      arg,
      queue,
    );
  }

  static void invalidate(
    Pointer<NSFileAccessProcessManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void killProcessWithMessage(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("killProcessWithMessage:"),
      arg,
    );
  }

  static void preventSuspensionWithActivityName(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("preventSuspensionWithActivityName:"),
      arg,
    );
  }

  static void safelySendMessageWithReplyUsingBlock(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("safelySendMessageWithReplyUsingBlock:"),
      arg,
    );
  }

  static void setSuspensionHandler(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuspensionHandler:"),
      arg,
    );
  }

  static void setURLs(
    Pointer<NSFileAccessProcessManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURLs:"),
      arg,
    );
  }

  static Pointer<Void> suspensionHandler(
    Pointer<NSFileAccessProcessManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suspensionHandler"),
    );
  }
}

/// Objective-C class _NSFileAccessSubarbiter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAccessSubarbiter extends Struct<NSFileAccessSubarbiter> {
  factory NSFileAccessSubarbiter._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAccessSubarbiter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileAccessSubarbiter")
        .cast<NSFileAccessSubarbiter>();
  }

  static void cancelAccessClaimForID(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelAccessClaimForID:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileAccessSubarbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> grantAccessClaim(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required int synchronouslyIfPossible,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("grantAccessClaim:synchronouslyIfPossible:"),
      arg,
      synchronouslyIfPossible,
    );
  }

  static void grantSubarbitrationClaim(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withServer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("grantSubarbitrationClaim:withServer:"),
      arg,
      withServer,
    );
  }

  static Pointer<Void> initWithQueue(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> listener,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithQueue:listener:"),
      arg,
      listener,
    );
  }

  static int listener(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static void revokeAccessClaimForID(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeAccessClaimForID:"),
      arg,
    );
  }

  static void revokeSubarbitrationClaimForID(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("revokeSubarbitrationClaimForID:"),
      arg,
    );
  }

  static void stopArbitrating(
    Pointer<NSFileAccessSubarbiter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stopArbitrating"),
    );
  }

  static void tiePresenterForID(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("tiePresenterForID:toItemAtURL:"),
      arg,
      toItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityAttributes$ofItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityAttributes,
    @required Pointer<Void> ofItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didChangeUbiquityAttributes:ofItemAtURL:"),
      arg,
      didChangeUbiquityAttributes,
      ofItemAtURL,
    );
  }

  static void writerWithPurposeID$didMoveItemAtURL$toURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMoveItemAtURL,
    @required Pointer<Void> toURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMoveItemAtURL:toURL:"),
      arg,
      didMoveItemAtURL,
      toURL,
    );
  }

  static void writerWithPurposeID$didChangeUbiquityOfItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeUbiquityOfItemAtURL:"),
      arg,
      didChangeUbiquityOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didChangeSharingOfItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeSharingOfItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeSharingOfItemAtURL:"),
      arg,
      didChangeSharingOfItemAtURL,
    );
  }

  static void writerWithPurposeID$didMakeItemDisappearAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMakeItemDisappearAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didMakeItemDisappearAtURL:"),
      arg,
      didMakeItemDisappearAtURL,
    );
  }

  static void writerWithPurposeID$didChangeItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didChangeItemAtURL:"),
      arg,
      didChangeItemAtURL,
    );
  }

  static void writerWithPurposeID$didDisconnectItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didDisconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didDisconnectItemAtURL:"),
      arg,
      didDisconnectItemAtURL,
    );
  }

  static void writerWithPurposeID$didReconnectItemAtURL$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReconnectItemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("writerWithPurposeID:didReconnectItemAtURL:"),
      arg,
      didReconnectItemAtURL,
    );
  }

  static void
      writerWithPurposeID$didVersionChangeOfKind$toItemAtURL$withClientID$name$(
    Pointer<NSFileAccessSubarbiter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didVersionChangeOfKind,
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Void> withClientID,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "writerWithPurposeID:didVersionChangeOfKind:toItemAtURL:withClientID:name:"),
      arg,
      didVersionChangeOfKind,
      toItemAtURL,
      withClientID,
      name,
    );
  }
}

/// Objective-C class _NSFileAttributes_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileAttributes extends Struct<NSFileAttributes> {
  factory NSFileAttributes._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileAttributes> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileAttributes").cast<NSFileAttributes>();
  }

  static int count(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> fileGroupOwnerAccountName(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileGroupOwnerAccountName"),
    );
  }

  static int fileGroupOwnerAccountNumber(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fileGroupOwnerAccountNumber"),
    );
  }

  static Pointer<Void> fileModificationDate(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileModificationDate"),
    );
  }

  static Pointer<Void> fileOwnerAccountName(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileOwnerAccountName"),
    );
  }

  static int fileOwnerAccountNumber(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fileOwnerAccountNumber"),
    );
  }

  static int filePosixPermissions(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("filePosixPermissions"),
    );
  }

  static int fileSize(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fileSize"),
    );
  }

  static int fileSystemFileNumber(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fileSystemFileNumber"),
    );
  }

  static int fileSystemNumber(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("fileSystemNumber"),
    );
  }

  static Pointer<Void> fileType(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileType"),
    );
  }

  static int hash(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isDirectory(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDirectory"),
    );
  }

  static int isEqual(
    Pointer<NSFileAttributes> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSFileAttributes> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSFileAttributes> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileCoordinator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileCoordinator extends Struct<NSFileCoordinator> {
  factory NSFileCoordinator._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileCoordinator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileCoordinator").cast<NSFileCoordinator>();
  }

  static void cancel(
    Pointer<NSFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static void coordinateAccessWithIntents(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queue,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("coordinateAccessWithIntents:queue:byAccessor:"),
      arg,
      queue,
      byAccessor,
    );
  }

  static void coordinateReadingItemAtURL$options$error$byAccessor$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("coordinateReadingItemAtURL:options:error:byAccessor:"),
      arg,
      options,
      error,
      byAccessor,
    );
  }

  static void
      coordinateReadingItemAtURL$options$writingItemAtURL$options$error$byAccessor$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> writingItemAtURL,
    @required int name2,
    @required Pointer<Pointer<Void>> error,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"),
      arg,
      options,
      writingItemAtURL,
      name2,
      error,
      byAccessor,
    );
  }

  static void coordinateWritingItemAtURL$options$error$byAccessor$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("coordinateWritingItemAtURL:options:error:byAccessor:"),
      arg,
      options,
      error,
      byAccessor,
    );
  }

  static void
      coordinateWritingItemAtURL$options$writingItemAtURL$options$error$byAccessor$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> writingItemAtURL,
    @required int name2,
    @required Pointer<Pointer<Void>> error,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"),
      arg,
      options,
      writingItemAtURL,
      name2,
      error,
      byAccessor,
    );
  }

  static void dealloc(
    Pointer<NSFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithFilePresenter(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFilePresenter:"),
      arg,
    );
  }

  static void itemAtURL$didMoveToURL$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didMoveToURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtURL:didMoveToURL:"),
      arg,
      didMoveToURL,
    );
  }

  static void itemAtURL$willMoveToURL$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> willMoveToURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtURL:willMoveToURL:"),
      arg,
      willMoveToURL,
    );
  }

  static void itemAtURL$didChangeUbiquityAttributes$(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeUbiquityAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtURL:didChangeUbiquityAttributes:"),
      arg,
      didChangeUbiquityAttributes,
    );
  }

  static void prepareForReadingItemsAtURLs(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> writingItemsAtURLs,
    @required int name2,
    @required Pointer<Pointer<Void>> error,
    @required Pointer<Void> byAccessor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:"),
      arg,
      options,
      writingItemsAtURLs,
      name2,
      error,
      byAccessor,
    );
  }

  static Pointer<Void> purposeIdentifier(
    Pointer<NSFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("purposeIdentifier"),
    );
  }

  static void releaseAccess(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("releaseAccess:"),
      arg,
    );
  }

  static Pointer<Void> retainAccess(
    Pointer<NSFileCoordinator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retainAccess"),
    );
  }

  static void setPurposeIdentifier(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPurposeIdentifier:"),
      arg,
    );
  }

  static void sharingDidChangeForItemAtURL(
    Pointer<NSFileCoordinator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("sharingDidChangeForItemAtURL:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileCoordinatorAccessorBlockCompletion_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileCoordinatorAccessorBlockCompletion
    extends Struct<NSFileCoordinatorAccessorBlockCompletion> {
  factory NSFileCoordinatorAccessorBlockCompletion._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileCoordinatorAccessorBlockCompletion> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileCoordinatorAccessorBlockCompletion")
        .cast<NSFileCoordinatorAccessorBlockCompletion>();
  }

  static void dealloc(
    Pointer<NSFileCoordinatorAccessorBlockCompletion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decrement(
    Pointer<NSFileCoordinatorAccessorBlockCompletion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("decrement"),
    );
  }

  static void increment(
    Pointer<NSFileCoordinatorAccessorBlockCompletion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("increment"),
    );
  }
}

/// Objective-C class _NSFileHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileHandle extends Struct<NSFileHandle> {
  factory NSFileHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileHandle").cast<NSFileHandle>();
  }

  static Pointer<Void> availableData(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availableData"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void closeFile(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("closeFile"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int fileDescriptor(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("fileDescriptor"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithFileDescriptor$closeOnDealloc$(
    Pointer<NSFileHandle> _self,
    int arg, {
    @required int closeOnDealloc,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Int8_returns_p(
      _self,
      _objc.getSelector("initWithFileDescriptor:closeOnDealloc:"),
      arg,
      closeOnDealloc,
    );
  }

  static Pointer<Void> initWithFileDescriptor$(
    Pointer<NSFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithFileDescriptor:"),
      arg,
    );
  }

  static Pointer<Void> initWithPath$flags$createMode$error$(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:flags:createMode:error:"),
      arg,
      flags,
      createMode,
      error,
    );
  }

  static Pointer<Void> initWithPath$flags$createMode$(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_returns_p(
      _self,
      _objc.getSelector("initWithPath:flags:createMode:"),
      arg,
      flags,
      createMode,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int createMode,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:flags:createMode:error:"),
      arg,
      flags,
      createMode,
      error,
    );
  }

  static int offsetInFile(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("offsetInFile"),
    );
  }

  static Pointer<Void> readDataOfLength(
    Pointer<NSFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("readDataOfLength:"),
      arg,
    );
  }

  static Pointer<Void> readDataToEndOfFile(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readDataToEndOfFile"),
    );
  }

  static Pointer<Void> readabilityHandler(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readabilityHandler"),
    );
  }

  static int seekToEndOfFile(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("seekToEndOfFile"),
    );
  }

  static void seekToFileOffset(
    Pointer<NSFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("seekToFileOffset:"),
      arg,
    );
  }

  static void setReadabilityHandler(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReadabilityHandler:"),
      arg,
    );
  }

  static void setWriteabilityHandler(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWriteabilityHandler:"),
      arg,
    );
  }

  static void synchronizeFile(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("synchronizeFile"),
    );
  }

  static void truncateFileAtOffset(
    Pointer<NSFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("truncateFileAtOffset:"),
      arg,
    );
  }

  static void writeData(
    Pointer<NSFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static Pointer<Void> writeabilityHandler(
    Pointer<NSFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("writeabilityHandler"),
    );
  }
}

/// Objective-C class _NSFileManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileManager extends Struct<NSFileManager> {
  factory NSFileManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileManager> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileManager").cast<NSFileManager>();
  }

  static Pointer<Void> URLForDirectory(
    Pointer<NSFileManager> _self,
    int arg, {
    @required int inDomain,
    @required Pointer<Void> appropriateForURL,
    @required int create,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "URLForDirectory:inDomain:appropriateForURL:create:error:"),
      arg,
      inDomain,
      appropriateForURL,
      create,
      error,
    );
  }

  static Pointer<Void> URLForPublishingUbiquitousItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> expirationDate,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "URLForPublishingUbiquitousItemAtURL:expirationDate:error:"),
      arg,
      expirationDate,
      error,
    );
  }

  static Pointer<Void> URLForUbiquityContainerIdentifier(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLForUbiquityContainerIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> URLsForDirectory(
    Pointer<NSFileManager> _self,
    int arg, {
    @required int inDomains,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("URLsForDirectory:inDomains:"),
      arg,
      inDomains,
    );
  }

  static Pointer<Void> abExtendedAttributeForKey(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onFile,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("abExtendedAttributeForKey:onFile:"),
      arg,
      onFile,
    );
  }

  static Pointer<Void> abExtendedAttributesOnFile(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("abExtendedAttributesOnFile:"),
      arg,
    );
  }

  static Pointer<Void> abPathToOriginalItemOfPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("abPathToOriginalItemOfPath:"),
      arg,
    );
  }

  static int abRemoveExtendedAttributeForKey(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onFile,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("abRemoveExtendedAttributeForKey:onFile:"),
      arg,
      onFile,
    );
  }

  static int abSetExtendedAttribute(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Void> onFile,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("abSetExtendedAttribute:forKey:onFile:"),
      arg,
      forKey,
      onFile,
    );
  }

  static Pointer<Void> attributesOfFileSystemForPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributesOfFileSystemForPath:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> attributesOfItemAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributesOfItemAtPath:error:"),
      arg,
      error,
    );
  }

  static int changeCurrentDirectoryPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("changeCurrentDirectoryPath:"),
      arg,
    );
  }

  static int changeFileAttributes(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("changeFileAttributes:atPath:"),
      arg,
      atPath,
    );
  }

  static Pointer<Void> componentsToDisplayForPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("componentsToDisplayForPath:"),
      arg,
    );
  }

  static Pointer<Void> containerURLForSecurityApplicationGroupIdentifier(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("containerURLForSecurityApplicationGroupIdentifier:"),
      arg,
    );
  }

  static Pointer<Void> contentsAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("contentsAtPath:"),
      arg,
    );
  }

  static int contentsEqualAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("contentsEqualAtPath:andPath:"),
      arg,
      andPath,
    );
  }

  static Pointer<Void> contentsOfDirectoryAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("contentsOfDirectoryAtPath:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> contentsOfDirectoryAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> includingPropertiesForKeys,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:"),
      arg,
      includingPropertiesForKeys,
      options,
      error,
    );
  }

  static int copyItemAtPath$toPath$options$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("copyItemAtPath:toPath:options:error:"),
      arg,
      toPath,
      options,
      error,
    );
  }

  static int copyItemAtPath$toPath$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("copyItemAtPath:toPath:error:"),
      arg,
      toPath,
      error,
    );
  }

  static int copyItemAtURL$toURL$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("copyItemAtURL:toURL:error:"),
      arg,
      toURL,
      error,
    );
  }

  static int copyItemAtURL$toURL$options$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("copyItemAtURL:toURL:options:error:"),
      arg,
      toURL,
      options,
      error,
    );
  }

  static int copyPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Void> handler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("copyPath:toPath:handler:"),
      arg,
      toPath,
      handler,
    );
  }

  static int
      createDirectoryAtPath$withIntermediateDirectories$attributes$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required int withIntermediateDirectories,
    @required Pointer<Void> attributes,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "createDirectoryAtPath:withIntermediateDirectories:attributes:error:"),
      arg,
      withIntermediateDirectories,
      attributes,
      error,
    );
  }

  static int createDirectoryAtPath$attributes$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("createDirectoryAtPath:attributes:"),
      arg,
      attributes,
    );
  }

  static int createDirectoryAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required int withIntermediateDirectories,
    @required Pointer<Void> attributes,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "createDirectoryAtURL:withIntermediateDirectories:attributes:error:"),
      arg,
      withIntermediateDirectories,
      attributes,
      error,
    );
  }

  static int createFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> contents,
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("createFileAtPath:contents:attributes:"),
      arg,
      contents,
      attributes,
    );
  }

  static int createSymbolicLinkAtPath$withDestinationPath$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDestinationPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("createSymbolicLinkAtPath:withDestinationPath:error:"),
      arg,
      withDestinationPath,
      error,
    );
  }

  static int createSymbolicLinkAtPath$pathContent$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> pathContent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("createSymbolicLinkAtPath:pathContent:"),
      arg,
      pathContent,
    );
  }

  static int createSymbolicLinkAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDestinationURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("createSymbolicLinkAtURL:withDestinationURL:error:"),
      arg,
      withDestinationURL,
      error,
    );
  }

  static Pointer<Void> currentDirectoryPath(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentDirectoryPath"),
    );
  }

  static Pointer<Void> cutCreateUniqueDirectoryWithName(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atPath,
    @required Pointer<Void> ofType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("cutCreateUniqueDirectoryWithName:atPath:ofType:"),
      arg,
      atPath,
      ofType,
    );
  }

  static Pointer<Void> cutRandomTemporaryPathWithFileName(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("cutRandomTemporaryPathWithFileName:"),
      arg,
    );
  }

  static Pointer<Void> cutUniqueFilename(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atPath,
    @required Pointer<Void> ofType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("cutUniqueFilename:atPath:ofType:"),
      arg,
      atPath,
      ofType,
    );
  }

  static void dealloc(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> destinationOfSymbolicLinkAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("destinationOfSymbolicLinkAtPath:error:"),
      arg,
      error,
    );
  }

  static int directoryCanBeCreatedAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("directoryCanBeCreatedAtPath:"),
      arg,
    );
  }

  static Pointer<Void> directoryContentsAtPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("directoryContentsAtPath:"),
      arg,
    );
  }

  static Pointer<Void>
      directoryContentsAtPath$matchingExtension$options$keepExtension$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> matchingExtension,
    @required int options,
    @required int keepExtension,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "directoryContentsAtPath:matchingExtension:options:keepExtension:error:"),
      arg,
      matchingExtension,
      options,
      keepExtension,
      error,
    );
  }

  static Pointer<Void>
      directoryContentsAtPath$matchingExtension$options$keepExtension$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> matchingExtension,
    @required int options,
    @required int keepExtension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_Int8_returns_p(
      _self,
      _objc.getSelector(
          "directoryContentsAtPath:matchingExtension:options:keepExtension:"),
      arg,
      matchingExtension,
      options,
      keepExtension,
    );
  }

  static Pointer<Void> displayNameAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("displayNameAtPath:"),
      arg,
    );
  }

  static Pointer<Void> enumeratorAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("enumeratorAtPath:"),
      arg,
    );
  }

  static Pointer<Void> enumeratorAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> includingPropertiesForKeys,
    @required int options,
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:"),
      arg,
      includingPropertiesForKeys,
      options,
      errorHandler,
    );
  }

  static int evictUbiquitousItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evictUbiquitousItemAtURL:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> extendedAttributeForKey(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("extendedAttributeForKey:atPath:error:"),
      arg,
      atPath,
      error,
    );
  }

  static Pointer<Void> extendedAttributesAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("extendedAttributesAtPath:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> fileAttributesAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required int traverseLink,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("fileAttributesAtPath:traverseLink:"),
      arg,
      traverseLink,
    );
  }

  static int fileExistsAtPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("fileExistsAtPath:"),
      arg,
    );
  }

  static int fileExistsAtPath$isDirectory$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> isDirectory,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("fileExistsAtPath:isDirectory:"),
      arg,
      isDirectory,
    );
  }

  static Pointer<Void> fileSystemAttributesAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fileSystemAttributesAtPath:"),
      arg,
    );
  }

  static Pointer<Utf8> fileSystemRepresentationWithPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fileSystemRepresentationWithPath:"),
      arg,
    );
  }

  static int filesystemItemCopyOperation$shouldCopyItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldCopyItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemCopyOperation:shouldCopyItemAtPath:toPath:"),
      arg,
      shouldCopyItemAtPath,
      toPath,
    );
  }

  static int
      filesystemItemCopyOperation$shouldProceedAfterError$copyingItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldProceedAfterError,
    @required Pointer<Void> copyingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemCopyOperation:shouldProceedAfterError:copyingItemAtPath:toPath:"),
      arg,
      shouldProceedAfterError,
      copyingItemAtPath,
      toPath,
    );
  }

  static int filesystemItemLinkOperation$shouldLinkItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldLinkItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemLinkOperation:shouldLinkItemAtPath:toPath:"),
      arg,
      shouldLinkItemAtPath,
      toPath,
    );
  }

  static int
      filesystemItemLinkOperation$shouldProceedAfterError$linkingItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldProceedAfterError,
    @required Pointer<Void> linkingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemLinkOperation:shouldProceedAfterError:linkingItemAtPath:toPath:"),
      arg,
      shouldProceedAfterError,
      linkingItemAtPath,
      toPath,
    );
  }

  static int filesystemItemMoveOperation$shouldMoveItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldMoveItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemMoveOperation:shouldMoveItemAtPath:toPath:"),
      arg,
      shouldMoveItemAtPath,
      toPath,
    );
  }

  static int
      filesystemItemMoveOperation$shouldProceedAfterError$movingItemAtPath$toPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldProceedAfterError,
    @required Pointer<Void> movingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemMoveOperation:shouldProceedAfterError:movingItemAtPath:toPath:"),
      arg,
      shouldProceedAfterError,
      movingItemAtPath,
      toPath,
    );
  }

  static int filesystemItemRemoveOperation$shouldRemoveItemAtPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldRemoveItemAtPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc
          .getSelector("filesystemItemRemoveOperation:shouldRemoveItemAtPath:"),
      arg,
      shouldRemoveItemAtPath,
    );
  }

  static int
      filesystemItemRemoveOperation$shouldProceedAfterError$removingItemAtPath$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldProceedAfterError,
    @required Pointer<Void> removingItemAtPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemRemoveOperation:shouldProceedAfterError:removingItemAtPath:"),
      arg,
      shouldProceedAfterError,
      removingItemAtPath,
    );
  }

  static void getFileProviderMessageInterfacesForItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "getFileProviderMessageInterfacesForItemAtURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void getFileProviderServicesForItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "getFileProviderServicesForItemAtURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static int getFileSystemRepresentation(
    Pointer<NSFileManager> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
    @required Pointer<Void> withPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("getFileSystemRepresentation:maxLength:withPath:"),
      arg,
      maxLength,
      withPath,
    );
  }

  static int getRelationship$ofDirectoryAtURL$toItemAtURL$error$(
    Pointer<NSFileManager> _self,
    Pointer<Int64> arg, {
    @required Pointer<Void> ofDirectoryAtURL,
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getRelationship:ofDirectoryAtURL:toItemAtURL:error:"),
      arg,
      ofDirectoryAtURL,
      toItemAtURL,
      error,
    );
  }

  static int getRelationship$ofDirectory$inDomain$toItemAtURL$error$(
    Pointer<NSFileManager> _self,
    Pointer<Int64> arg, {
    @required int ofDirectory,
    @required int inDomain,
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getRelationship:ofDirectory:inDomain:toItemAtURL:error:"),
      arg,
      ofDirectory,
      inDomain,
      toItemAtURL,
      error,
    );
  }

  static Pointer<Void> homeDirectoryForCurrentUser(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("homeDirectoryForCurrentUser"),
    );
  }

  static Pointer<Void> homeDirectoryForUser(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("homeDirectoryForUser:"),
      arg,
    );
  }

  static int isDeletableFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDeletableFileAtPath:"),
      arg,
    );
  }

  static int isExecutableFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecutableFileAtPath:"),
      arg,
    );
  }

  static int isReadableFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReadableFileAtPath:"),
      arg,
    );
  }

  static int isUbiquitousItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUbiquitousItemAtURL:"),
      arg,
    );
  }

  static int isWritableFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isWritableFileAtPath:"),
      arg,
    );
  }

  static int linkItemAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("linkItemAtPath:toPath:error:"),
      arg,
      toPath,
      error,
    );
  }

  static int linkItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("linkItemAtURL:toURL:error:"),
      arg,
      toURL,
      error,
    );
  }

  static int linkPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Void> handler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("linkPath:toPath:handler:"),
      arg,
      toPath,
      handler,
    );
  }

  static Pointer<Void> mountedVolumeURLsIncludingResourceValuesForKeys(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "mountedVolumeURLsIncludingResourceValuesForKeys:options:"),
      arg,
      options,
    );
  }

  static int moveItemAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("moveItemAtPath:toPath:error:"),
      arg,
      toPath,
      error,
    );
  }

  static int moveItemAtURL$toURL$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("moveItemAtURL:toURL:error:"),
      arg,
      toURL,
      error,
    );
  }

  static int moveItemAtURL$toURL$options$error$(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("moveItemAtURL:toURL:options:error:"),
      arg,
      toURL,
      options,
      error,
    );
  }

  static int movePath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
    @required Pointer<Void> handler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("movePath:toPath:handler:"),
      arg,
      toPath,
      handler,
    );
  }

  static Pointer<Void> pathContentOfSymbolicLinkAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("pathContentOfSymbolicLinkAtPath:"),
      arg,
    );
  }

  static int removeExtendedAttributeForKey(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removeExtendedAttributeForKey:atPath:error:"),
      arg,
      atPath,
      error,
    );
  }

  static int removeFileAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> handler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removeFileAtPath:handler:"),
      arg,
      handler,
    );
  }

  static int removeItemAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removeItemAtPath:error:"),
      arg,
      error,
    );
  }

  static int removeItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removeItemAtURL:error:"),
      arg,
      error,
    );
  }

  static int replaceItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withItemAtURL,
    @required Pointer<Void> backupItemName,
    @required int options,
    @required Pointer<Pointer<Void>> resultingItemURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:"),
      arg,
      withItemAtURL,
      backupItemName,
      options,
      resultingItemURL,
      error,
    );
  }

  static int setAttributes(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofItemAtPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setAttributes:ofItemAtPath:error:"),
      arg,
      ofItemAtPath,
      error,
    );
  }

  static void setDelegate(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int setExtendedAttribute(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
    @required Pointer<Void> atPath,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setExtendedAttribute:forKey:atPath:error:"),
      arg,
      forKey,
      atPath,
      error,
    );
  }

  static int setUbiquitous(
    Pointer<NSFileManager> _self,
    int arg, {
    @required Pointer<Void> itemAtURL,
    @required Pointer<Void> destinationURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setUbiquitous:itemAtURL:destinationURL:error:"),
      arg,
      itemAtURL,
      destinationURL,
      error,
    );
  }

  static int startDownloadingUbiquitousItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("startDownloadingUbiquitousItemAtURL:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> stringWithFileSystemRepresentation(
    Pointer<NSFileManager> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("stringWithFileSystemRepresentation:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> subpathsAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("subpathsAtPath:"),
      arg,
    );
  }

  static Pointer<Void> subpathsOfDirectoryAtPath(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("subpathsOfDirectoryAtPath:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> temporaryDirectory(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("temporaryDirectory"),
    );
  }

  static int trashItemAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> resultingItemURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("trashItemAtURL:resultingItemURL:error:"),
      arg,
      resultingItemURL,
      error,
    );
  }

  static Pointer<Void> ubiquityIdentityToken(
    Pointer<NSFileManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ubiquityIdentityToken"),
    );
  }

  static void unmountVolumeAtURL(
    Pointer<NSFileManager> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("unmountVolumeAtURL:options:completionHandler:"),
      arg,
      options,
      completionHandler,
    );
  }
}

/// Objective-C class _NSFileMultipleAccessClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileMultipleAccessClaim extends Struct<NSFileMultipleAccessClaim> {
  factory NSFileMultipleAccessClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileMultipleAccessClaim> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileMultipleAccessClaim")
        .cast<NSFileMultipleAccessClaim>();
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static int blocksClaim(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("blocksClaim:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void devalueSelf(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPurposeID(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> intents,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPurposeID:intents:claimer:"),
      arg,
      intents,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void resolveURLsThenMaybeContinueInvokingClaimer(
    Pointer<NSFileMultipleAccessClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resolveURLsThenMaybeContinueInvokingClaimer:"),
      arg,
    );
  }

  static int shouldBeRevokedPriorToInvokingAccessor(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeRevokedPriorToInvokingAccessor"),
    );
  }

  static int shouldCancelInsteadOfWaiting(
    Pointer<NSFileMultipleAccessClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldCancelInsteadOfWaiting"),
    );
  }
}

/// Objective-C class _NSFilePresenterAsynchronousOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterAsynchronousOperation
    extends Struct<NSFilePresenterAsynchronousOperation> {
  factory NSFilePresenterAsynchronousOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterAsynchronousOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePresenterAsynchronousOperation")
        .cast<NSFilePresenterAsynchronousOperation>();
  }

  static void finish(
    Pointer<NSFilePresenterAsynchronousOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finish"),
    );
  }

  static int isAsynchronous(
    Pointer<NSFilePresenterAsynchronousOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAsynchronous"),
    );
  }

  static int isExecuting(
    Pointer<NSFilePresenterAsynchronousOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<NSFilePresenterAsynchronousOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static void start(
    Pointer<NSFilePresenterAsynchronousOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }
}

/// Objective-C class _NSFilePresenterManagedProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterManagedProxy extends Struct<NSFilePresenterManagedProxy> {
  factory NSFilePresenterManagedProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterManagedProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePresenterManagedProxy")
        .cast<NSFilePresenterManagedProxy>();
  }

  static void accommodateDeletionOfSubitemAtURL(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("accommodateDeletionOfSubitemAtURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void collectDebuggingInformationWithCompletionHandler(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("collectDebuggingInformationWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFilePresenterManagedProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> errorHandler(
    Pointer<NSFilePresenterManagedProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorHandler"),
    );
  }

  static int filePresenterResponses(
    Pointer<NSFilePresenterManagedProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("filePresenterResponses"),
    );
  }

  static void forwardInvocation(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> initWithXPCProxy(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithXPCProxy:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static Pointer<Void> processManager(
    Pointer<NSFilePresenterManagedProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("processManager"),
    );
  }

  static void reacquireFromWritingClaimForID(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reacquireFromWritingClaimForID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void relinquishToReadingClaimWithID(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToReadingClaimWithID:options:purposeID:completionHandler:"),
      arg,
      options,
      purposeID,
      completionHandler,
    );
  }

  static void relinquishToWritingClaimWithID(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> subitemURL,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToWritingClaimWithID:options:purposeID:subitemURL:completionHandler:"),
      arg,
      options,
      purposeID,
      subitemURL,
      completionHandler,
    );
  }

  static Pointer<Void> remoteObjectProxy(
    Pointer<NSFilePresenterManagedProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxy"),
    );
  }

  static Pointer<Void> remoteObjectProxyWithErrorHandler(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxyWithErrorHandler:"),
      arg,
    );
  }

  static void saveChangesWithCompletionHandler(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveChangesWithCompletionHandler:"),
      arg,
    );
  }

  static void setErrorHandler(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorHandler:"),
      arg,
    );
  }

  static void setFilePresenterResponses(
    Pointer<NSFilePresenterManagedProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFilePresenterResponses:"),
      arg,
    );
  }

  static void setProcessManager(
    Pointer<NSFilePresenterManagedProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProcessManager:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilePresenterOperationRecord_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterOperationRecord
    extends Struct<NSFilePresenterOperationRecord> {
  factory NSFilePresenterOperationRecord._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterOperationRecord> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePresenterOperationRecord")
        .cast<NSFilePresenterOperationRecord>();
  }

  static void dealloc(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void didBegin(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("didBegin"),
    );
  }

  static void didEnd(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("didEnd"),
    );
  }

  static Pointer<Void> operationDescription(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationDescription"),
    );
  }

  static Pointer<Void> reactor(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reactor"),
    );
  }

  static void setReactor(
    Pointer<NSFilePresenterOperationRecord> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReactor:"),
      arg,
    );
  }

  static int state(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("state"),
    );
  }

  static void willEnd(
    Pointer<NSFilePresenterOperationRecord> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("willEnd"),
    );
  }
}

/// Objective-C class _NSFilePresenterProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterProxy extends Struct<NSFilePresenterProxy> {
  factory NSFilePresenterProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFilePresenterProxy").cast<NSFilePresenterProxy>();
  }

  static void accommodateDeletionWithSubitemPath(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc
          .getSelector("accommodateDeletionWithSubitemPath:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static int allowedForURL(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowedForURL:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disconnect(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disconnect"),
    );
  }

  static int disconnected(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("disconnected"),
    );
  }

  static int filePresenterResponses(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("filePresenterResponses"),
    );
  }

  static void forwardRelinquishmentForWritingClaim(
    Pointer<NSFilePresenterProxy> _self,
    int arg, {
    @required Pointer<Void> withID,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> subitemURL,
    @required int options,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "forwardRelinquishmentForWritingClaim:withID:purposeID:subitemURL:options:completionHandler:"),
      arg,
      withID,
      purposeID,
      subitemURL,
      options,
      completionHandler,
    );
  }

  static void forwardUsingProxy(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingProxy:"),
      arg,
    );
  }

  static int inSubarbiter(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("inSubarbiter"),
    );
  }

  static Pointer<Void> initWithClient(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> remotePresenter,
    @required Pointer<Void> reactorID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClient:remotePresenter:reactorID:"),
      arg,
      remotePresenter,
      reactorID,
    );
  }

  static void invalidate(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void localFileWasEvicted(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("localFileWasEvicted"),
    );
  }

  static void observeChangeAtSubitemPath(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeChangeAtSubitemPath:"),
      arg,
    );
  }

  static void observeChangeOfUbiquityAttributes(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeChangeOfUbiquityAttributes:"),
      arg,
    );
  }

  static void observeDisappearanceAtSubitemPath(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeDisappearanceAtSubitemPath:"),
      arg,
    );
  }

  static void observeDisconnectionByWriterWithPurposeID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeDisconnectionByWriterWithPurposeID:"),
      arg,
    );
  }

  static void observeMoveByWriterWithPurposeID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withPhysicalDestinationURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observeMoveByWriterWithPurposeID:withPhysicalDestinationURL:"),
      arg,
      withPhysicalDestinationURL,
    );
  }

  static void observeMoveOfSubitemAtURL(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toURL,
    @required Pointer<Void> byWriterWithPurposeID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observeMoveOfSubitemAtURL:toURL:byWriterWithPurposeID:"),
      arg,
      toURL,
      byWriterWithPurposeID,
    );
  }

  static void observeNewProvider(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeNewProvider:"),
      arg,
    );
  }

  static void observePresenterChange(
    Pointer<NSFilePresenterProxy> _self,
    int arg, {
    @required Pointer<Void> atSubitemURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("observePresenterChange:atSubitemURL:"),
      arg,
      atSubitemURL,
    );
  }

  static void observeReconnectionByWriterWithPurposeID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeReconnectionByWriterWithPurposeID:"),
      arg,
    );
  }

  static void observeSharingChangeAtSubitemPath(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withPhysicalURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeSharingChangeAtSubitemPath:withPhysicalURL:"),
      arg,
      withPhysicalURL,
    );
  }

  static void observeUbiquityChangeAtSubitemPath(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withPhysicalURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeUbiquityChangeAtSubitemPath:withPhysicalURL:"),
      arg,
      withPhysicalURL,
    );
  }

  static void observeVersionChangeOfKind(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withClientID,
    @required Pointer<Void> name,
    @required Pointer<Void> subitemPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observeVersionChangeOfKind:withClientID:name:subitemPath:"),
      arg,
      withClientID,
      name,
      subitemPath,
    );
  }

  static Pointer<Void> observedUbiquityAttributes(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("observedUbiquityAttributes"),
    );
  }

  static void promisedFileWasFulfilled(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("promisedFileWasFulfilled"),
    );
  }

  static void relinquishToReadingClaimWithID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> resultHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToReadingClaimWithID:options:purposeID:resultHandler:"),
      arg,
      options,
      purposeID,
      resultHandler,
    );
  }

  static void relinquishToWritingClaimWithID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> subitemPath,
    @required Pointer<Void> resultHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToWritingClaimWithID:options:purposeID:subitemPath:resultHandler:"),
      arg,
      options,
      purposeID,
      subitemPath,
      resultHandler,
    );
  }

  static void saveChangesWithCompletionHandler(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveChangesWithCompletionHandler:"),
      arg,
    );
  }

  static void setFilePresenterResponses(
    Pointer<NSFilePresenterProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFilePresenterResponses:"),
      arg,
    );
  }

  static void setInSubarbiter(
    Pointer<NSFilePresenterProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setInSubarbiter:"),
      arg,
    );
  }

  static void setItemLocation(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemLocation:"),
      arg,
    );
  }

  static void setObservedUbiquityAttributes(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservedUbiquityAttributes:"),
      arg,
    );
  }

  static void setUsesMainThreadDuringReliquishing(
    Pointer<NSFilePresenterProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesMainThreadDuringReliquishing:"),
      arg,
    );
  }

  static int shouldSendObservationMessageWithPurposeID(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldSendObservationMessageWithPurposeID:"),
      arg,
    );
  }

  static void startObservingApplicationStateWithQueue(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("startObservingApplicationStateWithQueue:"),
      arg,
    );
  }

  static void startWatchingWithQueue(
    Pointer<NSFilePresenterProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> lastEventID,
    @required Pointer<Void> unannouncedMoveHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "startWatchingWithQueue:lastEventID:unannouncedMoveHandler:"),
      arg,
      lastEventID,
      unannouncedMoveHandler,
    );
  }

  static void stopObservingApplicationState(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stopObservingApplicationState"),
    );
  }

  static int usesMainThreadDuringReliquishing(
    Pointer<NSFilePresenterProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesMainThreadDuringReliquishing"),
    );
  }
}

/// Objective-C class _NSFilePresenterRelinquishment_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterRelinquishment
    extends Struct<NSFilePresenterRelinquishment> {
  factory NSFilePresenterRelinquishment._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterRelinquishment> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePresenterRelinquishment")
        .cast<NSFilePresenterRelinquishment>();
  }

  static void addPrerelinquishReply(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPrerelinquishReply:"),
      arg,
    );
  }

  static void addRelinquishReply(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addRelinquishReply:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFilePresenterRelinquishment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void didRelinquish(
    Pointer<NSFilePresenterRelinquishment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("didRelinquish"),
    );
  }

  static void performRelinquishmentToAccessClaimIfNecessary(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingBlock,
    @required Pointer<Void> withReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "performRelinquishmentToAccessClaimIfNecessary:usingBlock:withReply:"),
      arg,
      usingBlock,
      withReply,
    );
  }

  static void performRemoteDeletePrerelinquishmentIfNecessaryUsingBlock(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "performRemoteDeletePrerelinquishmentIfNecessaryUsingBlock:withReply:"),
      arg,
      withReply,
    );
  }

  static void removeAllBlockingAccessClaimIDs(
    Pointer<NSFilePresenterRelinquishment> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllBlockingAccessClaimIDs"),
    );
  }

  static void removeBlockingAccessClaimID$(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeBlockingAccessClaimID:"),
      arg,
    );
  }

  static void removeBlockingAccessClaimID$thenContinue$(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> thenContinue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeBlockingAccessClaimID:thenContinue:"),
      arg,
      thenContinue,
    );
  }

  static void setReacquirer(
    Pointer<NSFilePresenterRelinquishment> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReacquirer:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilePresenterXPCMessenger_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePresenterXPCMessenger extends Struct<NSFilePresenterXPCMessenger> {
  factory NSFilePresenterXPCMessenger._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePresenterXPCMessenger> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePresenterXPCMessenger")
        .cast<NSFilePresenterXPCMessenger>();
  }

  static void accommodateDeletionOfSubitemAtURL(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("accommodateDeletionOfSubitemAtURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void collectDebuggingInformationWithCompletionHandler(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("collectDebuggingInformationWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFilePresenterXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithFilePresenter(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFilePresenter:queue:"),
      arg,
      queue,
    );
  }

  static Pointer<Void> initWithFilePresenterProxy(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFilePresenterProxy:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSFilePresenterXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void logSuspensionWarning(
    Pointer<NSFilePresenterXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("logSuspensionWarning"),
    );
  }

  static void observeChangeOfUbiquityAttributes(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeChangeOfUbiquityAttributes:"),
      arg,
    );
  }

  static void observeChangeWithSubitemURL(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeChangeWithSubitemURL:"),
      arg,
    );
  }

  static void observeDisconnection(
    Pointer<NSFilePresenterXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("observeDisconnection"),
    );
  }

  static void observeMoveToURL(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withSubitemURL,
    @required Pointer<Void> byWriterWithPurposeID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observeMoveToURL:withSubitemURL:byWriterWithPurposeID:"),
      arg,
      withSubitemURL,
      byWriterWithPurposeID,
    );
  }

  static void observePresenterChange(
    Pointer<NSFilePresenterXPCMessenger> _self,
    int arg, {
    @required Pointer<Void> forSubitemAtURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("observePresenterChange:forSubitemAtURL:"),
      arg,
      forSubitemAtURL,
    );
  }

  static void observeReconnection(
    Pointer<NSFilePresenterXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("observeReconnection"),
    );
  }

  static void observeSharingChangeWithSubitemURL(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeSharingChangeWithSubitemURL:"),
      arg,
    );
  }

  static void observeUbiquityChangeWithSubitemURL(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeUbiquityChangeWithSubitemURL:"),
      arg,
    );
  }

  static void observeVersionChangeOfKind(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toItemAtURL,
    @required Pointer<Void> withClientID,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observeVersionChangeOfKind:toItemAtURL:withClientID:name:"),
      arg,
      toItemAtURL,
      withClientID,
      name,
    );
  }

  static void reacquireFromReadingClaimForID(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("reacquireFromReadingClaimForID:"),
      arg,
    );
  }

  static void reacquireFromWritingClaimForID(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reacquireFromWritingClaimForID:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void relinquishToReadingClaimWithID(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToReadingClaimWithID:options:purposeID:completionHandler:"),
      arg,
      options,
      purposeID,
      completionHandler,
    );
  }

  static void relinquishToWritingClaimWithID(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> subitemURL,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "relinquishToWritingClaimWithID:options:purposeID:subitemURL:completionHandler:"),
      arg,
      options,
      purposeID,
      subitemURL,
      completionHandler,
    );
  }

  static void saveChangesWithCompletionHandler(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("saveChangesWithCompletionHandler:"),
      arg,
    );
  }

  static void setProviderPurposeIdentifier(
    Pointer<NSFilePresenterXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProviderPurposeIdentifier:"),
      arg,
    );
  }

  static void updateLastEventID(
    Pointer<NSFilePresenterXPCMessenger> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("updateLastEventID:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilePromiseWriteToken_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilePromiseWriteToken extends Struct<NSFilePromiseWriteToken> {
  factory NSFilePromiseWriteToken._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilePromiseWriteToken> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilePromiseWriteToken")
        .cast<NSFilePromiseWriteToken>();
  }

  static void dealloc(
    Pointer<NSFilePromiseWriteToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> logicalURL(
    Pointer<NSFilePromiseWriteToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("logicalURL"),
    );
  }

  static Pointer<Void> promiseURL(
    Pointer<NSFilePromiseWriteToken> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("promiseURL"),
    );
  }

  static void setLogicalURL(
    Pointer<NSFilePromiseWriteToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLogicalURL:"),
      arg,
    );
  }

  static void setPromiseURL(
    Pointer<NSFilePromiseWriteToken> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPromiseURL:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileProviderMessageInterface_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileProviderMessageInterface
    extends Struct<NSFileProviderMessageInterface> {
  factory NSFileProviderMessageInterface._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileProviderMessageInterface> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileProviderMessageInterface")
        .cast<NSFileProviderMessageInterface>();
  }

  static void dealloc(
    Pointer<NSFileProviderMessageInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileProviderMessageInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileProviderMessageInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSFileProviderMessageInterface> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> itemIdentifier,
    @required Pointer<Void> providerIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:itemIdentifier:providerIdentifier:"),
      arg,
      itemIdentifier,
      providerIdentifier,
    );
  }

  static Pointer<Void> itemIdentifier(
    Pointer<NSFileProviderMessageInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemIdentifier"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSFileProviderMessageInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> providerIdentifier(
    Pointer<NSFileProviderMessageInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("providerIdentifier"),
    );
  }

  static void setItemIdentifier(
    Pointer<NSFileProviderMessageInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemIdentifier:"),
      arg,
    );
  }

  static void setProviderIdentifier(
    Pointer<NSFileProviderMessageInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProviderIdentifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileProviderMessenger_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileProviderMessenger extends Struct<NSFileProviderMessenger> {
  factory NSFileProviderMessenger._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileProviderMessenger> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileProviderMessenger")
        .cast<NSFileProviderMessenger>();
  }

  static void dealloc(
    Pointer<NSFileProviderMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithInterface(
    Pointer<NSFileProviderMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> protocol,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInterface:protocol:"),
      arg,
      protocol,
    );
  }

  static void invalidate(
    Pointer<NSFileProviderMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static Pointer<Void> remoteObjectProxyWithErrorHandler(
    Pointer<NSFileProviderMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxyWithErrorHandler:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileProviderProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileProviderProxy extends Struct<NSFileProviderProxy> {
  factory NSFileProviderProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileProviderProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileProviderProxy").cast<NSFileProviderProxy>();
  }

  static int allowedForURL(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowedForURL:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void forwardUsingProxy(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingProxy:"),
      arg,
    );
  }

  static Pointer<Void> initWithClient(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> remoteProvider,
    @required Pointer<Void> reactorID,
    @required Pointer<Void> secureID,
    @required Pointer<Void> uniqueID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithClient:remoteProvider:reactorID:secureID:uniqueID:"),
      arg,
      remoteProvider,
      reactorID,
      secureID,
      uniqueID,
    );
  }

  static void invalidate(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void observeEndOfWriteAtLocation(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAccessClaim,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeEndOfWriteAtLocation:forAccessClaim:"),
      arg,
      forAccessClaim,
    );
  }

  static void observePresentationChangeOfKind(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withPresenter,
    @required Pointer<Void> url,
    @required Pointer<Void> newURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observePresentationChangeOfKind:withPresenter:url:newURL:"),
      arg,
      withPresenter,
      url,
      newURL,
    );
  }

  static Pointer<Void> provideItemAtURL(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required int withOptions,
    @required Pointer<Void> forAccessClaim,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "provideItemAtURL:withOptions:forAccessClaim:completionHandler:"),
      arg,
      withOptions,
      forAccessClaim,
      completionHandler,
    );
  }

  static void provideLogicalURLForURL(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("provideLogicalURLForURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void providePhysicalURLForURL(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("providePhysicalURLForURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> remoteProvider(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remoteProvider"),
    );
  }

  static Pointer<Void> secureID(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secureID"),
    );
  }

  static void setItemLocation(
    Pointer<NSFileProviderProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemLocation:"),
      arg,
    );
  }

  static void setWantsWriteNotifications(
    Pointer<NSFileProviderProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWantsWriteNotifications:"),
      arg,
    );
  }

  static Pointer<Void> uniqueID(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueID"),
    );
  }

  static int wantsWriteNotifications(
    Pointer<NSFileProviderProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wantsWriteNotifications"),
    );
  }
}

/// Objective-C class _NSFileProviderService_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileProviderService extends Struct<NSFileProviderService> {
  factory NSFileProviderService._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileProviderService> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileProviderService")
        .cast<NSFileProviderService>();
  }

  static void dealloc(
    Pointer<NSFileProviderService> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getFileProviderConnectionWithCompletionHandler(
    Pointer<NSFileProviderService> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getFileProviderConnectionWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSFileProviderService> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> endpointCreatingProxy,
    @required Pointer<Void> requestFinishedGroup,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:endpointCreatingProxy:requestFinishedGroup:"),
      arg,
      endpointCreatingProxy,
      requestFinishedGroup,
    );
  }

  static Pointer<Void> name(
    Pointer<NSFileProviderService> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }
}

/// Objective-C class _NSFileProviderXPCMessenger_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileProviderXPCMessenger extends Struct<NSFileProviderXPCMessenger> {
  factory NSFileProviderXPCMessenger._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileProviderXPCMessenger> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileProviderXPCMessenger")
        .cast<NSFileProviderXPCMessenger>();
  }

  static void cancelProvidingItemAtURL(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forClaimWithID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("cancelProvidingItemAtURL:forClaimWithID:"),
      arg,
      forClaimWithID,
    );
  }

  static void checkInProviderWithReply(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("checkInProviderWithReply:"),
      arg,
    );
  }

  static void collectDebuggingInformationWithCompletionHandler(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("collectDebuggingInformationWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileProviderXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithFileProvider(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> queue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileProvider:queue:"),
      arg,
      queue,
    );
  }

  static Pointer<Void> initWithFileProviderProxy(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFileProviderProxy:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSFileProviderXPCMessenger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void observeEndOfWriteAtURL(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forClaimWithID,
    @required int fromProcessWithIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector(
          "observeEndOfWriteAtURL:forClaimWithID:fromProcessWithIdentifier:"),
      arg,
      forClaimWithID,
      fromProcessWithIdentifier,
    );
  }

  static void observePresentationChangeOfKind(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forPresenterWithID,
    @required int fromProcessWithIdentifier,
    @required Pointer<Void> observedUbiquityAttributes,
    @required Pointer<Void> url,
    @required Pointer<Void> newURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "observePresentationChangeOfKind:forPresenterWithID:fromProcessWithIdentifier:observedUbiquityAttributes:url:newURL:"),
      arg,
      forPresenterWithID,
      fromProcessWithIdentifier,
      observedUbiquityAttributes,
      url,
      newURL,
    );
  }

  static void provideItemAtURL(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forClaimWithID,
    @required int madeByClientWithProcessIdentifier,
    @required int options,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "provideItemAtURL:forClaimWithID:madeByClientWithProcessIdentifier:options:completionHandler:"),
      arg,
      forClaimWithID,
      madeByClientWithProcessIdentifier,
      options,
      completionHandler,
    );
  }

  static void providePhysicalItemForURL(
    Pointer<NSFileProviderXPCMessenger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("providePhysicalItemForURL:completionHandler:"),
      arg,
      completionHandler,
    );
  }
}

/// Objective-C class _NSFileReactorProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileReactorProxy extends Struct<NSFileReactorProxy> {
  factory NSFileReactorProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileReactorProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileReactorProxy").cast<NSFileReactorProxy>();
  }

  static int allowedForURL(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowedForURL:"),
      arg,
    );
  }

  static Pointer<Void> client(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("client"),
    );
  }

  static void collectDebuggingInformationWithCompletionHandler(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("collectDebuggingInformationWithCompletionHandler:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithIndenting:"),
      arg,
    );
  }

  static int effectiveUserIdentifier(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("effectiveUserIdentifier"),
    );
  }

  static void forwardUsingProxy(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingProxy:"),
      arg,
    );
  }

  static Pointer<Void> initWithClient(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> reactorID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClient:reactorID:"),
      arg,
      reactorID,
    );
  }

  static void invalidate(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static Pointer<Void> itemLocation(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemLocation"),
    );
  }

  static Pointer<Void> reactorID(
    Pointer<NSFileReactorProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reactorID"),
    );
  }

  static void setEffectiveUserIdentifier(
    Pointer<NSFileReactorProxy> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setEffectiveUserIdentifier:"),
      arg,
    );
  }

  static void setItemLocation(
    Pointer<NSFileReactorProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemLocation:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileReadingClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileReadingClaim extends Struct<NSFileReadingClaim> {
  factory NSFileReadingClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileReadingClaim> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileReadingClaim").cast<NSFileReadingClaim>();
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static int blocksClaim(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("blocksClaim:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void devalueSelf(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPurposeID(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> url,
    @required int options,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPurposeID:url:options:claimer:"),
      arg,
      url,
      options,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void resolveURLThenMaybeContinueInvokingClaimer(
    Pointer<NSFileReadingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resolveURLThenMaybeContinueInvokingClaimer:"),
      arg,
    );
  }

  static int shouldBeRevokedPriorToInvokingAccessor(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeRevokedPriorToInvokingAccessor"),
    );
  }

  static int shouldCancelInsteadOfWaiting(
    Pointer<NSFileReadingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldCancelInsteadOfWaiting"),
    );
  }
}

/// Objective-C class _NSFileReadingWritingClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileReadingWritingClaim extends Struct<NSFileReadingWritingClaim> {
  factory NSFileReadingWritingClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileReadingWritingClaim> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileReadingWritingClaim")
        .cast<NSFileReadingWritingClaim>();
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static int blocksClaim(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("blocksClaim:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void devalueSelf(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPurposeID(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> readingURL,
    @required int options,
    @required Pointer<Void> writingURL,
    @required int name2,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithPurposeID:readingURL:options:writingURL:options:claimer:"),
      arg,
      readingURL,
      options,
      writingURL,
      name2,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void resolveURLsThenMaybeContinueInvokingClaimer(
    Pointer<NSFileReadingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resolveURLsThenMaybeContinueInvokingClaimer:"),
      arg,
    );
  }

  static int shouldCancelInsteadOfWaiting(
    Pointer<NSFileReadingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldCancelInsteadOfWaiting"),
    );
  }
}

/// Objective-C class _NSFileSubarbitrationClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileSubarbitrationClaim extends Struct<NSFileSubarbitrationClaim> {
  factory NSFileSubarbitrationClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileSubarbitrationClaim> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileSubarbitrationClaim")
        .cast<NSFileSubarbitrationClaim>();
  }

  static void dealloc(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithIndenting:"),
      arg,
    );
  }

  static void devalueOldClaim(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("devalueOldClaim:"),
      arg,
    );
  }

  static void devalueSelf(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void evaluateNewClaim(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("evaluateNewClaim:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardReacquisitionForWritingClaim(
    Pointer<NSFileSubarbitrationClaim> _self,
    int arg, {
    @required Pointer<Void> withID,
    @required Pointer<Void> toPresenterForID,
    @required Pointer<Void> usingReplySender,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forwardReacquisitionForWritingClaim:withID:toPresenterForID:usingReplySender:"),
      arg,
      withID,
      toPresenterForID,
      usingReplySender,
    );
  }

  static void forwardRelinquishmentForWritingClaim(
    Pointer<NSFileSubarbitrationClaim> _self,
    int arg, {
    @required Pointer<Void> withID,
    @required int options,
    @required Pointer<Void> purposeID,
    @required Pointer<Void> subitemURL,
    @required Pointer<Void> toPresenter,
    @required Pointer<Void> usingReplySender,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "forwardRelinquishmentForWritingClaim:withID:options:purposeID:subitemURL:toPresenter:usingReplySender:"),
      arg,
      withID,
      options,
      purposeID,
      subitemURL,
      toPresenter,
      usingReplySender,
    );
  }

  static void forwardUsingConnection$crashHandler$(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void forwardUsingConnection$withServer$crashHandler$(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withServer,
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:withServer:crashHandler:"),
      arg,
      withServer,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithReadingURLs(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> writingURLs,
    @required int name2,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithReadingURLs:options:writingURLs:options:claimer:"),
      arg,
      options,
      writingURLs,
      name2,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static int nullified(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("nullified"),
    );
  }

  static Pointer<Void> relinquishmentForWrite(
    Pointer<NSFileSubarbitrationClaim> _self,
    int arg, {
    @required Pointer<Void> toPresenterForID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("relinquishmentForWrite:toPresenterForID:"),
      arg,
      toPresenterForID,
    );
  }

  static void revoked(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("revoked"),
    );
  }

  static void setSubarbiterConnection(
    Pointer<NSFileSubarbitrationClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSubarbiterConnection:"),
      arg,
    );
  }

  static Pointer<Void> subarbiterConnection(
    Pointer<NSFileSubarbitrationClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subarbiterConnection"),
    );
  }
}

/// Objective-C class _NSFileURLHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileURLHandle extends Struct<NSFileURLHandle> {
  factory NSFileURLHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileURLHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileURLHandle").cast<NSFileURLHandle>();
  }

  static void beginLoadInBackground(
    Pointer<NSFileURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoadInBackground"),
    );
  }

  static void dealloc(
    Pointer<NSFileURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void endLoadInBackground(
    Pointer<NSFileURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endLoadInBackground"),
    );
  }

  static void flushCachedData(
    Pointer<NSFileURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushCachedData"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSFileURLHandle> _self,
    Pointer<Void> arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:cached:"),
      arg,
      cached,
    );
  }

  static Pointer<Void> loadInForeground(
    Pointer<NSFileURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("loadInForeground"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSFileURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> propertyForKeyIfAvailable(
    Pointer<NSFileURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKeyIfAvailable:"),
      arg,
    );
  }

  static int writeData(
    Pointer<NSFileURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static int writeProperty(
    Pointer<NSFileURLHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeProperty:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSFileVersion_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileVersion extends Struct<NSFileVersion> {
  factory NSFileVersion._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileVersion> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileVersion").cast<NSFileVersion>();
  }

  static Pointer<Void> URL(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static void dealloc(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> etag(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("etag"),
    );
  }

  static int hasLocalContents(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasLocalContents"),
    );
  }

  static int hasThumbnail(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasThumbnail"),
    );
  }

  static int hash(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isConflict(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConflict"),
    );
  }

  static int isDiscardable(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDiscardable"),
    );
  }

  static int isEqual(
    Pointer<NSFileVersion> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isResolved(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isResolved"),
    );
  }

  static int isUbiquitous(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUbiquitous"),
    );
  }

  static Pointer<Void> localizedName(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedName"),
    );
  }

  static Pointer<Void> localizedNameOfSavingComputer(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedNameOfSavingComputer"),
    );
  }

  static Pointer<Void> modificationDate(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("modificationDate"),
    );
  }

  static Pointer<Void> originalPOSIXName(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originalPOSIXName"),
    );
  }

  static Pointer<Void> originatorName(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originatorName"),
    );
  }

  static Pointer<Void> originatorNameComponents(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("originatorNameComponents"),
    );
  }

  static Pointer<Void> persistentIdentifier(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("persistentIdentifier"),
    );
  }

  static int removeAndReturnError(
    Pointer<NSFileVersion> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removeAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> replaceItemAtURL(
    Pointer<NSFileVersion> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("replaceItemAtURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> restoreOverItemAtURL(
    Pointer<NSFileVersion> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("restoreOverItemAtURL:error:"),
      arg,
      error,
    );
  }

  static void setDiscardable(
    Pointer<NSFileVersion> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setDiscardable:"),
      arg,
    );
  }

  static void setResolved(
    Pointer<NSFileVersion> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setResolved:"),
      arg,
    );
  }

  static int size(
    Pointer<NSFileVersion> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("size"),
    );
  }
}

/// Objective-C class _NSFileWatcher_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWatcher extends Struct<NSFileWatcher> {
  factory NSFileWatcher._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWatcher> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileWatcher").cast<NSFileWatcher>();
  }

  static void dealloc(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void handleFSEventPath(
    Pointer<NSFileWatcher> _self,
    Pointer<Void> arg, {
    @required int flags,
    @required int id,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_Uint64_returns_void(
      _self,
      _objc.getSelector("handleFSEventPath:flags:id:"),
      arg,
      flags,
      id,
    );
  }

  static Pointer<Void> initWithQueue(
    Pointer<NSFileWatcher> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> auditToken,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithQueue:auditToken:"),
      arg,
      auditToken,
    );
  }

  static void setLastObservedEventID(
    Pointer<NSFileWatcher> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLastObservedEventID:"),
      arg,
    );
  }

  static void setObserver(
    Pointer<NSFileWatcher> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObserver:"),
      arg,
    );
  }

  static void setURL(
    Pointer<NSFileWatcher> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURL:"),
      arg,
    );
  }

  static void settle(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("settle"),
    );
  }

  static void start(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static void stop(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stop"),
    );
  }

  static void unsettle(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unsettle"),
    );
  }

  static void watchItem(
    Pointer<NSFileWatcher> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("watchItem"),
    );
  }
}

/// Objective-C class _NSFileWatcherObservations_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWatcherObservations extends Struct<NSFileWatcherObservations> {
  factory NSFileWatcherObservations._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWatcherObservations> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileWatcherObservations")
        .cast<NSFileWatcherObservations>();
  }

  static void addAnnouncedMoveToPath(
    Pointer<NSFileWatcherObservations> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAnnouncedMoveToPath:"),
      arg,
    );
  }

  static void addAttributeChange(
    Pointer<NSFileWatcherObservations> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addAttributeChange"),
    );
  }

  static void addContentsChange(
    Pointer<NSFileWatcherObservations> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addContentsChange"),
    );
  }

  static void addDeletion(
    Pointer<NSFileWatcherObservations> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("addDeletion"),
    );
  }

  static void addDetectedMoveToPath(
    Pointer<NSFileWatcherObservations> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addDetectedMoveToPath:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileWatcherObservations> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSFileWatcherObservations> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSFileWatcherObservations> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static void notifyObserver(
    Pointer<NSFileWatcherObservations> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("notifyObserver:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileWrapper_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWrapper extends Struct<NSFileWrapper> {
  factory NSFileWrapper._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWrapper> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileWrapper").cast<NSFileWrapper>();
  }

  static Pointer<Void> addFileWithPath(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addFileWithPath:"),
      arg,
    );
  }

  static Pointer<Void> addFileWrapper(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addFileWrapper:"),
      arg,
    );
  }

  static Pointer<Void> addRegularFileWithContents(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> preferredFilename,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addRegularFileWithContents:preferredFilename:"),
      arg,
      preferredFilename,
    );
  }

  static Pointer<Void> addSymbolicLinkWithDestination(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> preferredFilename,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addSymbolicLinkWithDestination:preferredFilename:"),
      arg,
      preferredFilename,
    );
  }

  static void dealloc(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> fileAttributes(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileAttributes"),
    );
  }

  static Pointer<Void> fileWrappers(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileWrappers"),
    );
  }

  static Pointer<Void> filename(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("filename"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initDirectoryWithFileWrappers(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initDirectoryWithFileWrappers:"),
      arg,
    );
  }

  static Pointer<Void> initRegularFileWithContents(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initRegularFileWithContents:"),
      arg,
    );
  }

  static Pointer<Void> initSymbolicLinkWithDestination(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initSymbolicLinkWithDestination:"),
      arg,
    );
  }

  static Pointer<Void> initSymbolicLinkWithDestinationURL(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initSymbolicLinkWithDestinationURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static Pointer<Void> initWithSerializedRepresentation(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSerializedRepresentation:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static int isDirectory(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDirectory"),
    );
  }

  static int isRegularFile(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRegularFile"),
    );
  }

  static int isSymbolicLink(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSymbolicLink"),
    );
  }

  static Pointer<Void> keyForFileWrapper(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyForFileWrapper:"),
      arg,
    );
  }

  static int matchesContentsOfURL(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesContentsOfURL:"),
      arg,
    );
  }

  static int needsToBeUpdatedFromPath(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsToBeUpdatedFromPath:"),
      arg,
    );
  }

  static Pointer<Void> preferredFilename(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("preferredFilename"),
    );
  }

  static int readFromURL(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("readFromURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> regularFileContents(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularFileContents"),
    );
  }

  static void removeFileWrapper(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFileWrapper:"),
      arg,
    );
  }

  static Pointer<Void> serializedRepresentation(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serializedRepresentation"),
    );
  }

  static void setFileAttributes(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileAttributes:"),
      arg,
    );
  }

  static void setFilename(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFilename:"),
      arg,
    );
  }

  static void setPreferredFilename(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreferredFilename:"),
      arg,
    );
  }

  static Pointer<Void> symbolicLinkDestination(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicLinkDestination"),
    );
  }

  static Pointer<Void> symbolicLinkDestinationURL(
    Pointer<NSFileWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicLinkDestinationURL"),
    );
  }

  static int updateFromPath(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("updateFromPath:"),
      arg,
    );
  }

  static int writeToFile(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required int atomically,
    @required int updateFilenames,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_Int8(
      _self,
      _objc.getSelector("writeToFile:atomically:updateFilenames:"),
      arg,
      atomically,
      updateFilenames,
    );
  }

  static int writeToURL(
    Pointer<NSFileWrapper> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> originalContentsURL,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeToURL:options:originalContentsURL:error:"),
      arg,
      options,
      originalContentsURL,
      error,
    );
  }
}

/// Objective-C class _NSFileWrapperMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWrapperMoreIVars extends Struct<NSFileWrapperMoreIVars> {
  factory NSFileWrapperMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWrapperMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileWrapperMoreIVars")
        .cast<NSFileWrapperMoreIVars>();
  }
}

/// Objective-C class _NSFileWritingClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWritingClaim extends Struct<NSFileWritingClaim> {
  factory NSFileWritingClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWritingClaim> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFileWritingClaim").cast<NSFileWritingClaim>();
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static int blocksClaim(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("blocksClaim:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void devalueSelf(
    Pointer<NSFileWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPurposeID(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> url,
    @required int options,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPurposeID:url:options:claimer:"),
      arg,
      url,
      options,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void resolveURLsThenContinueInvokingClaimer(
    Pointer<NSFileWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resolveURLsThenContinueInvokingClaimer:"),
      arg,
    );
  }
}

/// Objective-C class _NSFileWritingWritingClaim_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFileWritingWritingClaim extends Struct<NSFileWritingWritingClaim> {
  factory NSFileWritingWritingClaim._() {
    throw UnimplementedError();
  }
  static Pointer<NSFileWritingWritingClaim> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFileWritingWritingClaim")
        .cast<NSFileWritingWritingClaim>();
  }

  static Pointer<Void> allURLs(
    Pointer<NSFileWritingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allURLs"),
    );
  }

  static int blocksClaim(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("blocksClaim:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFileWritingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void devalueSelf(
    Pointer<NSFileWritingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("devalueSelf"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateSelfWithRootNode(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int checkSubarbitrability,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("evaluateSelfWithRootNode:checkSubarbitrability:"),
      arg,
      checkSubarbitrability,
    );
  }

  static void forwardUsingConnection(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> crashHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardUsingConnection:crashHandler:"),
      arg,
      crashHandler,
    );
  }

  static void granted(
    Pointer<NSFileWritingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("granted"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPurposeID(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> url,
    @required int options,
    @required Pointer<Void> name2,
    @required int name3,
    @required Pointer<Void> claimer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPurposeID:url:options:url:options:claimer:"),
      arg,
      url,
      options,
      name2,
      name3,
      claimer,
    );
  }

  static void invokeClaimer(
    Pointer<NSFileWritingWritingClaim> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invokeClaimer"),
    );
  }

  static int isBlockedByReadingItemAtLocation(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByReadingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static int isBlockedByWritingItemAtLocation(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("isBlockedByWritingItemAtLocation:options:"),
      arg,
      options,
    );
  }

  static void itemAtLocation(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> wasReplacedByItemAtLocation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("itemAtLocation:wasReplacedByItemAtLocation:"),
      arg,
      wasReplacedByItemAtLocation,
    );
  }

  static void resolveURLsThenContinueInvokingClaimer(
    Pointer<NSFileWritingWritingClaim> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resolveURLsThenContinueInvokingClaimer:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilesystemItemCopyOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilesystemItemCopyOperation
    extends Struct<NSFilesystemItemCopyOperation> {
  factory NSFilesystemItemCopyOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilesystemItemCopyOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilesystemItemCopyOperation")
        .cast<NSFilesystemItemCopyOperation>();
  }

  static void dealloc(
    Pointer<NSFilesystemItemCopyOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void initWithSourcePath(
    Pointer<NSFilesystemItemCopyOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> destinationPath,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("initWithSourcePath:destinationPath:options:"),
      arg,
      destinationPath,
      options,
    );
  }

  static int shouldCopyItemAtPath(
    Pointer<NSFilesystemItemCopyOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldCopyItemAtPath:toPath:"),
      arg,
      toPath,
    );
  }

  static int shouldProceedAfterError(
    Pointer<NSFilesystemItemCopyOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> copyingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldProceedAfterError:copyingItemAtPath:toPath:"),
      arg,
      copyingItemAtPath,
      toPath,
    );
  }
}

/// Objective-C class _NSFilesystemItemLinkOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilesystemItemLinkOperation
    extends Struct<NSFilesystemItemLinkOperation> {
  factory NSFilesystemItemLinkOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilesystemItemLinkOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilesystemItemLinkOperation")
        .cast<NSFilesystemItemLinkOperation>();
  }

  static int shouldLinkItemAtPath(
    Pointer<NSFilesystemItemLinkOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldLinkItemAtPath:toPath:"),
      arg,
      toPath,
    );
  }

  static int shouldProceedAfterError(
    Pointer<NSFilesystemItemLinkOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> linkingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldProceedAfterError:linkingItemAtPath:toPath:"),
      arg,
      linkingItemAtPath,
      toPath,
    );
  }
}

/// Objective-C class _NSFilesystemItemMoveOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilesystemItemMoveOperation
    extends Struct<NSFilesystemItemMoveOperation> {
  factory NSFilesystemItemMoveOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilesystemItemMoveOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilesystemItemMoveOperation")
        .cast<NSFilesystemItemMoveOperation>();
  }

  static void dealloc(
    Pointer<NSFilesystemItemMoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSFilesystemItemMoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSFilesystemItemMoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static int filesystemItemCopyOperation(
    Pointer<NSFilesystemItemMoveOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldProceedAfterError,
    @required Pointer<Void> copyingItemAtPath,
    @required Pointer<Void> toPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "filesystemItemCopyOperation:shouldProceedAfterError:copyingItemAtPath:toPath:"),
      arg,
      shouldProceedAfterError,
      copyingItemAtPath,
      toPath,
    );
  }

  static void initWithSourceURL(
    Pointer<NSFilesystemItemMoveOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> destinationURL,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("initWithSourceURL:destinationURL:options:"),
      arg,
      destinationURL,
      options,
    );
  }

  static void main(
    Pointer<NSFilesystemItemMoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static void setDelegate(
    Pointer<NSFilesystemItemMoveOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilesystemItemRemoveOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilesystemItemRemoveOperation
    extends Struct<NSFilesystemItemRemoveOperation> {
  factory NSFilesystemItemRemoveOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilesystemItemRemoveOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilesystemItemRemoveOperation")
        .cast<NSFilesystemItemRemoveOperation>();
  }

  static void dealloc(
    Pointer<NSFilesystemItemRemoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSFilesystemItemRemoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSFilesystemItemRemoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSFilesystemItemRemoveOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:"),
      arg,
    );
  }

  static void main(
    Pointer<NSFilesystemItemRemoveOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static void setDelegate(
    Pointer<NSFilesystemItemRemoveOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

/// Objective-C class _NSFilterObservationTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFilterObservationTransformer
    extends Struct<NSFilterObservationTransformer> {
  factory NSFilterObservationTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSFilterObservationTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSFilterObservationTransformer")
        .cast<NSFilterObservationTransformer>();
  }

  static void dealloc(
    Pointer<NSFilterObservationTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSFilterObservationTransformer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:"),
      arg,
    );
  }
}

/// Objective-C class _NSFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFormatter extends Struct<NSFormatter> {
  factory NSFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFormatter").cast<NSFormatter>();
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> editingStringForObjectValue(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("editingStringForObjectValue:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int getObjectValue$forString$errorDescription$(
    Pointer<NSFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int getObjectValue$forString$range$error$(
    Pointer<NSFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> range,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:range:error:"),
      arg,
      forString,
      range,
      error,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int
      isPartialStringValid$proposedSelectedRange$originalString$originalSelectedRange$errorDescription$(
    Pointer<NSFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> proposedSelectedRange,
    @required Pointer<Void> originalString,
    @required Pointer<Void> originalSelectedRange,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:"),
      arg,
      proposedSelectedRange,
      originalString,
      originalSelectedRange,
      errorDescription,
    );
  }

  static int isPartialStringValid$newEditingString$errorDescription$(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> newEditingString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "isPartialStringValid:newEditingString:errorDescription:"),
      arg,
      newEditingString,
      errorDescription,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSFunctionExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSFunctionExpression extends Struct<NSFunctionExpression> {
  factory NSFunctionExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSFunctionExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSFunctionExpression").cast<NSFunctionExpression>();
  }

  static void acceptVisitor(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> arguments(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> binaryOperatorForSelector(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("binaryOperatorForSelector"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSFunctionExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> function(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("function"),
    );
  }

  static int hash(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithExpressionType(
    Pointer<NSFunctionExpression> _self,
    int arg, {
    @required Pointer<Void> operand,
    @required Pointer<Void> selector,
    @required Pointer<Void> argumentArray,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithExpressionType:operand:selector:argumentArray:"),
      arg,
      operand,
      selector,
      argumentArray,
    );
  }

  static Pointer<Void> initWithSelector(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> argumentArray,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSelector:argumentArray:"),
      arg,
      argumentArray,
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selectorName,
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:selectorName:arguments:"),
      arg,
      selectorName,
      arguments,
    );
  }

  static int isEqual(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSFunctionExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> operand(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operand"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSFunctionExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }
}

/// Objective-C class _NSGB18030EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSGB18030EncodingDetector extends Struct<NSGB18030EncodingDetector> {
  factory NSGB18030EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSGB18030EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSGB18030EncodingDetector")
        .cast<NSGB18030EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSGB18030EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSGBKEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSGBKEncodingDetector extends Struct<NSGBKEncodingDetector> {
  factory NSGBKEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSGBKEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSGBKEncodingDetector")
        .cast<NSGBKEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSGBKEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSGarbageCollector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSGarbageCollector extends Struct<NSGarbageCollector> {
  factory NSGarbageCollector._() {
    throw UnimplementedError();
  }
  static Pointer<NSGarbageCollector> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSGarbageCollector").cast<NSGarbageCollector>();
  }

  static void collectExhaustively(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("collectExhaustively"),
    );
  }

  static void collectIfNeeded(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("collectIfNeeded"),
    );
  }

  static void disable(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disable"),
    );
  }

  static void disableCollectorForPointer(
    Pointer<NSGarbageCollector> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("disableCollectorForPointer:"),
      arg,
    );
  }

  static void enable(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enable"),
    );
  }

  static void enableCollectorForPointer(
    Pointer<NSGarbageCollector> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enableCollectorForPointer:"),
      arg,
    );
  }

  static int isCollecting(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCollecting"),
    );
  }

  static int isEnabled(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnabled"),
    );
  }

  static Pointer<Pointer<Void>> zone(
    Pointer<NSGarbageCollector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

/// Objective-C class _NSGetCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSGetCommand extends Struct<NSGetCommand> {
  factory NSGetCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSGetCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSGetCommand").cast<NSGetCommand>();
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSGetCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }
}

/// Objective-C class _NSGrammarCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSGrammarCheckingResult extends Struct<NSGrammarCheckingResult> {
  factory NSGrammarCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSGrammarCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSGrammarCheckingResult")
        .cast<NSGrammarCheckingResult>();
  }

  static void dealloc(
    Pointer<NSGrammarCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSGrammarCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> grammarDetails(
    Pointer<NSGrammarCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("grammarDetails"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSGrammarCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSGrammarCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> details,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:details:"),
      arg,
      details,
    );
  }

  static Pointer<Void> range(
    Pointer<NSGrammarCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSGrammarCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSGrammarCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSHTTPURLHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSHTTPURLHandle extends Struct<NSHTTPURLHandle> {
  factory NSHTTPURLHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSHTTPURLHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSHTTPURLHandle").cast<NSHTTPURLHandle>();
  }

  static void beginLoadInBackground(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoadInBackground"),
    );
  }

  static void dealloc(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void endLoadInBackground(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endLoadInBackground"),
    );
  }

  static int expectedResourceDataSize(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedResourceDataSize"),
    );
  }

  static void flushCachedData(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushCachedData"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Void> arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:cached:"),
      arg,
      cached,
    );
  }

  static Pointer<Void> loadInForeground(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("loadInForeground"),
    );
  }

  static void performStreamRead(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performStreamRead"),
    );
  }

  static void populateCacheFromStream(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> data,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("populateCacheFromStream:data:"),
      arg,
      data,
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> propertyForKeyIfAvailable(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKeyIfAvailable:"),
      arg,
    );
  }

  static void reportStreamError(
    Pointer<NSHTTPURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reportStreamError"),
    );
  }

  static int writeData(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static int writeProperty(
    Pointer<NSHTTPURLHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeProperty:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSHZGB2312EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSHZGB2312EncodingDetector extends Struct<NSHZGB2312EncodingDetector> {
  factory NSHZGB2312EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSHZGB2312EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSHZGB2312EncodingDetector")
        .cast<NSHZGB2312EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSHZGB2312EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSHashTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSHashTable extends Struct<NSHashTable> {
  factory NSHashTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSHashTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSHashTable").cast<NSHashTable>();
  }

  static void addObject(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static Pointer<Void> allObjects(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjects"),
    );
  }

  static Pointer<Void> anyObject(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("anyObject"),
    );
  }

  static int containsObject(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsObject:"),
      arg,
    );
  }

  static Pointer<Void> copy(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSHashTable> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSHashTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static Pointer<Void> description(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> getItem(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("getItem:"),
      arg,
    );
  }

  static void getKeys(
    Pointer<NSHashTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Uint64> count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getKeys:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> init(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSHashTable> _self,
    int arg, {
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:capacity:"),
      arg,
      capacity,
    );
  }

  static Pointer<Void> initWithPointerFunctions(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg, {
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithPointerFunctions:capacity:"),
      arg,
      capacity,
    );
  }

  static void insertKnownAbsentItem(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertKnownAbsentItem:"),
      arg,
    );
  }

  static void intersectHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectHashTable:"),
      arg,
    );
  }

  static int intersectsHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("intersectsHashTable:"),
      arg,
    );
  }

  static int isEqualToHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToHashTable:"),
      arg,
    );
  }

  static int isSubsetOfHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSubsetOfHashTable:"),
      arg,
    );
  }

  static Pointer<Void> member(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static void minusHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusHashTable:"),
      arg,
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSHashTable> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> mutableSet(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableSet"),
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static Pointer<Void> pointerFunctions(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointerFunctions"),
    );
  }

  static void removeAllItems(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeAllObjects(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeItem(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeItem:"),
      arg,
    );
  }

  static void removeObject(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static Pointer<Void> setRepresentation(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("setRepresentation"),
    );
  }

  static void unionHashTable(
    Pointer<NSHashTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionHashTable:"),
      arg,
    );
  }

  static int weakCount(
    Pointer<NSHashTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("weakCount"),
    );
  }
}

/// Objective-C class _NSIBPrototypingLayoutConstraint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSIBPrototypingLayoutConstraint
    extends Struct<NSIBPrototypingLayoutConstraint> {
  factory NSIBPrototypingLayoutConstraint._() {
    throw UnimplementedError();
  }
  static Pointer<NSIBPrototypingLayoutConstraint> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSIBPrototypingLayoutConstraint")
        .cast<NSIBPrototypingLayoutConstraint>();
  }
}

/// Objective-C class _NSISEngine_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISEngine extends Struct<NSISEngine> {
  factory NSISEngine._() {
    throw UnimplementedError();
  }
  static Pointer<NSISEngine> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSISEngine").cast<NSISEngine>();
  }

  static void addCol$coefficient$toRow$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double coefficient,
    @required Pointer<Void> toRow,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("addCol:coefficient:toRow:"),
      arg,
      coefficient,
      toRow,
    );
  }

  static void addCol$priority$times$toObjectiveRow$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double priority,
    @required double times,
    @required Pointer<Void> toObjectiveRow,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_p_returns_void(
      _self,
      _objc.getSelector("addCol:priority:times:toObjectiveRow:"),
      arg,
      priority,
      times,
      toObjectiveRow,
    );
  }

  static void addRowBody$priority$times$toObjectiveRow$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double priority,
    @required double times,
    @required Pointer<Void> toObjectiveRow,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_p_returns_void(
      _self,
      _objc.getSelector("addRowBody:priority:times:toObjectiveRow:"),
      arg,
      priority,
      times,
      toObjectiveRow,
    );
  }

  static void addRowBody$times$toRow$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double times,
    @required Pointer<Void> toRow,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("addRowBody:times:toRow:"),
      arg,
      times,
      toRow,
    );
  }

  static void addVariableToBeOptimized(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double priority,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("addVariableToBeOptimized:priority:"),
      arg,
      priority,
    );
  }

  static Pointer<Void> allRowHeads(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allRowHeads"),
    );
  }

  static void beginBookkeepingForVariableIfNeeded(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("beginBookkeepingForVariableIfNeeded:"),
      arg,
    );
  }

  static void beginRecording(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginRecording"),
    );
  }

  static int bodyVarIsAmbiguous(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> withPivotOfOutgoingRowHead,
    @required Pointer<Int8> foundOutgoingRowHead,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "bodyVarIsAmbiguous:withPivotOfOutgoingRowHead:foundOutgoingRowHead:"),
      arg,
      withPivotOfOutgoingRowHead,
      foundOutgoingRowHead,
    );
  }

  static Pointer<Void> candidateRedundantConstraints(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("candidateRedundantConstraints"),
    );
  }

  static void changeVariableToBeOptimized(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double fromPriority,
    @required double toPriority,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("changeVariableToBeOptimized:fromPriority:toPriority:"),
      arg,
      fromPriority,
      toPriority,
    );
  }

  static int chooseHeadForRow(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> chosenCol,
    @required Pointer<Int8> outNewToEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("chooseHeadForRow:chosenCol:outNewToEngine:"),
      arg,
      chosenCol,
      outNewToEngine,
    );
  }

  static int colCount(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("colCount"),
    );
  }

  static void constraintDidChangeSuchThatMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double shouldBeReplacedByMarkerPlusDelta,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector(
          "constraintDidChangeSuchThatMarker:shouldBeReplacedByMarkerPlusDelta:"),
      arg,
      shouldBeReplacedByMarkerPlusDelta,
    );
  }

  static Pointer<Void> constraints(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constraints"),
    );
  }

  static Pointer<Void> constraintsAffectingValueOfVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsAffectingValueOfVariable:"),
      arg,
    );
  }

  static int containsConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsConstraintWithMarker:"),
      arg,
    );
  }

  static int containsVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsVariable:"),
      arg,
    );
  }

  static void copyExpressionSubstitutingRowHeadVariables(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> intoRow,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("copyExpressionSubstitutingRowHeadVariables:intoRow:"),
      arg,
      intoRow,
    );
  }

  static void dealloc(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void endBookkeepingForVariableIfUnused(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("endBookkeepingForVariableIfUnused:"),
      arg,
    );
  }

  static Pointer<Void> engineScalingCoefficients(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("engineScalingCoefficients"),
    );
  }

  static Pointer<Void> engineVarIndexForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("engineVarIndexForVariable:"),
      arg,
    );
  }

  static void enumerateCols(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateCols:"),
      arg,
    );
  }

  static void enumerateEngineVars(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateEngineVars:"),
      arg,
    );
  }

  static void enumerateOriginalConstraints(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateOriginalConstraints:"),
      arg,
    );
  }

  static void enumerateRows(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateRows:"),
      arg,
    );
  }

  static Pointer<Void> errorVariableIntroducedByBreakingConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required int errorIsPositive,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "errorVariableIntroducedByBreakingConstraintWithMarker:errorIsPositive:"),
      arg,
      errorIsPositive,
    );
  }

  static int exerciseAmbiguityInVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("exerciseAmbiguityInVariable:"),
      arg,
    );
  }

  static Pointer<Void>
      fixUpValueRestrictionViolationsWithInfeasibilityHandlingBehavior(
    Pointer<NSISEngine> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "fixUpValueRestrictionViolationsWithInfeasibilityHandlingBehavior:"),
      arg,
    );
  }

  static int handleUnsatisfiableRow(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required int usingInfeasibilityHandlingBehavior,
    @required Pointer<Pointer<Void>> prospectiveRowHead,
    @required Pointer<Pointer<Void>> mutuallyExclusiveConstraints,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "handleUnsatisfiableRow:usingInfeasibilityHandlingBehavior:prospectiveRowHead:mutuallyExclusiveConstraints:"),
      arg,
      usingInfeasibilityHandlingBehavior,
      prospectiveRowHead,
      mutuallyExclusiveConstraints,
    );
  }

  static int hasObservableForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasObservableForVariable:"),
      arg,
    );
  }

  static int hasValue$forVariable$(
    Pointer<NSISEngine> _self,
    Pointer<Float> arg, {
    @required Pointer<Void> forVariable,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValue:forVariable:"),
      arg,
      forVariable,
    );
  }

  static int hasValue$forEngineVar$(
    Pointer<NSISEngine> _self,
    Pointer<Float> arg, {
    @required Pointer<Void> forEngineVar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValue:forEngineVar:"),
      arg,
      forEngineVar,
    );
  }

  static int hasValue$forExpression$(
    Pointer<NSISEngine> _self,
    Pointer<Float> arg, {
    @required Pointer<Void> forExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValue:forExpression:"),
      arg,
      forExpression,
    );
  }

  static int hasValueForPossiblyDeallocatedVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasValueForPossiblyDeallocatedVariable:"),
      arg,
    );
  }

  static int incoming(
    Pointer<NSISEngine> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> andOutgoing,
    @required Pointer<Int8> foundOutgoing,
    @required Pointer<Void> rowHeadsThatMakeValueAmbiguousForVariable,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "incoming:andOutgoing:foundOutgoing:rowHeadsThatMakeValueAmbiguousForVariable:"),
      arg,
      andOutgoing,
      foundOutgoing,
      rowHeadsThatMakeValueAmbiguousForVariable,
    );
  }

  static Pointer<Void> init(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static double integralizationAdjustmentForMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("integralizationAdjustmentForMarker:"),
      arg,
    );
  }

  static int isTrackingVariableChanges(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTrackingVariableChanges"),
    );
  }

  static Pointer<Void> markerForBrokenConstraintWithNegativeErrorVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("markerForBrokenConstraintWithNegativeErrorVar:"),
      arg,
    );
  }

  static Pointer<Void> markerForBrokenConstraintWithPositiveErrorVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("markerForBrokenConstraintWithPositiveErrorVar:"),
      arg,
    );
  }

  static int negativeErrorVarForBrokenConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> errorVar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "negativeErrorVarForBrokenConstraintWithMarker:errorVar:"),
      arg,
      errorVar,
    );
  }

  static Pointer<Void> nsis_descriptionOfVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsis_descriptionOfVariable:"),
      arg,
    );
  }

  static int nsis_orientationHintForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("nsis_orientationHintForVariable:"),
      arg,
    );
  }

  static int nsis_shouldIntegralizeVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_shouldIntegralizeVariable:"),
      arg,
    );
  }

  static void nsis_valueOfVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeInEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsis_valueOfVariable:didChangeInEngine:"),
      arg,
      didChangeInEngine,
    );
  }

  static int nsis_valueOfVariableIsUserObservable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_valueOfVariableIsUserObservable:"),
      arg,
    );
  }

  static Pointer<Void> observableForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("observableForVariable:"),
      arg,
    );
  }

  static int optimize(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("optimize"),
    );
  }

  static int outgoingRowHeadForRemovingConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> outgoingRowHead,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "outgoingRowHeadForRemovingConstraintWithMarker:outgoingRowHead:"),
      arg,
      outgoingRowHead,
    );
  }

  static void performModifications(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withUnsatisfiableConstraintsHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "performModifications:withUnsatisfiableConstraintsHandler:"),
      arg,
      withUnsatisfiableConstraintsHandler,
    );
  }

  static void performPendingChangeNotifications(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("performPendingChangeNotifications"),
    );
  }

  static void performPendingChangeNotificationsForItem(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("performPendingChangeNotificationsForItem:"),
      arg,
    );
  }

  static int pivotCount(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("pivotCount"),
    );
  }

  static int positiveErrorVarForBrokenConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> errorVar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "positiveErrorVarForBrokenConstraintWithMarker:errorVar:"),
      arg,
      errorVar,
    );
  }

  static void rebuildFromConstraints(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("rebuildFromConstraints"),
    );
  }

  static Pointer<Void> recordedCommandsData(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("recordedCommandsData"),
    );
  }

  static void removeColFromAllRows(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeColFromAllRows:"),
      arg,
    );
  }

  static void removeConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeConstraintWithMarker:"),
      arg,
    );
  }

  static void removeObservableForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObservableForVariable:"),
      arg,
    );
  }

  static void removeVariableToBeOptimized(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double priority,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("removeVariableToBeOptimized:priority:"),
      arg,
      priority,
    );
  }

  static void replaceMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double withMarkerPlusCoefficient,
    @required Pointer<Void> timesCol,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("replaceMarker:withMarkerPlusCoefficient:timesCol:"),
      arg,
      withMarkerPlusCoefficient,
      timesCol,
    );
  }

  static int replayCommandsData(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required int verifyingIntegrity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Uint64(
      _self,
      _objc.getSelector("replayCommandsData:verifyingIntegrity:"),
      arg,
      verifyingIntegrity,
    );
  }

  static int revertsAfterUnsatisfiabilityHandler(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("revertsAfterUnsatisfiabilityHandler"),
    );
  }

  static int rowCount(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("rowCount"),
    );
  }

  static void setDelegate(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setEngineScalingCoefficients(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEngineScalingCoefficients:"),
      arg,
    );
  }

  static void setNegativeErrorVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forBrokenConstraintWithMarker,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNegativeErrorVar:forBrokenConstraintWithMarker:"),
      arg,
      forBrokenConstraintWithMarker,
    );
  }

  static void setPositiveErrorVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forBrokenConstraintWithMarker,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPositiveErrorVar:forBrokenConstraintWithMarker:"),
      arg,
      forBrokenConstraintWithMarker,
    );
  }

  static void setRevertsAfterUnsatisfiabilityHandler(
    Pointer<NSISEngine> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRevertsAfterUnsatisfiabilityHandler:"),
      arg,
    );
  }

  static void setShouldIntegralize(
    Pointer<NSISEngine> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldIntegralize:"),
      arg,
    );
  }

  static void setVariablesWithValueRestrictionViolations(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVariablesWithValueRestrictionViolations:"),
      arg,
    );
  }

  static int shouldIntegralize(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldIntegralize"),
    );
  }

  static Pointer<Pointer<Void>> traceState(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("traceState"),
    );
  }

  static int tryAddingDirectly(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryAddingDirectly:"),
      arg,
    );
  }

  static int
      tryToAddConstraintWithMarker$expression$mutuallyExclusiveConstraints$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> expression,
    @required Pointer<Pointer<Void>> mutuallyExclusiveConstraints,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "tryToAddConstraintWithMarker:expression:mutuallyExclusiveConstraints:"),
      arg,
      expression,
      mutuallyExclusiveConstraints,
    );
  }

  static int
      tryToAddConstraintWithMarker$expression$integralizationAdjustment$mutuallyExclusiveConstraints$(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> expression,
    @required double integralizationAdjustment,
    @required Pointer<Pointer<Void>> mutuallyExclusiveConstraints,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_float64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:"),
      arg,
      expression,
      integralizationAdjustment,
      mutuallyExclusiveConstraints,
    );
  }

  static int tryToAddConstraintWithMarkerEngineVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> row,
    @required Pointer<Pointer<Void>> mutuallyExclusiveConstraints,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "tryToAddConstraintWithMarkerEngineVar:row:mutuallyExclusiveConstraints:"),
      arg,
      row,
      mutuallyExclusiveConstraints,
    );
  }

  static int tryToChangeConstraintSuchThatMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required double isReplacedByMarkerPlusDelta,
    @required Pointer<Void> undoHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "tryToChangeConstraintSuchThatMarker:isReplacedByMarkerPlusDelta:undoHandler:"),
      arg,
      isReplacedByMarkerPlusDelta,
      undoHandler,
    );
  }

  static Pointer<Void> tryToOptimizeReturningMutuallyExclusiveConstraints(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("tryToOptimizeReturningMutuallyExclusiveConstraints"),
    );
  }

  static int tryUsingArtificialVariableToAddConstraintWithMarker(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> row,
    @required int usingInfeasibilityHandlingBehavior,
    @required Pointer<Pointer<Void>> mutuallyExclusiveConstraints,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "tryUsingArtificialVariableToAddConstraintWithMarker:row:usingInfeasibilityHandlingBehavior:mutuallyExclusiveConstraints:"),
      arg,
      row,
      usingInfeasibilityHandlingBehavior,
      mutuallyExclusiveConstraints,
    );
  }

  static double valueForEngineVar(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("valueForEngineVar:"),
      arg,
    );
  }

  static double valueForExpression(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("valueForExpression:"),
      arg,
    );
  }

  static double valueForVariable(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("valueForVariable:"),
      arg,
    );
  }

  static int valueOfVariableIsAmbiguous(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("valueOfVariableIsAmbiguous:"),
      arg,
    );
  }

  static int valueRestrictionForEngineVarIndex(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestrictionForEngineVarIndex:"),
      arg,
    );
  }

  static int variableChangeCount(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("variableChangeCount"),
    );
  }

  static Pointer<Void> variableChangeTransactionSignal(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variableChangeTransactionSignal"),
    );
  }

  static Pointer<Void> variableForEngineVarIndex(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("variableForEngineVarIndex:"),
      arg,
    );
  }

  static Pointer<Void> variablesWithValueRestrictionViolations(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variablesWithValueRestrictionViolations"),
    );
  }

  static void verifyInternalIntegrity(
    Pointer<NSISEngine> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("verifyInternalIntegrity"),
    );
  }

  static void withAutomaticOptimizationDisabled(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("withAutomaticOptimizationDisabled:"),
      arg,
    );
  }

  static void withBehaviors(
    Pointer<NSISEngine> _self,
    int arg, {
    @required Pointer<Void> performModifications,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("withBehaviors:performModifications:"),
      arg,
      performModifications,
    );
  }

  static void withDelegateCallsDisabled(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("withDelegateCallsDisabled:"),
      arg,
    );
  }

  static void withoutOptimizingAtEndRunBlockWithAutomaticOptimizationDisabled(
    Pointer<NSISEngine> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "withoutOptimizingAtEndRunBlockWithAutomaticOptimizationDisabled:"),
      arg,
    );
  }
}

/// Objective-C class _NSISInlineStorageVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISInlineStorageVariable extends Struct<NSISInlineStorageVariable> {
  factory NSISInlineStorageVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISInlineStorageVariable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISInlineStorageVariable")
        .cast<NSISInlineStorageVariable>();
  }

  static void dealloc(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> nsis_descriptionOfVariable(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsis_descriptionOfVariable:"),
      arg,
    );
  }

  static int nsis_orientationHintForVariable(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("nsis_orientationHintForVariable:"),
      arg,
    );
  }

  static void nsis_valueOfVariable(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeInEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsis_valueOfVariable:didChangeInEngine:"),
      arg,
      didChangeInEngine,
    );
  }

  static int nsis_valueOfVariableIsUserObservable(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_valueOfVariableIsUserObservable:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSISInlineStorageVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setShouldBeMinimized(
    Pointer<NSISInlineStorageVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldBeMinimized:"),
      arg,
    );
  }

  static void setValueIsUserObservable(
    Pointer<NSISInlineStorageVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setValueIsUserObservable:"),
      arg,
    );
  }

  static void setValueRestriction(
    Pointer<NSISInlineStorageVariable> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_void(
      _self,
      _objc.getSelector("setValueRestriction:"),
      arg,
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueIsUserObservable(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("valueIsUserObservable"),
    );
  }

  static int valueRestriction(
    Pointer<NSISInlineStorageVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISLinearExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISLinearExpression extends Struct<NSISLinearExpression> {
  factory NSISLinearExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSISLinearExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSISLinearExpression").cast<NSISLinearExpression>();
  }

  static void addExpression$times$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double times,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("addExpression:times:"),
      arg,
      times,
    );
  }

  static void
      addExpression$times$processVariableNewToReceiver$processVariableDroppedFromReceiver$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double times,
    @required Pointer<Void> processVariableNewToReceiver,
    @required Pointer<Void> processVariableDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addExpression:times:processVariableNewToReceiver:processVariableDroppedFromReceiver:"),
      arg,
      times,
      processVariableNewToReceiver,
      processVariableDroppedFromReceiver,
    );
  }

  static void addVariable$coefficient$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double coefficient,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("addVariable:coefficient:"),
      arg,
      coefficient,
    );
  }

  static void
      addVariable$coefficient$processVariableNewToReceiver$processVariableDroppedFromReceiver$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double coefficient,
    @required Pointer<Void> processVariableNewToReceiver,
    @required Pointer<Void> processVariableDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addVariable:coefficient:processVariableNewToReceiver:processVariableDroppedFromReceiver:"),
      arg,
      coefficient,
      processVariableNewToReceiver,
      processVariableDroppedFromReceiver,
    );
  }

  static double coefficientForVariable(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("coefficientForVariable:"),
      arg,
    );
  }

  static double constant(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("constant"),
    );
  }

  static Pointer<Void> copyContentsAndReturnToPool(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyContentsAndReturnToPool"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSISLinearExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSISLinearExpression> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void dealloc(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> engine(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("engine"),
    );
  }

  static void enumerateVariables(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateVariables:"),
      arg,
    );
  }

  static void enumerateVariablesAndCoefficients(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateVariablesAndCoefficients:"),
      arg,
    );
  }

  static int enumerateVariablesAndCoefficientsUntil(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("enumerateVariablesAndCoefficientsUntil:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static double incrementConstant(
    Pointer<NSISLinearExpression> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("incrementConstant:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithEngine(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEngine:"),
      arg,
    );
  }

  static Pointer<Void> initWithInlineCapacity(
    Pointer<NSISLinearExpression> _self,
    int arg, {
    @required Pointer<Void> engine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithInlineCapacity:engine:"),
      arg,
      engine,
    );
  }

  static int isConstant(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConstant"),
    );
  }

  static int isEqual(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void removeVariable(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeVariable:"),
      arg,
    );
  }

  static void replaceVariable$withVariable$coefficient$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withVariable,
    @required double coefficient,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("replaceVariable:withVariable:coefficient:"),
      arg,
      withVariable,
      coefficient,
    );
  }

  static void replaceVariable$withVariablePlusDelta$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double withVariablePlusDelta,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("replaceVariable:withVariablePlusDelta:"),
      arg,
      withVariablePlusDelta,
    );
  }

  static void
      replaceVariable$withVariablePlusDelta$timesVariable$processVariableNewToReceiver$processVariableDroppedFromReceiver$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required double withVariablePlusDelta,
    @required Pointer<Void> timesVariable,
    @required Pointer<Void> processVariableNewToReceiver,
    @required Pointer<Void> processVariableDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceVariable:withVariablePlusDelta:timesVariable:processVariableNewToReceiver:processVariableDroppedFromReceiver:"),
      arg,
      withVariablePlusDelta,
      timesVariable,
      processVariableNewToReceiver,
      processVariableDroppedFromReceiver,
    );
  }

  static void
      replaceVariable$withExpression$processVariableNewToReceiver$processVariableDroppedFromReceiver$(
    Pointer<NSISLinearExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withExpression,
    @required Pointer<Void> processVariableNewToReceiver,
    @required Pointer<Void> processVariableDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceVariable:withExpression:processVariableNewToReceiver:processVariableDroppedFromReceiver:"),
      arg,
      withExpression,
      processVariableNewToReceiver,
      processVariableDroppedFromReceiver,
    );
  }

  static void returnToPool(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("returnToPool"),
    );
  }

  static void scaleBy(
    Pointer<NSISLinearExpression> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("scaleBy:"),
      arg,
    );
  }

  static void setCoefficient(
    Pointer<NSISLinearExpression> _self,
    double arg, {
    @required Pointer<Void> forVariable,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("setCoefficient:forVariable:"),
      arg,
      forVariable,
    );
  }

  static void setConstant(
    Pointer<NSISLinearExpression> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setConstant:"),
      arg,
    );
  }

  static int variableCount(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("variableCount"),
    );
  }

  static Pointer<Void> variablesArray(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variablesArray"),
    );
  }

  static void verifyInternalIntegrity(
    Pointer<NSISLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("verifyInternalIntegrity"),
    );
  }
}

/// Objective-C class _NSISO2022CNEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022CNEncodingDetector extends Struct<NSISO2022CNEncodingDetector> {
  factory NSISO2022CNEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022CNEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022CNEncodingDetector")
        .cast<NSISO2022CNEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO2022CNEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO2022EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022EncodingDetector extends Struct<NSISO2022EncodingDetector> {
  factory NSISO2022EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022EncodingDetector")
        .cast<NSISO2022EncodingDetector>();
  }
}

/// Objective-C class _NSISO2022JP1EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022JP1EncodingDetector
    extends Struct<NSISO2022JP1EncodingDetector> {
  factory NSISO2022JP1EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022JP1EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022JP1EncodingDetector")
        .cast<NSISO2022JP1EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO2022JP1EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO2022JP2EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022JP2EncodingDetector
    extends Struct<NSISO2022JP2EncodingDetector> {
  factory NSISO2022JP2EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022JP2EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022JP2EncodingDetector")
        .cast<NSISO2022JP2EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO2022JP2EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO2022JPEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022JPEncodingDetector extends Struct<NSISO2022JPEncodingDetector> {
  factory NSISO2022JPEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022JPEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022JPEncodingDetector")
        .cast<NSISO2022JPEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO2022JPEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO2022KREncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO2022KREncodingDetector extends Struct<NSISO2022KREncodingDetector> {
  factory NSISO2022KREncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO2022KREncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO2022KREncodingDetector")
        .cast<NSISO2022KREncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO2022KREncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO8601DateFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO8601DateFormatter extends Struct<NSISO8601DateFormatter> {
  factory NSISO8601DateFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO8601DateFormatter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO8601DateFormatter")
        .cast<NSISO8601DateFormatter>();
  }

  static Pointer<Void> dateFromString(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dateFromString:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSISO8601DateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int formatOptions(
    Pointer<NSISO8601DateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("formatOptions"),
    );
  }

  static int getObjectValue$forString$errorDescription$(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int getObjectValue$forString$range$error$(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> range,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:range:error:"),
      arg,
      forString,
      range,
      error,
    );
  }

  static Pointer<Void> init(
    Pointer<NSISO8601DateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void setFormatOptions(
    Pointer<NSISO8601DateFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFormatOptions:"),
      arg,
    );
  }

  static void setTimeZone(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTimeZone:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromDate(
    Pointer<NSISO8601DateFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromDate:"),
      arg,
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSISO8601DateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static void updateFormatter(
    Pointer<NSISO8601DateFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("updateFormatter"),
    );
  }
}

/// Objective-C class _NSISO885911EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO885911EncodingDetector extends Struct<NSISO885911EncodingDetector> {
  factory NSISO885911EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO885911EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO885911EncodingDetector")
        .cast<NSISO885911EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO885911EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO88595EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO88595EncodingDetector extends Struct<NSISO88595EncodingDetector> {
  factory NSISO88595EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO88595EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO88595EncodingDetector")
        .cast<NSISO88595EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO88595EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO88596EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO88596EncodingDetector extends Struct<NSISO88596EncodingDetector> {
  factory NSISO88596EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO88596EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO88596EncodingDetector")
        .cast<NSISO88596EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO88596EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO88597EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO88597EncodingDetector extends Struct<NSISO88597EncodingDetector> {
  factory NSISO88597EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO88597EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO88597EncodingDetector")
        .cast<NSISO88597EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO88597EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISO88598EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISO88598EncodingDetector extends Struct<NSISO88598EncodingDetector> {
  factory NSISO88598EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISO88598EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISO88598EncodingDetector")
        .cast<NSISO88598EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISO88598EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN10EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN10EncodingDetector
    extends Struct<NSISOLATIN10EncodingDetector> {
  factory NSISOLATIN10EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN10EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN10EncodingDetector")
        .cast<NSISOLATIN10EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN10EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN1EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN1EncodingDetector extends Struct<NSISOLATIN1EncodingDetector> {
  factory NSISOLATIN1EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN1EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN1EncodingDetector")
        .cast<NSISOLATIN1EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN1EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN2EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN2EncodingDetector extends Struct<NSISOLATIN2EncodingDetector> {
  factory NSISOLATIN2EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN2EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN2EncodingDetector")
        .cast<NSISOLATIN2EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN2EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN3EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN3EncodingDetector extends Struct<NSISOLATIN3EncodingDetector> {
  factory NSISOLATIN3EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN3EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN3EncodingDetector")
        .cast<NSISOLATIN3EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN3EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN4EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN4EncodingDetector extends Struct<NSISOLATIN4EncodingDetector> {
  factory NSISOLATIN4EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN4EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN4EncodingDetector")
        .cast<NSISOLATIN4EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN4EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN5EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN5EncodingDetector extends Struct<NSISOLATIN5EncodingDetector> {
  factory NSISOLATIN5EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN5EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN5EncodingDetector")
        .cast<NSISOLATIN5EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN5EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN6EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN6EncodingDetector extends Struct<NSISOLATIN6EncodingDetector> {
  factory NSISOLATIN6EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN6EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN6EncodingDetector")
        .cast<NSISOLATIN6EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN6EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN7EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN7EncodingDetector extends Struct<NSISOLATIN7EncodingDetector> {
  factory NSISOLATIN7EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN7EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN7EncodingDetector")
        .cast<NSISOLATIN7EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN7EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN8EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN8EncodingDetector extends Struct<NSISOLATIN8EncodingDetector> {
  factory NSISOLATIN8EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN8EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN8EncodingDetector")
        .cast<NSISOLATIN8EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN8EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISOLATIN9EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISOLATIN9EncodingDetector extends Struct<NSISOLATIN9EncodingDetector> {
  factory NSISOLATIN9EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSISOLATIN9EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISOLATIN9EncodingDetector")
        .cast<NSISOLATIN9EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSISOLATIN9EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSISObjectiveLinearExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISObjectiveLinearExpression
    extends Struct<NSISObjectiveLinearExpression> {
  factory NSISObjectiveLinearExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSISObjectiveLinearExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISObjectiveLinearExpression")
        .cast<NSISObjectiveLinearExpression>();
  }

  static void addExpression(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Pointer<Void>> arg, {
    @required double priority,
    @required double times,
    @required Pointer<Void> processVarNewToReceiver,
    @required Pointer<Void> processVarDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addExpression:priority:times:processVarNewToReceiver:processVarDroppedFromReceiver:"),
      arg,
      priority,
      times,
      processVarNewToReceiver,
      processVarDroppedFromReceiver,
    );
  }

  static void
      addVar$priority$times$processVarNewToReceiver$processVarDroppedFromReceiver$(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required double priority,
    @required double times,
    @required Pointer<Void> processVarNewToReceiver,
    @required Pointer<Void> processVarDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addVar:priority:times:processVarNewToReceiver:processVarDroppedFromReceiver:"),
      arg,
      priority,
      times,
      processVarNewToReceiver,
      processVarDroppedFromReceiver,
    );
  }

  static void addVar$priority$times$(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required double priority,
    @required double times,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("addVar:priority:times:"),
      arg,
      priority,
      times,
    );
  }

  static void addVariable(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required double priority,
    @required double times,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("addVariable:priority:times:"),
      arg,
      priority,
      times,
    );
  }

  static int constantTermIsZero(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("constantTermIsZero"),
    );
  }

  static void dealloc(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void enumerateVars(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateVars:"),
      arg,
    );
  }

  static void incrementConstantWithPriority(
    Pointer<NSISObjectiveLinearExpression> _self,
    double arg, {
    @required double value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_void(
      _self,
      _objc.getSelector("incrementConstantWithPriority:value:"),
      arg,
      value,
    );
  }

  static void incrementConstantWithPriorityVector(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Pointer<Void>> arg, {
    @required double timesScalarCoefficient,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector(
          "incrementConstantWithPriorityVector:timesScalarCoefficient:"),
      arg,
      timesScalarCoefficient,
    );
  }

  static Pointer<Void> init(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithEngine(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEngine:"),
      arg,
    );
  }

  static Pointer<Void> initWithLinearExpression(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Pointer<Void>> arg, {
    @required double priority,
    @required Pointer<Void> engine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("initWithLinearExpression:priority:engine:"),
      arg,
      priority,
      engine,
    );
  }

  static void leadingPriority(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Float> arg, {
    @required Pointer<Float> andValue,
    @required Pointer<Void> forVar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("leadingPriority:andValue:forVar:"),
      arg,
      andValue,
      forVar,
    );
  }

  static Pointer<Pointer<Void>> priorityVectorForVar(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("priorityVectorForVar:"),
      arg,
    );
  }

  static void removeVar(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeVar:"),
      arg,
    );
  }

  static void removeVariable(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeVariable:"),
      arg,
    );
  }

  static void
      replaceVar$withVarPlusDelta$timesVar$processVarNewToReceiver$processVarDroppedFromReceiver$(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required double withVarPlusDelta,
    @required Pointer<Void> timesVar,
    @required Pointer<Void> processVarNewToReceiver,
    @required Pointer<Void> processVarDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceVar:withVarPlusDelta:timesVar:processVarNewToReceiver:processVarDroppedFromReceiver:"),
      arg,
      withVarPlusDelta,
      timesVar,
      processVarNewToReceiver,
      processVarDroppedFromReceiver,
    );
  }

  static void
      replaceVar$withExpression$processVarNewToReceiver$processVarDroppedFromReceiver$(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> withExpression,
    @required Pointer<Void> processVarNewToReceiver,
    @required Pointer<Void> processVarDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceVar:withExpression:processVarNewToReceiver:processVarDroppedFromReceiver:"),
      arg,
      withExpression,
      processVarNewToReceiver,
      processVarDroppedFromReceiver,
    );
  }

  static void replaceVar$withVarPlusDelta$(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required double withVarPlusDelta,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_void(
      _self,
      _objc.getSelector("replaceVar:withVarPlusDelta:"),
      arg,
      withVarPlusDelta,
    );
  }

  static void replaceVariable(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withExpression,
    @required Pointer<Void> processVariableNewToReceiver,
    @required Pointer<Void> processVariableDroppedFromReceiver,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "replaceVariable:withExpression:processVariableNewToReceiver:processVariableDroppedFromReceiver:"),
      arg,
      withExpression,
      processVariableNewToReceiver,
      processVariableDroppedFromReceiver,
    );
  }

  static int restrictedVarWithCoefficientOfLargestNegativeMagnitudeOutVar(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "restrictedVarWithCoefficientOfLargestNegativeMagnitudeOutVar:"),
      arg,
    );
  }

  static Pointer<Void>
      restrictedVariableWithCoefficientOfLargestNegativeMagnitude(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector(
          "restrictedVariableWithCoefficientOfLargestNegativeMagnitude"),
    );
  }

  static void setPriorityVector(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forKnownAbsentVar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPriorityVector:forKnownAbsentVar:"),
      arg,
      forKnownAbsentVar,
    );
  }

  static int valueRestrictionForVar(
    Pointer<NSISObjectiveLinearExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestrictionForVar:"),
      arg,
    );
  }

  static int variableCount(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("variableCount"),
    );
  }

  static void verifyInternalIntegrity(
    Pointer<NSISObjectiveLinearExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("verifyInternalIntegrity"),
    );
  }
}

/// Objective-C class _NSISPlaybackOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISPlaybackOperation extends Struct<NSISPlaybackOperation> {
  factory NSISPlaybackOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSISPlaybackOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISPlaybackOperation")
        .cast<NSISPlaybackOperation>();
  }

  static void dealloc(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> firstAnchor(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstAnchor"),
    );
  }

  static Pointer<Void> firstItem(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstItem"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> nsis_descriptionOfVariable(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsis_descriptionOfVariable:"),
      arg,
    );
  }

  static int nsis_orientationHintForVariable(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("nsis_orientationHintForVariable:"),
      arg,
    );
  }

  static void nsis_valueOfVariable(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeInEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsis_valueOfVariable:didChangeInEngine:"),
      arg,
      didChangeInEngine,
    );
  }

  static int nsis_valueOfVariableIsUserObservable(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_valueOfVariableIsUserObservable:"),
      arg,
    );
  }

  static void playbackOneAction(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("playbackOneAction:onEngine:"),
      arg,
      onEngine,
    );
  }

  static Pointer<Void> secondAnchor(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondAnchor"),
    );
  }

  static Pointer<Void> secondItem(
    Pointer<NSISPlaybackOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondItem"),
    );
  }

  static Pointer<Void> unwrapLinearExpression(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("unwrapLinearExpression:onEngine:"),
      arg,
      onEngine,
    );
  }

  static Pointer<Void> unwrapVariable(
    Pointer<NSISPlaybackOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("unwrapVariable:"),
      arg,
    );
  }
}

/// Objective-C class _NSISRestrictedToNonNegativeMarkerVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISRestrictedToNonNegativeMarkerVariable
    extends Struct<NSISRestrictedToNonNegativeMarkerVariable> {
  factory NSISRestrictedToNonNegativeMarkerVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISRestrictedToNonNegativeMarkerVariable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISRestrictedToNonNegativeMarkerVariable")
        .cast<NSISRestrictedToNonNegativeMarkerVariable>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISRestrictedToNonNegativeMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISRestrictedToNonNegativeMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISRestrictedToNonNegativeMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISRestrictedToNonNegativeMarkerVariableToBeMinimized_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISRestrictedToNonNegativeMarkerVariableToBeMinimized
    extends Struct<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized> {
  factory NSISRestrictedToNonNegativeMarkerVariableToBeMinimized._() {
    throw UnimplementedError();
  }
  static Pointer<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized>
      allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISRestrictedToNonNegativeMarkerVariableToBeMinimized")
        .cast<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISRestrictedToNonNegativeMarkerVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISRestrictedToNonNegativeVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISRestrictedToNonNegativeVariable
    extends Struct<NSISRestrictedToNonNegativeVariable> {
  factory NSISRestrictedToNonNegativeVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISRestrictedToNonNegativeVariable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISRestrictedToNonNegativeVariable")
        .cast<NSISRestrictedToNonNegativeVariable>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISRestrictedToNonNegativeVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISRestrictedToNonNegativeVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISRestrictedToNonNegativeVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISRestrictedToNonNegativeVariableToBeMinimized_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISRestrictedToNonNegativeVariableToBeMinimized
    extends Struct<NSISRestrictedToNonNegativeVariableToBeMinimized> {
  factory NSISRestrictedToNonNegativeVariableToBeMinimized._() {
    throw UnimplementedError();
  }
  static Pointer<NSISRestrictedToNonNegativeVariableToBeMinimized> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISRestrictedToNonNegativeVariableToBeMinimized")
        .cast<NSISRestrictedToNonNegativeVariableToBeMinimized>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISRestrictedToNonNegativeVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISRestrictedToNonNegativeVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISRestrictedToNonNegativeVariableToBeMinimized> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISRestrictedToZeroMarkerVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISRestrictedToZeroMarkerVariable
    extends Struct<NSISRestrictedToZeroMarkerVariable> {
  factory NSISRestrictedToZeroMarkerVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISRestrictedToZeroMarkerVariable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISRestrictedToZeroMarkerVariable")
        .cast<NSISRestrictedToZeroMarkerVariable>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISRestrictedToZeroMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISRestrictedToZeroMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISRestrictedToZeroMarkerVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISUnrestrictedVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISUnrestrictedVariable extends Struct<NSISUnrestrictedVariable> {
  factory NSISUnrestrictedVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISUnrestrictedVariable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSISUnrestrictedVariable")
        .cast<NSISUnrestrictedVariable>();
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISUnrestrictedVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISUnrestrictedVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueRestriction(
    Pointer<NSISUnrestrictedVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSISVariable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSISVariable extends Struct<NSISVariable> {
  factory NSISVariable._() {
    throw UnimplementedError();
  }
  static Pointer<NSISVariable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSISVariable").cast<NSISVariable>();
  }

  static double allowedMagnitudeForIntegralizationAdjustmentOfMarkedConstraint(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector(
          "allowedMagnitudeForIntegralizationAdjustmentOfMarkedConstraint"),
    );
  }

  static void dealloc(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionInEngine(
    Pointer<NSISVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionInEngine:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSISVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> engines(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("engines"),
    );
  }

  static int hash(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSISVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> markedConstraint(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("markedConstraint"),
    );
  }

  static int markedConstraintIsEligibleForIntegralizationAdjustment(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "markedConstraintIsEligibleForIntegralizationAdjustment"),
    );
  }

  static int orientationHint(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("orientationHint"),
    );
  }

  static Pointer<Void> overflowEngineVarIndexForEngine(
    Pointer<NSISVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("overflowEngineVarIndexForEngine:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<NSISVariable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int shouldBeIntegral(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeIntegral"),
    );
  }

  static int shouldBeMinimized(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeMinimized"),
    );
  }

  static int valueIsUserVisible(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("valueIsUserVisible"),
    );
  }

  static int valueRestriction(
    Pointer<NSISVariable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("valueRestriction"),
    );
  }
}

/// Objective-C class _NSInPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSInPredicateOperator extends Struct<NSInPredicateOperator> {
  factory NSInPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSInPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSInPredicateOperator")
        .cast<NSInPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int flags(
    Pointer<NSInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("flags"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType(
    Pointer<NSInPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:options:"),
      arg,
      modifier,
      options,
    );
  }

  static int isEqual(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofPredicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:ofPredicate:"),
      arg,
      ofPredicate,
    );
  }

  static int options(
    Pointer<NSInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSInPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> stringVersion(
    Pointer<NSInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringVersion"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSInPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSIndexPath_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSIndexPath extends Struct<NSIndexPath> {
  factory NSIndexPath._() {
    throw UnimplementedError();
  }
  static Pointer<NSIndexPath> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSIndexPath").cast<NSIndexPath>();
  }

  static int compare(
    Pointer<NSIndexPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSIndexPath> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSIndexPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getIndexes$(
    Pointer<NSIndexPath> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getIndexes:"),
      arg,
    );
  }

  static void getIndexes$range$(
    Pointer<NSIndexPath> _self,
    Pointer<Uint64> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getIndexes:range:"),
      arg,
      range,
    );
  }

  static int hash(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indexAtPosition(
    Pointer<NSIndexPath> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("indexAtPosition:"),
      arg,
    );
  }

  static Pointer<Void> indexPathByAddingIndex(
    Pointer<NSIndexPath> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("indexPathByAddingIndex:"),
      arg,
    );
  }

  static Pointer<Void> indexPathByRemovingLastIndex(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("indexPathByRemovingLastIndex"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSIndexPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndex(
    Pointer<NSIndexPath> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithIndex:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndexes(
    Pointer<NSIndexPath> _self,
    Pointer<Uint64> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithIndexes:length:"),
      arg,
      length,
    );
  }

  static int isEqual(
    Pointer<NSIndexPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int length(
    Pointer<NSIndexPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

/// Objective-C class _NSIndexSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSIndexSet extends Struct<NSIndexSet> {
  factory NSIndexSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSIndexSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSIndexSet").cast<NSIndexSet>();
  }

  static Pointer<Void> classForCoder(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int containsIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("containsIndex:"),
      arg,
    );
  }

  static int containsIndexes(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsIndexes:"),
      arg,
    );
  }

  static int containsIndexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsIndexesInRange:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSIndexSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countOfIndexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfIndexesInRange:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateIndexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateIndexesInRange:options:usingBlock:"),
      arg,
      options,
      usingBlock,
    );
  }

  static void enumerateIndexesUsingBlock(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateIndexesUsingBlock:"),
      arg,
    );
  }

  static void enumerateIndexesWithOptions(
    Pointer<NSIndexSet> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateIndexesWithOptions:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateRangesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateRangesInRange:options:usingBlock:"),
      arg,
      options,
      usingBlock,
    );
  }

  static void enumerateRangesUsingBlock(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateRangesUsingBlock:"),
      arg,
    );
  }

  static void enumerateRangesWithOptions(
    Pointer<NSIndexSet> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateRangesWithOptions:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static int firstIndex(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("firstIndex"),
    );
  }

  static int getIndexes(
    Pointer<NSIndexSet> _self,
    Pointer<Uint64> arg, {
    @required int maxCount,
    @required Pointer<Pointer<Void>> inIndexRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("getIndexes:maxCount:inIndexRange:"),
      arg,
      maxCount,
      inIndexRange,
    );
  }

  static int hash(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indexGreaterThanIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("indexGreaterThanIndex:"),
      arg,
    );
  }

  static int indexGreaterThanOrEqualToIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("indexGreaterThanOrEqualToIndex:"),
      arg,
    );
  }

  static int indexInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("indexInRange:options:passingTest:"),
      arg,
      options,
      passingTest,
    );
  }

  static int indexLessThanIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("indexLessThanIndex:"),
      arg,
    );
  }

  static int indexLessThanOrEqualToIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("indexLessThanOrEqualToIndex:"),
      arg,
    );
  }

  static int indexPassingTest(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexPassingTest:"),
      arg,
    );
  }

  static int indexWithOptions(
    Pointer<NSIndexSet> _self,
    int arg, {
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("indexWithOptions:passingTest:"),
      arg,
      passingTest,
    );
  }

  static Pointer<Void> indexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("indexesInRange:options:passingTest:"),
      arg,
      options,
      passingTest,
    );
  }

  static Pointer<Void> indexesPassingTest(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("indexesPassingTest:"),
      arg,
    );
  }

  static Pointer<Void> indexesWithOptions(
    Pointer<NSIndexSet> _self,
    int arg, {
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("indexesWithOptions:passingTest:"),
      arg,
      passingTest,
    );
  }

  static Pointer<Void> init(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithIndex:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndexSet(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithIndexSet:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndexes(
    Pointer<NSIndexSet> _self,
    Pointer<Uint64> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithIndexes:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> initWithIndexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithIndexesInRange:"),
      arg,
    );
  }

  static int intersectsIndexesInRange(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("intersectsIndexesInRange:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToIndexSet(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToIndexSet:"),
      arg,
    );
  }

  static int lastIndex(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("lastIndex"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSIndexSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> rangeAtIndex(
    Pointer<NSIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeAtIndex:"),
      arg,
    );
  }

  static int rangeCount(
    Pointer<NSIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("rangeCount"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSIndexSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSIndexSpecifier extends Struct<NSIndexSpecifier> {
  factory NSIndexSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSIndexSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSIndexSpecifier").cast<NSIndexSpecifier>();
  }

  static void encodeWithCoder(
    Pointer<NSIndexSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int index(
    Pointer<NSIndexSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("index"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSIndexSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$index$(
    Pointer<NSIndexSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required int index,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:index:"),
      arg,
      containerSpecifier,
      key,
      index,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSIndexSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static Pointer<Void> keyClassDescription(
    Pointer<NSIndexSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyClassDescription"),
    );
  }

  static Pointer<Void> objectsByEvaluatingWithContainers(
    Pointer<NSIndexSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsByEvaluatingWithContainers:"),
      arg,
    );
  }

  static void setIndex(
    Pointer<NSIndexSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setIndex:"),
      arg,
    );
  }
}

/// Objective-C class _NSInvocationOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSInvocationOperation extends Struct<NSInvocationOperation> {
  factory NSInvocationOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSInvocationOperation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSInvocationOperation")
        .cast<NSInvocationOperation>();
  }

  static void dealloc(
    Pointer<NSInvocationOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSInvocationOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithInvocation(
    Pointer<NSInvocationOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInvocation:"),
      arg,
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSInvocationOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:selector:object:"),
      arg,
      selector,
      object,
    );
  }

  static Pointer<Void> invocation(
    Pointer<NSInvocationOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invocation"),
    );
  }

  static void main(
    Pointer<NSInvocationOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer<Void> result(
    Pointer<NSInvocationOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("result"),
    );
  }
}

/// Objective-C class _NSItemProvider_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSItemProvider extends Struct<NSItemProvider> {
  factory NSItemProvider._() {
    throw UnimplementedError();
  }
  static Pointer<NSItemProvider> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSItemProvider").cast<NSItemProvider>();
  }

  static int canLoadObjectOfClass(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canLoadObjectOfClass:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSItemProvider> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> dataTransferDelegate(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dataTransferDelegate"),
    );
  }

  static void dealloc(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hasItemConformingToTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasItemConformingToTypeIdentifier:"),
      arg,
    );
  }

  static int hasRepresentationConformingToTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required int fileOptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector(
          "hasRepresentationConformingToTypeIdentifier:fileOptions:"),
      arg,
      fileOptions,
    );
  }

  static Pointer<Void> init(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithItem(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> typeIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithItem:typeIdentifier:"),
      arg,
      typeIdentifier,
    );
  }

  static Pointer<Void> initWithObject(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static Pointer<Void> loadDataRepresentationForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "loadDataRepresentationForTypeIdentifier:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadFileRepresentationForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "loadFileRepresentationForTypeIdentifier:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadInPlaceFileRepresentationForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void loadItemForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> options,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("loadItemForTypeIdentifier:options:completionHandler:"),
      arg,
      options,
      completionHandler,
    );
  }

  static Pointer<Void> loadObjectOfClass(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadObjectOfClass:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void loadPreviewImageWithOptions(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("loadPreviewImageWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> previewImageHandler(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previewImageHandler"),
    );
  }

  static void registerDataRepresentationForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required int visibility,
    @required Pointer<Void> loadHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector(
          "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:"),
      arg,
      visibility,
      loadHandler,
    );
  }

  static void registerFileRepresentationForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required int fileOptions,
    @required int visibility,
    @required Pointer<Void> loadHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_p_returns_void(
      _self,
      _objc.getSelector(
          "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:"),
      arg,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  static void registerItemForTypeIdentifier(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> loadHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerItemForTypeIdentifier:loadHandler:"),
      arg,
      loadHandler,
    );
  }

  static void registerObject(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required int visibility,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("registerObject:visibility:"),
      arg,
      visibility,
    );
  }

  static void registerObjectOfClass(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg, {
    @required int visibility,
    @required Pointer<Void> loadHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("registerObjectOfClass:visibility:loadHandler:"),
      arg,
      visibility,
      loadHandler,
    );
  }

  static Pointer<Void> registeredTypeIdentifiers(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("registeredTypeIdentifiers"),
    );
  }

  static Pointer<Void> registeredTypeIdentifiersWithFileOptions(
    Pointer<NSItemProvider> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("registeredTypeIdentifiersWithFileOptions:"),
      arg,
    );
  }

  static Pointer<Void> representations(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("representations"),
    );
  }

  static void setDataTransferDelegate(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDataTransferDelegate:"),
      arg,
    );
  }

  static void setPreviewImageHandler(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPreviewImageHandler:"),
      arg,
    );
  }

  static void setSuggestedName(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSuggestedName:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void set_loadOperator(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_loadOperator:"),
      arg,
    );
  }

  static void set_preferredRepresentationByType(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_preferredRepresentationByType:"),
      arg,
    );
  }

  static void set_representationByType(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_representationByType:"),
      arg,
    );
  }

  static void set_typeOrder(
    Pointer<NSItemProvider> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_typeOrder:"),
      arg,
    );
  }

  static Pointer<Void> suggestedName(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suggestedName"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSItemProvider> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSItemProviderRepresentation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSItemProviderRepresentation
    extends Struct<NSItemProviderRepresentation> {
  factory NSItemProviderRepresentation._() {
    throw UnimplementedError();
  }
  static Pointer<NSItemProviderRepresentation> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSItemProviderRepresentation")
        .cast<NSItemProviderRepresentation>();
  }

  static Pointer<Void> copyWithDoNothingLoaderBlock(
    Pointer<NSItemProviderRepresentation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithDoNothingLoaderBlock"),
    );
  }

  static void dealloc(
    Pointer<NSItemProviderRepresentation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required int preferredRepresentation,
    @required Pointer<Void> loader,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:preferredRepresentation:loader:"),
      arg,
      preferredRepresentation,
      loader,
    );
  }

  static Pointer<Void> initWithType_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required int preferredRepresentation,
    @required Pointer<Void> loader,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithType_v2:preferredRepresentation:loader:"),
      arg,
      preferredRepresentation,
      loader,
    );
  }

  static Pointer<Void> loadDataWithOptions(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadDataWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadDataWithOptions_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadDataWithOptions_v2:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadFileCopyWithOptions(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadFileCopyWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadFileCopyWithOptions_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadFileCopyWithOptions_v2:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadOpenInPlaceWithOptions(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadOpenInPlaceWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadOpenInPlaceWithOptions_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadOpenInPlaceWithOptions_v2:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadWithOptions(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadWithOptions:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> loadWithOptions_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("loadWithOptions_v2:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static Pointer<Void> performProgressTrackingWithLoaderBlock(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onCancelCallback,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "performProgressTrackingWithLoaderBlock:onCancelCallback:"),
      arg,
      onCancelCallback,
    );
  }

  static int preferredRepresentation(
    Pointer<NSItemProviderRepresentation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("preferredRepresentation"),
    );
  }

  static void setLoaderBlock(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLoaderBlock:"),
      arg,
    );
  }

  static void setLoaderBlock_v2(
    Pointer<NSItemProviderRepresentation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLoaderBlock_v2:"),
      arg,
    );
  }

  static void setPreferredRepresentation(
    Pointer<NSItemProviderRepresentation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setPreferredRepresentation:"),
      arg,
    );
  }

  static void setVisibility(
    Pointer<NSItemProviderRepresentation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setVisibility:"),
      arg,
    );
  }

  static Pointer<Void> typeIdentifier(
    Pointer<NSItemProviderRepresentation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeIdentifier"),
    );
  }

  static int visibility(
    Pointer<NSItemProviderRepresentation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("visibility"),
    );
  }
}

/// Objective-C class _NSItemRepresentationLoadResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSItemRepresentationLoadResult
    extends Struct<NSItemRepresentationLoadResult> {
  factory NSItemRepresentationLoadResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSItemRepresentationLoadResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSItemRepresentationLoadResult")
        .cast<NSItemRepresentationLoadResult>();
  }

  static Pointer<Void> archivedObjectClassName(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archivedObjectClassName"),
    );
  }

  static Pointer<Void> cleanupHandler(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cleanupHandler"),
    );
  }

  static Pointer<Void> copyWithData(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> urlWrapper,
    @required Pointer<Void> cleanupHandler,
    @required Pointer<Void> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithData:urlWrapper:cleanupHandler:error:"),
      arg,
      urlWrapper,
      cleanupHandler,
      error,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static void dealloc(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static void setArchivedObjectClassName(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArchivedObjectClassName:"),
      arg,
    );
  }

  static void setCleanupHandler(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCleanupHandler:"),
      arg,
    );
  }

  static void setData(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setData:"),
      arg,
    );
  }

  static void setError(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setUrlWrapper(
    Pointer<NSItemRepresentationLoadResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUrlWrapper:"),
      arg,
    );
  }

  static void setWasOpenedInPlace(
    Pointer<NSItemRepresentationLoadResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWasOpenedInPlace:"),
      arg,
    );
  }

  static Pointer<Void> urlWrapper(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("urlWrapper"),
    );
  }

  static int wasOpenedInPlace(
    Pointer<NSItemRepresentationLoadResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("wasOpenedInPlace"),
    );
  }
}

/// Objective-C class _NSJSONSerialization_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSJSONSerialization extends Struct<NSJSONSerialization> {
  factory NSJSONSerialization._() {
    throw UnimplementedError();
  }
  static Pointer<NSJSONSerialization> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSJSONSerialization").cast<NSJSONSerialization>();
  }

  static Pointer<Void> init(
    Pointer<NSJSONSerialization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSKeyBinding_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyBinding extends Struct<NSKeyBinding> {
  factory NSKeyBinding._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyBinding> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyBinding").cast<NSKeyBinding>();
  }

  static void dealloc(
    Pointer<NSKeyBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> key(
    Pointer<NSKeyBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static void setKey(
    Pointer<NSKeyBinding> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setKey:"),
      arg,
    );
  }

  static Pointer<Void> targetClass(
    Pointer<NSKeyBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("targetClass"),
    );
  }
}

/// Objective-C class _NSKeyGetBinding_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyGetBinding extends Struct<NSKeyGetBinding> {
  factory NSKeyGetBinding._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyGetBinding> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyGetBinding").cast<NSKeyGetBinding>();
  }

  static Pointer<Void> getValueFromObject(
    Pointer<NSKeyGetBinding> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("getValueFromObject:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSKeyGetBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSKeyPathExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyPathExpression extends Struct<NSKeyPathExpression> {
  factory NSKeyPathExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyPathExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyPathExpression").cast<NSKeyPathExpression>();
  }

  static void dealloc(
    Pointer<NSKeyPathExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithKeyPath(
    Pointer<NSKeyPathExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKeyPath:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperand(
    Pointer<NSKeyPathExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andKeyPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOperand:andKeyPath:"),
      arg,
      andKeyPath,
    );
  }

  static Pointer<Void> keyPath(
    Pointer<NSKeyPathExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPath"),
    );
  }

  static Pointer<Void> pathExpression(
    Pointer<NSKeyPathExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathExpression"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSKeyPathExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSKeyPathSpecifierExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyPathSpecifierExpression
    extends Struct<NSKeyPathSpecifierExpression> {
  factory NSKeyPathSpecifierExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyPathSpecifierExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyPathSpecifierExpression")
        .cast<NSKeyPathSpecifierExpression>();
  }

  static Pointer<Void> constantValue(
    Pointer<NSKeyPathSpecifierExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constantValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSKeyPathSpecifierExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSKeyPathSpecifierExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithObject(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSKeyPathSpecifierExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyPath(
    Pointer<NSKeyPathSpecifierExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPath"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSKeyPathSpecifierExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSKeySetBinding_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeySetBinding extends Struct<NSKeySetBinding> {
  factory NSKeySetBinding._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeySetBinding> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeySetBinding").cast<NSKeySetBinding>();
  }

  static Pointer<Void> init(
    Pointer<NSKeySetBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isScalarProperty(
    Pointer<NSKeySetBinding> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isScalarProperty"),
    );
  }

  static void setValue(
    Pointer<NSKeySetBinding> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:inObject:"),
      arg,
      inObject,
    );
  }
}

/// Objective-C class _NSKeyValueAccessor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueAccessor extends Struct<NSKeyValueAccessor> {
  factory NSKeyValueAccessor._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueAccessor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueAccessor").cast<NSKeyValueAccessor>();
  }

  static Pointer<Void> containerClassID(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerClassID"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> extraArgument1(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("extraArgument1"),
    );
  }

  static Pointer<Void> extraArgument2(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("extraArgument2"),
    );
  }

  static int extraArgumentCount(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("extraArgumentCount"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueAccessor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Pointer<Void>> implementation,
    @required Pointer<Void> selector,
    @required Pointer<Void> extraArguments,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:implementation:selector:extraArguments:count:"),
      arg,
      key,
      implementation,
      selector,
      extraArguments,
      count,
    );
  }

  static Pointer<Void> key(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSKeyValueAccessor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }
}

/// Objective-C class _NSKeyValueArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueArray extends Struct<NSKeyValueArray> {
  factory NSKeyValueArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueArray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueArray").cast<NSKeyValueArray>();
  }

  static int count(
    Pointer<NSKeyValueArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueChangeDictionary_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueChangeDictionary extends Struct<NSKeyValueChangeDictionary> {
  factory NSKeyValueChangeDictionary._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueChangeDictionary> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueChangeDictionary")
        .cast<NSKeyValueChangeDictionary>();
  }

  static int count(
    Pointer<NSKeyValueChangeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueChangeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithDetailsNoCopy(
    Pointer<NSKeyValueChangeDictionary> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> originalObservable,
    @required int isPriorNotification,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithDetailsNoCopy:originalObservable:isPriorNotification:"),
      arg,
      originalObservable,
      isPriorNotification,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSKeyValueChangeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSKeyValueChangeDictionary> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void retainObjects(
    Pointer<NSKeyValueChangeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("retainObjects"),
    );
  }

  static void setDetailsNoCopy(
    Pointer<NSKeyValueChangeDictionary> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> originalObservable,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDetailsNoCopy:originalObservable:"),
      arg,
      originalObservable,
    );
  }

  static void setOriginalObservable(
    Pointer<NSKeyValueChangeDictionary> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOriginalObservable:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueCollectionGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueCollectionGetter extends Struct<NSKeyValueCollectionGetter> {
  factory NSKeyValueCollectionGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueCollectionGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueCollectionGetter")
        .cast<NSKeyValueCollectionGetter>();
  }

  static void dealloc(
    Pointer<NSKeyValueCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueCollectionGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> methods,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:methods:proxyClass:"),
      arg,
      key,
      methods,
      proxyClass,
    );
  }

  static Pointer<Void> methods(
    Pointer<NSKeyValueCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("methods"),
    );
  }
}

/// Objective-C class _NSKeyValueComputedProperty_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueComputedProperty extends Struct<NSKeyValueComputedProperty> {
  factory NSKeyValueComputedProperty._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueComputedProperty> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueComputedProperty")
        .cast<NSKeyValueComputedProperty>();
  }

  static void dealloc(
    Pointer<NSKeyValueComputedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueComputedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int matchesWithoutOperatorComponentsKeyPath(
    Pointer<NSKeyValueComputedProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesWithoutOperatorComponentsKeyPath:"),
      arg,
    );
  }

  static void object$didAddObservance$recurse$(
    Pointer<NSKeyValueComputedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didAddObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didAddObservance:recurse:"),
      arg,
      didAddObservance,
      recurse,
    );
  }

  static void object$didRemoveObservance$recurse$(
    Pointer<NSKeyValueComputedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didRemoveObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didRemoveObservance:recurse:"),
      arg,
      didRemoveObservance,
      recurse,
    );
  }

  static int
      object$withObservance$willChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueComputedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> willChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Pointer<Void>> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      willChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }

  static void
      object$withObservance$didChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueComputedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> didChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Void> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      didChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }
}

/// Objective-C class _NSKeyValueContainerClass_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueContainerClass extends Struct<NSKeyValueContainerClass> {
  factory NSKeyValueContainerClass._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueContainerClass> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueContainerClass")
        .cast<NSKeyValueContainerClass>();
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueContainerClass> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> initWithOriginalClass(
    Pointer<NSKeyValueContainerClass> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOriginalClass:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableArray extends Struct<NSKeyValueFastMutableArray> {
  factory NSKeyValueFastMutableArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableArray")
        .cast<NSKeyValueFastMutableArray>();
  }

  static void addObject(
    Pointer<NSKeyValueFastMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueFastMutableArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueFastMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static void removeLastObject(
    Pointer<NSKeyValueFastMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueFastMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueFastMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueFastMutableArray> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueFastMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableArray1_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableArray1 extends Struct<NSKeyValueFastMutableArray1> {
  factory NSKeyValueFastMutableArray1._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableArray1> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableArray1")
        .cast<NSKeyValueFastMutableArray1>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableArray1> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueFastMutableArray1> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueFastMutableArray1> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueFastMutableArray1> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableArray2_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableArray2 extends Struct<NSKeyValueFastMutableArray2> {
  factory NSKeyValueFastMutableArray2._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableArray2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableArray2")
        .cast<NSKeyValueFastMutableArray2>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableArray2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueFastMutableArray2> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueFastMutableArray2> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueFastMutableArray2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableCollection1Getter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableCollection1Getter
    extends Struct<NSKeyValueFastMutableCollection1Getter> {
  factory NSKeyValueFastMutableCollection1Getter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableCollection1Getter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableCollection1Getter")
        .cast<NSKeyValueFastMutableCollection1Getter>();
  }

  static void dealloc(
    Pointer<NSKeyValueFastMutableCollection1Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueFastMutableCollection1Getter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> nonmutatingMethods,
    @required Pointer<Void> mutatingMethods,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:nonmutatingMethods:mutatingMethods:proxyClass:"),
      arg,
      key,
      nonmutatingMethods,
      mutatingMethods,
      proxyClass,
    );
  }

  static Pointer<Void> mutatingMethods(
    Pointer<NSKeyValueFastMutableCollection1Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutatingMethods"),
    );
  }

  static Pointer<Void> nonmutatingMethods(
    Pointer<NSKeyValueFastMutableCollection1Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonmutatingMethods"),
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableCollection2Getter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableCollection2Getter
    extends Struct<NSKeyValueFastMutableCollection2Getter> {
  factory NSKeyValueFastMutableCollection2Getter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableCollection2Getter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableCollection2Getter")
        .cast<NSKeyValueFastMutableCollection2Getter>();
  }

  static Pointer<Void> baseGetter(
    Pointer<NSKeyValueFastMutableCollection2Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseGetter"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueFastMutableCollection2Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueFastMutableCollection2Getter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> baseGetter,
    @required Pointer<Void> mutatingMethods,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:baseGetter:mutatingMethods:proxyClass:"),
      arg,
      key,
      baseGetter,
      mutatingMethods,
      proxyClass,
    );
  }

  static Pointer<Void> mutatingMethods(
    Pointer<NSKeyValueFastMutableCollection2Getter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutatingMethods"),
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableOrderedSet
    extends Struct<NSKeyValueFastMutableOrderedSet> {
  factory NSKeyValueFastMutableOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableOrderedSet")
        .cast<NSKeyValueFastMutableOrderedSet>();
  }

  static void insertObject(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueFastMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableOrderedSet1_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableOrderedSet1
    extends Struct<NSKeyValueFastMutableOrderedSet1> {
  factory NSKeyValueFastMutableOrderedSet1._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableOrderedSet1> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableOrderedSet1")
        .cast<NSKeyValueFastMutableOrderedSet1>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableOrderedSet1> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueFastMutableOrderedSet1> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueFastMutableOrderedSet1> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueFastMutableOrderedSet1> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueFastMutableOrderedSet1> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableOrderedSet2_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableOrderedSet2
    extends Struct<NSKeyValueFastMutableOrderedSet2> {
  factory NSKeyValueFastMutableOrderedSet2._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableOrderedSet2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableOrderedSet2")
        .cast<NSKeyValueFastMutableOrderedSet2>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableOrderedSet2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueFastMutableOrderedSet2> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueFastMutableOrderedSet2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueFastMutableOrderedSet2> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueFastMutableOrderedSet2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableSet extends Struct<NSKeyValueFastMutableSet> {
  factory NSKeyValueFastMutableSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableSet")
        .cast<NSKeyValueFastMutableSet>();
  }

  static void addObject(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static void intersectSet(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectSet:"),
      arg,
    );
  }

  static void minusSet(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusSet:"),
      arg,
    );
  }

  static void removeAllObjects(
    Pointer<NSKeyValueFastMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObject(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static void setSet(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSet:"),
      arg,
    );
  }

  static void unionSet(
    Pointer<NSKeyValueFastMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionSet:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableSet1_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableSet1 extends Struct<NSKeyValueFastMutableSet1> {
  factory NSKeyValueFastMutableSet1._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableSet1> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableSet1")
        .cast<NSKeyValueFastMutableSet1>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableSet1> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueFastMutableSet1> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueFastMutableSet1> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }
}

/// Objective-C class _NSKeyValueFastMutableSet2_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueFastMutableSet2 extends Struct<NSKeyValueFastMutableSet2> {
  factory NSKeyValueFastMutableSet2._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueFastMutableSet2> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueFastMutableSet2")
        .cast<NSKeyValueFastMutableSet2>();
  }

  static int count(
    Pointer<NSKeyValueFastMutableSet2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueFastMutableSet2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueFastMutableSet2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }
}

/// Objective-C class _NSKeyValueGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueGetter extends Struct<NSKeyValueGetter> {
  factory NSKeyValueGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueGetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueGetter").cast<NSKeyValueGetter>();
  }
}

/// Objective-C class _NSKeyValueIvarGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarGetter extends Struct<NSKeyValueIvarGetter> {
  factory NSKeyValueIvarGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarGetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueIvarGetter").cast<NSKeyValueIvarGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueIvarGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
    @required Pointer<Pointer<Void>> ivar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:ivar:"),
      arg,
      key,
      containerIsa,
      ivar,
    );
  }
}

/// Objective-C class _NSKeyValueIvarMutableArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarMutableArray extends Struct<NSKeyValueIvarMutableArray> {
  factory NSKeyValueIvarMutableArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarMutableArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueIvarMutableArray")
        .cast<NSKeyValueIvarMutableArray>();
  }

  static void addObject(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueIvarMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueIvarMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeLastObject(
    Pointer<NSKeyValueIvarMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueIvarMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueIvarMutableArray> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueIvarMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueIvarMutableCollectionGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarMutableCollectionGetter
    extends Struct<NSKeyValueIvarMutableCollectionGetter> {
  factory NSKeyValueIvarMutableCollectionGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarMutableCollectionGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueIvarMutableCollectionGetter")
        .cast<NSKeyValueIvarMutableCollectionGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueIvarMutableCollectionGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
    @required Pointer<Pointer<Void>> ivar,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:containerIsa:ivar:proxyClass:"),
      arg,
      key,
      containerIsa,
      ivar,
      proxyClass,
    );
  }

  static Pointer<Pointer<Void>> ivar(
    Pointer<NSKeyValueIvarMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ivar"),
    );
  }
}

/// Objective-C class _NSKeyValueIvarMutableOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarMutableOrderedSet
    extends Struct<NSKeyValueIvarMutableOrderedSet> {
  factory NSKeyValueIvarMutableOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarMutableOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueIvarMutableOrderedSet")
        .cast<NSKeyValueIvarMutableOrderedSet>();
  }

  static int count(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueIvarMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueIvarMutableSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarMutableSet extends Struct<NSKeyValueIvarMutableSet> {
  factory NSKeyValueIvarMutableSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarMutableSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueIvarMutableSet")
        .cast<NSKeyValueIvarMutableSet>();
  }

  static void addObject(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueIvarMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void intersectSet(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectSet:"),
      arg,
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static void minusSet(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusSet:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueIvarMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static void removeAllObjects(
    Pointer<NSKeyValueIvarMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObject(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static void setSet(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSet:"),
      arg,
    );
  }

  static void unionSet(
    Pointer<NSKeyValueIvarMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionSet:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueIvarSetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueIvarSetter extends Struct<NSKeyValueIvarSetter> {
  factory NSKeyValueIvarSetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueIvarSetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueIvarSetter").cast<NSKeyValueIvarSetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueIvarSetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
    @required Pointer<Pointer<Void>> ivar,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:ivar:"),
      arg,
      key,
      containerIsa,
      ivar,
    );
  }

  static Pointer<Pointer<Void>> ivar(
    Pointer<NSKeyValueIvarSetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ivar"),
    );
  }
}

/// Objective-C class _NSKeyValueMethodGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMethodGetter extends Struct<NSKeyValueMethodGetter> {
  factory NSKeyValueMethodGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMethodGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMethodGetter")
        .cast<NSKeyValueMethodGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueMethodGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Pointer<Void>> method,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:method:"),
      arg,
      key,
      method,
    );
  }
}

/// Objective-C class _NSKeyValueMethodSetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMethodSetter extends Struct<NSKeyValueMethodSetter> {
  factory NSKeyValueMethodSetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMethodSetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMethodSetter")
        .cast<NSKeyValueMethodSetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueMethodSetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Pointer<Void>> method,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:method:"),
      arg,
      key,
      method,
    );
  }

  static Pointer<Pointer<Void>> method(
    Pointer<NSKeyValueMethodSetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("method"),
    );
  }
}

/// Objective-C class _NSKeyValueMutableArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutableArray extends Struct<NSKeyValueMutableArray> {
  factory NSKeyValueMutableArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutableArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutableArray")
        .cast<NSKeyValueMutableArray>();
  }

  static void dealloc(
    Pointer<NSKeyValueMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void setArray(
    Pointer<NSKeyValueMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArray:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueMutableOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutableOrderedSet extends Struct<NSKeyValueMutableOrderedSet> {
  factory NSKeyValueMutableOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutableOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutableOrderedSet")
        .cast<NSKeyValueMutableOrderedSet>();
  }

  static void dealloc(
    Pointer<NSKeyValueMutableOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSKeyValueMutableSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutableSet extends Struct<NSKeyValueMutableSet> {
  factory NSKeyValueMutableSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutableSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueMutableSet").cast<NSKeyValueMutableSet>();
  }

  static void dealloc(
    Pointer<NSKeyValueMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSKeyValueMutatingArrayMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutatingArrayMethodSet
    extends Struct<NSKeyValueMutatingArrayMethodSet> {
  factory NSKeyValueMutatingArrayMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutatingArrayMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutatingArrayMethodSet")
        .cast<NSKeyValueMutatingArrayMethodSet>();
  }
}

/// Objective-C class _NSKeyValueMutatingCollectionMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutatingCollectionMethodSet
    extends Struct<NSKeyValueMutatingCollectionMethodSet> {
  factory NSKeyValueMutatingCollectionMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutatingCollectionMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutatingCollectionMethodSet")
        .cast<NSKeyValueMutatingCollectionMethodSet>();
  }
}

/// Objective-C class _NSKeyValueMutatingOrderedSetMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutatingOrderedSetMethodSet
    extends Struct<NSKeyValueMutatingOrderedSetMethodSet> {
  factory NSKeyValueMutatingOrderedSetMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutatingOrderedSetMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutatingOrderedSetMethodSet")
        .cast<NSKeyValueMutatingOrderedSetMethodSet>();
  }
}

/// Objective-C class _NSKeyValueMutatingSetMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueMutatingSetMethodSet
    extends Struct<NSKeyValueMutatingSetMethodSet> {
  factory NSKeyValueMutatingSetMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueMutatingSetMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueMutatingSetMethodSet")
        .cast<NSKeyValueMutatingSetMethodSet>();
  }
}

/// Objective-C class _NSKeyValueNestedProperty_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNestedProperty extends Struct<NSKeyValueNestedProperty> {
  factory NSKeyValueNestedProperty._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNestedProperty> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNestedProperty")
        .cast<NSKeyValueNestedProperty>();
  }

  static void dealloc(
    Pointer<NSKeyValueNestedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> dependentValueKeyOrKeysIsASet(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Int8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dependentValueKeyOrKeysIsASet:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueNestedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int matchesWithoutOperatorComponentsKeyPath(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesWithoutOperatorComponentsKeyPath:"),
      arg,
    );
  }

  static void object$didAddObservance$recurse$(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didAddObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didAddObservance:recurse:"),
      arg,
      didAddObservance,
      recurse,
    );
  }

  static void object$didRemoveObservance$recurse$(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didRemoveObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didRemoveObservance:recurse:"),
      arg,
      didRemoveObservance,
      recurse,
    );
  }

  static int
      object$withObservance$willChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> willChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Pointer<Void>> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      willChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }

  static void
      object$withObservance$didChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueNestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> didChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Void> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      didChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }
}

/// Objective-C class _NSKeyValueNilOrderedSetEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNilOrderedSetEnumerator
    extends Struct<NSKeyValueNilOrderedSetEnumerator> {
  factory NSKeyValueNilOrderedSetEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNilOrderedSetEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNilOrderedSetEnumerator")
        .cast<NSKeyValueNilOrderedSetEnumerator>();
  }

  static Pointer<Void> nextObject(
    Pointer<NSKeyValueNilOrderedSetEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }
}

/// Objective-C class _NSKeyValueNilSetEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNilSetEnumerator extends Struct<NSKeyValueNilSetEnumerator> {
  factory NSKeyValueNilSetEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNilSetEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNilSetEnumerator")
        .cast<NSKeyValueNilSetEnumerator>();
  }

  static Pointer<Void> nextObject(
    Pointer<NSKeyValueNilSetEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }
}

/// Objective-C class _NSKeyValueNonmutatingArrayMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNonmutatingArrayMethodSet
    extends Struct<NSKeyValueNonmutatingArrayMethodSet> {
  factory NSKeyValueNonmutatingArrayMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNonmutatingArrayMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNonmutatingArrayMethodSet")
        .cast<NSKeyValueNonmutatingArrayMethodSet>();
  }
}

/// Objective-C class _NSKeyValueNonmutatingCollectionMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNonmutatingCollectionMethodSet
    extends Struct<NSKeyValueNonmutatingCollectionMethodSet> {
  factory NSKeyValueNonmutatingCollectionMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNonmutatingCollectionMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNonmutatingCollectionMethodSet")
        .cast<NSKeyValueNonmutatingCollectionMethodSet>();
  }
}

/// Objective-C class _NSKeyValueNonmutatingOrderedSetMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNonmutatingOrderedSetMethodSet
    extends Struct<NSKeyValueNonmutatingOrderedSetMethodSet> {
  factory NSKeyValueNonmutatingOrderedSetMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNonmutatingOrderedSetMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNonmutatingOrderedSetMethodSet")
        .cast<NSKeyValueNonmutatingOrderedSetMethodSet>();
  }
}

/// Objective-C class _NSKeyValueNonmutatingSetMethodSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNonmutatingSetMethodSet
    extends Struct<NSKeyValueNonmutatingSetMethodSet> {
  factory NSKeyValueNonmutatingSetMethodSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNonmutatingSetMethodSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNonmutatingSetMethodSet")
        .cast<NSKeyValueNonmutatingSetMethodSet>();
  }
}

/// Objective-C class _NSKeyValueNotifyingMutableArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNotifyingMutableArray
    extends Struct<NSKeyValueNotifyingMutableArray> {
  factory NSKeyValueNotifyingMutableArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNotifyingMutableArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNotifyingMutableArray")
        .cast<NSKeyValueNotifyingMutableArray>();
  }

  static void addObject(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeLastObject(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueNotifyingMutableCollectionGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNotifyingMutableCollectionGetter
    extends Struct<NSKeyValueNotifyingMutableCollectionGetter> {
  factory NSKeyValueNotifyingMutableCollectionGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNotifyingMutableCollectionGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNotifyingMutableCollectionGetter")
        .cast<NSKeyValueNotifyingMutableCollectionGetter>();
  }

  static void dealloc(
    Pointer<NSKeyValueNotifyingMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueNotifyingMutableCollectionGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> mutableCollectionGetter,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:mutableCollectionGetter:proxyClass:"),
      arg,
      key,
      mutableCollectionGetter,
      proxyClass,
    );
  }

  static Pointer<Void> mutableCollectionGetter(
    Pointer<NSKeyValueNotifyingMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCollectionGetter"),
    );
  }
}

/// Objective-C class _NSKeyValueNotifyingMutableOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNotifyingMutableOrderedSet
    extends Struct<NSKeyValueNotifyingMutableOrderedSet> {
  factory NSKeyValueNotifyingMutableOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNotifyingMutableOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNotifyingMutableOrderedSet")
        .cast<NSKeyValueNotifyingMutableOrderedSet>();
  }

  static int count(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueNotifyingMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueNotifyingMutableSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueNotifyingMutableSet
    extends Struct<NSKeyValueNotifyingMutableSet> {
  factory NSKeyValueNotifyingMutableSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueNotifyingMutableSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueNotifyingMutableSet")
        .cast<NSKeyValueNotifyingMutableSet>();
  }

  static void addObject(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void intersectSet(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectSet:"),
      arg,
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static void minusSet(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusSet:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static void removeAllObjects(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObject(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static void setSet(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSet:"),
      arg,
    );
  }

  static void unionSet(
    Pointer<NSKeyValueNotifyingMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionSet:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueObservance_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueObservance extends Struct<NSKeyValueObservance> {
  factory NSKeyValueObservance._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueObservance> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueObservance").cast<NSKeyValueObservance>();
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueObservance> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSKeyValueObservance> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSKeyValueObservance> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void observeValueForKeyPath(
    Pointer<NSKeyValueObservance> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofObject,
    @required Pointer<Void> change,
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeValueForKeyPath:ofObject:change:context:"),
      arg,
      ofObject,
      change,
      context,
    );
  }
}

/// Objective-C class _NSKeyValueObservationInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueObservationInfo extends Struct<NSKeyValueObservationInfo> {
  factory NSKeyValueObservationInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueObservationInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueObservationInfo")
        .cast<NSKeyValueObservationInfo>();
  }

  static void dealloc(
    Pointer<NSKeyValueObservationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueObservationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSKeyValueObservationInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSKeyValueObservationInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueOrderedSet extends Struct<NSKeyValueOrderedSet> {
  factory NSKeyValueOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueOrderedSet").cast<NSKeyValueOrderedSet>();
  }

  static int count(
    Pointer<NSKeyValueOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueOrderedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueProperty_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueProperty extends Struct<NSKeyValueProperty> {
  factory NSKeyValueProperty._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueProperty> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueProperty").cast<NSKeyValueProperty>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSKeyValueProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> dependentValueKeyOrKeysIsASet(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Int8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dependentValueKeyOrKeysIsASet:"),
      arg,
    );
  }

  static Pointer<Void> isaForAutonotifying(
    Pointer<NSKeyValueProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isaForAutonotifying"),
    );
  }

  static Pointer<Void> keyPath(
    Pointer<NSKeyValueProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPath"),
    );
  }

  static Pointer<Void> keyPathIfAffectedByValueForKey(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> exactMatch,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyPathIfAffectedByValueForKey:exactMatch:"),
      arg,
      exactMatch,
    );
  }

  static Pointer<Void> keyPathIfAffectedByValueForMemberOfKeys(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyPathIfAffectedByValueForMemberOfKeys:"),
      arg,
    );
  }

  static int matchesWithoutOperatorComponentsKeyPath(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesWithoutOperatorComponentsKeyPath:"),
      arg,
    );
  }

  static void object$didAddObservance$recurse$(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didAddObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didAddObservance:recurse:"),
      arg,
      didAddObservance,
      recurse,
    );
  }

  static void object$didRemoveObservance$recurse$(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didRemoveObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didRemoveObservance:recurse:"),
      arg,
      didRemoveObservance,
      recurse,
    );
  }

  static int
      object$withObservance$willChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> willChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Pointer<Void>> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      willChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }

  static void
      object$withObservance$didChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> didChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Void> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      didChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }

  static Pointer<Void> restOfKeyPathIfContainedByValueForKeyPath(
    Pointer<NSKeyValueProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("restOfKeyPathIfContainedByValueForKeyPath:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueProxyGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueProxyGetter extends Struct<NSKeyValueProxyGetter> {
  factory NSKeyValueProxyGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueProxyGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueProxyGetter")
        .cast<NSKeyValueProxyGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueProxyGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:proxyClass:"),
      arg,
      key,
      proxyClass,
    );
  }

  static Pointer<Void> proxyClass(
    Pointer<NSKeyValueProxyGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("proxyClass"),
    );
  }
}

/// Objective-C class _NSKeyValueProxyShareKey_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueProxyShareKey extends Struct<NSKeyValueProxyShareKey> {
  factory NSKeyValueProxyShareKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueProxyShareKey> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueProxyShareKey")
        .cast<NSKeyValueProxyShareKey>();
  }
}

/// Objective-C class _NSKeyValueSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSet extends Struct<NSKeyValueSet> {
  factory NSKeyValueSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueSet").cast<NSKeyValueSet>();
  }

  static int count(
    Pointer<NSKeyValueSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }
}

/// Objective-C class _NSKeyValueSetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSetter extends Struct<NSKeyValueSetter> {
  factory NSKeyValueSetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueSetter").cast<NSKeyValueSetter>();
  }
}

/// Objective-C class _NSKeyValueShareableObservanceKey_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueShareableObservanceKey
    extends Struct<NSKeyValueShareableObservanceKey> {
  factory NSKeyValueShareableObservanceKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueShareableObservanceKey> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueShareableObservanceKey")
        .cast<NSKeyValueShareableObservanceKey>();
  }
}

/// Objective-C class _NSKeyValueShareableObservationInfoKey_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueShareableObservationInfoKey
    extends Struct<NSKeyValueShareableObservationInfoKey> {
  factory NSKeyValueShareableObservationInfoKey._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueShareableObservationInfoKey> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueShareableObservationInfoKey")
        .cast<NSKeyValueShareableObservationInfoKey>();
  }
}

/// Objective-C class _NSKeyValueSlowGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowGetter extends Struct<NSKeyValueSlowGetter> {
  factory NSKeyValueSlowGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowGetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueSlowGetter").cast<NSKeyValueSlowGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueSlowGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:"),
      arg,
      key,
      containerIsa,
    );
  }
}

/// Objective-C class _NSKeyValueSlowMutableArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowMutableArray extends Struct<NSKeyValueSlowMutableArray> {
  factory NSKeyValueSlowMutableArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowMutableArray> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueSlowMutableArray")
        .cast<NSKeyValueSlowMutableArray>();
  }

  static void addObject(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueSlowMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueSlowMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeLastObject(
    Pointer<NSKeyValueSlowMutableArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueSlowMutableArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueSlowMutableArray> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueSlowMutableArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueSlowMutableCollectionGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowMutableCollectionGetter
    extends Struct<NSKeyValueSlowMutableCollectionGetter> {
  factory NSKeyValueSlowMutableCollectionGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowMutableCollectionGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueSlowMutableCollectionGetter")
        .cast<NSKeyValueSlowMutableCollectionGetter>();
  }

  static Pointer<Void> baseGetter(
    Pointer<NSKeyValueSlowMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseGetter"),
    );
  }

  static Pointer<Void> baseSetter(
    Pointer<NSKeyValueSlowMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseSetter"),
    );
  }

  static void dealloc(
    Pointer<NSKeyValueSlowMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueSlowMutableCollectionGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> baseGetter,
    @required Pointer<Void> baseSetter,
    @required Pointer<Void> containerIsa,
    @required Pointer<Void> proxyClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassID:key:baseGetter:baseSetter:containerIsa:proxyClass:"),
      arg,
      key,
      baseGetter,
      baseSetter,
      containerIsa,
      proxyClass,
    );
  }

  static int treatNilValuesLikeEmptyCollections(
    Pointer<NSKeyValueSlowMutableCollectionGetter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("treatNilValuesLikeEmptyCollections"),
    );
  }
}

/// Objective-C class _NSKeyValueSlowMutableOrderedSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowMutableOrderedSet
    extends Struct<NSKeyValueSlowMutableOrderedSet> {
  factory NSKeyValueSlowMutableOrderedSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowMutableOrderedSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueSlowMutableOrderedSet")
        .cast<NSKeyValueSlowMutableOrderedSet>();
  }

  static int count(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void getObjects(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getObjects:range:"),
      arg,
      range,
    );
  }

  static int indexOfObject(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfObject:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectsAtIndexes(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsAtIndexes:"),
      arg,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSKeyValueSlowMutableOrderedSet> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }
}

/// Objective-C class _NSKeyValueSlowMutableSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowMutableSet extends Struct<NSKeyValueSlowMutableSet> {
  factory NSKeyValueSlowMutableSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowMutableSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueSlowMutableSet")
        .cast<NSKeyValueSlowMutableSet>();
  }

  static void addObject(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static int count(
    Pointer<NSKeyValueSlowMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void intersectSet(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("intersectSet:"),
      arg,
    );
  }

  static Pointer<Void> member(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("member:"),
      arg,
    );
  }

  static void minusSet(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("minusSet:"),
      arg,
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSKeyValueSlowMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static void removeAllObjects(
    Pointer<NSKeyValueSlowMutableSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObject(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static void setSet(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSet:"),
      arg,
    );
  }

  static void unionSet(
    Pointer<NSKeyValueSlowMutableSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("unionSet:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyValueSlowSetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueSlowSetter extends Struct<NSKeyValueSlowSetter> {
  factory NSKeyValueSlowSetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueSlowSetter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyValueSlowSetter").cast<NSKeyValueSlowSetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueSlowSetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:"),
      arg,
      key,
      containerIsa,
    );
  }
}

/// Objective-C class _NSKeyValueUndefinedGetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueUndefinedGetter extends Struct<NSKeyValueUndefinedGetter> {
  factory NSKeyValueUndefinedGetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueUndefinedGetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueUndefinedGetter")
        .cast<NSKeyValueUndefinedGetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueUndefinedGetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:"),
      arg,
      key,
      containerIsa,
    );
  }
}

/// Objective-C class _NSKeyValueUndefinedSetter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueUndefinedSetter extends Struct<NSKeyValueUndefinedSetter> {
  factory NSKeyValueUndefinedSetter._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueUndefinedSetter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueUndefinedSetter")
        .cast<NSKeyValueUndefinedSetter>();
  }

  static Pointer<Void> initWithContainerClassID(
    Pointer<NSKeyValueUndefinedSetter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
    @required Pointer<Void> containerIsa,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassID:key:containerIsa:"),
      arg,
      key,
      containerIsa,
    );
  }
}

/// Objective-C class _NSKeyValueUnnestedProperty_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyValueUnnestedProperty extends Struct<NSKeyValueUnnestedProperty> {
  factory NSKeyValueUnnestedProperty._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyValueUnnestedProperty> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSKeyValueUnnestedProperty")
        .cast<NSKeyValueUnnestedProperty>();
  }

  static void dealloc(
    Pointer<NSKeyValueUnnestedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyValueUnnestedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> isaForAutonotifying(
    Pointer<NSKeyValueUnnestedProperty> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isaForAutonotifying"),
    );
  }

  static Pointer<Void> keyPathIfAffectedByValueForKey(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> exactMatch,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyPathIfAffectedByValueForKey:exactMatch:"),
      arg,
      exactMatch,
    );
  }

  static Pointer<Void> keyPathIfAffectedByValueForMemberOfKeys(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("keyPathIfAffectedByValueForMemberOfKeys:"),
      arg,
    );
  }

  static int matchesWithoutOperatorComponentsKeyPath(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesWithoutOperatorComponentsKeyPath:"),
      arg,
    );
  }

  static void object$didAddObservance$recurse$(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didAddObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didAddObservance:recurse:"),
      arg,
      didAddObservance,
      recurse,
    );
  }

  static void object$didRemoveObservance$recurse$(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didRemoveObservance,
    @required int recurse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("object:didRemoveObservance:recurse:"),
      arg,
      didRemoveObservance,
      recurse,
    );
  }

  static int
      object$withObservance$willChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> willChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Pointer<Void>> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Int8(
      _self,
      _objc.getSelector(
          "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      willChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }

  static void
      object$withObservance$didChangeValueForKeyOrKeys$recurse$forwardingValues$(
    Pointer<NSKeyValueUnnestedProperty> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObservance,
    @required Pointer<Void> didChangeValueForKeyOrKeys,
    @required int recurse,
    @required Pointer<Void> forwardingValues,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:"),
      arg,
      withObservance,
      didChangeValueForKeyOrKeys,
      recurse,
      forwardingValues,
    );
  }
}

/// Objective-C class _NSKeyedArchiver_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyedArchiver extends Struct<NSKeyedArchiver> {
  factory NSKeyedArchiver._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyedArchiver> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyedArchiver").cast<NSKeyedArchiver>();
  }

  static int allowsKeyedCoding(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static Pointer<Void> classNameForClass(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classNameForClass:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeArrayOfObjCType(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static void encodeBool(
    Pointer<NSKeyedArchiver> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("encodeBool:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeBycopyObject(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeBycopyObject:"),
      arg,
    );
  }

  static void encodeByrefObject(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeByrefObject:"),
      arg,
    );
  }

  static void encodeBytes$length$forKey$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:forKey:"),
      arg,
      length,
      forKey,
    );
  }

  static void encodeBytes$length$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:"),
      arg,
      length,
    );
  }

  static void encodeConditionalObject$forKey$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeConditionalObject$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:"),
      arg,
    );
  }

  static void encodeDataObject(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeDouble(
    Pointer<NSKeyedArchiver> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("encodeDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeFloat(
    Pointer<NSKeyedArchiver> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_p_returns_void(
      _self,
      _objc.getSelector("encodeFloat:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt(
    Pointer<NSKeyedArchiver> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt32(
    Pointer<NSKeyedArchiver> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt32:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt64(
    Pointer<NSKeyedArchiver> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInt64:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$forKey$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:"),
      arg,
    );
  }

  static void encodePropertyList(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePropertyList:"),
      arg,
    );
  }

  static void encodeRootObject(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRootObject:"),
      arg,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void encodeValuesOfObjCTypes(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static Pointer<Void> encodedData(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("encodedData"),
    );
  }

  static void finishEncoding(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finishEncoding"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initForWritingWithMutableData(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForWritingWithMutableData:"),
      arg,
    );
  }

  static Pointer<Void> initRequiringSecureCoding(
    Pointer<NSKeyedArchiver> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initRequiringSecureCoding:"),
      arg,
    );
  }

  static int outputFormat(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("outputFormat"),
    );
  }

  static void replaceObject(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObject:withObject:"),
      arg,
      withObject,
    );
  }

  static int requiresSecureCoding(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("requiresSecureCoding"),
    );
  }

  static void setClassName(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClassName:forClass:"),
      arg,
      forClass,
    );
  }

  static void setDelegate(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setOutputFormat(
    Pointer<NSKeyedArchiver> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOutputFormat:"),
      arg,
    );
  }

  static void setRequiresSecureCoding(
    Pointer<NSKeyedArchiver> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRequiresSecureCoding:"),
      arg,
    );
  }

  static int systemVersion(
    Pointer<NSKeyedArchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("systemVersion"),
    );
  }

  static int versionForClassName(
    Pointer<NSKeyedArchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyedPortCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyedPortCoder extends Struct<NSKeyedPortCoder> {
  factory NSKeyedPortCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyedPortCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyedPortCoder").cast<NSKeyedPortCoder>();
  }

  static int allowsKeyedCoding(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static Pointer<Void> connection(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static int containsValueForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsValueForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static int decodeBoolForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("decodeBoolForKey:"),
      arg,
    );
  }

  static Pointer<Utf8> decodeBytesForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> returnedLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesForKey:returnedLength:"),
      arg,
      returnedLength,
    );
  }

  static Pointer<Void> decodeBytesWithReturnedLength(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesWithReturnedLength:"),
      arg,
    );
  }

  static Pointer<Void> decodeDataObject(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObject"),
    );
  }

  static Pointer<Void> decodeDataObjectForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObjectForKey:"),
      arg,
    );
  }

  static double decodeDoubleForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("decodeDoubleForKey:"),
      arg,
    );
  }

  static double decodeFloatForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float32(
      _self,
      _objc.getSelector("decodeFloatForKey:"),
      arg,
    );
  }

  static int decodeInt32ForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeInt32ForKey:"),
      arg,
    );
  }

  static int decodeInt64ForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeInt64ForKey:"),
      arg,
    );
  }

  static int decodeIntForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeIntForKey:"),
      arg,
    );
  }

  static int decodeIntegerForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeIntegerForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeInvocation(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeInvocation"),
    );
  }

  static Pointer<Void> decodeObject(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObject"),
    );
  }

  static Pointer<Void> decodeObjectForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodePortObject(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePortObject"),
    );
  }

  static Pointer<Void> decodePortObjectForKey(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodePortObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodePropertyList(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyList"),
    );
  }

  static void decodeReturnValueOfInvocation(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeReturnValueOfInvocation:forKey:"),
      arg,
      forKey,
    );
  }

  static void decodeValueOfObjCType(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void dispatch(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dispatch"),
    );
  }

  static void encodeBool(
    Pointer<NSKeyedPortCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("encodeBool:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeBycopyObject(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeBycopyObject:"),
      arg,
    );
  }

  static void encodeByrefObject(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeByrefObject:"),
      arg,
    );
  }

  static void encodeBytes$length$forKey$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:forKey:"),
      arg,
      length,
      forKey,
    );
  }

  static void encodeBytes$length$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:"),
      arg,
      length,
    );
  }

  static void encodeConditionalObject$forKey$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeConditionalObject$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:"),
      arg,
    );
  }

  static void encodeDataObject$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeDataObject$forKey$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeDouble(
    Pointer<NSKeyedPortCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("encodeDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeFloat(
    Pointer<NSKeyedPortCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_p_returns_void(
      _self,
      _objc.getSelector("encodeFloat:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt(
    Pointer<NSKeyedPortCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt32(
    Pointer<NSKeyedPortCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt32:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt64(
    Pointer<NSKeyedPortCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInt64:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInteger(
    Pointer<NSKeyedPortCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInteger:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInvocation(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeInvocation:"),
      arg,
    );
  }

  static void encodeObject$forKey$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:"),
      arg,
    );
  }

  static void encodePortObject$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePortObject:"),
      arg,
    );
  }

  static void encodePortObject$forKey$(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePortObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodePropertyList(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePropertyList:"),
      arg,
    );
  }

  static void encodeReturnValueOfInvocation(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeReturnValueOfInvocation:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static Pointer<Void> finishedComponents(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("finishedComponents"),
    );
  }

  static void importObject(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("importObject:"),
      arg,
    );
  }

  static Pointer<Void> importedObjects(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("importedObjects"),
    );
  }

  static Pointer<Void> initWithReceivePort(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> sendPort,
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReceivePort:sendPort:components:"),
      arg,
      sendPort,
      components,
    );
  }

  static void invalidate(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isBycopy(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBycopy"),
    );
  }

  static int isByref(
    Pointer<NSKeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isByref"),
    );
  }

  static int versionForClassName(
    Pointer<NSKeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSKeyedUnarchiver_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSKeyedUnarchiver extends Struct<NSKeyedUnarchiver> {
  factory NSKeyedUnarchiver._() {
    throw UnimplementedError();
  }
  static Pointer<NSKeyedUnarchiver> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSKeyedUnarchiver").cast<NSKeyedUnarchiver>();
  }

  static Pointer<Void> allowedClasses(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allowedClasses"),
    );
  }

  static int allowsKeyedCoding(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static Pointer<Void> classForClassName(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classForClassName:"),
      arg,
    );
  }

  static int containsValueForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsValueForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decodeArrayOfObjCType(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("decodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static int decodeBoolForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("decodeBoolForKey:"),
      arg,
    );
  }

  static Pointer<Utf8> decodeBytesForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> returnedLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesForKey:returnedLength:"),
      arg,
      returnedLength,
    );
  }

  static Pointer<Void> decodeBytesWithReturnedLength(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesWithReturnedLength:"),
      arg,
    );
  }

  static Pointer<Void> decodeDataObject(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObject"),
    );
  }

  static double decodeDoubleForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("decodeDoubleForKey:"),
      arg,
    );
  }

  static double decodeFloatForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float32(
      _self,
      _objc.getSelector("decodeFloatForKey:"),
      arg,
    );
  }

  static int decodeInt32ForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeInt32ForKey:"),
      arg,
    );
  }

  static int decodeInt64ForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeInt64ForKey:"),
      arg,
    );
  }

  static int decodeIntForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeIntForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeObject(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObject"),
    );
  }

  static Pointer<Void> decodeObjectForKey(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeObjectOfClass(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClass:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> decodeObjectOfClasses(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClasses:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> decodePropertyList(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyList"),
    );
  }

  static void decodeValueOfObjCType(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void decodeValuesOfObjCTypes(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static int decodingFailurePolicy(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodingFailurePolicy"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static void finishDecoding(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finishDecoding"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initForReadingFromData(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForReadingFromData:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> initForReadingWithData(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForReadingWithData:"),
      arg,
    );
  }

  static Pointer<Void> initWithStream(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStream:"),
      arg,
    );
  }

  static void replaceObject(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObject:withObject:"),
      arg,
      withObject,
    );
  }

  static int requiresSecureCoding(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("requiresSecureCoding"),
    );
  }

  static void setAllowedClasses(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAllowedClasses:"),
      arg,
    );
  }

  static void setClass(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forClassName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClass:forClassName:"),
      arg,
      forClassName,
    );
  }

  static void setDecodingFailurePolicy(
    Pointer<NSKeyedUnarchiver> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setDecodingFailurePolicy:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setRequiresSecureCoding(
    Pointer<NSKeyedUnarchiver> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setRequiresSecureCoding:"),
      arg,
    );
  }

  static int systemVersion(
    Pointer<NSKeyedUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("systemVersion"),
    );
  }

  static int versionForClassName(
    Pointer<NSKeyedUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSLanguageContext_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLanguageContext extends Struct<NSLanguageContext> {
  factory NSLanguageContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSLanguageContext> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLanguageContext").cast<NSLanguageContext>();
  }
}

/// Objective-C class _NSLayoutAnchor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutAnchor extends Struct<NSLayoutAnchor> {
  factory NSLayoutAnchor._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutAnchor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutAnchor").cast<NSLayoutAnchor>();
  }

  static Pointer<Void> anchorWithName$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorWithName:"),
      arg,
    );
  }

  static Pointer<Void> anchorWithName$referenceItem$symbolicAttribute$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> referenceItem,
    @required int symbolicAttribute,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("anchorWithName:referenceItem:symbolicAttribute:"),
      arg,
      referenceItem,
      symbolicAttribute,
    );
  }

  static Pointer<Void> constraintEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> constraintEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void> constraintGreaterThanOrEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintGreaterThanOrEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> constraintGreaterThanOrEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintGreaterThanOrEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void> constraintLessThanOrEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintLessThanOrEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> constraintLessThanOrEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintLessThanOrEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void> constraintsAffectingLayout(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsAffectingLayout"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> equationDescription(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("equationDescription"),
    );
  }

  static int hasAmbiguousLayout(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasAmbiguousLayout"),
    );
  }

  static int hash(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithAnchor(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAnchor:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithIndependentVariableName(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> item,
    @required int symbolicAttribute,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector(
          "initWithIndependentVariableName:item:symbolicAttribute:"),
      arg,
      item,
      symbolicAttribute,
    );
  }

  static Pointer<Void> initWithItem(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required int attribute,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithItem:attribute:"),
      arg,
      attribute,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> referenceItem,
    @required int symbolicAttribute,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithName:referenceItem:symbolicAttribute:"),
      arg,
      referenceItem,
      symbolicAttribute,
    );
  }

  static int isCompatibleWithAnchor(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompatibleWithAnchor:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> item(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("item"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int nsli_lowerIntoExpression(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double withCoefficient,
    @required Pointer<Void> forConstraint,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "nsli_lowerIntoExpression:withCoefficient:forConstraint:"),
      arg,
      withCoefficient,
      forConstraint,
    );
  }

  static Pointer<Void> observableValueInItem(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("observableValueInItem:"),
      arg,
    );
  }

  static Pointer<Void> ruleEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> ruleEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void>
      ruleEqualToAnchor$multiplier$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "ruleEqualToAnchor:multiplier:constant:priority:identifier:"),
      arg,
      multiplier,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void> ruleEqualToAnchor$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float32_p_returns_p(
      _self,
      _objc.getSelector("ruleEqualToAnchor:constant:priority:identifier:"),
      arg,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void>
      ruleGreaterThanOrEqualToAnchor$multiplier$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "ruleGreaterThanOrEqualToAnchor:multiplier:constant:priority:identifier:"),
      arg,
      multiplier,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void> ruleGreaterThanOrEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleGreaterThanOrEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> ruleGreaterThanOrEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleGreaterThanOrEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void>
      ruleGreaterThanOrEqualToAnchor$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "ruleGreaterThanOrEqualToAnchor:constant:priority:identifier:"),
      arg,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void>
      ruleLessThanOrEqualToAnchor$multiplier$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "ruleLessThanOrEqualToAnchor:multiplier:constant:priority:identifier:"),
      arg,
      multiplier,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void> ruleLessThanOrEqualToAnchor$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleLessThanOrEqualToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> ruleLessThanOrEqualToAnchor$constant$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleLessThanOrEqualToAnchor:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void>
      ruleLessThanOrEqualToAnchor$constant$priority$identifier$(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg, {
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "ruleLessThanOrEqualToAnchor:constant:priority:identifier:"),
      arg,
      constant,
      priority,
      identifier,
    );
  }

  static Pointer<Void> rulesAffectingLayout(
    Pointer<NSLayoutAnchor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rulesAffectingLayout"),
    );
  }

  static int validateOtherAttribute(
    Pointer<NSLayoutAnchor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("validateOtherAttribute:"),
      arg,
    );
  }

  static double valueInItem(
    Pointer<NSLayoutAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("valueInItem:"),
      arg,
    );
  }
}

/// Objective-C class _NSLayoutAnchorRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutAnchorRule extends Struct<NSLayoutAnchorRule> {
  factory NSLayoutAnchorRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutAnchorRule> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutAnchorRule").cast<NSLayoutAnchorRule>();
  }

  static double constant(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("constant"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutAnchorRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> firstAnchor(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstAnchor"),
    );
  }

  static int hash(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithFirstAnchor(
    Pointer<NSLayoutAnchorRule> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> secondAnchor,
    @required int relation,
    @required double multiplier,
    @required double constant,
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithFirstAnchor:secondAnchor:relation:multiplier:constant:priority:identifier:"),
      arg,
      secondAnchor,
      relation,
      multiplier,
      constant,
      priority,
      identifier,
    );
  }

  static int isEqual(
    Pointer<NSLayoutAnchorRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static Pointer<Void> makeLayoutConstraint(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeLayoutConstraint"),
    );
  }

  static double multiplier(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("multiplier"),
    );
  }

  static double priority(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float32(
      _self,
      _objc.getSelector("priority"),
    );
  }

  static int relation(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("relation"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }

  static Pointer<Void> secondAnchor(
    Pointer<NSLayoutAnchorRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondAnchor"),
    );
  }
}

/// Objective-C class _NSLayoutConstraint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutConstraint extends Struct<NSLayoutConstraint> {
  factory NSLayoutConstraint._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutConstraint> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutConstraint").cast<NSLayoutConstraint>();
  }

  static Pointer<Void> animations(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("animations"),
    );
  }

  static Pointer<Void> asciiArtDescription(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("asciiArtDescription"),
    );
  }

  static double constant(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("constant"),
    );
  }

  static Pointer<Void> container(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("container"),
    );
  }

  static void dealloc(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionAccessory(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionAccessory"),
    );
  }

  static double dissatisfaction(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("dissatisfaction"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> equationDescription(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("equationDescription"),
    );
  }

  static Pointer<Void> firstAnchor(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstAnchor"),
    );
  }

  static int firstAttribute(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("firstAttribute"),
    );
  }

  static Pointer<Void> firstItem(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstItem"),
    );
  }

  static int hasBeenLowered(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasBeenLowered"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isActive(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isActive"),
    );
  }

  static double multiplier(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("multiplier"),
    );
  }

  static Pointer<Void> nsis_descriptionOfVariable(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("nsis_descriptionOfVariable:"),
      arg,
    );
  }

  static int nsis_orientationHintForVariable(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("nsis_orientationHintForVariable:"),
      arg,
    );
  }

  static void nsis_valueOfVariable(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didChangeInEngine,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("nsis_valueOfVariable:didChangeInEngine:"),
      arg,
      didChangeInEngine,
    );
  }

  static int nsis_valueOfVariableIsUserObservable(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsis_valueOfVariableIsUserObservable:"),
      arg,
    );
  }

  static double priority(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float32(
      _self,
      _objc.getSelector("priority"),
    );
  }

  static double priorityForVariable(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("priorityForVariable:"),
      arg,
    );
  }

  static int relation(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("relation"),
    );
  }

  static Pointer<Void> secondAnchor(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondAnchor"),
    );
  }

  static int secondAttribute(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("secondAttribute"),
    );
  }

  static Pointer<Void> secondItem(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondItem"),
    );
  }

  static void setActive(
    Pointer<NSLayoutConstraint> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setActive:"),
      arg,
    );
  }

  static void setAnimations(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAnimations:"),
      arg,
    );
  }

  static void setConstant(
    Pointer<NSLayoutConstraint> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setConstant:"),
      arg,
    );
  }

  static void setContainer(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainer:"),
      arg,
    );
  }

  static void setHasBeenLowered(
    Pointer<NSLayoutConstraint> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasBeenLowered:"),
      arg,
    );
  }

  static void setIdentifier(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIdentifier:"),
      arg,
    );
  }

  static void setPriority(
    Pointer<NSLayoutConstraint> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_returns_void(
      _self,
      _objc.getSelector("setPriority:"),
      arg,
    );
  }

  static void setShouldBeArchived(
    Pointer<NSLayoutConstraint> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldBeArchived:"),
      arg,
    );
  }

  static void setSymbolicConstant(
    Pointer<NSLayoutConstraint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSymbolicConstant:"),
      arg,
    );
  }

  static int shouldBeArchived(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBeArchived"),
    );
  }

  static Pointer<Void> sourceRuleHierarchy(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sourceRuleHierarchy"),
    );
  }

  static Pointer<Void> symbolicConstant(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbolicConstant"),
    );
  }

  static double unsatisfaction(
    Pointer<NSLayoutConstraint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("unsatisfaction"),
    );
  }
}

/// Objective-C class _NSLayoutConstraintParser_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutConstraintParser extends Struct<NSLayoutConstraintParser> {
  factory NSLayoutConstraintParser._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutConstraintParser> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSLayoutConstraintParser")
        .cast<NSLayoutConstraintParser>();
  }

  static Pointer<Void> constraints(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constraints"),
    );
  }

  static void dealloc(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionLineWithCurrentCharacterPointer(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionLineWithCurrentCharacterPointer"),
    );
  }

  static void failWithDescription(
    Pointer<NSLayoutConstraintParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("failWithDescription:"),
      arg,
    );
  }

  static void findContainerView(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("findContainerView"),
    );
  }

  static void finishConstraint(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finishConstraint"),
    );
  }

  static void flushWidthConstraints(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushWidthConstraints"),
    );
  }

  static Pointer<Void> initWithFormat(
    Pointer<NSLayoutConstraintParser> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> metrics,
    @required Pointer<Void> views,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:options:metrics:views:"),
      arg,
      options,
      metrics,
      views,
    );
  }

  static Pointer<Void> layoutItemForKey(
    Pointer<NSLayoutConstraintParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("layoutItemForKey:"),
      arg,
    );
  }

  static Pointer<Void> metricForKey(
    Pointer<NSLayoutConstraintParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("metricForKey:"),
      arg,
    );
  }

  static void parse(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parse"),
    );
  }

  static void parseConnection(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parseConnection"),
    );
  }

  static double parseConstant(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("parseConstant"),
    );
  }

  static void parseOp(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parseOp"),
    );
  }

  static void parsePredicate(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parsePredicate"),
    );
  }

  static void parsePredicateList(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parsePredicateList"),
    );
  }

  static void parsePredicateWithParentheses(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("parsePredicateWithParentheses"),
    );
  }

  static Pointer<Void> parseView(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parseView"),
    );
  }

  static Pointer<Void> rangeOfName(
    Pointer<NSLayoutConstraintParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfName"),
    );
  }
}

/// Objective-C class _NSLayoutDimension_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutDimension extends Struct<NSLayoutDimension> {
  factory NSLayoutDimension._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutDimension> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutDimension").cast<NSLayoutDimension>();
  }

  static Pointer<Void> anchorByAddingConstant(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("anchorByAddingConstant:"),
      arg,
    );
  }

  static Pointer<Void> anchorByAddingDimension(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorByAddingDimension:"),
      arg,
    );
  }

  static Pointer<Void> anchorByMultiplyingByConstant(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("anchorByMultiplyingByConstant:"),
      arg,
    );
  }

  static Pointer<Void> anchorBySubtractingDimension(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorBySubtractingDimension:"),
      arg,
    );
  }

  static Pointer<Void> constraintEqualToAnchor$multiplier$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintEqualToAnchor:multiplier:"),
      arg,
      multiplier,
    );
  }

  static Pointer<Void> constraintEqualToAnchor$multiplier$constant$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("constraintEqualToAnchor:multiplier:constant:"),
      arg,
      multiplier,
      constant,
    );
  }

  static Pointer<Void> constraintEqualToConstant(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintEqualToConstant:"),
      arg,
    );
  }

  static Pointer<Void> constraintGreaterThanOrEqualToAnchor$multiplier$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintGreaterThanOrEqualToAnchor:multiplier:"),
      arg,
      multiplier,
    );
  }

  static Pointer<Void>
      constraintGreaterThanOrEqualToAnchor$multiplier$constant$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector(
          "constraintGreaterThanOrEqualToAnchor:multiplier:constant:"),
      arg,
      multiplier,
      constant,
    );
  }

  static Pointer<Void> constraintGreaterThanOrEqualToConstant(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintGreaterThanOrEqualToConstant:"),
      arg,
    );
  }

  static Pointer<Void> constraintLessThanOrEqualToAnchor$multiplier$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintLessThanOrEqualToAnchor:multiplier:"),
      arg,
      multiplier,
    );
  }

  static Pointer<Void> constraintLessThanOrEqualToAnchor$multiplier$constant$(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector(
          "constraintLessThanOrEqualToAnchor:multiplier:constant:"),
      arg,
      multiplier,
      constant,
    );
  }

  static Pointer<Void> constraintLessThanOrEqualToConstant(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("constraintLessThanOrEqualToConstant:"),
      arg,
    );
  }

  static int isCompatibleWithAnchor(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompatibleWithAnchor:"),
      arg,
    );
  }

  static Pointer<Void> minusDimension(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minusDimension:"),
      arg,
    );
  }

  static Pointer<Void> plus(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("plus:"),
      arg,
    );
  }

  static Pointer<Void> plusDimension(
    Pointer<NSLayoutDimension> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("plusDimension:"),
      arg,
    );
  }

  static Pointer<Void> ruleEqualToConstant$(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleEqualToConstant:"),
      arg,
    );
  }

  static Pointer<Void> ruleEqualToConstant$priority$identifier$(
    Pointer<NSLayoutDimension> _self,
    double arg, {
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float32_p_returns_p(
      _self,
      _objc.getSelector("ruleEqualToConstant:priority:identifier:"),
      arg,
      priority,
      identifier,
    );
  }

  static Pointer<Void> ruleGreaterThanOrEqualToConstant$(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleGreaterThanOrEqualToConstant:"),
      arg,
    );
  }

  static Pointer<Void> ruleGreaterThanOrEqualToConstant$priority$identifier$(
    Pointer<NSLayoutDimension> _self,
    double arg, {
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float32_p_returns_p(
      _self,
      _objc
          .getSelector("ruleGreaterThanOrEqualToConstant:priority:identifier:"),
      arg,
      priority,
      identifier,
    );
  }

  static Pointer<Void> ruleLessThanOrEqualToConstant$(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("ruleLessThanOrEqualToConstant:"),
      arg,
    );
  }

  static Pointer<Void> ruleLessThanOrEqualToConstant$priority$identifier$(
    Pointer<NSLayoutDimension> _self,
    double arg, {
    @required double priority,
    @required Pointer<Void> identifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float32_p_returns_p(
      _self,
      _objc.getSelector("ruleLessThanOrEqualToConstant:priority:identifier:"),
      arg,
      priority,
      identifier,
    );
  }

  static Pointer<Void> times(
    Pointer<NSLayoutDimension> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("times:"),
      arg,
    );
  }

  static int validateOtherAttribute(
    Pointer<NSLayoutDimension> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("validateOtherAttribute:"),
      arg,
    );
  }
}

/// Objective-C class _NSLayoutPoint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutPoint extends Struct<NSLayoutPoint> {
  factory NSLayoutPoint._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutPoint> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutPoint").cast<NSLayoutPoint>();
  }

  static Pointer<Void> constraintsEqualToLayoutPoint(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsEqualToLayoutPoint:"),
      arg,
    );
  }

  static Pointer<Void> constraintsEqualToPoint(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsEqualToPoint:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutPoint> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutPoint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithXAxisAnchor(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> yAxisAnchor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithXAxisAnchor:yAxisAnchor:"),
      arg,
      yAxisAnchor,
    );
  }

  static int isEqual(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> layoutPointByOffsettingWithXOffset(
    Pointer<NSLayoutPoint> _self,
    double arg, {
    @required double yOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("layoutPointByOffsettingWithXOffset:yOffset:"),
      arg,
      yOffset,
    );
  }

  static Pointer<Void> layoutPointByOffsettingWithXOffsetDimension(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> yOffsetDimension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "layoutPointByOffsettingWithXOffsetDimension:yOffsetDimension:"),
      arg,
      yOffsetDimension,
    );
  }

  static Pointer<Void> pointByOffsettingWithXOffset(
    Pointer<NSLayoutPoint> _self,
    double arg, {
    @required double yOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("pointByOffsettingWithXOffset:yOffset:"),
      arg,
      yOffset,
    );
  }

  static Pointer<Void> pointByOffsettingWithXOffsetDimension(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> yOffsetDimension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "pointByOffsettingWithXOffsetDimension:yOffsetDimension:"),
      arg,
      yOffsetDimension,
    );
  }

  static Pointer<Void> ruleEqualToLayoutPoint(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleEqualToLayoutPoint:"),
      arg,
    );
  }

  static Pointer<Void> valueInItem(
    Pointer<NSLayoutPoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueInItem:"),
      arg,
    );
  }

  static Pointer<Void> xAxisAnchor(
    Pointer<NSLayoutPoint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("xAxisAnchor"),
    );
  }

  static Pointer<Void> yAxisAnchor(
    Pointer<NSLayoutPoint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("yAxisAnchor"),
    );
  }
}

/// Objective-C class _NSLayoutPointRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutPointRule extends Struct<NSLayoutPointRule> {
  factory NSLayoutPointRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutPointRule> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutPointRule").cast<NSLayoutPointRule>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutPointRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> firstLayoutPoint(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstLayoutPoint"),
    );
  }

  static int hash(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithFirstLayoutPoint(
    Pointer<NSLayoutPointRule> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> secondLayoutPoint,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFirstLayoutPoint:secondLayoutPoint:"),
      arg,
      secondLayoutPoint,
    );
  }

  static int isEqual(
    Pointer<NSLayoutPointRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }

  static Pointer<Void> secondLayoutPoint(
    Pointer<NSLayoutPointRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondLayoutPoint"),
    );
  }
}

/// Objective-C class _NSLayoutRect_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutRect extends Struct<NSLayoutRect> {
  factory NSLayoutRect._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutRect> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutRect").cast<NSLayoutRect>();
  }

  static Pointer<Void> bottomAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bottomAnchor"),
    );
  }

  static Pointer<Void> centerLayoutPoint(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("centerLayoutPoint"),
    );
  }

  static Pointer<Void> centerXAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("centerXAnchor"),
    );
  }

  static Pointer<Void> centerYAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("centerYAnchor"),
    );
  }

  static Pointer<Void> constraintsContainingWithinLayoutRect(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsContainingWithinLayoutRect:"),
      arg,
    );
  }

  static Pointer<Void> constraintsEqualToLayoutRect(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsEqualToLayoutRect:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutRect> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> heightAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("heightAnchor"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithLeadingAnchor$topAnchor$widthAnchor$heightAnchor$name$(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> topAnchor,
    @required Pointer<Void> widthAnchor,
    @required Pointer<Void> heightAnchor,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithLeadingAnchor:topAnchor:widthAnchor:heightAnchor:name:"),
      arg,
      topAnchor,
      widthAnchor,
      heightAnchor,
      name,
    );
  }

  static Pointer<Void>
      initWithLeadingAnchor$topAnchor$widthAnchor$heightAnchor$(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> topAnchor,
    @required Pointer<Void> widthAnchor,
    @required Pointer<Void> heightAnchor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithLeadingAnchor:topAnchor:widthAnchor:heightAnchor:"),
      arg,
      topAnchor,
      widthAnchor,
      heightAnchor,
    );
  }

  static int isEqual(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToRectangle(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToRectangle:"),
      arg,
    );
  }

  static Pointer<Void> layoutRectByInsettingTop(
    Pointer<NSLayoutRect> _self,
    double arg, {
    @required double leading,
    @required double bottom,
    @required double trailing,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_float64_float64_returns_p(
      _self,
      _objc.getSelector("layoutRectByInsettingTop:leading:bottom:trailing:"),
      arg,
      leading,
      bottom,
      trailing,
    );
  }

  static Pointer<Void> layoutRectByInsettingTopWithDimension(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> leadingWithDimension,
    @required Pointer<Void> bottomWithDimension,
    @required Pointer<Void> trailingWithDimension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "layoutRectByInsettingTopWithDimension:leadingWithDimension:bottomWithDimension:trailingWithDimension:"),
      arg,
      leadingWithDimension,
      bottomWithDimension,
      trailingWithDimension,
    );
  }

  static Pointer<Void> layoutRectBySlicingWithDimension(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("layoutRectBySlicingWithDimension:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> layoutRectBySlicingWithDistance(
    Pointer<NSLayoutRect> _self,
    double arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("layoutRectBySlicingWithDistance:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> layoutRectBySlicingWithProportion(
    Pointer<NSLayoutRect> _self,
    double arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("layoutRectBySlicingWithProportion:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> layoutRectWithName(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("layoutRectWithName:"),
      arg,
    );
  }

  static Pointer<Void> leadingAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leadingAnchor"),
    );
  }

  static int nsli_isLegalConstraintItem(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("nsli_isLegalConstraintItem"),
    );
  }

  static Pointer<Void> nsli_superitem(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nsli_superitem"),
    );
  }

  static Pointer<Void> observableValueInItem(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("observableValueInItem:"),
      arg,
    );
  }

  static Pointer<Void> ruleContainingLayoutRect(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleContainingLayoutRect:"),
      arg,
    );
  }

  static Pointer<Void> ruleEqualToLayoutRect(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ruleEqualToLayoutRect:"),
      arg,
    );
  }

  static Pointer<Void> topAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("topAnchor"),
    );
  }

  static Pointer<Void> trailingAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trailingAnchor"),
    );
  }

  static Pointer<Void> valueInItem(
    Pointer<NSLayoutRect> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueInItem:"),
      arg,
    );
  }

  static Pointer<Void> widthAnchor(
    Pointer<NSLayoutRect> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("widthAnchor"),
    );
  }
}

/// Objective-C class _NSLayoutRectRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutRectRule extends Struct<NSLayoutRectRule> {
  factory NSLayoutRectRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutRectRule> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutRectRule").cast<NSLayoutRectRule>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLayoutRectRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> firstLayoutRect(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstLayoutRect"),
    );
  }

  static int hash(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithFirstLayoutRect$secondLayoutRect$relation$(
    Pointer<NSLayoutRectRule> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> secondLayoutRect,
    @required int relation,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithFirstLayoutRect:secondLayoutRect:relation:"),
      arg,
      secondLayoutRect,
      relation,
    );
  }

  static Pointer<Void> initWithFirstLayoutRect$secondLayoutRect$(
    Pointer<NSLayoutRectRule> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> secondLayoutRect,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFirstLayoutRect:secondLayoutRect:"),
      arg,
      secondLayoutRect,
    );
  }

  static int isEqual(
    Pointer<NSLayoutRectRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static int relation(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("relation"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }

  static Pointer<Void> secondLayoutRect(
    Pointer<NSLayoutRectRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("secondLayoutRect"),
    );
  }

  static void setRelation(
    Pointer<NSLayoutRectRule> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setRelation:"),
      arg,
    );
  }
}

/// Objective-C class _NSLayoutRectangle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutRectangle extends Struct<NSLayoutRectangle> {
  factory NSLayoutRectangle._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutRectangle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutRectangle").cast<NSLayoutRectangle>();
  }

  static Pointer<Void> centerPoint(
    Pointer<NSLayoutRectangle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("centerPoint"),
    );
  }

  static Pointer<Void> constraintsContainingWithinRectangle(
    Pointer<NSLayoutRectangle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsContainingWithinRectangle:"),
      arg,
    );
  }

  static Pointer<Void> constraintsEqualToRectangle(
    Pointer<NSLayoutRectangle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("constraintsEqualToRectangle:"),
      arg,
    );
  }

  static Pointer<Void> rectangleByInsettingTop(
    Pointer<NSLayoutRectangle> _self,
    double arg, {
    @required double leading,
    @required double bottom,
    @required double trailing,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_float64_float64_returns_p(
      _self,
      _objc.getSelector("rectangleByInsettingTop:leading:bottom:trailing:"),
      arg,
      leading,
      bottom,
      trailing,
    );
  }

  static Pointer<Void> rectangleByInsettingTopByDimension(
    Pointer<NSLayoutRectangle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> leadingByDimension,
    @required Pointer<Void> bottomByDimension,
    @required Pointer<Void> trailingByDimension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "rectangleByInsettingTopByDimension:leadingByDimension:bottomByDimension:trailingByDimension:"),
      arg,
      leadingByDimension,
      bottomByDimension,
      trailingByDimension,
    );
  }

  static Pointer<Void> rectangleBySlicingWithDimension(
    Pointer<NSLayoutRectangle> _self,
    Pointer<Void> arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("rectangleBySlicingWithDimension:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> rectangleBySlicingWithDistance(
    Pointer<NSLayoutRectangle> _self,
    double arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("rectangleBySlicingWithDistance:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> rectangleBySlicingWithProportion(
    Pointer<NSLayoutRectangle> _self,
    double arg, {
    @required int fromEdge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("rectangleBySlicingWithProportion:fromEdge:"),
      arg,
      fromEdge,
    );
  }

  static Pointer<Void> rectangleWithName(
    Pointer<NSLayoutRectangle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rectangleWithName:"),
      arg,
    );
  }
}

/// Objective-C class _NSLayoutXAxisAnchor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutXAxisAnchor extends Struct<NSLayoutXAxisAnchor> {
  factory NSLayoutXAxisAnchor._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutXAxisAnchor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutXAxisAnchor").cast<NSLayoutXAxisAnchor>();
  }

  static Pointer<Void> anchorByOffsettingWithConstant(
    Pointer<NSLayoutXAxisAnchor> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithConstant:"),
      arg,
    );
  }

  static Pointer<Void> anchorByOffsettingWithDimension$multiplier$constant$(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithDimension:multiplier:constant:"),
      arg,
      multiplier,
      constant,
    );
  }

  static Pointer<Void> anchorByOffsettingWithDimension$(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithDimension:"),
      arg,
    );
  }

  static Pointer<Void> anchorWithOffsetToAnchor(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorWithOffsetToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> distanceTo(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("distanceTo:"),
      arg,
    );
  }

  static int isCompatibleWithAnchor(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompatibleWithAnchor:"),
      arg,
    );
  }

  static Pointer<Void> offsetBy(
    Pointer<NSLayoutXAxisAnchor> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("offsetBy:"),
      arg,
    );
  }

  static Pointer<Void> offsetByDimension$times$plus$(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg, {
    @required double times,
    @required double plus,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("offsetByDimension:times:plus:"),
      arg,
      times,
      plus,
    );
  }

  static Pointer<Void> offsetByDimension$(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("offsetByDimension:"),
      arg,
    );
  }

  static Pointer<Void> offsetTo(
    Pointer<NSLayoutXAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("offsetTo:"),
      arg,
    );
  }

  static int validateOtherAttribute(
    Pointer<NSLayoutXAxisAnchor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("validateOtherAttribute:"),
      arg,
    );
  }
}

/// Objective-C class _NSLayoutYAxisAnchor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLayoutYAxisAnchor extends Struct<NSLayoutYAxisAnchor> {
  factory NSLayoutYAxisAnchor._() {
    throw UnimplementedError();
  }
  static Pointer<NSLayoutYAxisAnchor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLayoutYAxisAnchor").cast<NSLayoutYAxisAnchor>();
  }

  static Pointer<Void> anchorByOffsettingWithConstant(
    Pointer<NSLayoutYAxisAnchor> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithConstant:"),
      arg,
    );
  }

  static Pointer<Void> anchorByOffsettingWithDimension$multiplier$constant$(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg, {
    @required double multiplier,
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithDimension:multiplier:constant:"),
      arg,
      multiplier,
      constant,
    );
  }

  static Pointer<Void> anchorByOffsettingWithDimension$(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorByOffsettingWithDimension:"),
      arg,
    );
  }

  static Pointer<Void> anchorWithOffsetToAnchor(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("anchorWithOffsetToAnchor:"),
      arg,
    );
  }

  static Pointer<Void> distanceTo(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("distanceTo:"),
      arg,
    );
  }

  static int isCompatibleWithAnchor(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCompatibleWithAnchor:"),
      arg,
    );
  }

  static Pointer<Void> offsetBy(
    Pointer<NSLayoutYAxisAnchor> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("offsetBy:"),
      arg,
    );
  }

  static Pointer<Void> offsetByDimension$times$plus$(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg, {
    @required double times,
    @required double plus,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("offsetByDimension:times:plus:"),
      arg,
      times,
      plus,
    );
  }

  static Pointer<Void> offsetByDimension$(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("offsetByDimension:"),
      arg,
    );
  }

  static Pointer<Void> offsetTo(
    Pointer<NSLayoutYAxisAnchor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("offsetTo:"),
      arg,
    );
  }

  static int validateOtherAttribute(
    Pointer<NSLayoutYAxisAnchor> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Int8(
      _self,
      _objc.getSelector("validateOtherAttribute:"),
      arg,
    );
  }
}

/// Objective-C class _NSLeafProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLeafProxy extends Struct<NSLeafProxy> {
  factory NSLeafProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSLeafProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLeafProxy").cast<NSLeafProxy>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLeafProxy> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void forwardInvocation(
    Pointer<NSLeafProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> initDir(
    Pointer<NSLeafProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> file,
    @required Pointer<Void> docInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initDir:file:docInfo:"),
      arg,
      file,
      docInfo,
    );
  }

  static int isProxy(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProxy"),
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSLeafProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static void reallyDealloc(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("reallyDealloc"),
    );
  }

  static void release(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSLeafProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSLengthFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLengthFormatter extends Struct<NSLengthFormatter> {
  factory NSLengthFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSLengthFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLengthFormatter").cast<NSLengthFormatter>();
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLengthFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLengthFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int getObjectValue(
    Pointer<NSLengthFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static Pointer<Void> init(
    Pointer<NSLengthFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isForPersonHeightUse(
    Pointer<NSLengthFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForPersonHeightUse"),
    );
  }

  static Pointer<Void> numberFormatter(
    Pointer<NSLengthFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("numberFormatter"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setForPersonHeightUse(
    Pointer<NSLengthFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForPersonHeightUse:"),
      arg,
    );
  }

  static void setNumberFormatter(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNumberFormatter:"),
      arg,
    );
  }

  static void setUnitStyle(
    Pointer<NSLengthFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitStyle:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSLengthFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromMeters(
    Pointer<NSLengthFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("stringFromMeters:"),
      arg,
    );
  }

  static Pointer<Void> stringFromValue(
    Pointer<NSLengthFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("stringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int targetUnitFromMeters(
    Pointer<NSLengthFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_Int64(
      _self,
      _objc.getSelector("targetUnitFromMeters:"),
      arg,
    );
  }

  static Pointer<Void> unitStringFromMeters(
    Pointer<NSLengthFormatter> _self,
    double arg, {
    @required Pointer<Int64> usedUnit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("unitStringFromMeters:usedUnit:"),
      arg,
      usedUnit,
    );
  }

  static Pointer<Void> unitStringFromValue(
    Pointer<NSLengthFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("unitStringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int unitStyle(
    Pointer<NSLengthFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitStyle"),
    );
  }
}

/// Objective-C class _NSLikePredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLikePredicateOperator extends Struct<NSLikePredicateOperator> {
  factory NSLikePredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSLikePredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSLikePredicateOperator")
        .cast<NSLikePredicateOperator>();
  }

  static Pointer<Void> selector(
    Pointer<NSLikePredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSLikePredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSLinguisticTagger_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLinguisticTagger extends Struct<NSLinguisticTagger> {
  factory NSLinguisticTagger._() {
    throw UnimplementedError();
  }
  static Pointer<NSLinguisticTagger> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLinguisticTagger").cast<NSLinguisticTagger>();
  }

  static void dealloc(
    Pointer<NSLinguisticTagger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLinguisticTagger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dominantLanguage(
    Pointer<NSLinguisticTagger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantLanguage"),
    );
  }

  static void enumerateTagsInRange$scheme$options$usingBlock$(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateTagsInRange:scheme:options:usingBlock:"),
      arg,
      scheme,
      options,
      usingBlock,
    );
  }

  static void enumerateTagsInRange$unit$scheme$options$usingBlock$(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required int unit,
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateTagsInRange:unit:scheme:options:usingBlock:"),
      arg,
      unit,
      scheme,
      options,
      usingBlock,
    );
  }

  static Pointer<Void> initWithTagSchemes(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithTagSchemes:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> orthographyAtIndex(
    Pointer<NSLinguisticTagger> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("orthographyAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> possibleTagsAtIndex(
    Pointer<NSLinguisticTagger> _self,
    int arg, {
    @required Pointer<Void> scheme,
    @required Pointer<Pointer<Void>> tokenRange,
    @required Pointer<Pointer<Void>> sentenceRange,
    @required Pointer<Pointer<Void>> scores,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:"),
      arg,
      scheme,
      tokenRange,
      sentenceRange,
      scores,
    );
  }

  static Pointer<Void> sentenceRangeForRange(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("sentenceRangeForRange:"),
      arg,
    );
  }

  static void setOrthography(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOrthography:range:"),
      arg,
      range,
    );
  }

  static void setString(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setString:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<NSLinguisticTagger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }

  static void stringEditedInRange(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required int changeInLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("stringEditedInRange:changeInLength:"),
      arg,
      changeInLength,
    );
  }

  static Pointer<Void> tagAtIndex$scheme$tokenRange$sentenceRange$(
    Pointer<NSLinguisticTagger> _self,
    int arg, {
    @required Pointer<Void> scheme,
    @required Pointer<Pointer<Void>> tokenRange,
    @required Pointer<Pointer<Void>> sentenceRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector("tagAtIndex:scheme:tokenRange:sentenceRange:"),
      arg,
      scheme,
      tokenRange,
      sentenceRange,
    );
  }

  static Pointer<Void> tagAtIndex$unit$scheme$tokenRange$(
    Pointer<NSLinguisticTagger> _self,
    int arg, {
    @required int unit,
    @required Pointer<Void> scheme,
    @required Pointer<Pointer<Void>> tokenRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int64_p_p_returns_p(
      _self,
      _objc.getSelector("tagAtIndex:unit:scheme:tokenRange:"),
      arg,
      unit,
      scheme,
      tokenRange,
    );
  }

  static Pointer<Void> tagSchemes(
    Pointer<NSLinguisticTagger> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("tagSchemes"),
    );
  }

  static Pointer<Void> tagsInRange$scheme$options$tokenRanges$(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Pointer<Void>> tokenRanges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("tagsInRange:scheme:options:tokenRanges:"),
      arg,
      scheme,
      options,
      tokenRanges,
    );
  }

  static Pointer<Void> tagsInRange$unit$scheme$options$tokenRanges$(
    Pointer<NSLinguisticTagger> _self,
    Pointer<Void> arg, {
    @required int unit,
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Pointer<Void>> tokenRanges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("tagsInRange:unit:scheme:options:tokenRanges:"),
      arg,
      unit,
      scheme,
      options,
      tokenRanges,
    );
  }

  static Pointer<Void> tokenRangeAtIndex(
    Pointer<NSLinguisticTagger> _self,
    int arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int64_returns_p(
      _self,
      _objc.getSelector("tokenRangeAtIndex:unit:"),
      arg,
      unit,
    );
  }
}

/// Objective-C class _NSLinkCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLinkCheckingResult extends Struct<NSLinkCheckingResult> {
  factory NSLinkCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSLinkCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLinkCheckingResult").cast<NSLinkCheckingResult>();
  }

  static Pointer<Void> URL(
    Pointer<NSLinkCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static void dealloc(
    Pointer<NSLinkCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLinkCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLinkCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLinkCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSLinkCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> URL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:URL:"),
      arg,
      URL,
    );
  }

  static Pointer<Void> range(
    Pointer<NSLinkCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSLinkCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSLinkCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSLocalizableString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLocalizableString extends Struct<NSLocalizableString> {
  factory NSLocalizableString._() {
    throw UnimplementedError();
  }
  static Pointer<NSLocalizableString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLocalizableString").cast<NSLocalizableString>();
  }

  static Pointer<Void> awakeAfterUsingCoder(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("awakeAfterUsingCoder:"),
      arg,
    );
  }

  static int characterAtIndex(
    Pointer<NSLocalizableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSLocalizableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSLocalizableString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSLocalizableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> developmentLanguageString(
    Pointer<NSLocalizableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("developmentLanguageString"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithStringsFileKey(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> developmentLanguageString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStringsFileKey:developmentLanguageString:"),
      arg,
      developmentLanguageString,
    );
  }

  static int length(
    Pointer<NSLocalizableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void setDevelopmentLanguageString(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDevelopmentLanguageString:"),
      arg,
    );
  }

  static void setStringsFileKey(
    Pointer<NSLocalizableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStringsFileKey:"),
      arg,
    );
  }

  static Pointer<Void> stringsFileKey(
    Pointer<NSLocalizableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringsFileKey"),
    );
  }
}

/// Objective-C class _NSLock_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLock extends Struct<NSLock> {
  factory NSLock._() {
    throw UnimplementedError();
  }
  static Pointer<NSLock> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLock").cast<NSLock>();
  }

  static void dealloc(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void lock(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static int lockBeforeDate(
    Pointer<NSLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("lockBeforeDate:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static int tryLock(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static void unlock(
    Pointer<NSLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }
}

/// Objective-C class _NSLogicalTest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLogicalTest extends Struct<NSLogicalTest> {
  factory NSLogicalTest._() {
    throw UnimplementedError();
  }
  static Pointer<NSLogicalTest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLogicalTest").cast<NSLogicalTest>();
  }

  static void dealloc(
    Pointer<NSLogicalTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLogicalTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSLogicalTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSLogicalTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initAndTestWithTests(
    Pointer<NSLogicalTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initAndTestWithTests:"),
      arg,
    );
  }

  static Pointer<Void> initNotTestWithTest(
    Pointer<NSLogicalTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initNotTestWithTest:"),
      arg,
    );
  }

  static Pointer<Void> initOrTestWithTests(
    Pointer<NSLogicalTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initOrTestWithTests:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSLogicalTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isTrue(
    Pointer<NSLogicalTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTrue"),
    );
  }
}

/// Objective-C class _NSLookupMatch_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSLookupMatch extends Struct<NSLookupMatch> {
  factory NSLookupMatch._() {
    throw UnimplementedError();
  }
  static Pointer<NSLookupMatch> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSLookupMatch").cast<NSLookupMatch>();
  }

  static Pointer<Void> dataDetectorResult(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dataDetectorResult"),
    );
  }

  static void dealloc(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSLookupMatch> _self,
    int arg, {
    @required Pointer<Void> range,
    @required double score,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithType:range:score:"),
      arg,
      range,
      score,
    );
  }

  static Pointer<Void> languageIdentifier(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("languageIdentifier"),
    );
  }

  static int matchType(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("matchType"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static double score(
    Pointer<NSLookupMatch> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("score"),
    );
  }

  static void setDataDetectorResult(
    Pointer<NSLookupMatch> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDataDetectorResult:"),
      arg,
    );
  }

  static void setLanguageIdentifier(
    Pointer<NSLookupMatch> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLanguageIdentifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSMachBootstrapServer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMachBootstrapServer extends Struct<NSMachBootstrapServer> {
  factory NSMachBootstrapServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSMachBootstrapServer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMachBootstrapServer")
        .cast<NSMachBootstrapServer>();
  }

  static Pointer<Void> portForName$host$(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> host,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:host:"),
      arg,
      host,
    );
  }

  static Pointer<Void> portForName$options$(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("portForName:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> portForName$(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:"),
      arg,
    );
  }

  static int registerPort(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerPort:name:"),
      arg,
      name,
    );
  }

  static int removePortForName(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removePortForName:"),
      arg,
    );
  }

  static Pointer<Void> servicePortWithName(
    Pointer<NSMachBootstrapServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("servicePortWithName:"),
      arg,
    );
  }
}

/// Objective-C class _NSMachPort_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMachPort extends Struct<NSMachPort> {
  factory NSMachPort._() {
    throw UnimplementedError();
  }
  static Pointer<NSMachPort> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMachPort").cast<NSMachPort>();
  }

  static void addConnection(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toRunLoop,
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addConnection:toRunLoop:forMode:"),
      arg,
      toRunLoop,
      forMode,
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void handlePortMessage(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePortMessage:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithMachPort$options$(
    Pointer<NSMachPort> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithMachPort:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithMachPort$(
    Pointer<NSMachPort> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithMachPort:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isEqual(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isKindOfClass(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isKindOfClass:"),
      arg,
    );
  }

  static int isMemberOfClass(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMemberOfClass:"),
      arg,
    );
  }

  static int isValid(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static int machPort(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("machPort"),
    );
  }

  static void release(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeFromRunLoop(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSMachPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static int sendBeforeDate$msgid$components$from$reserved$(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg, {
    @required int msgid,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:msgid:components:from:reserved:"),
      arg,
      msgid,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeDate$components$from$reserved$(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:components:from:reserved:"),
      arg,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeTime(
    Pointer<NSMachPort> _self,
    double arg, {
    @required Pointer<Void> streamData,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int msgid,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeTime:streamData:components:from:msgid:"),
      arg,
      streamData,
      components,
      from,
      msgid,
    );
  }

  static void setDelegate(
    Pointer<NSMachPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

/// Objective-C class _NSMapObservationTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMapObservationTransformer extends Struct<NSMapObservationTransformer> {
  factory NSMapObservationTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSMapObservationTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMapObservationTransformer")
        .cast<NSMapObservationTransformer>();
  }

  static void dealloc(
    Pointer<NSMapObservationTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSMapObservationTransformer> _self,
    Pointer<Void> arg, {
    @required int tag,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithBlock:tag:"),
      arg,
      tag,
    );
  }
}

/// Objective-C class _NSMapTable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMapTable extends Struct<NSMapTable> {
  factory NSMapTable._() {
    throw UnimplementedError();
  }
  static Pointer<NSMapTable> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMapTable").cast<NSMapTable>();
  }

  static Pointer<Void> allKeys(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allKeys"),
    );
  }

  static Pointer<Void> allValues(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allValues"),
    );
  }

  static Pointer<Void> copy(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSMapTable> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static Pointer<Void> description(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> enumerator(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("enumerator"),
    );
  }

  static Pointer<Void> existingItemForSetItem(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("existingItemForSetItem:forAbsentKey:"),
      arg,
      forAbsentKey,
    );
  }

  static int getKeys(
    Pointer<NSMapTable> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> values,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("getKeys:values:"),
      arg,
      values,
    );
  }

  static Pointer<Void> init(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithKeyOptions(
    Pointer<NSMapTable> _self,
    int arg, {
    @required int valueOptions,
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKeyOptions:valueOptions:capacity:"),
      arg,
      valueOptions,
      capacity,
    );
  }

  static Pointer<Void> initWithKeyPointerFunctions(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> valuePointerFunctions,
    @required int capacity,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "initWithKeyPointerFunctions:valuePointerFunctions:capacity:"),
      arg,
      valuePointerFunctions,
      capacity,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> keyPointerFunctions(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyPointerFunctions"),
    );
  }

  static int mapMember(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> originalKey,
    @required Pointer<Pointer<Void>> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("mapMember:originalKey:value:"),
      arg,
      originalKey,
      value,
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSMapTable> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> mutableDictionary(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableDictionary"),
    );
  }

  static Pointer<Void> objectEnumerator(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void removeAllItems(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllItems"),
    );
  }

  static void removeAllObjects(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeObjectForKey(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static void replaceItem(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forExistingKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceItem:forExistingKey:"),
      arg,
      forExistingKey,
    );
  }

  static void setItem$forKey$(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forKey:"),
      arg,
      forKey,
    );
  }

  static void setItem$forAbsentKey$(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forAbsentKey:"),
      arg,
      forAbsentKey,
    );
  }

  static void setItem$forKnownAbsentKey$(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKnownAbsentKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItem:forKnownAbsentKey:"),
      arg,
      forKnownAbsentKey,
    );
  }

  static void setObject(
    Pointer<NSMapTable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> valuePointerFunctions(
    Pointer<NSMapTable> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valuePointerFunctions"),
    );
  }
}

/// Objective-C class _NSMassFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMassFormatter extends Struct<NSMassFormatter> {
  factory NSMassFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSMassFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMassFormatter").cast<NSMassFormatter>();
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSMassFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSMassFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int getObjectValue(
    Pointer<NSMassFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static Pointer<Void> init(
    Pointer<NSMassFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isForPersonMassUse(
    Pointer<NSMassFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isForPersonMassUse"),
    );
  }

  static Pointer<Void> numberFormatter(
    Pointer<NSMassFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("numberFormatter"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setForPersonMassUse(
    Pointer<NSMassFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setForPersonMassUse:"),
      arg,
    );
  }

  static void setNumberFormatter(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNumberFormatter:"),
      arg,
    );
  }

  static void setUnitStyle(
    Pointer<NSMassFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitStyle:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSMassFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromKilograms(
    Pointer<NSMassFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("stringFromKilograms:"),
      arg,
    );
  }

  static Pointer<Void> stringFromValue(
    Pointer<NSMassFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("stringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int targetUnitFromKilograms(
    Pointer<NSMassFormatter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_Int64(
      _self,
      _objc.getSelector("targetUnitFromKilograms:"),
      arg,
    );
  }

  static Pointer<Void> unitStringFromKilograms(
    Pointer<NSMassFormatter> _self,
    double arg, {
    @required Pointer<Int64> usedUnit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("unitStringFromKilograms:usedUnit:"),
      arg,
      usedUnit,
    );
  }

  static Pointer<Void> unitStringFromValue(
    Pointer<NSMassFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Int64_returns_p(
      _self,
      _objc.getSelector("unitStringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int unitStyle(
    Pointer<NSMassFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitStyle"),
    );
  }
}

/// Objective-C class _NSMatchingPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMatchingPredicateOperator extends Struct<NSMatchingPredicateOperator> {
  factory NSMatchingPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSMatchingPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMatchingPredicateOperator")
        .cast<NSMatchingPredicateOperator>();
  }

  static void dealloc(
    Pointer<NSMatchingPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithOperatorType(
    Pointer<NSMatchingPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int variant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:variant:"),
      arg,
      modifier,
      variant,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSMatchingPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> selector(
    Pointer<NSMatchingPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSMatchingPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSMeasurement_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMeasurement extends Struct<NSMeasurement> {
  factory NSMeasurement._() {
    throw UnimplementedError();
  }
  static Pointer<NSMeasurement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMeasurement").cast<NSMeasurement>();
  }

  static int canBeConvertedToUnit(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToUnit:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSMeasurement> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSMeasurement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSMeasurement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double doubleValue(
    Pointer<NSMeasurement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSMeasurement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDoubleValue(
    Pointer<NSMeasurement> _self,
    double arg, {
    @required Pointer<Void> unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("initWithDoubleValue:unit:"),
      arg,
      unit,
    );
  }

  static int isEqual(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> measurementByAddingMeasurement(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("measurementByAddingMeasurement:"),
      arg,
    );
  }

  static Pointer<Void> measurementByConvertingToUnit(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("measurementByConvertingToUnit:"),
      arg,
    );
  }

  static Pointer<Void> measurementBySubtractingMeasurement(
    Pointer<NSMeasurement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("measurementBySubtractingMeasurement:"),
      arg,
    );
  }

  static Pointer<Void> unit(
    Pointer<NSMeasurement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("unit"),
    );
  }
}

/// Objective-C class _NSMeasurementFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMeasurementFormatter extends Struct<NSMeasurementFormatter> {
  factory NSMeasurementFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSMeasurementFormatter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMeasurementFormatter")
        .cast<NSMeasurementFormatter>();
  }

  static void dealloc(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> locale(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static Pointer<Void> measurementFromString(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("measurementFromString:"),
      arg,
    );
  }

  static Pointer<Void> numberFormatter(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("numberFormatter"),
    );
  }

  static void setLocale(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setNumberFormatter(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNumberFormatter:"),
      arg,
    );
  }

  static void setUnitOptions(
    Pointer<NSMeasurementFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setUnitOptions:"),
      arg,
    );
  }

  static void setUnitStyle(
    Pointer<NSMeasurementFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitStyle:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromMeasurement(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromMeasurement:"),
      arg,
    );
  }

  static Pointer<Void> stringFromUnit(
    Pointer<NSMeasurementFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromUnit:"),
      arg,
    );
  }

  static int unitOptions(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unitOptions"),
    );
  }

  static int unitStyle(
    Pointer<NSMeasurementFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitStyle"),
    );
  }
}

/// Objective-C class _NSMessagePort_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMessagePort extends Struct<NSMessagePort> {
  factory NSMessagePort._() {
    throw UnimplementedError();
  }
  static Pointer<NSMessagePort> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMessagePort").cast<NSMessagePort>();
  }

  static void dealloc(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:"),
      arg,
    );
  }

  static Pointer<Void> initWithRemoteName(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRemoteName:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isValid(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void release(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeFromRunLoop(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSMessagePort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static int sendBeforeDate$msgid$components$from$reserved$(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg, {
    @required int msgid,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:msgid:components:from:reserved:"),
      arg,
      msgid,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeDate$components$from$reserved$(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:components:from:reserved:"),
      arg,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeTime(
    Pointer<NSMessagePort> _self,
    double arg, {
    @required Pointer<Void> streamData,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int msgid,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeTime:streamData:components:from:msgid:"),
      arg,
      streamData,
      components,
      from,
      msgid,
    );
  }

  static void setDelegate(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int setName(
    Pointer<NSMessagePort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }
}

/// Objective-C class _NSMessagePortNameServer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMessagePortNameServer extends Struct<NSMessagePortNameServer> {
  factory NSMessagePortNameServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSMessagePortNameServer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMessagePortNameServer")
        .cast<NSMessagePortNameServer>();
  }

  static Pointer<Void> portForName$host$(
    Pointer<NSMessagePortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> host,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:host:"),
      arg,
      host,
    );
  }

  static Pointer<Void> portForName$(
    Pointer<NSMessagePortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:"),
      arg,
    );
  }

  static int registerPort(
    Pointer<NSMessagePortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerPort:name:"),
      arg,
      name,
    );
  }

  static int removePortForName(
    Pointer<NSMessagePortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removePortForName:"),
      arg,
    );
  }
}

/// Objective-C class _NSMetadataItem_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMetadataItem extends Struct<NSMetadataItem> {
  factory NSMetadataItem._() {
    throw UnimplementedError();
  }
  static Pointer<NSMetadataItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMetadataItem").cast<NSMetadataItem>();
  }

  static Pointer<Void> attributes(
    Pointer<NSMetadataItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static void dealloc(
    Pointer<NSMetadataItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSMetadataItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static Pointer<Void> valueForAttribute(
    Pointer<NSMetadataItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForAttribute:"),
      arg,
    );
  }

  static Pointer<Void> valueForKey(
    Pointer<NSMetadataItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForKey:"),
      arg,
    );
  }

  static Pointer<Void> valuesForAttributes(
    Pointer<NSMetadataItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valuesForAttributes:"),
      arg,
    );
  }
}

/// Objective-C class _NSMetadataQuery_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMetadataQuery extends Struct<NSMetadataQuery> {
  factory NSMetadataQuery._() {
    throw UnimplementedError();
  }
  static Pointer<NSMetadataQuery> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMetadataQuery").cast<NSMetadataQuery>();
  }

  static void dealloc(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void disableUpdates(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableUpdates"),
    );
  }

  static void enableUpdates(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableUpdates"),
    );
  }

  static void enumerateResultsUsingBlock(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateResultsUsingBlock:"),
      arg,
    );
  }

  static void enumerateResultsWithOptions(
    Pointer<NSMetadataQuery> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateResultsWithOptions:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static Pointer<Void> groupedResults(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("groupedResults"),
    );
  }

  static Pointer<Void> groupingAttributes(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("groupingAttributes"),
    );
  }

  static int indexOfResult(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfResult:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isGathering(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isGathering"),
    );
  }

  static int isStarted(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isStarted"),
    );
  }

  static int isStopped(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isStopped"),
    );
  }

  static double notificationBatchingInterval(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("notificationBatchingInterval"),
    );
  }

  static Pointer<Void> operationQueue(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operationQueue"),
    );
  }

  static Pointer<Void> predicate(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static void removeObserver(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:forKeyPath:"),
      arg,
      forKeyPath,
    );
  }

  static Pointer<Void> resultAtIndex(
    Pointer<NSMetadataQuery> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("resultAtIndex:"),
      arg,
    );
  }

  static int resultCount(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultCount"),
    );
  }

  static Pointer<Void> results(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("results"),
    );
  }

  static Pointer<Void> searchItemURLs(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchItemURLs"),
    );
  }

  static Pointer<Void> searchItems(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchItems"),
    );
  }

  static Pointer<Void> searchScopes(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("searchScopes"),
    );
  }

  static void setDelegate(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setGroupingAttributes(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGroupingAttributes:"),
      arg,
    );
  }

  static void setNotificationBatchingInterval(
    Pointer<NSMetadataQuery> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setNotificationBatchingInterval:"),
      arg,
    );
  }

  static void setOperationQueue(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setOperationQueue:"),
      arg,
    );
  }

  static void setPredicate(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPredicate:"),
      arg,
    );
  }

  static void setSearchItemURLs(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSearchItemURLs:"),
      arg,
    );
  }

  static void setSearchItems(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSearchItems:"),
      arg,
    );
  }

  static void setSearchScopes(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSearchScopes:"),
      arg,
    );
  }

  static void setSortDescriptors(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSortDescriptors:"),
      arg,
    );
  }

  static void setValueListAttributes(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValueListAttributes:"),
      arg,
    );
  }

  static Pointer<Void> sortDescriptors(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sortDescriptors"),
    );
  }

  static int startQuery(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("startQuery"),
    );
  }

  static void stopQuery(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stopQuery"),
    );
  }

  static Pointer<Void> valueListAttributes(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valueListAttributes"),
    );
  }

  static Pointer<Void> valueLists(
    Pointer<NSMetadataQuery> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("valueLists"),
    );
  }

  static Pointer<Void> valueOfAttribute(
    Pointer<NSMetadataQuery> _self,
    Pointer<Void> arg, {
    @required int forResultAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("valueOfAttribute:forResultAtIndex:"),
      arg,
      forResultAtIndex,
    );
  }
}

/// Objective-C class _NSMetadataQueryAttributeValueTuple_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMetadataQueryAttributeValueTuple
    extends Struct<NSMetadataQueryAttributeValueTuple> {
  factory NSMetadataQueryAttributeValueTuple._() {
    throw UnimplementedError();
  }
  static Pointer<NSMetadataQueryAttributeValueTuple> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMetadataQueryAttributeValueTuple")
        .cast<NSMetadataQueryAttributeValueTuple>();
  }

  static Pointer<Void> attribute(
    Pointer<NSMetadataQueryAttributeValueTuple> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attribute"),
    );
  }

  static int count(
    Pointer<NSMetadataQueryAttributeValueTuple> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSMetadataQueryAttributeValueTuple> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSMetadataQueryAttributeValueTuple> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSMetadataQueryResultGroup_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMetadataQueryResultGroup extends Struct<NSMetadataQueryResultGroup> {
  factory NSMetadataQueryResultGroup._() {
    throw UnimplementedError();
  }
  static Pointer<NSMetadataQueryResultGroup> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMetadataQueryResultGroup")
        .cast<NSMetadataQueryResultGroup>();
  }

  static Pointer<Void> attribute(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attribute"),
    );
  }

  static void dealloc(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> resultAtIndex(
    Pointer<NSMetadataQueryResultGroup> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("resultAtIndex:"),
      arg,
    );
  }

  static int resultCount(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultCount"),
    );
  }

  static Pointer<Void> results(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("results"),
    );
  }

  static Pointer<Void> subgroups(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subgroups"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSMetadataQueryResultGroup> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSMiddleSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMiddleSpecifier extends Struct<NSMiddleSpecifier> {
  factory NSMiddleSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSMiddleSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMiddleSpecifier").cast<NSMiddleSpecifier>();
  }
}

/// Objective-C class _NSMoveCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMoveCommand extends Struct<NSMoveCommand> {
  factory NSMoveCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSMoveCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMoveCommand").cast<NSMoveCommand>();
  }

  static void dealloc(
    Pointer<NSMoveCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSMoveCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSMoveCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMoveCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> keySpecifier(
    Pointer<NSMoveCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keySpecifier"),
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSMoveCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static void setReceiversSpecifier(
    Pointer<NSMoveCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReceiversSpecifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSMultiReadUniWriteLock_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMultiReadUniWriteLock extends Struct<NSMultiReadUniWriteLock> {
  factory NSMultiReadUniWriteLock._() {
    throw UnimplementedError();
  }
  static Pointer<NSMultiReadUniWriteLock> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMultiReadUniWriteLock")
        .cast<NSMultiReadUniWriteLock>();
  }

  static void dealloc(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void lock(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static void lockForReading(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lockForReading"),
    );
  }

  static int lockForReadingBeforeDate(
    Pointer<NSMultiReadUniWriteLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("lockForReadingBeforeDate:"),
      arg,
    );
  }

  static void lockForWriting(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lockForWriting"),
    );
  }

  static int lockForWritingBeforeDate(
    Pointer<NSMultiReadUniWriteLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("lockForWritingBeforeDate:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSMultiReadUniWriteLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static int tryLockForReading(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLockForReading"),
    );
  }

  static int tryLockForWriting(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLockForWriting"),
    );
  }

  static void unlock(
    Pointer<NSMultiReadUniWriteLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }
}

/// Objective-C class _NSMutableAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableAttributedString extends Struct<NSMutableAttributedString> {
  factory NSMutableAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMutableAttributedString")
        .cast<NSMutableAttributedString>();
  }

  static void addAttribute(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttribute:value:range:"),
      arg,
      value,
      range,
    );
  }

  static void addAttributes(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttributes:range:"),
      arg,
      range,
    );
  }

  static void addAttributesWeakly(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttributesWeakly:range:"),
      arg,
      range,
    );
  }

  static void appendAttributedString(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendAttributedString:"),
      arg,
    );
  }

  static void beginEditing(
    Pointer<NSMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginEditing"),
    );
  }

  static void deleteCharactersInRange(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteCharactersInRange:"),
      arg,
    );
  }

  static void endEditing(
    Pointer<NSMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endEditing"),
    );
  }

  static void insertAttributedString(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertAttributedString:atIndex:"),
      arg,
      atIndex,
    );
  }

  static Pointer<Void> mutableString(
    Pointer<NSMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableString"),
    );
  }

  static void removeAttribute(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAttribute:range:"),
      arg,
      range,
    );
  }

  static void replaceCharactersInRange$withString$(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static void replaceCharactersInRange$withAttributedString$(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withAttributedString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withAttributedString:"),
      arg,
      withAttributedString,
    );
  }

  static void setAttributedString(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedString:"),
      arg,
    );
  }

  static void setAttributes(
    Pointer<NSMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributes:range:"),
      arg,
      range,
    );
  }
}

/// Objective-C class _NSMutableCharacterSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableCharacterSet extends Struct<NSMutableCharacterSet> {
  factory NSMutableCharacterSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableCharacterSet> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMutableCharacterSet")
        .cast<NSMutableCharacterSet>();
  }

  static void addCharactersInRange(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addCharactersInRange:"),
      arg,
    );
  }

  static void addCharactersInString(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addCharactersInString:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void formIntersectionWithCharacterSet(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("formIntersectionWithCharacterSet:"),
      arg,
    );
  }

  static void formUnionWithCharacterSet(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("formUnionWithCharacterSet:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSMutableCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void invert(
    Pointer<NSMutableCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invert"),
    );
  }

  static int isMutable(
    Pointer<NSMutableCharacterSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMutable"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static void removeCharactersInRange(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCharactersInRange:"),
      arg,
    );
  }

  static void removeCharactersInString(
    Pointer<NSMutableCharacterSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCharactersInString:"),
      arg,
    );
  }
}

/// Objective-C class _NSMutableIndexSet_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableIndexSet extends Struct<NSMutableIndexSet> {
  factory NSMutableIndexSet._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableIndexSet> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMutableIndexSet").cast<NSMutableIndexSet>();
  }

  static void addIndex(
    Pointer<NSMutableIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addIndex:"),
      arg,
    );
  }

  static void addIndexes$(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addIndexes:"),
      arg,
    );
  }

  static void addIndexes$count$(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Uint64> arg, {
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addIndexes:count:"),
      arg,
      count,
    );
  }

  static void addIndexesFromIndexSet(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addIndexesFromIndexSet:"),
      arg,
    );
  }

  static void addIndexesInRange(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addIndexesInRange:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSMutableIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void removeAllIndexes(
    Pointer<NSMutableIndexSet> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllIndexes"),
    );
  }

  static void removeIndex(
    Pointer<NSMutableIndexSet> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeIndex:"),
      arg,
    );
  }

  static void removeIndexes(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeIndexes:"),
      arg,
    );
  }

  static void removeIndexesFromIndexSet(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeIndexesFromIndexSet:"),
      arg,
    );
  }

  static void removeIndexesInRange$(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeIndexesInRange:"),
      arg,
    );
  }

  static void removeIndexesInRange$options$passingTest$(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("removeIndexesInRange:options:passingTest:"),
      arg,
      options,
      passingTest,
    );
  }

  static void removeIndexesPassingTest(
    Pointer<NSMutableIndexSet> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeIndexesPassingTest:"),
      arg,
    );
  }

  static void removeIndexesWithOptions(
    Pointer<NSMutableIndexSet> _self,
    int arg, {
    @required Pointer<Void> passingTest,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("removeIndexesWithOptions:passingTest:"),
      arg,
      passingTest,
    );
  }

  static void shiftIndexesStartingAtIndex(
    Pointer<NSMutableIndexSet> _self,
    int arg, {
    @required int by,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int64_returns_void(
      _self,
      _objc.getSelector("shiftIndexesStartingAtIndex:by:"),
      arg,
      by,
    );
  }
}

/// Objective-C class _NSMutableRLEArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableRLEArray extends Struct<NSMutableRLEArray> {
  factory NSMutableRLEArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableRLEArray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMutableRLEArray").cast<NSMutableRLEArray>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSMutableRLEArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void deleteObjectsInRange(
    Pointer<NSMutableRLEArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteObjectsInRange:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSMutableRLEArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObject:range:"),
      arg,
      range,
    );
  }

  static void replaceObjectsInRange(
    Pointer<NSMutableRLEArray> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("replaceObjectsInRange:withObject:length:"),
      arg,
      withObject,
      length,
    );
  }
}

/// Objective-C class _NSMutableString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableString extends Struct<NSMutableString> {
  factory NSMutableString._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMutableString").cast<NSMutableString>();
  }

  static void appendCharacters(
    Pointer<NSMutableString> _self,
    Pointer<Uint16> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("appendCharacters:length:"),
      arg,
      length,
    );
  }

  static void appendFormat(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendFormat:"),
      arg,
    );
  }

  static void appendString(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendString:"),
      arg,
    );
  }

  static int applyTransform(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required int reverse,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> updatedRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_returns_Int8(
      _self,
      _objc.getSelector("applyTransform:reverse:range:updatedRange:"),
      arg,
      reverse,
      range,
      updatedRange,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void deleteCharactersInRange(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deleteCharactersInRange:"),
      arg,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSMutableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static void insertString(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertString:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void replaceCharactersInRange$withString$(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static void replaceCharactersInRange$withCharacters$length$(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint16> withCharacters,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withCharacters:length:"),
      arg,
      withCharacters,
      length,
    );
  }

  static void replaceCharactersInRange$withCString$length$(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Utf8> withCString,
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withCString:length:"),
      arg,
      withCString,
      length,
    );
  }

  static int replaceOccurrencesOfString(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("replaceOccurrencesOfString:withString:options:range:"),
      arg,
      withString,
      options,
      range,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static void setString(
    Pointer<NSMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setString:"),
      arg,
    );
  }
}

/// Objective-C class _NSMutableStringProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableStringProxy extends Struct<NSMutableStringProxy> {
  factory NSMutableStringProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableStringProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSMutableStringProxy").cast<NSMutableStringProxy>();
  }

  static int getBytes(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Void> arg, {
    @required int maxLength,
    @required Pointer<Uint64> usedLength,
    @required int encoding,
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:"),
      arg,
      maxLength,
      usedLength,
      encoding,
      options,
      range,
      remainingRange,
    );
  }

  static void getCString$maxLength$range$remainingRange$(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("getCString:maxLength:range:remainingRange:"),
      arg,
      maxLength,
      range,
      remainingRange,
    );
  }

  static void getCString$maxLength$(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getCString:maxLength:"),
      arg,
      maxLength,
    );
  }

  static void getCString$(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCString:"),
      arg,
    );
  }

  static void getCharacters$range$(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static void getCharacters$(
    Pointer<NSMutableStringProxy> _self,
    Pointer<Uint16> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:"),
      arg,
    );
  }
}

/// Objective-C class _NSMutableStringProxyForMutableAttributedString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSMutableStringProxyForMutableAttributedString
    extends Struct<NSMutableStringProxyForMutableAttributedString> {
  factory NSMutableStringProxyForMutableAttributedString._() {
    throw UnimplementedError();
  }
  static Pointer<NSMutableStringProxyForMutableAttributedString> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSMutableStringProxyForMutableAttributedString")
        .cast<NSMutableStringProxyForMutableAttributedString>();
  }

  static int characterAtIndex(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getCharacters(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> initWithMutableAttributedString(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMutableAttributedString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void replaceCharactersInRange(
    Pointer<NSMutableStringProxyForMutableAttributedString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }
}

/// Objective-C class _NSNameSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNameSpecifier extends Struct<NSNameSpecifier> {
  factory NSNameSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSNameSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNameSpecifier").cast<NSNameSpecifier>();
  }

  static void dealloc(
    Pointer<NSNameSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSNameSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSNameSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$name$(
    Pointer<NSNameSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:name:"),
      arg,
      containerSpecifier,
      key,
      name,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSNameSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static Pointer<Void> name(
    Pointer<NSNameSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSNameSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }
}

/// Objective-C class _NSNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNotification extends Struct<NSNotification> {
  factory NSNotification._() {
    throw UnimplementedError();
  }
  static Pointer<NSNotification> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNotification").cast<NSNotification>();
  }

  static Pointer<Void> classForCoder(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSNotification> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSNotification> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:object:userInfo:"),
      arg,
      object,
      userInfo,
    );
  }

  static int isEqual(
    Pointer<NSNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> object(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("object"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSNotificationCenter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNotificationCenter extends Struct<NSNotificationCenter> {
  factory NSNotificationCenter._() {
    throw UnimplementedError();
  }
  static Pointer<NSNotificationCenter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNotificationCenter").cast<NSNotificationCenter>();
  }

  static void addObserver(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> name,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObserver:selector:name:object:"),
      arg,
      selector,
      name,
      object,
    );
  }

  static Pointer<Void> addObserverForName(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> queue,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addObserverForName:object:queue:usingBlock:"),
      arg,
      object,
      queue,
      usingBlock,
    );
  }

  static void dealloc(
    Pointer<NSNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEmpty(
    Pointer<NSNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEmpty"),
    );
  }

  static void postNotification(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotification:"),
      arg,
    );
  }

  static void postNotificationName$object$userInfo$(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotificationName:object:userInfo:"),
      arg,
      object,
      userInfo,
    );
  }

  static void postNotificationName$object$(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("postNotificationName:object:"),
      arg,
      object,
    );
  }

  static void removeObserver$(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:"),
      arg,
    );
  }

  static void removeObserver$name$object$(
    Pointer<NSNotificationCenter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:name:object:"),
      arg,
      name,
      object,
    );
  }
}

/// Objective-C class _NSNotificationObservable_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNotificationObservable extends Struct<NSNotificationObservable> {
  factory NSNotificationObservable._() {
    throw UnimplementedError();
  }
  static Pointer<NSNotificationObservable> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSNotificationObservable")
        .cast<NSNotificationObservable>();
  }

  static Pointer<Void> initWithName(
    Pointer<NSNotificationObservable> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:object:"),
      arg,
      object,
    );
  }
}

/// Objective-C class _NSNotificationQueue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNotificationQueue extends Struct<NSNotificationQueue> {
  factory NSNotificationQueue._() {
    throw UnimplementedError();
  }
  static Pointer<NSNotificationQueue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNotificationQueue").cast<NSNotificationQueue>();
  }

  static void dealloc(
    Pointer<NSNotificationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void dequeueNotificationsMatching(
    Pointer<NSNotificationQueue> _self,
    Pointer<Void> arg, {
    @required int coalesceMask,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("dequeueNotificationsMatching:coalesceMask:"),
      arg,
      coalesceMask,
    );
  }

  static void enqueueNotification$postingStyle$coalesceMask$forModes$(
    Pointer<NSNotificationQueue> _self,
    Pointer<Void> arg, {
    @required int postingStyle,
    @required int coalesceMask,
    @required Pointer<Void> forModes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_p_returns_void(
      _self,
      _objc.getSelector(
          "enqueueNotification:postingStyle:coalesceMask:forModes:"),
      arg,
      postingStyle,
      coalesceMask,
      forModes,
    );
  }

  static void enqueueNotification$postingStyle$(
    Pointer<NSNotificationQueue> _self,
    Pointer<Void> arg, {
    @required int postingStyle,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("enqueueNotification:postingStyle:"),
      arg,
      postingStyle,
    );
  }

  static Pointer<Void> init(
    Pointer<NSNotificationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithNotificationCenter(
    Pointer<NSNotificationQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithNotificationCenter:"),
      arg,
    );
  }
}

/// Objective-C class _NSNullFileHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNullFileHandle extends Struct<NSNullFileHandle> {
  factory NSNullFileHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSNullFileHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNullFileHandle").cast<NSNullFileHandle>();
  }

  static Pointer<Void> availableData(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availableData"),
    );
  }

  static void closeFile(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("closeFile"),
    );
  }

  static int fileDescriptor(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("fileDescriptor"),
    );
  }

  static int offsetInFile(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("offsetInFile"),
    );
  }

  static Pointer<Void> readDataOfLength(
    Pointer<NSNullFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("readDataOfLength:"),
      arg,
    );
  }

  static Pointer<Void> readDataToEndOfFile(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readDataToEndOfFile"),
    );
  }

  static Pointer<Void> readabilityHandler(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readabilityHandler"),
    );
  }

  static int seekToEndOfFile(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("seekToEndOfFile"),
    );
  }

  static void seekToFileOffset(
    Pointer<NSNullFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("seekToFileOffset:"),
      arg,
    );
  }

  static void setReadabilityHandler(
    Pointer<NSNullFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReadabilityHandler:"),
      arg,
    );
  }

  static void setWriteabilityHandler(
    Pointer<NSNullFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWriteabilityHandler:"),
      arg,
    );
  }

  static void synchronizeFile(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("synchronizeFile"),
    );
  }

  static void truncateFileAtOffset(
    Pointer<NSNullFileHandle> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("truncateFileAtOffset:"),
      arg,
    );
  }

  static void writeData(
    Pointer<NSNullFileHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static Pointer<Void> writeabilityHandler(
    Pointer<NSNullFileHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("writeabilityHandler"),
    );
  }
}

/// Objective-C class _NSNumber_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNumber extends Struct<NSNumber> {
  factory NSNumber._() {
    throw UnimplementedError();
  }
  static Pointer<NSNumber> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNumber").cast<NSNumber>();
  }

  static Pointer<Void> CAMLType(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAMLType"),
    );
  }

  static Pointer<Void> CA_addValue(
    Pointer<NSNumber> _self,
    Pointer<Void> arg, {
    @required int multipliedBy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("CA_addValue:multipliedBy:"),
      arg,
      multipliedBy,
    );
  }

  static int CA_copyNumericValue(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("CA_copyNumericValue:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> CA_copyRenderValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CA_copyRenderValue"),
    );
  }

  static double CA_distanceToValue(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("CA_distanceToValue:"),
      arg,
    );
  }

  static Pointer<Void> CA_interpolateValue(
    Pointer<NSNumber> _self,
    Pointer<Void> arg, {
    @required double byFraction,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float32_returns_p(
      _self,
      _objc.getSelector("CA_interpolateValue:byFraction:"),
      arg,
      byFraction,
    );
  }

  static Pointer<Void> CA_interpolateValues(
    Pointer<NSNumber> _self,
    Pointer<Void> _arg2,
    Pointer<Void> _arg3,
    Pointer<Void> _arg4,
    Pointer<Pointer<Void>> interpolator,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("CA_interpolateValues:::interpolator:"),
      _arg2,
      _arg3,
      _arg4,
      interpolator,
    );
  }

  static Pointer<Void> CA_roundToIntegerFromValue(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CA_roundToIntegerFromValue:"),
      arg,
    );
  }

  static int abPropertyTypeValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("abPropertyTypeValue"),
    );
  }

  static int boolValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("boolValue"),
    );
  }

  static int charValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("charValue"),
    );
  }

  static Pointer<Void> cl_json_serializeKey(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cl_json_serializeKey"),
    );
  }

  static void cl_json_serializeValue(
    Pointer<NSNumber> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cl_json_serializeValue:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static int compare(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSNumber> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> decimalValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decimalValue"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithLocale(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithLocale:"),
      arg,
    );
  }

  static double doubleValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static void encodeWithCAMLWriter(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCAMLWriter:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Utf8> encodedBytesAndReturnLength(
    Pointer<NSNumber> _self,
    Pointer<Uint64> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("encodedBytesAndReturnLength:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> encodedDataAndReturnError(
    Pointer<NSNumber> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("encodedDataAndReturnError:"),
      arg,
    );
  }

  static double floatValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float32(
      _self,
      _objc.getSelector("floatValue"),
    );
  }

  static int hash(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithBool(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBool:"),
      arg,
    );
  }

  static Pointer<Void> initWithChar(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDouble(
    Pointer<NSNumber> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithDouble:"),
      arg,
    );
  }

  static Pointer<Void> initWithFloat(
    Pointer<NSNumber> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_returns_p(
      _self,
      _objc.getSelector("initWithFloat:"),
      arg,
    );
  }

  static Pointer<Void> initWithInt(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithInteger(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithLong(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithLongLong(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithShort(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int16_returns_p(
      _self,
      _objc.getSelector("initWithShort:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedChar(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInt(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInteger(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLong(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLongLong(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedShort(
    Pointer<NSNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedShort:"),
      arg,
    );
  }

  static int intValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("intValue"),
    );
  }

  static int integerValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("integerValue"),
    );
  }

  static int isEqual(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToNumber(
    Pointer<NSNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToNumber:"),
      arg,
    );
  }

  static int isNSNumber__(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSNumber__"),
    );
  }

  static int longLongValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longLongValue"),
    );
  }

  static int longValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longValue"),
    );
  }

  static Pointer<Void> redactedDescription(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("redactedDescription"),
    );
  }

  static int shortValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int16(
      _self,
      _objc.getSelector("shortValue"),
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static int unsignedCharValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint8(
      _self,
      _objc.getSelector("unsignedCharValue"),
    );
  }

  static int unsignedIntValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("unsignedIntValue"),
    );
  }

  static int unsignedIntegerValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unsignedIntegerValue"),
    );
  }

  static int unsignedLongLongValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unsignedLongLongValue"),
    );
  }

  static int unsignedLongValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unsignedLongValue"),
    );
  }

  static int unsignedShortValue(
    Pointer<NSNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint16(
      _self,
      _objc.getSelector("unsignedShortValue"),
    );
  }
}

/// Objective-C class _NSNumberFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSNumberFormatter extends Struct<NSNumberFormatter> {
  factory NSNumberFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSNumberFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSNumberFormatter").cast<NSNumberFormatter>();
  }

  static int allowsFloats(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsFloats"),
    );
  }

  static int alwaysShowsDecimalSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("alwaysShowsDecimalSeparator"),
    );
  }

  static Pointer<Void> attributedStringForNil(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributedStringForNil"),
    );
  }

  static Pointer<Void> attributedStringForNotANumber(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributedStringForNotANumber"),
    );
  }

  static Pointer<Void> attributedStringForObjectValue(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withDefaultAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("attributedStringForObjectValue:withDefaultAttributes:"),
      arg,
      withDefaultAttributes,
    );
  }

  static Pointer<Void> attributedStringForZero(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributedStringForZero"),
    );
  }

  static int checkLocaleChange(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("checkLocaleChange"),
    );
  }

  static int checkModify(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("checkModify"),
    );
  }

  static void clearPropertyBit(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clearPropertyBit"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSNumberFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> currencyCode(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currencyCode"),
    );
  }

  static Pointer<Void> currencyDecimalSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currencyDecimalSeparator"),
    );
  }

  static Pointer<Void> currencyGroupingSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currencyGroupingSeparator"),
    );
  }

  static Pointer<Void> currencySymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currencySymbol"),
    );
  }

  static void dealloc(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> decimalSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decimalSeparator"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> exponentSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exponentSymbol"),
    );
  }

  static Pointer<Void> format(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("format"),
    );
  }

  static int formatWidth(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("formatWidth"),
    );
  }

  static int formatterBehavior(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("formatterBehavior"),
    );
  }

  static int formattingContext(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("formattingContext"),
    );
  }

  static int generatesDecimalNumbers(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("generatesDecimalNumbers"),
    );
  }

  static Pointer<Void> getFormatter(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("getFormatter"),
    );
  }

  static int getObjectValue$forString$errorDescription$(
    Pointer<NSNumberFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static int getObjectValue$forString$range$error$(
    Pointer<NSNumberFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> range,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:range:error:"),
      arg,
      forString,
      range,
      error,
    );
  }

  static Pointer<Void> groupingSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("groupingSeparator"),
    );
  }

  static int groupingSize(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("groupingSize"),
    );
  }

  static int hasThousandSeparators(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasThousandSeparators"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> internationalCurrencySymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("internationalCurrencySymbol"),
    );
  }

  static int isLenient(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLenient"),
    );
  }

  static int isPartialStringValidationEnabled(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPartialStringValidationEnabled"),
    );
  }

  static Pointer<Void> locale(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static int localizesFormat(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("localizesFormat"),
    );
  }

  static Pointer<Void> maximum(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("maximum"),
    );
  }

  static int maximumFractionDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumFractionDigits"),
    );
  }

  static int maximumIntegerDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumIntegerDigits"),
    );
  }

  static int maximumSignificantDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumSignificantDigits"),
    );
  }

  static Pointer<Void> minimum(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minimum"),
    );
  }

  static int minimumFractionDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("minimumFractionDigits"),
    );
  }

  static int minimumIntegerDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("minimumIntegerDigits"),
    );
  }

  static int minimumSignificantDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("minimumSignificantDigits"),
    );
  }

  static Pointer<Void> minusSign(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("minusSign"),
    );
  }

  static Pointer<Void> multiplier(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("multiplier"),
    );
  }

  static Pointer<Void> negativeFormat(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("negativeFormat"),
    );
  }

  static Pointer<Void> negativeInfinitySymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("negativeInfinitySymbol"),
    );
  }

  static Pointer<Void> negativePrefix(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("negativePrefix"),
    );
  }

  static Pointer<Void> negativeSuffix(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("negativeSuffix"),
    );
  }

  static Pointer<Void> nilSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nilSymbol"),
    );
  }

  static Pointer<Void> notANumberSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notANumberSymbol"),
    );
  }

  static Pointer<Void> numberFromString(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("numberFromString:"),
      arg,
    );
  }

  static int numberStyle(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberStyle"),
    );
  }

  static Pointer<Void> paddingCharacter(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("paddingCharacter"),
    );
  }

  static int paddingPosition(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("paddingPosition"),
    );
  }

  static Pointer<Void> perMillSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("perMillSymbol"),
    );
  }

  static Pointer<Void> percentSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentSymbol"),
    );
  }

  static Pointer<Void> plusSign(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("plusSign"),
    );
  }

  static Pointer<Void> positiveFormat(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("positiveFormat"),
    );
  }

  static Pointer<Void> positiveInfinitySymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("positiveInfinitySymbol"),
    );
  }

  static Pointer<Void> positivePrefix(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("positivePrefix"),
    );
  }

  static Pointer<Void> positiveSuffix(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("positiveSuffix"),
    );
  }

  static void receiveObservedValue(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void resetCheckLocaleChange(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetCheckLocaleChange"),
    );
  }

  static void resetCheckModify(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resetCheckModify"),
    );
  }

  static Pointer<Void> roundingBehavior(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("roundingBehavior"),
    );
  }

  static Pointer<Void> roundingIncrement(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("roundingIncrement"),
    );
  }

  static int roundingMode(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("roundingMode"),
    );
  }

  static int secondaryGroupingSize(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("secondaryGroupingSize"),
    );
  }

  static void setAllowsFloats(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAllowsFloats:"),
      arg,
    );
  }

  static void setAlwaysShowsDecimalSeparator(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAlwaysShowsDecimalSeparator:"),
      arg,
    );
  }

  static void setAttributedStringForNil(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedStringForNil:"),
      arg,
    );
  }

  static void setAttributedStringForNotANumber(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedStringForNotANumber:"),
      arg,
    );
  }

  static void setAttributedStringForZero(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributedStringForZero:"),
      arg,
    );
  }

  static void setCurrencyCode(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrencyCode:"),
      arg,
    );
  }

  static void setCurrencyDecimalSeparator(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrencyDecimalSeparator:"),
      arg,
    );
  }

  static void setCurrencyGroupingSeparator(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrencyGroupingSeparator:"),
      arg,
    );
  }

  static void setCurrencySymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrencySymbol:"),
      arg,
    );
  }

  static void setDecimalSeparator(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDecimalSeparator:"),
      arg,
    );
  }

  static void setExponentSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExponentSymbol:"),
      arg,
    );
  }

  static void setFormat(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFormat:"),
      arg,
    );
  }

  static void setFormatWidth(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFormatWidth:"),
      arg,
    );
  }

  static void setFormatterBehavior(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFormatterBehavior:"),
      arg,
    );
  }

  static void setFormattingContext(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setFormattingContext:"),
      arg,
    );
  }

  static void setGeneratesDecimalNumbers(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setGeneratesDecimalNumbers:"),
      arg,
    );
  }

  static void setGroupingSeparator(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGroupingSeparator:"),
      arg,
    );
  }

  static void setGroupingSize(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setGroupingSize:"),
      arg,
    );
  }

  static void setHasThousandSeparators(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setHasThousandSeparators:"),
      arg,
    );
  }

  static void setInternationalCurrencySymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInternationalCurrencySymbol:"),
      arg,
    );
  }

  static void setLenient(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLenient:"),
      arg,
    );
  }

  static void setLocale(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setLocalizationFromDefaults(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalizationFromDefaults"),
    );
  }

  static void setLocalizesFormat(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setLocalizesFormat:"),
      arg,
    );
  }

  static void setMaximum(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMaximum:"),
      arg,
    );
  }

  static void setMaximumFractionDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaximumFractionDigits:"),
      arg,
    );
  }

  static void setMaximumIntegerDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaximumIntegerDigits:"),
      arg,
    );
  }

  static void setMaximumSignificantDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMaximumSignificantDigits:"),
      arg,
    );
  }

  static void setMinimum(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMinimum:"),
      arg,
    );
  }

  static void setMinimumFractionDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMinimumFractionDigits:"),
      arg,
    );
  }

  static void setMinimumIntegerDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMinimumIntegerDigits:"),
      arg,
    );
  }

  static void setMinimumSignificantDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setMinimumSignificantDigits:"),
      arg,
    );
  }

  static void setMinusSign(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMinusSign:"),
      arg,
    );
  }

  static void setMultiplier(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMultiplier:"),
      arg,
    );
  }

  static void setNegativeFormat(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNegativeFormat:"),
      arg,
    );
  }

  static void setNegativeInfinitySymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNegativeInfinitySymbol:"),
      arg,
    );
  }

  static void setNegativePrefix(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNegativePrefix:"),
      arg,
    );
  }

  static void setNegativeSuffix(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNegativeSuffix:"),
      arg,
    );
  }

  static void setNilSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNilSymbol:"),
      arg,
    );
  }

  static void setNotANumberSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotANumberSymbol:"),
      arg,
    );
  }

  static void setNumberStyle(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setNumberStyle:"),
      arg,
    );
  }

  static void setPaddingCharacter(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPaddingCharacter:"),
      arg,
    );
  }

  static void setPaddingPosition(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setPaddingPosition:"),
      arg,
    );
  }

  static void setPartialStringValidationEnabled(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPartialStringValidationEnabled:"),
      arg,
    );
  }

  static void setPerMillSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPerMillSymbol:"),
      arg,
    );
  }

  static void setPercentSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentSymbol:"),
      arg,
    );
  }

  static void setPlusSign(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPlusSign:"),
      arg,
    );
  }

  static void setPositiveFormat(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPositiveFormat:"),
      arg,
    );
  }

  static void setPositiveInfinitySymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPositiveInfinitySymbol:"),
      arg,
    );
  }

  static void setPositivePrefix(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPositivePrefix:"),
      arg,
    );
  }

  static void setPositiveSuffix(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPositiveSuffix:"),
      arg,
    );
  }

  static void setPropertyBit(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("setPropertyBit"),
    );
  }

  static void setRoundingBehavior(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoundingBehavior:"),
      arg,
    );
  }

  static void setRoundingIncrement(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoundingIncrement:"),
      arg,
    );
  }

  static void setRoundingMode(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRoundingMode:"),
      arg,
    );
  }

  static void setSecondaryGroupingSize(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setSecondaryGroupingSize:"),
      arg,
    );
  }

  static void setTextAttributesForNegativeInfinity(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForNegativeInfinity:"),
      arg,
    );
  }

  static void setTextAttributesForNegativeValues(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForNegativeValues:"),
      arg,
    );
  }

  static void setTextAttributesForNil(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForNil:"),
      arg,
    );
  }

  static void setTextAttributesForNotANumber(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForNotANumber:"),
      arg,
    );
  }

  static void setTextAttributesForPositiveInfinity(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForPositiveInfinity:"),
      arg,
    );
  }

  static void setTextAttributesForPositiveValues(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForPositiveValues:"),
      arg,
    );
  }

  static void setTextAttributesForZero(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTextAttributesForZero:"),
      arg,
    );
  }

  static void setThousandSeparator(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setThousandSeparator:"),
      arg,
    );
  }

  static void setUsesGroupingSeparator(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesGroupingSeparator:"),
      arg,
    );
  }

  static void setUsesSignificantDigits(
    Pointer<NSNumberFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesSignificantDigits:"),
      arg,
    );
  }

  static void setZeroSymbol(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setZeroSymbol:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromNumber(
    Pointer<NSNumberFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromNumber:"),
      arg,
    );
  }

  static Pointer<Void> textAttributesForNegativeInfinity(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForNegativeInfinity"),
    );
  }

  static Pointer<Void> textAttributesForNegativeValues(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForNegativeValues"),
    );
  }

  static Pointer<Void> textAttributesForNil(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForNil"),
    );
  }

  static Pointer<Void> textAttributesForNotANumber(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForNotANumber"),
    );
  }

  static Pointer<Void> textAttributesForPositiveInfinity(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForPositiveInfinity"),
    );
  }

  static Pointer<Void> textAttributesForPositiveValues(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForPositiveValues"),
    );
  }

  static Pointer<Void> textAttributesForZero(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("textAttributesForZero"),
    );
  }

  static Pointer<Void> thousandSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("thousandSeparator"),
    );
  }

  static int usesGroupingSeparator(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesGroupingSeparator"),
    );
  }

  static int usesSignificantDigits(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesSignificantDigits"),
    );
  }

  static Pointer<Void> zeroSymbol(
    Pointer<NSNumberFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zeroSymbol"),
    );
  }
}

/// Objective-C class _NSObjectSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObjectSpecifier extends Struct<NSObjectSpecifier> {
  factory NSObjectSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSObjectSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObjectSpecifier").cast<NSObjectSpecifier>();
  }
}

/// Objective-C class _NSObservableKeyPath_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservableKeyPath extends Struct<NSObservableKeyPath> {
  factory NSObservableKeyPath._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservableKeyPath> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservableKeyPath").cast<NSObservableKeyPath>();
  }

  static Pointer<Void> addObserver(
    Pointer<NSObservableKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addObserver:"),
      arg,
    );
  }

  static Pointer<Void> changes(
    Pointer<NSObservableKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("changes"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSObservableKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void removeObservation(
    Pointer<NSObservableKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObservation:"),
      arg,
    );
  }
}

/// Objective-C class _NSObservation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservation extends Struct<NSObservation> {
  factory NSObservation._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservation").cast<NSObservation>();
  }

  static Pointer<Void> initWithObservable$blockSink$tag$(
    Pointer<NSObservation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> blockSink,
    @required int tag,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithObservable:blockSink:tag:"),
      arg,
      blockSink,
      tag,
    );
  }

  static Pointer<Void> initWithObservable$observer$(
    Pointer<NSObservation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> observer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObservable:observer:"),
      arg,
      observer,
    );
  }

  static void remove(
    Pointer<NSObservation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("remove"),
    );
  }
}

/// Objective-C class _NSObservationBuffer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservationBuffer extends Struct<NSObservationBuffer> {
  factory NSObservationBuffer._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservationBuffer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservationBuffer").cast<NSObservationBuffer>();
  }

  static int automaticallyEmitsObjects(
    Pointer<NSObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticallyEmitsObjects"),
    );
  }

  static Pointer<Void> bufferFullHandler(
    Pointer<NSObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bufferFullHandler"),
    );
  }

  static void emitAllObjects(
    Pointer<NSObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("emitAllObjects"),
    );
  }

  static void emitObject(
    Pointer<NSObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("emitObject"),
    );
  }

  static Pointer<Void> initWithMaximumObjectCount(
    Pointer<NSObservationBuffer> _self,
    int arg, {
    @required int fullPolicy,
    @required Pointer<Void> outputQueue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int64_p_returns_p(
      _self,
      _objc.getSelector("initWithMaximumObjectCount:fullPolicy:outputQueue:"),
      arg,
      fullPolicy,
      outputQueue,
    );
  }

  static int isMemoryPressureSensitive(
    Pointer<NSObservationBuffer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMemoryPressureSensitive"),
    );
  }

  static void setAutomaticallyEmitsObjects(
    Pointer<NSObservationBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticallyEmitsObjects:"),
      arg,
    );
  }

  static void setBufferFullHandler(
    Pointer<NSObservationBuffer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBufferFullHandler:"),
      arg,
    );
  }

  static void setMemoryPressureSensitive(
    Pointer<NSObservationBuffer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setMemoryPressureSensitive:"),
      arg,
    );
  }
}

/// Objective-C class _NSObservationSink_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservationSink extends Struct<NSObservationSink> {
  factory NSObservationSink._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservationSink> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservationSink").cast<NSObservationSink>();
  }
}

/// Objective-C class _NSObservationSource_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservationSource extends Struct<NSObservationSource> {
  factory NSObservationSource._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservationSource> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservationSource").cast<NSObservationSource>();
  }

  static void dealloc(
    Pointer<NSObservationSource> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSObservationTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservationTransformer extends Struct<NSObservationTransformer> {
  factory NSObservationTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservationTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSObservationTransformer")
        .cast<NSObservationTransformer>();
  }
}

/// Objective-C class _NSObservedValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObservedValue extends Struct<NSObservedValue> {
  factory NSObservedValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSObservedValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObservedValue").cast<NSObservedValue>();
  }

  static Pointer<Void> copyToHeap(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copyToHeap"),
    );
  }

  static void dealloc(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> error(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("error"),
    );
  }

  static int finished(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("finished"),
    );
  }

  static void setError(
    Pointer<NSObservedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setFinished(
    Pointer<NSObservedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFinished:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSObservedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<NSObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSObserverKeyPath_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSObserverKeyPath extends Struct<NSObserverKeyPath> {
  factory NSObserverKeyPath._() {
    throw UnimplementedError();
  }
  static Pointer<NSObserverKeyPath> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSObserverKeyPath").cast<NSObserverKeyPath>();
  }

  static Pointer<Void> description(
    Pointer<NSObserverKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void finishObserving(
    Pointer<NSObserverKeyPath> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finishObserving"),
    );
  }

  static void setObservation(
    Pointer<NSObserverKeyPath> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservation:"),
      arg,
    );
  }
}

/// Objective-C class _NSOldValueObservationTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOldValueObservationTransformer
    extends Struct<NSOldValueObservationTransformer> {
  factory NSOldValueObservationTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSOldValueObservationTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSOldValueObservationTransformer")
        .cast<NSOldValueObservationTransformer>();
  }

  static void dealloc(
    Pointer<NSOldValueObservationTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSOperation_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOperation extends Struct<NSOperation> {
  factory NSOperation._() {
    throw UnimplementedError();
  }
  static Pointer<NSOperation> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSOperation").cast<NSOperation>();
  }

  static void addDependency(
    Pointer<NSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addDependency:"),
      arg,
    );
  }

  static void addObserver(
    Pointer<NSOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyPath,
    @required int options,
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("addObserver:forKeyPath:options:context:"),
      arg,
      forKeyPath,
      options,
      context,
    );
  }

  static void cancel(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> completionBlock(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("completionBlock"),
    );
  }

  static void dealloc(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> dependencies(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dependencies"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isAsynchronous(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAsynchronous"),
    );
  }

  static int isCancelled(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCancelled"),
    );
  }

  static int isConcurrent(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isConcurrent"),
    );
  }

  static int isExecuting(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static int isReady(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReady"),
    );
  }

  static void main(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> observationInfo(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("observationInfo"),
    );
  }

  static int qualityOfService(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static int queuePriority(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("queuePriority"),
    );
  }

  static void removeAllDependencies(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllDependencies"),
    );
  }

  static void removeDependency(
    Pointer<NSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeDependency:"),
      arg,
    );
  }

  static void removeObserver(
    Pointer<NSOperation> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:forKeyPath:"),
      arg,
      forKeyPath,
    );
  }

  static void setCompletionBlock(
    Pointer<NSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCompletionBlock:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setObservationInfo(
    Pointer<NSOperation> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObservationInfo:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setQueuePriority(
    Pointer<NSOperation> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQueuePriority:"),
      arg,
    );
  }

  static void setThreadPriority(
    Pointer<NSOperation> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setThreadPriority:"),
      arg,
    );
  }

  static void start(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static double threadPriority(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("threadPriority"),
    );
  }

  static void waitUntilFinished(
    Pointer<NSOperation> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("waitUntilFinished"),
    );
  }

  static void waitUntilFinishedOrTimeout(
    Pointer<NSOperation> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("waitUntilFinishedOrTimeout:"),
      arg,
    );
  }
}

/// Objective-C class _NSOperationQueue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOperationQueue extends Struct<NSOperationQueue> {
  factory NSOperationQueue._() {
    throw UnimplementedError();
  }
  static Pointer<NSOperationQueue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSOperationQueue").cast<NSOperationQueue>();
  }

  static void addObserver(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyPath,
    @required int options,
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("addObserver:forKeyPath:options:context:"),
      arg,
      forKeyPath,
      options,
      context,
    );
  }

  static void addOperation(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addOperation:"),
      arg,
    );
  }

  static void addOperationWithBlock(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addOperationWithBlock:"),
      arg,
    );
  }

  static void addOperations(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg, {
    @required int waitUntilFinished,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("addOperations:waitUntilFinished:"),
      arg,
      waitUntilFinished,
    );
  }

  static void cancelAllOperations(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancelAllOperations"),
    );
  }

  static void dealloc(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isSuspended(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSuspended"),
    );
  }

  static int maxConcurrentOperationCount(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("maxConcurrentOperationCount"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int operationCount(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("operationCount"),
    );
  }

  static Pointer<Void> operations(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operations"),
    );
  }

  static int overcommitsOperations(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("overcommitsOperations"),
    );
  }

  static int qualityOfService(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static void removeObserver(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeyPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObserver:forKeyPath:"),
      arg,
      forKeyPath,
    );
  }

  static void setMaxConcurrentOperationCount(
    Pointer<NSOperationQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setMaxConcurrentOperationCount:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setOvercommitsOperations(
    Pointer<NSOperationQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setOvercommitsOperations:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSOperationQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setSuspended(
    Pointer<NSOperationQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSuspended:"),
      arg,
    );
  }

  static void setUnderlyingQueue(
    Pointer<NSOperationQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUnderlyingQueue:"),
      arg,
    );
  }

  static Pointer<Void> underlyingQueue(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingQueue"),
    );
  }

  static void waitUntilAllOperationsAreFinished(
    Pointer<NSOperationQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("waitUntilAllOperationsAreFinished"),
    );
  }
}

/// Objective-C class _NSOrderedSetChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOrderedSetChange extends Struct<NSOrderedSetChange> {
  factory NSOrderedSetChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSOrderedSetChange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSOrderedSetChange").cast<NSOrderedSetChange>();
  }

  static int changeType(
    Pointer<NSOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static int destinationIndex(
    Pointer<NSOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("destinationIndex"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSOrderedSetChange> _self,
    int arg, {
    @required int sourceIndex,
    @required int destinationIndex,
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:sourceIndex:destinationIndex:value:"),
      arg,
      sourceIndex,
      destinationIndex,
      value,
    );
  }

  static int sourceIndex(
    Pointer<NSOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("sourceIndex"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSOrderedSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSOrderedSetChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOrderedSetChanges extends Struct<NSOrderedSetChanges> {
  factory NSOrderedSetChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSOrderedSetChanges> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSOrderedSetChanges").cast<NSOrderedSetChanges>();
  }

  static void addChange(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static void addChanges(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChanges:"),
      arg,
    );
  }

  static void applyChangesToOrderedSet(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChangesToOrderedSet:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSOrderedSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateChanges(
    Pointer<NSOrderedSetChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void exchangeObjectAtIndex(
    Pointer<NSOrderedSetChanges> _self,
    int arg, {
    @required int withObjectAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector("exchangeObjectAtIndex:withObjectAtIndex:"),
      arg,
      withObjectAtIndex,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void moveObjectAtIndex(
    Pointer<NSOrderedSetChanges> _self,
    int arg, {
    @required int toIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector("moveObjectAtIndex:toIndex:"),
      arg,
      toIndex,
    );
  }

  static void moveObjectsAtIndexes(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg, {
    @required int toIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("moveObjectsAtIndexes:toIndex:"),
      arg,
      toIndex,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSOrderedSetChanges> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSOrderedSetChanges> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void updateObject(
    Pointer<NSOrderedSetChanges> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("updateObject:atIndex:"),
      arg,
      atIndex,
    );
  }
}

/// Objective-C class _NSOrthography_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOrthography extends Struct<NSOrthography> {
  factory NSOrthography._() {
    throw UnimplementedError();
  }
  static Pointer<NSOrthography> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSOrthography").cast<NSOrthography>();
  }

  static Pointer<Void> allLanguages(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allLanguages"),
    );
  }

  static Pointer<Void> allScripts(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allScripts"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSOrthography> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> dominantLanguage(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantLanguage"),
    );
  }

  static Pointer<Void> dominantLanguageForScript(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dominantLanguageForScript:"),
      arg,
    );
  }

  static Pointer<Void> dominantScript(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantScript"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDominantScript(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> languageMap,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDominantScript:languageMap:"),
      arg,
      languageMap,
    );
  }

  static int isEqual(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> languageMap(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("languageMap"),
    );
  }

  static Pointer<Void> languagesForScript(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("languagesForScript:"),
      arg,
    );
  }

  static int orthographyFlags(
    Pointer<NSOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("orthographyFlags"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSOrthographyCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOrthographyCheckingResult extends Struct<NSOrthographyCheckingResult> {
  factory NSOrthographyCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSOrthographyCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSOrthographyCheckingResult")
        .cast<NSOrthographyCheckingResult>();
  }

  static void dealloc(
    Pointer<NSOrthographyCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSOrthographyCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSOrthographyCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSOrthographyCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSOrthographyCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> orthography,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:orthography:"),
      arg,
      orthography,
    );
  }

  static Pointer<Void> orthography(
    Pointer<NSOrthographyCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("orthography"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSOrthographyCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSOrthographyCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSOrthographyCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSOwnedDictionaryProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSOwnedDictionaryProxy extends Struct<NSOwnedDictionaryProxy> {
  factory NSOwnedDictionaryProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSOwnedDictionaryProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSOwnedDictionaryProxy")
        .cast<NSOwnedDictionaryProxy>();
  }

  static int count(
    Pointer<NSOwnedDictionaryProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static Pointer<Void> initWithOwner(
    Pointer<NSOwnedDictionaryProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithOwner:"),
      arg,
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSOwnedDictionaryProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSOwnedDictionaryProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void release(
    Pointer<NSOwnedDictionaryProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSOwnedDictionaryProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static void superRelease(
    Pointer<NSOwnedDictionaryProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("superRelease"),
    );
  }
}

/// Objective-C class _NSPageData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPageData extends Struct<NSPageData> {
  factory NSPageData._() {
    throw UnimplementedError();
  }
  static Pointer<NSPageData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPageData").cast<NSPageData>();
  }

  static Pointer<Void> bytes(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static Pointer<Void> data(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static void dealloc(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> deserializer(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("deserializer"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initFromSerializerStream(
    Pointer<NSPageData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initFromSerializerStream:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSPageData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithBytesNoCopy(
    Pointer<NSPageData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithBytesNoCopy:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithContentsOfFile(
    Pointer<NSPageData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfMappedFile$(
    Pointer<NSPageData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfMappedFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfMappedFile$withFileAttributes$(
    Pointer<NSPageData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withFileAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfMappedFile:withFileAttributes:"),
      arg,
      withFileAttributes,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSPageData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:"),
      arg,
    );
  }

  static Pointer<Void> initWithDataNoCopy(
    Pointer<NSPageData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDataNoCopy:"),
      arg,
    );
  }

  static int length(
    Pointer<NSPageData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static int writeFd(
    Pointer<NSPageData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_Uint64(
      _self,
      _objc.getSelector("writeFd:"),
      arg,
    );
  }

  static int writeFile(
    Pointer<NSPageData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("writeFile:"),
      arg,
    );
  }

  static int writePath(
    Pointer<NSPageData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
    @required Pointer<Void> errorHandler,
    @required int remapContents,
    @required Pointer<Void> hardLinkPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "writePath:docInfo:errorHandler:remapContents:hardLinkPath:"),
      arg,
      docInfo,
      errorHandler,
      remapContents,
      hardLinkPath,
    );
  }
}

/// Objective-C class _NSPathStore2_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPathStore2 extends Struct<NSPathStore2> {
  factory NSPathStore2._() {
    throw UnimplementedError();
  }
  static Pointer<NSPathStore2> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPathStore2").cast<NSPathStore2>();
  }

  static int characterAtIndex(
    Pointer<NSPathStore2> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPathStore2> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void getCharacters(
    Pointer<NSPathStore2> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static int hash(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isAbsolutePath(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAbsolutePath"),
    );
  }

  static int isEqualToString(
    Pointer<NSPathStore2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToString:"),
      arg,
    );
  }

  static Pointer<Void> lastPathComponent(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastPathComponent"),
    );
  }

  static int length(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> pathComponents(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathComponents"),
    );
  }

  static Pointer<Void> pathExtension(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathExtension"),
    );
  }

  static Pointer<Void> stringByAbbreviatingWithTildeInPath(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAbbreviatingWithTildeInPath"),
    );
  }

  static Pointer<Void> stringByAppendingPathComponent(
    Pointer<NSPathStore2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingPathComponent:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingPathExtension(
    Pointer<NSPathStore2> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingPathExtension:"),
      arg,
    );
  }

  static Pointer<Void> stringByDeletingLastPathComponent(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByDeletingLastPathComponent"),
    );
  }

  static Pointer<Void> stringByDeletingPathExtension(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByDeletingPathExtension"),
    );
  }

  static Pointer<Void> stringByExpandingTildeInPath(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByExpandingTildeInPath"),
    );
  }

  static Pointer<Void> stringByResolvingSymlinksInPath(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByResolvingSymlinksInPath"),
    );
  }

  static Pointer<Void> stringByStandardizingPath(
    Pointer<NSPathStore2> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByStandardizingPath"),
    );
  }
}

/// Objective-C class _NSPersonNameComponents_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPersonNameComponents extends Struct<NSPersonNameComponents> {
  factory NSPersonNameComponents._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersonNameComponents> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersonNameComponents")
        .cast<NSPersonNameComponents>();
  }

  static Pointer<Void> CKDescriptionPropertiesWithPublic(
    Pointer<NSPersonNameComponents> _self,
    int arg, {
    @required int private,
    @required int shouldExpand,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_Int8_returns_p(
      _self,
      _objc.getSelector(
          "CKDescriptionPropertiesWithPublic:private:shouldExpand:"),
      arg,
      private,
      shouldExpand,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> familyName(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("familyName"),
    );
  }

  static Pointer<Void> givenName(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("givenName"),
    );
  }

  static int hash(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToComponents(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToComponents:"),
      arg,
    );
  }

  static Pointer<Void> middleName(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("middleName"),
    );
  }

  static Pointer<Void> namePrefix(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("namePrefix"),
    );
  }

  static Pointer<Void> nameSuffix(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nameSuffix"),
    );
  }

  static Pointer<Void> nickname(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nickname"),
    );
  }

  static void overrideComponentsInContact(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("overrideComponentsInContact:"),
      arg,
    );
  }

  static Pointer<Void> phoneticRepresentation(
    Pointer<NSPersonNameComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneticRepresentation"),
    );
  }

  static void setFamilyName(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFamilyName:"),
      arg,
    );
  }

  static void setGivenName(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setGivenName:"),
      arg,
    );
  }

  static void setMiddleName(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMiddleName:"),
      arg,
    );
  }

  static void setNamePrefix(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNamePrefix:"),
      arg,
    );
  }

  static void setNameSuffix(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNameSuffix:"),
      arg,
    );
  }

  static void setNickname(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNickname:"),
      arg,
    );
  }

  static void setPhoneticRepresentation(
    Pointer<NSPersonNameComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPhoneticRepresentation:"),
      arg,
    );
  }
}

/// Objective-C class _NSPersonNameComponentsFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPersonNameComponentsFormatter
    extends Struct<NSPersonNameComponentsFormatter> {
  factory NSPersonNameComponentsFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSPersonNameComponentsFormatter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPersonNameComponentsFormatter")
        .cast<NSPersonNameComponentsFormatter>();
  }

  static Pointer<Void> annotatedStringFromPersonNameComponents(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("annotatedStringFromPersonNameComponents:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPersonNameComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int getObjectValue(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forString,
    @required Pointer<Pointer<Void>> errorDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("getObjectValue:forString:errorDescription:"),
      arg,
      forString,
      errorDescription,
    );
  }

  static Pointer<Void> init(
    Pointer<NSPersonNameComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToFormatter(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToFormatter:"),
      arg,
    );
  }

  static int isPhonetic(
    Pointer<NSPersonNameComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPhonetic"),
    );
  }

  static Pointer<Void> personNameComponentsFromString(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("personNameComponentsFromString:"),
      arg,
    );
  }

  static void receiveObservedValue(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("receiveObservedValue:"),
      arg,
    );
  }

  static void setPhonetic(
    Pointer<NSPersonNameComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPhonetic:"),
      arg,
    );
  }

  static void setStyle(
    Pointer<NSPersonNameComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStyle:"),
      arg,
    );
  }

  static void set_forceFamilyNameFirst(
    Pointer<NSPersonNameComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("set_forceFamilyNameFirst:"),
      arg,
    );
  }

  static void set_forceGivenNameFirst(
    Pointer<NSPersonNameComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("set_forceGivenNameFirst:"),
      arg,
    );
  }

  static void set_ignoresFallbacks(
    Pointer<NSPersonNameComponentsFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("set_ignoresFallbacks:"),
      arg,
    );
  }

  static void set_locale(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_locale:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringFromContact(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromContact:"),
      arg,
    );
  }

  static Pointer<Void> stringFromPersonNameComponents(
    Pointer<NSPersonNameComponentsFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromPersonNameComponents:"),
      arg,
    );
  }

  static int style(
    Pointer<NSPersonNameComponentsFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("style"),
    );
  }
}

/// Objective-C class _NSPhoneNumberCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPhoneNumberCheckingResult extends Struct<NSPhoneNumberCheckingResult> {
  factory NSPhoneNumberCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSPhoneNumberCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPhoneNumberCheckingResult")
        .cast<NSPhoneNumberCheckingResult>();
  }

  static void dealloc(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPhoneNumberCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPhoneNumberCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange$phoneNumber$(
    Pointer<NSPhoneNumberCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> phoneNumber,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:phoneNumber:"),
      arg,
      phoneNumber,
    );
  }

  static Pointer<Void> initWithRange$phoneNumber$underlyingResult$(
    Pointer<NSPhoneNumberCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> phoneNumber,
    @required Pointer<Void> underlyingResult,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:phoneNumber:underlyingResult:"),
      arg,
      phoneNumber,
      underlyingResult,
    );
  }

  static Pointer<Void> phoneNumber(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSPhoneNumberCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static Pointer<Void> underlyingResult(
    Pointer<NSPhoneNumberCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingResult"),
    );
  }
}

/// Objective-C class _NSPinyinString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPinyinString extends Struct<NSPinyinString> {
  factory NSPinyinString._() {
    throw UnimplementedError();
  }
  static Pointer<NSPinyinString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPinyinString").cast<NSPinyinString>();
  }

  static int characterAtIndex(
    Pointer<NSPinyinString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static void dealloc(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int indexOfFirstModification(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("indexOfFirstModification"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithString$syllableCount$lastSyllableIsPartial$score$replacementCount$transpositionCount$insertionCount$deletionCount$indexOfFirstModification$rangeCount$ranges$(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg, {
    @required int syllableCount,
    @required int lastSyllableIsPartial,
    @required int score,
    @required int replacementCount,
    @required int transpositionCount,
    @required int insertionCount,
    @required int deletionCount,
    @required int indexOfFirstModification,
    @required int rangeCount,
    @required Pointer<Pointer<Void>> ranges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithString:syllableCount:lastSyllableIsPartial:score:replacementCount:transpositionCount:insertionCount:deletionCount:indexOfFirstModification:rangeCount:ranges:"),
      arg,
      syllableCount,
      lastSyllableIsPartial,
      score,
      replacementCount,
      transpositionCount,
      insertionCount,
      deletionCount,
      indexOfFirstModification,
      rangeCount,
      ranges,
    );
  }

  static Pointer<Void>
      initWithString$syllableCount$lastSyllableIsPartial$score$replacementCount$transpositionCount$insertionCount$deletionCount$rangeCount$ranges$(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg, {
    @required int syllableCount,
    @required int lastSyllableIsPartial,
    @required int score,
    @required int replacementCount,
    @required int transpositionCount,
    @required int insertionCount,
    @required int deletionCount,
    @required int rangeCount,
    @required Pointer<Pointer<Void>> ranges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithString:syllableCount:lastSyllableIsPartial:score:replacementCount:transpositionCount:insertionCount:deletionCount:rangeCount:ranges:"),
      arg,
      syllableCount,
      lastSyllableIsPartial,
      score,
      replacementCount,
      transpositionCount,
      insertionCount,
      deletionCount,
      rangeCount,
      ranges,
    );
  }

  static int isEqual(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int lastSyllableIsPartial(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("lastSyllableIsPartial"),
    );
  }

  static int length(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> nonPinyinIndexSet(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonPinyinIndexSet"),
    );
  }

  static Pointer<Void> nonPinyinRangeAtIndex(
    Pointer<NSPinyinString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("nonPinyinRangeAtIndex:"),
      arg,
    );
  }

  static int numberOfDeletions(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfDeletions"),
    );
  }

  static int numberOfInsertions(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfInsertions"),
    );
  }

  static int numberOfNonPinyinRanges(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfNonPinyinRanges"),
    );
  }

  static int numberOfReplacements(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfReplacements"),
    );
  }

  static int numberOfTranspositions(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfTranspositions"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSPinyinString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int score(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("score"),
    );
  }

  static Pointer<Void> string(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }

  static int syllableCount(
    Pointer<NSPinyinString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("syllableCount"),
    );
  }
}

/// Objective-C class _NSPipe_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPipe extends Struct<NSPipe> {
  factory NSPipe._() {
    throw UnimplementedError();
  }
  static Pointer<NSPipe> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPipe").cast<NSPipe>();
  }

  static Pointer<Void> fileHandleForReading(
    Pointer<NSPipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileHandleForReading"),
    );
  }

  static Pointer<Void> fileHandleForWriting(
    Pointer<NSPipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileHandleForWriting"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPipe> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSPlaceholderMutableString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPlaceholderMutableString extends Struct<NSPlaceholderMutableString> {
  factory NSPlaceholderMutableString._() {
    throw UnimplementedError();
  }
  static Pointer<NSPlaceholderMutableString> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPlaceholderMutableString")
        .cast<NSPlaceholderMutableString>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static int characterAtIndex(
    Pointer<NSPlaceholderMutableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:encoding:"),
      arg,
      length,
      encoding,
    );
  }

  static Pointer<Void> initWithBytesNoCopy(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int encoding,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBytesNoCopy:length:encoding:freeWhenDone:"),
      arg,
      length,
      encoding,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCString(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Utf8> arg, {
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCString:encoding:"),
      arg,
      encoding,
    );
  }

  static Pointer<Void> initWithCStringNoCopy(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCStringNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSPlaceholderMutableString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithCharactersNoCopy(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Uint16> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCharactersNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithFormat(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:locale:arguments:"),
      arg,
      locale,
      arguments,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithUTF8String(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUTF8String:"),
      arg,
    );
  }

  static int length(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void release(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void replaceCharactersInRange(
    Pointer<NSPlaceholderMutableString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSPlaceholderMutableString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSPlaceholderNumber_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPlaceholderNumber extends Struct<NSPlaceholderNumber> {
  factory NSPlaceholderNumber._() {
    throw UnimplementedError();
  }
  static Pointer<NSPlaceholderNumber> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPlaceholderNumber").cast<NSPlaceholderNumber>();
  }

  static Pointer<Void> init(
    Pointer<NSPlaceholderNumber> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBool(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBool:"),
      arg,
    );
  }

  static Pointer<Void> initWithChar(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPlaceholderNumber> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDouble(
    Pointer<NSPlaceholderNumber> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithDouble:"),
      arg,
    );
  }

  static Pointer<Void> initWithFloat(
    Pointer<NSPlaceholderNumber> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_returns_p(
      _self,
      _objc.getSelector("initWithFloat:"),
      arg,
    );
  }

  static Pointer<Void> initWithInt(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("initWithInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithInteger(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithLong(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithLongLong(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("initWithLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithShort(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int16_returns_p(
      _self,
      _objc.getSelector("initWithShort:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedChar(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint8_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedChar:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInt(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInt:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedInteger(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedInteger:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLong(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedLongLong(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedLongLong:"),
      arg,
    );
  }

  static Pointer<Void> initWithUnsignedShort(
    Pointer<NSPlaceholderNumber> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_p(
      _self,
      _objc.getSelector("initWithUnsignedShort:"),
      arg,
    );
  }
}

/// Objective-C class _NSPlaceholderString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPlaceholderString extends Struct<NSPlaceholderString> {
  factory NSPlaceholderString._() {
    throw UnimplementedError();
  }
  static Pointer<NSPlaceholderString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPlaceholderString").cast<NSPlaceholderString>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static int characterAtIndex(
    Pointer<NSPlaceholderString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:encoding:"),
      arg,
      length,
      encoding,
    );
  }

  static Pointer<Void> initWithBytesNoCopy(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int encoding,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBytesNoCopy:length:encoding:freeWhenDone:"),
      arg,
      length,
      encoding,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCString$encoding$(
    Pointer<NSPlaceholderString> _self,
    Pointer<Utf8> arg, {
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCString:encoding:"),
      arg,
      encoding,
    );
  }

  static Pointer<Void> initWithCString$length$(
    Pointer<NSPlaceholderString> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCString:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithCString$(
    Pointer<NSPlaceholderString> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCString:"),
      arg,
    );
  }

  static Pointer<Void> initWithCStringNoCopy(
    Pointer<NSPlaceholderString> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCStringNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCharacters(
    Pointer<NSPlaceholderString> _self,
    Pointer<Uint16> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCharacters:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithCharactersNoCopy(
    Pointer<NSPlaceholderString> _self,
    Pointer<Uint16> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCharactersNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg, {
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithData:encoding:"),
      arg,
      encoding,
    );
  }

  static Pointer<Void> initWithFormat(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:locale:arguments:"),
      arg,
      locale,
      arguments,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithValidatedFormat(
    Pointer<NSPlaceholderString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> validFormatSpecifiers,
    @required Pointer<Void> locale,
    @required Pointer<Void> arguments,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:"),
      arg,
      validFormatSpecifiers,
      locale,
      arguments,
      error,
    );
  }

  static int length(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static void release(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSPlaceholderString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSPlaceholderValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPlaceholderValue extends Struct<NSPlaceholderValue> {
  factory NSPlaceholderValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSPlaceholderValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPlaceholderValue").cast<NSPlaceholderValue>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static void dealloc(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getValue$(
    Pointer<NSPlaceholderValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getValue:"),
      arg,
    );
  }

  static void getValue$size$(
    Pointer<NSPlaceholderValue> _self,
    Pointer<Void> arg, {
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getValue:size:"),
      arg,
      size,
    );
  }

  static Pointer<Void> init(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSPlaceholderValue> _self,
    Pointer<Void> arg, {
    @required Pointer<Utf8> objCType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBytes:objCType:"),
      arg,
      objCType,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPlaceholderValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Utf8> objCType(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objCType"),
    );
  }

  static void release(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSPlaceholderValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSPointerArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPointerArray extends Struct<NSPointerArray> {
  factory NSPointerArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSPointerArray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPointerArray").cast<NSPointerArray>();
  }

  static void addPointer(
    Pointer<NSPointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addPointer:"),
      arg,
    );
  }

  static Pointer<Void> allObjects(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allObjects"),
    );
  }

  static void compact(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("compact"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPointerArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static int countByEnumeratingWithState(
    Pointer<NSPointerArray> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> objects,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("countByEnumeratingWithState:objects:count:"),
      arg,
      objects,
      count,
    );
  }

  static void encodeWithCoder(
    Pointer<NSPointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSPointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static Pointer<Void> initWithPointerFunctions(
    Pointer<NSPointerArray> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPointerFunctions:"),
      arg,
    );
  }

  static void insertPointer(
    Pointer<NSPointerArray> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertPointer:atIndex:"),
      arg,
      atIndex,
    );
  }

  static Pointer<Void> mutableArray(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableArray"),
    );
  }

  static Pointer<Void> pointerAtIndex(
    Pointer<NSPointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("pointerAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> pointerFunctions(
    Pointer<NSPointerArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointerFunctions"),
    );
  }

  static void removePointerAtIndex(
    Pointer<NSPointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removePointerAtIndex:"),
      arg,
    );
  }

  static void replacePointerAtIndex(
    Pointer<NSPointerArray> _self,
    int arg, {
    @required Pointer<Void> withPointer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replacePointerAtIndex:withPointer:"),
      arg,
      withPointer,
    );
  }

  static void setCount(
    Pointer<NSPointerArray> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setCount:"),
      arg,
    );
  }
}

/// Objective-C class _NSPointerFunctions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPointerFunctions extends Struct<NSPointerFunctions> {
  factory NSPointerFunctions._() {
    throw UnimplementedError();
  }
  static Pointer<NSPointerFunctions> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPointerFunctions").cast<NSPointerFunctions>();
  }

  static Pointer<Pointer<Void>> acquireFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("acquireFunction"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> descriptionFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionFunction"),
    );
  }

  static Pointer<Pointer<Void>> hashFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("hashFunction"),
    );
  }

  static Pointer<Void> initWithOptions(
    Pointer<NSPointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOptions:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> isEqualFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("isEqualFunction"),
    );
  }

  static Pointer<Pointer<Void>> relinquishFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("relinquishFunction"),
    );
  }

  static void setAcquireFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcquireFunction:"),
      arg,
    );
  }

  static void setDescriptionFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDescriptionFunction:"),
      arg,
    );
  }

  static void setHashFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setHashFunction:"),
      arg,
    );
  }

  static void setIsEqualFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setIsEqualFunction:"),
      arg,
    );
  }

  static void setRelinquishFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRelinquishFunction:"),
      arg,
    );
  }

  static void setSizeFunction(
    Pointer<NSPointerFunctions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSizeFunction:"),
      arg,
    );
  }

  static void setUsesStrongWriteBarrier(
    Pointer<NSPointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesStrongWriteBarrier:"),
      arg,
    );
  }

  static void setUsesWeakReadAndWriteBarriers(
    Pointer<NSPointerFunctions> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setUsesWeakReadAndWriteBarriers:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> sizeFunction(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sizeFunction"),
    );
  }

  static int usesStrongWriteBarrier(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesStrongWriteBarrier"),
    );
  }

  static int usesWeakReadAndWriteBarriers(
    Pointer<NSPointerFunctions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesWeakReadAndWriteBarriers"),
    );
  }
}

/// Objective-C class _NSPort_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPort extends Struct<NSPort> {
  factory NSPort._() {
    throw UnimplementedError();
  }
  static Pointer<NSPort> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPort").cast<NSPort>();
  }

  static void addConnection(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toRunLoop,
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addConnection:toRunLoop:forMode:"),
      arg,
      toRunLoop,
      forMode,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> classForPortCoder(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForPortCoder"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPort> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithMachPort(
    Pointer<NSPort> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithMachPort:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isValid(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static int machPort(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("machPort"),
    );
  }

  static void removeConnection(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fromRunLoop,
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeConnection:fromRunLoop:forMode:"),
      arg,
      fromRunLoop,
      forMode,
    );
  }

  static void removeFromRunLoop(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> replacementObjectForCoder(
    Pointer<NSPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForCoder:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int reservedSpaceLength(
    Pointer<NSPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("reservedSpaceLength"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static int sendBeforeDate$msgid$components$from$reserved$(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required int msgid,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:msgid:components:from:reserved:"),
      arg,
      msgid,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeDate$components$from$reserved$(
    Pointer<NSPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:components:from:reserved:"),
      arg,
      components,
      from,
      reserved,
    );
  }

  static void setDelegate(
    Pointer<NSPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

/// Objective-C class _NSPortCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPortCoder extends Struct<NSPortCoder> {
  factory NSPortCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSPortCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPortCoder").cast<NSPortCoder>();
  }

  static Pointer<Void> connection(
    Pointer<NSPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static Pointer<Void> decodePortObject(
    Pointer<NSPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePortObject"),
    );
  }

  static void dispatch(
    Pointer<NSPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dispatch"),
    );
  }

  static void encodePortObject(
    Pointer<NSPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePortObject:"),
      arg,
    );
  }

  static Pointer<Void> initWithReceivePort(
    Pointer<NSPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> sendPort,
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReceivePort:sendPort:components:"),
      arg,
      sendPort,
      components,
    );
  }

  static int isBycopy(
    Pointer<NSPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBycopy"),
    );
  }

  static int isByref(
    Pointer<NSPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isByref"),
    );
  }
}

/// Objective-C class _NSPortMessage_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPortMessage extends Struct<NSPortMessage> {
  factory NSPortMessage._() {
    throw UnimplementedError();
  }
  static Pointer<NSPortMessage> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPortMessage").cast<NSPortMessage>();
  }

  static Pointer<Void> components(
    Pointer<NSPortMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("components"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPortMessage> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSPortMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithMachMessage(
    Pointer<NSPortMessage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMachMessage:"),
      arg,
    );
  }

  static Pointer<Void> initWithReceivePort(
    Pointer<NSPortMessage> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> sendPort,
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReceivePort:sendPort:components:"),
      arg,
      sendPort,
      components,
    );
  }

  static Pointer<Void> initWithSendPort(
    Pointer<NSPortMessage> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> receivePort,
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSendPort:receivePort:components:"),
      arg,
      receivePort,
      components,
    );
  }

  static int msgid(
    Pointer<NSPortMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("msgid"),
    );
  }

  static Pointer<Void> receivePort(
    Pointer<NSPortMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("receivePort"),
    );
  }

  static int sendBeforeDate(
    Pointer<NSPortMessage> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:"),
      arg,
    );
  }

  static Pointer<Void> sendPort(
    Pointer<NSPortMessage> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sendPort"),
    );
  }

  static void setMsgid(
    Pointer<NSPortMessage> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_void(
      _self,
      _objc.getSelector("setMsgid:"),
      arg,
    );
  }
}

/// Objective-C class _NSPortNameServer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPortNameServer extends Struct<NSPortNameServer> {
  factory NSPortNameServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSPortNameServer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPortNameServer").cast<NSPortNameServer>();
  }

  static Pointer<Void> portForName$host$(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> host,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:host:"),
      arg,
      host,
    );
  }

  static Pointer<Void> portForName$(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:"),
      arg,
    );
  }

  static Pointer<Void> portForName$onHost$(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onHost,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:onHost:"),
      arg,
      onHost,
    );
  }

  static int registerPort$name$(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerPort:name:"),
      arg,
      name,
    );
  }

  static int registerPort$forName$(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerPort:forName:"),
      arg,
      forName,
    );
  }

  static int removePortForName(
    Pointer<NSPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removePortForName:"),
      arg,
    );
  }
}

/// Objective-C class _NSPositionalSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPositionalSpecifier extends Struct<NSPositionalSpecifier> {
  factory NSPositionalSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSPositionalSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPositionalSpecifier")
        .cast<NSPositionalSpecifier>();
  }

  static void dealloc(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPositionalSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void evaluate(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("evaluate"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPositionalSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPosition(
    Pointer<NSPositionalSpecifier> _self,
    int arg, {
    @required Pointer<Void> objectSpecifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPosition:objectSpecifier:"),
      arg,
      objectSpecifier,
    );
  }

  static Pointer<Void> insertionContainer(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("insertionContainer"),
    );
  }

  static int insertionIndex(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("insertionIndex"),
    );
  }

  static Pointer<Void> insertionKey(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("insertionKey"),
    );
  }

  static int insertionReplaces(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("insertionReplaces"),
    );
  }

  static Pointer<Void> objectSpecifier(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectSpecifier"),
    );
  }

  static int position(
    Pointer<NSPositionalSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("position"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSPositionalSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static void setInsertionClassDescription(
    Pointer<NSPositionalSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInsertionClassDescription:"),
      arg,
    );
  }
}

/// Objective-C class _NSPositionalSpecifierMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPositionalSpecifierMoreIVars
    extends Struct<NSPositionalSpecifierMoreIVars> {
  factory NSPositionalSpecifierMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSPositionalSpecifierMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPositionalSpecifierMoreIVars")
        .cast<NSPositionalSpecifierMoreIVars>();
  }
}

/// Objective-C class _NSPredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPredicate extends Struct<NSPredicate> {
  factory NSPredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSPredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPredicate").cast<NSPredicate>();
  }

  static void acceptVisitor(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject$(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:"),
      arg,
    );
  }

  static int evaluateWithObject$substitutionVariables$(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static Pointer<Void> generateMetadataDescription(
    Pointer<NSPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("generateMetadataDescription"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> predicateByAlsoMatchingNilValueForLeftExpression(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg, {
    @required int modifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "predicateByAlsoMatchingNilValueForLeftExpression:modifier:"),
      arg,
      modifier,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSPredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> predicateWithSubstitutionVariables(
    Pointer<NSPredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("predicateWithSubstitutionVariables:"),
      arg,
    );
  }
}

/// Objective-C class _NSPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPredicateOperator extends Struct<NSPredicateOperator> {
  factory NSPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPredicateOperator").cast<NSPredicateOperator>();
  }

  static void acceptVisitor(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$(
    Pointer<NSPredicateOperator> _self,
    int arg, {
    @required int modifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:"),
      arg,
      modifier,
    );
  }

  static Pointer<Void> initWithOperatorType$(
    Pointer<NSPredicateOperator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType$modifier$options$(
    Pointer<NSPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:options:"),
      arg,
      modifier,
      options,
    );
  }

  static int isEqual(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int modifier(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("modifier"),
    );
  }

  static int operatorType(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("operatorType"),
    );
  }

  static int options(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static int performOperationUsingObject(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSProcessInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProcessInfo extends Struct<NSProcessInfo> {
  factory NSProcessInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSProcessInfo> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProcessInfo").cast<NSProcessInfo>();
  }

  static int activeProcessorCount(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("activeProcessorCount"),
    );
  }

  static Pointer<Void> arguments(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static int automaticTerminationSupportEnabled(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("automaticTerminationSupportEnabled"),
    );
  }

  static Pointer<Void> beginActivityWithOptions(
    Pointer<NSProcessInfo> _self,
    int arg, {
    @required Pointer<Void> reason,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("beginActivityWithOptions:reason:"),
      arg,
      reason,
    );
  }

  static Pointer<Void> beginSuspensionOfSystemBehaviors(
    Pointer<NSProcessInfo> _self,
    int arg, {
    @required Pointer<Void> reason,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("beginSuspensionOfSystemBehaviors:reason:"),
      arg,
      reason,
    );
  }

  static void dealloc(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disableAutomaticTermination$(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("disableAutomaticTermination:"),
      arg,
    );
  }

  static void disableAutomaticTermination(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableAutomaticTermination"),
    );
  }

  static void disableSuddenTermination(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableSuddenTermination"),
    );
  }

  static void enableAutomaticTermination$(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enableAutomaticTermination:"),
      arg,
    );
  }

  static void enableAutomaticTermination(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableAutomaticTermination"),
    );
  }

  static void enableSuddenTermination(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableSuddenTermination"),
    );
  }

  static void endActivity(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("endActivity:"),
      arg,
    );
  }

  static void endSystemBehaviorSuspension(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("endSystemBehaviorSuspension:"),
      arg,
    );
  }

  static Pointer<Void> environment(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("environment"),
    );
  }

  static Pointer<Void> fullUserName(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fullUserName"),
    );
  }

  static Pointer<Void> globallyUniqueString(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("globallyUniqueString"),
    );
  }

  static Pointer<Void> hostName(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("hostName"),
    );
  }

  static int isLowPowerModeEnabled(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLowPowerModeEnabled"),
    );
  }

  static int isOperatingSystemAtLeastVersion(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOperatingSystemAtLeastVersion:"),
      arg,
    );
  }

  static int isTranslated(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTranslated"),
    );
  }

  static int operatingSystem(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("operatingSystem"),
    );
  }

  static Pointer<Void> operatingSystemName(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operatingSystemName"),
    );
  }

  static Pointer<Void> operatingSystemVersion(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operatingSystemVersion"),
    );
  }

  static Pointer<Void> operatingSystemVersionString(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("operatingSystemVersionString"),
    );
  }

  static void performActivityWithOptions$reason$block$(
    Pointer<NSProcessInfo> _self,
    int arg, {
    @required Pointer<Void> reason,
    @required Pointer<Void> block,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("performActivityWithOptions:reason:block:"),
      arg,
      reason,
      block,
    );
  }

  static void performActivityWithOptions$reason$usingBlock$(
    Pointer<NSProcessInfo> _self,
    int arg, {
    @required Pointer<Void> reason,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("performActivityWithOptions:reason:usingBlock:"),
      arg,
      reason,
      usingBlock,
    );
  }

  static void performExpiringActivityWithReason(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("performExpiringActivityWithReason:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static int physicalMemory(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("physicalMemory"),
    );
  }

  static int processIdentifier(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("processIdentifier"),
    );
  }

  static Pointer<Void> processName(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("processName"),
    );
  }

  static int processorCount(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("processorCount"),
    );
  }

  static void setArguments(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArguments:"),
      arg,
    );
  }

  static void setAutomaticTerminationSupportEnabled(
    Pointer<NSProcessInfo> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAutomaticTerminationSupportEnabled:"),
      arg,
    );
  }

  static void setProcessName(
    Pointer<NSProcessInfo> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProcessName:"),
      arg,
    );
  }

  static double systemUptime(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("systemUptime"),
    );
  }

  static int thermalState(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("thermalState"),
    );
  }

  static Pointer<Void> userHomeDirectory(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userHomeDirectory"),
    );
  }

  static Pointer<Void> userName(
    Pointer<NSProcessInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userName"),
    );
  }
}

/// Objective-C class _NSProgress_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProgress extends Struct<NSProgress> {
  factory NSProgress._() {
    throw UnimplementedError();
  }
  static Pointer<NSProgress> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProgress").cast<NSProgress>();
  }

  static void acknowledge(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("acknowledge"),
    );
  }

  static void acknowledgeWithSuccess(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("acknowledgeWithSuccess:"),
      arg,
    );
  }

  static Pointer<Void> acknowledgementHandlerForAppBundleIdentifier(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("acknowledgementHandlerForAppBundleIdentifier:"),
      arg,
    );
  }

  static void addChild(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required int withPendingUnitCount,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("addChild:withPendingUnitCount:"),
      arg,
      withPendingUnitCount,
    );
  }

  static void appWithBundleID(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required int didAcknowledgeWithSuccess,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("appWithBundleID:didAcknowledgeWithSuccess:"),
      arg,
      didAcknowledgeWithSuccess,
    );
  }

  static void becomeCurrentWithPendingUnitCount$(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("becomeCurrentWithPendingUnitCount:"),
      arg,
    );
  }

  static void becomeCurrentWithPendingUnitCount$inBlock$(
    Pointer<NSProgress> _self,
    int arg, {
    @required Pointer<Void> inBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("becomeCurrentWithPendingUnitCount:inBlock:"),
      arg,
      inBlock,
    );
  }

  static Pointer<Void> byteCompletedCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("byteCompletedCount"),
    );
  }

  static Pointer<Void> byteTotalCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("byteTotalCount"),
    );
  }

  static void cancel(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> cancellationHandler(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cancellationHandler"),
    );
  }

  static int completedUnitCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("completedUnitCount"),
    );
  }

  static void dealloc(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> estimatedTimeRemaining(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("estimatedTimeRemaining"),
    );
  }

  static Pointer<Void> fileCompletedCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileCompletedCount"),
    );
  }

  static Pointer<Void> fileOperationKind(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileOperationKind"),
    );
  }

  static Pointer<Void> fileTotalCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileTotalCount"),
    );
  }

  static Pointer<Void> fileURL(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileURL"),
    );
  }

  static double fractionCompleted(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("fractionCompleted"),
    );
  }

  static void handleAcknowledgementByAppWithBundleIdentifer(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "handleAcknowledgementByAppWithBundleIdentifer:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void handleAcknowledgementByAppWithBundleIdentifier(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "handleAcknowledgementByAppWithBundleIdentifier:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static Pointer<Void> init(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithParent$bundleID$andPhase$(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> bundleID,
    @required int andPhase,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithParent:bundleID:andPhase:"),
      arg,
      bundleID,
      andPhase,
    );
  }

  static Pointer<Void> initWithParent$userInfo$(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> userInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithParent:userInfo:"),
      arg,
      userInfo,
    );
  }

  static int installPhase(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("installPhase"),
    );
  }

  static Pointer<Void> installPhaseString(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("installPhaseString"),
    );
  }

  static int installState(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("installState"),
    );
  }

  static int isCancellable(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCancellable"),
    );
  }

  static int isCancelled(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCancelled"),
    );
  }

  static int isFinished(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static int isIndeterminate(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isIndeterminate"),
    );
  }

  static int isOld(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOld"),
    );
  }

  static int isPausable(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPausable"),
    );
  }

  static int isPaused(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPaused"),
    );
  }

  static int isPrioritizable(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPrioritizable"),
    );
  }

  static Pointer<Void> kind(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("kind"),
    );
  }

  static Pointer<Void> localizedAdditionalDescription(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedAdditionalDescription"),
    );
  }

  static Pointer<Void> localizedDescription(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedDescription"),
    );
  }

  static int ownedDictionaryCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("ownedDictionaryCount"),
    );
  }

  static Pointer<Void> ownedDictionaryKeyEnumerator(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ownedDictionaryKeyEnumerator"),
    );
  }

  static Pointer<Void> ownedDictionaryObjectForKey(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("ownedDictionaryObjectForKey:"),
      arg,
    );
  }

  static void pause(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("pause"),
    );
  }

  static Pointer<Void> pausingHandler(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pausingHandler"),
    );
  }

  static void performAsCurrentWithPendingUnitCount(
    Pointer<NSProgress> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("performAsCurrentWithPendingUnitCount:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static Pointer<Void> prioritizationHandler(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prioritizationHandler"),
    );
  }

  static void prioritize(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("prioritize"),
    );
  }

  static void publish(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("publish"),
    );
  }

  static void resignCurrent(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resignCurrent"),
    );
  }

  static void resume(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static Pointer<Void> resumingHandler(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resumingHandler"),
    );
  }

  static void setAcknowledgementHandler(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forAppBundleIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAcknowledgementHandler:forAppBundleIdentifier:"),
      arg,
      forAppBundleIdentifier,
    );
  }

  static void setByteCompletedCount(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setByteCompletedCount:"),
      arg,
    );
  }

  static void setByteTotalCount(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setByteTotalCount:"),
      arg,
    );
  }

  static void setCancellable(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCancellable:"),
      arg,
    );
  }

  static void setCancellationHandler(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCancellationHandler:"),
      arg,
    );
  }

  static void setCompletedUnitCount(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setCompletedUnitCount:"),
      arg,
    );
  }

  static void setEstimatedTimeRemaining(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEstimatedTimeRemaining:"),
      arg,
    );
  }

  static void setFileCompletedCount(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileCompletedCount:"),
      arg,
    );
  }

  static void setFileOperationKind(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileOperationKind:"),
      arg,
    );
  }

  static void setFileTotalCount(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileTotalCount:"),
      arg,
    );
  }

  static void setFileURL(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFileURL:"),
      arg,
    );
  }

  static void setInstallPhase(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setInstallPhase:"),
      arg,
    );
  }

  static void setInstallState(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setInstallState:"),
      arg,
    );
  }

  static void setKind(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setKind:"),
      arg,
    );
  }

  static void setLocalizedAdditionalDescription(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalizedAdditionalDescription:"),
      arg,
    );
  }

  static void setLocalizedDescription(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocalizedDescription:"),
      arg,
    );
  }

  static void setPausable(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPausable:"),
      arg,
    );
  }

  static void setPausingHandler(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPausingHandler:"),
      arg,
    );
  }

  static void setPrioritizable(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setPrioritizable:"),
      arg,
    );
  }

  static void setPrioritizationHandler(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPrioritizationHandler:"),
      arg,
    );
  }

  static void setResumingHandler(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setResumingHandler:"),
      arg,
    );
  }

  static void setThroughput(
    Pointer<NSProgress> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setThroughput:"),
      arg,
    );
  }

  static void setTotalUnitCount(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setTotalUnitCount:"),
      arg,
    );
  }

  static void setUserInfoObject(
    Pointer<NSProgress> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfoObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void set_adoptChildUserInfo(
    Pointer<NSProgress> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("set_adoptChildUserInfo:"),
      arg,
    );
  }

  static Pointer<Void> throughput(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("throughput"),
    );
  }

  static int totalUnitCount(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("totalUnitCount"),
    );
  }

  static void unpublish(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unpublish"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSProgress> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSProgressPublisherProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProgressPublisherProxy extends Struct<NSProgressPublisherProxy> {
  factory NSProgressPublisherProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSProgressPublisherProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSProgressPublisherProxy")
        .cast<NSProgressPublisherProxy>();
  }

  static void appWithBundleID(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg, {
    @required int didAcknowledgeWithSuccess,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("appWithBundleID:didAcknowledgeWithSuccess:"),
      arg,
      didAcknowledgeWithSuccess,
    );
  }

  static void cancel(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static Pointer<Void> category(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("category"),
    );
  }

  static void dealloc(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithIndenting:"),
      arg,
    );
  }

  static Pointer<Void> initWithForwarder(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onConnection,
    @required Pointer<Void> publisherID,
    @required Pointer<Void> values,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithForwarder:onConnection:publisherID:values:"),
      arg,
      onConnection,
      publisherID,
      values,
    );
  }

  static int isFromConnection(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFromConnection:"),
      arg,
    );
  }

  static Pointer<Void> itemLocation(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemLocation"),
    );
  }

  static void observeUserInfoValue(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeUserInfoValue:forKey:"),
      arg,
      forKey,
    );
  }

  static void observeValues(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKeys,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observeValues:forKeys:"),
      arg,
      forKeys,
    );
  }

  static void pause(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("pause"),
    );
  }

  static void prioritize(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("prioritize"),
    );
  }

  static Pointer<Void> publisherID(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publisherID"),
    );
  }

  static void resume(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static void setCategory(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCategory:"),
      arg,
    );
  }

  static void setItemLocation(
    Pointer<NSProgressPublisherProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemLocation:"),
      arg,
    );
  }

  static Pointer<Void> values(
    Pointer<NSProgressPublisherProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("values"),
    );
  }
}

/// Objective-C class _NSProgressRegistrar_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProgressRegistrar extends Struct<NSProgressRegistrar> {
  factory NSProgressRegistrar._() {
    throw UnimplementedError();
  }
  static Pointer<NSProgressRegistrar> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProgressRegistrar").cast<NSProgressRegistrar>();
  }

  static void addPublisher(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forID,
    @required Pointer<Void> acknowledgementAppBundleIDs,
    @required Pointer<Void> category,
    @required Pointer<Void> fileURL,
    @required Pointer<Void> initialValues,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addPublisher:forID:acknowledgementAppBundleIDs:category:fileURL:initialValues:completionHandler:"),
      arg,
      forID,
      acknowledgementAppBundleIDs,
      category,
      fileURL,
      initialValues,
      completionHandler,
    );
  }

  static void addSubscriber$forID$appBundleID$category$completionHandler$(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forID,
    @required Pointer<Void> appBundleID,
    @required Pointer<Void> category,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addSubscriber:forID:appBundleID:category:completionHandler:"),
      arg,
      forID,
      appBundleID,
      category,
      completionHandler,
    );
  }

  static void addSubscriber$forID$appBundleID$fileURL$completionHandler$(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forID,
    @required Pointer<Void> appBundleID,
    @required Pointer<Void> fileURL,
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "addSubscriber:forID:appBundleID:fileURL:completionHandler:"),
      arg,
      forID,
      appBundleID,
      fileURL,
      completionHandler,
    );
  }

  static void dealloc(
    Pointer<NSProgressRegistrar> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithQueue(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> rootFileAccessNode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithQueue:rootFileAccessNode:"),
      arg,
      rootFileAccessNode,
    );
  }

  static int listener(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }

  static void observePublisherForID(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> values,
    @required Pointer<Void> forKeys,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observePublisherForID:values:forKeys:"),
      arg,
      values,
      forKeys,
    );
  }

  static void observePublisherUserInfoForID(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observePublisherUserInfoForID:value:forKey:"),
      arg,
      value,
      forKey,
    );
  }

  static void removePublisherForID(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePublisherForID:"),
      arg,
    );
  }

  static void removeSubscriberForID(
    Pointer<NSProgressRegistrar> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeSubscriberForID:"),
      arg,
    );
  }
}

/// Objective-C class _NSProgressSubscriberProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProgressSubscriberProxy extends Struct<NSProgressSubscriberProxy> {
  factory NSProgressSubscriberProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSProgressSubscriberProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSProgressSubscriberProxy")
        .cast<NSProgressSubscriberProxy>();
  }

  static void addPublisher(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forID,
    @required Pointer<Void> withValues,
    @required int isOld,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("addPublisher:forID:withValues:isOld:"),
      arg,
      forID,
      withValues,
      isOld,
    );
  }

  static Pointer<Void> appBundleID(
    Pointer<NSProgressSubscriberProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("appBundleID"),
    );
  }

  static Pointer<Void> category(
    Pointer<NSProgressSubscriberProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("category"),
    );
  }

  static void dealloc(
    Pointer<NSProgressSubscriberProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSProgressSubscriberProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionWithIndenting(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionWithIndenting:"),
      arg,
    );
  }

  static Pointer<Void> initWithForwarder(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> onConnection,
    @required Pointer<Void> subscriberID,
    @required Pointer<Void> appBundleID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithForwarder:onConnection:subscriberID:appBundleID:"),
      arg,
      onConnection,
      subscriberID,
      appBundleID,
    );
  }

  static int isFromConnection(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFromConnection:"),
      arg,
    );
  }

  static Pointer<Void> itemLocation(
    Pointer<NSProgressSubscriberProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemLocation"),
    );
  }

  static void observePublisherForID(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> values,
    @required Pointer<Void> forKeys,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observePublisherForID:values:forKeys:"),
      arg,
      values,
      forKeys,
    );
  }

  static void observePublisherUserInfoForID(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("observePublisherUserInfoForID:value:forKey:"),
      arg,
      value,
      forKey,
    );
  }

  static void removePublisherForID(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removePublisherForID:"),
      arg,
    );
  }

  static void setCategory(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCategory:"),
      arg,
    );
  }

  static void setItemLocation(
    Pointer<NSProgressSubscriberProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setItemLocation:"),
      arg,
    );
  }
}

/// Objective-C class _NSProgressValues_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProgressValues extends Struct<NSProgressValues> {
  factory NSProgressValues._() {
    throw UnimplementedError();
  }
  static Pointer<NSProgressValues> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProgressValues").cast<NSProgressValues>();
  }

  static int completedUnitCount(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("completedUnitCount"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSProgressValues> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSProgressValues> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static double fractionCompleted(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("fractionCompleted"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSProgressValues> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isFinished(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static int isIndeterminate(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isIndeterminate"),
    );
  }

  static Pointer<Void> overallFraction(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("overallFraction"),
    );
  }

  static void setCompletedUnitCount(
    Pointer<NSProgressValues> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setCompletedUnitCount:"),
      arg,
    );
  }

  static void setFinished(
    Pointer<NSProgressValues> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFinished:"),
      arg,
    );
  }

  static void setFractionCompleted(
    Pointer<NSProgressValues> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setFractionCompleted:"),
      arg,
    );
  }

  static void setIndeterminate(
    Pointer<NSProgressValues> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setIndeterminate:"),
      arg,
    );
  }

  static void setTotalUnitCount(
    Pointer<NSProgressValues> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setTotalUnitCount:"),
      arg,
    );
  }

  static int totalUnitCount(
    Pointer<NSProgressValues> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("totalUnitCount"),
    );
  }
}

/// Objective-C class _NSPropertyListSerialization_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPropertyListSerialization extends Struct<NSPropertyListSerialization> {
  factory NSPropertyListSerialization._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertyListSerialization> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSPropertyListSerialization")
        .cast<NSPropertyListSerialization>();
  }

  static Pointer<Void> init(
    Pointer<NSPropertyListSerialization> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSPropertySpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPropertySpecifier extends Struct<NSPropertySpecifier> {
  factory NSPropertySpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSPropertySpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPropertySpecifier").cast<NSPropertySpecifier>();
  }
}

/// Objective-C class _NSProtocolChecker_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProtocolChecker extends Struct<NSProtocolChecker> {
  factory NSProtocolChecker._() {
    throw UnimplementedError();
  }
  static Pointer<NSProtocolChecker> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProtocolChecker").cast<NSProtocolChecker>();
  }

  static int conformsToProtocol(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("conformsToProtocol:"),
      arg,
    );
  }

  static void doesNotRecognizeSelector(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("doesNotRecognizeSelector:"),
      arg,
    );
  }

  static void forwardInvocation(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> forwardingTargetForSelector(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("forwardingTargetForSelector:"),
      arg,
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> protocol,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:protocol:"),
      arg,
      protocol,
    );
  }

  static Pointer<Pointer<Void>> methodDescriptionForSelector(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodDescriptionForSelector:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static Pointer<Void> protocol(
    Pointer<NSProtocolChecker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protocol"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int respondsToSelector(
    Pointer<NSProtocolChecker> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("respondsToSelector:"),
      arg,
    );
  }

  static Pointer<Void> target(
    Pointer<NSProtocolChecker> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("target"),
    );
  }
}

/// Objective-C class _NSProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSProxy extends Struct<NSProxy> {
  factory NSProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSProxy").cast<NSProxy>();
  }

  static Pointer<Void> $class(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("class"),
    );
  }

  static int allowsWeakReference(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsWeakReference"),
    );
  }

  static Pointer<Void> autorelease(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static int conformsToProtocol(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("conformsToProtocol:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void doesNotRecognizeSelector(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("doesNotRecognizeSelector:"),
      arg,
    );
  }

  static void finalize(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static void forwardInvocation(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> forwardingTargetForSelector(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("forwardingTargetForSelector:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int isEqual(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isFault(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFault"),
    );
  }

  static int isKindOfClass(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isKindOfClass:"),
      arg,
    );
  }

  static int isMemberOfClass(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMemberOfClass:"),
      arg,
    );
  }

  static int isNSArray__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSArray__"),
    );
  }

  static int isNSCFConstantString__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSCFConstantString__"),
    );
  }

  static int isNSData__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSData__"),
    );
  }

  static int isNSDate__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSDate__"),
    );
  }

  static int isNSDictionary__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSDictionary__"),
    );
  }

  static int isNSNumber__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSNumber__"),
    );
  }

  static int isNSObject__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSObject__"),
    );
  }

  static int isNSOrderedSet__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSOrderedSet__"),
    );
  }

  static int isNSSet__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSSet__"),
    );
  }

  static int isNSString__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSString__"),
    );
  }

  static int isNSTimeZone__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSTimeZone__"),
    );
  }

  static int isNSValue__(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSValue__"),
    );
  }

  static int isProxy(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isProxy"),
    );
  }

  static Pointer<Pointer<Void>> methodDescriptionForSelector(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodDescriptionForSelector:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static Pointer<Void> performSelector$(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("performSelector:"),
      arg,
    );
  }

  static Pointer<Void> performSelector$withObject$(
    Pointer<NSProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("performSelector:withObject:"),
      arg,
      withObject,
    );
  }

  static Pointer<Void> performSelector$withObject$withObject$(
    Pointer<NSProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
    @required Pointer<Void> name2,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("performSelector:withObject:withObject:"),
      arg,
      withObject,
      name2,
    );
  }

  static void release(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static int respondsToSelector(
    Pointer<NSProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("respondsToSelector:"),
      arg,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static int retainWeakReference(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("retainWeakReference"),
    );
  }

  static Pointer<Void> self(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("self"),
    );
  }

  static Pointer<Void> superclass(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("superclass"),
    );
  }

  static Pointer<Pointer<Void>> zone(
    Pointer<NSProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zone"),
    );
  }
}

/// Objective-C class _NSPurgeableData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSPurgeableData extends Struct<NSPurgeableData> {
  factory NSPurgeableData._() {
    throw UnimplementedError();
  }
  static Pointer<NSPurgeableData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSPurgeableData").cast<NSPurgeableData>();
  }

  static int beginContentAccess(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("beginContentAccess"),
    );
  }

  static Pointer<Void> bytes(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static void dealloc(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void discardContentIfPossible(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("discardContentIfPossible"),
    );
  }

  static void endContentAccess(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endContentAccess"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSPurgeableData> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int copy,
    @required Pointer<Void> deallocator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithBytes:length:copy:deallocator:"),
      arg,
      length,
      copy,
      deallocator,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSPurgeableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static int isContentDiscarded(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isContentDiscarded"),
    );
  }

  static int length(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static Pointer<Void> mutableBytes(
    Pointer<NSPurgeableData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("mutableBytes"),
    );
  }

  static void setLength(
    Pointer<NSPurgeableData> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLength:"),
      arg,
    );
  }
}

/// Objective-C class _NSQuitCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSQuitCommand extends Struct<NSQuitCommand> {
  factory NSQuitCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSQuitCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSQuitCommand").cast<NSQuitCommand>();
  }

  static int saveOptions(
    Pointer<NSQuitCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("saveOptions"),
    );
  }
}

/// Objective-C class _NSQuoteCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSQuoteCheckingResult extends Struct<NSQuoteCheckingResult> {
  factory NSQuoteCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSQuoteCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSQuoteCheckingResult")
        .cast<NSQuoteCheckingResult>();
  }

  static int resultType(
    Pointer<NSQuoteCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSRLEArray_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRLEArray extends Struct<NSRLEArray> {
  factory NSRLEArray._() {
    throw UnimplementedError();
  }
  static Pointer<NSRLEArray> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRLEArray").cast<NSRLEArray>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSRLEArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSRLEArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSRLEArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSRLEArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void finalize(
    Pointer<NSRLEArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finalize"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSRLEArray> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithRefCountedRunArray(
    Pointer<NSRLEArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRefCountedRunArray:"),
      arg,
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSRLEArray> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> objectAtIndex$effectiveRange$(
    Pointer<NSRLEArray> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:effectiveRange:"),
      arg,
      effectiveRange,
    );
  }

  static Pointer<Void> objectAtIndex$effectiveRange$runIndex$(
    Pointer<NSRLEArray> _self,
    int arg, {
    @required Pointer<Pointer<Void>> effectiveRange,
    @required Pointer<Uint64> runIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:effectiveRange:runIndex:"),
      arg,
      effectiveRange,
      runIndex,
    );
  }

  static Pointer<Void> objectAtRunIndex(
    Pointer<NSRLEArray> _self,
    int arg, {
    @required Pointer<Uint64> length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("objectAtRunIndex:length:"),
      arg,
      length,
    );
  }
}

/// Objective-C class _NSRTFD_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRTFD extends Struct<NSRTFD> {
  factory NSRTFD._() {
    throw UnimplementedError();
  }
  static Pointer<NSRTFD> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRTFD").cast<NSRTFD>();
  }

  static Pointer<Void> addCommon(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
    @required Pointer<Void> value,
    @required Pointer<Pointer<Void>> zone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addCommon:docInfo:value:zone:"),
      arg,
      docInfo,
      value,
      zone,
    );
  }

  static Pointer<Void> addData(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("addData:name:"),
      arg,
      name,
    );
  }

  static int addDirNamed(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int lazy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Uint64(
      _self,
      _objc.getSelector("addDirNamed:lazy:"),
      arg,
      lazy,
    );
  }

  static Pointer<Void> addFile(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addFile:"),
      arg,
    );
  }

  static int addFileNamed(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fileAttributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("addFileNamed:fileAttributes:"),
      arg,
      fileAttributes,
    );
  }

  static Pointer<Void> addLink(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("addLink:"),
      arg,
    );
  }

  static Pointer<Void> copy(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("copy"),
    );
  }

  static Pointer<Void> copy$into$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> into,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("copy:into:"),
      arg,
      into,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSRTFD> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static Pointer<Void> createRandomKey(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createRandomKey:"),
      arg,
    );
  }

  static Pointer<Void> createUniqueKey(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createUniqueKey:"),
      arg,
    );
  }

  static Pointer<Void> dataForFile(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dataForFile:"),
      arg,
    );
  }

  static Pointer<Void> dataRepresentation(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dataRepresentation"),
    );
  }

  static void dealloc(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> freeSerialized(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("freeSerialized:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> getDirInfo(
    Pointer<NSRTFD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("getDirInfo:"),
      arg,
    );
  }

  static Pointer<Void> getDocument(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("getDocument:docInfo:"),
      arg,
      docInfo,
    );
  }

  static Pointer<Void> init(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int initFromDocument(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("initFromDocument:"),
      arg,
    );
  }

  static Pointer<Void> initFromElement(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ofDocument,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initFromElement:ofDocument:"),
      arg,
      ofDocument,
    );
  }

  static Pointer<Void> initFromSerialized(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initFromSerialized:"),
      arg,
    );
  }

  static int initUnixFile(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("initUnixFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithCapacity(
    Pointer<NSRTFD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCapacity:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfFile(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithDataRepresentation(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDataRepresentation:"),
      arg,
    );
  }

  static Pointer<Void> initWithDictionary$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDictionary:"),
      arg,
    );
  }

  static Pointer<Void> initWithDictionary$copyItems$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int copyItems,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithDictionary:copyItems:"),
      arg,
      copyItems,
    );
  }

  static Pointer<Void> initWithObjects(
    Pointer<NSRTFD> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> forKeys,
    @required int count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithObjects:forKeys:count:"),
      arg,
      forKeys,
      count,
    );
  }

  static Pointer<Void> initWithPasteboardDataRepresentation(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPasteboardDataRepresentation:"),
      arg,
    );
  }

  static int insertItem(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> path,
    @required Pointer<Void> dirInfo,
    @required Pointer<Pointer<Void>> zone,
    @required Pointer<Void> plist,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("insertItem:path:dirInfo:zone:plist:"),
      arg,
      path,
      dirInfo,
      zone,
      plist,
    );
  }

  static int internalSaveTo$removeBackup$errorHandler$temp$backup$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int removeBackup,
    @required Pointer<Void> errorHandler,
    @required Pointer<Void> temp,
    @required Pointer<Void> backup,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_p_returns_Uint64(
      _self,
      _objc
          .getSelector("internalSaveTo:removeBackup:errorHandler:temp:backup:"),
      arg,
      removeBackup,
      errorHandler,
      temp,
      backup,
    );
  }

  static int internalSaveTo$removeBackup$errorHandler$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int removeBackup,
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector("internalSaveTo:removeBackup:errorHandler:"),
      arg,
      removeBackup,
      errorHandler,
    );
  }

  static int internalWritePath(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> errorHandler,
    @required int remapContents,
    @required Pointer<Void> hardLinkPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "internalWritePath:errorHandler:remapContents:hardLinkPath:"),
      arg,
      errorHandler,
      remapContents,
      hardLinkPath,
    );
  }

  static int isPackage(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isPackage"),
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> nameFromPath(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> extra,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("nameFromPath:extra:"),
      arg,
      extra,
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static Pointer<Void> pasteboardDataRepresentation(
    Pointer<NSRTFD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pasteboardDataRepresentation"),
    );
  }

  static int realAddDirNamed(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("realAddDirNamed:"),
      arg,
    );
  }

  static Pointer<Void> removeFile(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("removeFile:"),
      arg,
    );
  }

  static void removeObjectForKey(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> replaceFile$path$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> path,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("replaceFile:path:"),
      arg,
      path,
    );
  }

  static Pointer<Void> replaceFile$data$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> data,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("replaceFile:data:"),
      arg,
      data,
    );
  }

  static int saveToDocument(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required int removeBackup,
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector("saveToDocument:removeBackup:errorHandler:"),
      arg,
      removeBackup,
      errorHandler,
    );
  }

  static Pointer<Void> serialize(
    Pointer<NSRTFD> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Uint64> length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("serialize:length:"),
      arg,
      length,
    );
  }

  static void setObject(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> setPackage(
    Pointer<NSRTFD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("setPackage:"),
      arg,
    );
  }

  static Pointer<Void> tmpNameFromPath$extension$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> extension,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("tmpNameFromPath:extension:"),
      arg,
      extension,
    );
  }

  static Pointer<Void> tmpNameFromPath$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("tmpNameFromPath:"),
      arg,
    );
  }

  static Pointer<Void> uniqueKey(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueKey:"),
      arg,
    );
  }

  static int validatePath(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> ignore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("validatePath:ignore:"),
      arg,
      ignore,
    );
  }

  static int writePath$docInfo$errorHandler$remapContents$hardLinkPath$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
    @required Pointer<Void> errorHandler,
    @required int remapContents,
    @required Pointer<Void> hardLinkPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "writePath:docInfo:errorHandler:remapContents:hardLinkPath:"),
      arg,
      docInfo,
      errorHandler,
      remapContents,
      hardLinkPath,
    );
  }

  static int
      writePath$docInfo$errorHandler$remapContents$markBusy$hardLinkPath$(
    Pointer<NSRTFD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> docInfo,
    @required Pointer<Void> errorHandler,
    @required int remapContents,
    @required int markBusy,
    @required Pointer<Void> hardLinkPath,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "writePath:docInfo:errorHandler:remapContents:markBusy:hardLinkPath:"),
      arg,
      docInfo,
      errorHandler,
      remapContents,
      markBusy,
      hardLinkPath,
    );
  }
}

/// Objective-C class _NSRandomSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRandomSpecifier extends Struct<NSRandomSpecifier> {
  factory NSRandomSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSRandomSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRandomSpecifier").cast<NSRandomSpecifier>();
  }
}

/// Objective-C class _NSRangeSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRangeSpecifier extends Struct<NSRangeSpecifier> {
  factory NSRangeSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSRangeSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRangeSpecifier").cast<NSRangeSpecifier>();
  }

  static void dealloc(
    Pointer<NSRangeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> endSpecifier(
    Pointer<NSRangeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endSpecifier"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$startSpecifier$endSpecifier$(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required Pointer<Void> startSpecifier,
    @required Pointer<Void> endSpecifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:"),
      arg,
      containerSpecifier,
      key,
      startSpecifier,
      endSpecifier,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static void setEndSpecifier(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndSpecifier:"),
      arg,
    );
  }

  static void setStartSpecifier(
    Pointer<NSRangeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStartSpecifier:"),
      arg,
    );
  }

  static Pointer<Void> startSpecifier(
    Pointer<NSRangeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("startSpecifier"),
    );
  }
}

/// Objective-C class _NSRecursiveLock_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRecursiveLock extends Struct<NSRecursiveLock> {
  factory NSRecursiveLock._() {
    throw UnimplementedError();
  }
  static Pointer<NSRecursiveLock> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRecursiveLock").cast<NSRecursiveLock>();
  }

  static void dealloc(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isLocking(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLocking"),
    );
  }

  static void lock(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("lock"),
    );
  }

  static int lockBeforeDate(
    Pointer<NSRecursiveLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("lockBeforeDate:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static void setName(
    Pointer<NSRecursiveLock> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static int tryLock(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("tryLock"),
    );
  }

  static void unlock(
    Pointer<NSRecursiveLock> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("unlock"),
    );
  }
}

/// Objective-C class _NSReduceObservationTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSReduceObservationTransformer
    extends Struct<NSReduceObservationTransformer> {
  factory NSReduceObservationTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSReduceObservationTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSReduceObservationTransformer")
        .cast<NSReduceObservationTransformer>();
  }

  static void dealloc(
    Pointer<NSReduceObservationTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void finishObserving(
    Pointer<NSReduceObservationTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("finishObserving"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSReduceObservationTransformer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> initialValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:initialValue:"),
      arg,
      initialValue,
    );
  }
}

/// Objective-C class _NSRegularExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRegularExpression extends Struct<NSRegularExpression> {
  factory NSRegularExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSRegularExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRegularExpression").cast<NSRegularExpression>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSRegularExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void enumerateMatchesInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateMatchesInString:options:range:usingBlock:"),
      arg,
      options,
      range,
      usingBlock,
    );
  }

  static Pointer<Void> firstMatchInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("firstMatchInString:options:range:"),
      arg,
      options,
      range,
    );
  }

  static int hash(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPattern(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPattern:options:error:"),
      arg,
      options,
      error,
    );
  }

  static int isEqual(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> matchesInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("matchesInString:options:range:"),
      arg,
      options,
      range,
    );
  }

  static int numberOfCaptureGroups(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfCaptureGroups"),
    );
  }

  static int numberOfMatchesInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfMatchesInString:options:range:"),
      arg,
      options,
      range,
    );
  }

  static int options(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }

  static Pointer<Void> pattern(
    Pointer<NSRegularExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pattern"),
    );
  }

  static Pointer<Void> rangeOfFirstMatchInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("rangeOfFirstMatchInString:options:range:"),
      arg,
      options,
      range,
    );
  }

  static int replaceMatchesInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> withTemplate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_Uint64(
      _self,
      _objc.getSelector("replaceMatchesInString:options:range:withTemplate:"),
      arg,
      options,
      range,
      withTemplate,
    );
  }

  static Pointer<Void> replacementStringForResult(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inString,
    @required int offset,
    @required Pointer<Void> template,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_p_returns_p(
      _self,
      _objc.getSelector("replacementStringForResult:inString:offset:template:"),
      arg,
      inString,
      offset,
      template,
    );
  }

  static Pointer<Void> stringByReplacingMatchesInString(
    Pointer<NSRegularExpression> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> withTemplate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "stringByReplacingMatchesInString:options:range:withTemplate:"),
      arg,
      options,
      range,
      withTemplate,
    );
  }
}

/// Objective-C class _NSRegularExpressionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRegularExpressionCheckingResult
    extends Struct<NSRegularExpressionCheckingResult> {
  factory NSRegularExpressionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSRegularExpressionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSRegularExpressionCheckingResult")
        .cast<NSRegularExpressionCheckingResult>();
  }

  static Pointer<Void> description(
    Pointer<NSRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSRegularExpressionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSRegularExpressionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRangeArray(
    Pointer<NSRegularExpressionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRangeArray:regularExpression:"),
      arg,
      regularExpression,
    );
  }

  static Pointer<Void> initWithRanges(
    Pointer<NSRegularExpressionCheckingResult> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithRanges:count:regularExpression:"),
      arg,
      count,
      regularExpression,
    );
  }

  static Pointer<Void> rangeArray(
    Pointer<NSRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeArray"),
    );
  }

  static Pointer<Void> rangeWithName(
    Pointer<NSRegularExpressionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rangeWithName:"),
      arg,
    );
  }

  static Pointer<Void> regularExpression(
    Pointer<NSRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularExpression"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSRegularExpressionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSRelativeSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSRelativeSpecifier extends Struct<NSRelativeSpecifier> {
  factory NSRelativeSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSRelativeSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSRelativeSpecifier").cast<NSRelativeSpecifier>();
  }

  static Pointer<Void> baseSpecifier(
    Pointer<NSRelativeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("baseSpecifier"),
    );
  }

  static void dealloc(
    Pointer<NSRelativeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSRelativeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSRelativeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$relativePosition$baseSpecifier$(
    Pointer<NSRelativeSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required int relativePosition,
    @required Pointer<Void> baseSpecifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:"),
      arg,
      containerSpecifier,
      key,
      relativePosition,
      baseSpecifier,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSRelativeSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static int relativePosition(
    Pointer<NSRelativeSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("relativePosition"),
    );
  }

  static void setBaseSpecifier(
    Pointer<NSRelativeSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBaseSpecifier:"),
      arg,
    );
  }

  static void setRelativePosition(
    Pointer<NSRelativeSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setRelativePosition:"),
      arg,
    );
  }
}

/// Objective-C class _NSReplacementCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSReplacementCheckingResult extends Struct<NSReplacementCheckingResult> {
  factory NSReplacementCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSReplacementCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSReplacementCheckingResult")
        .cast<NSReplacementCheckingResult>();
  }

  static int resultType(
    Pointer<NSReplacementCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSSHIFTJISX0213EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSHIFTJISX0213EncodingDetector
    extends Struct<NSSHIFTJISX0213EncodingDetector> {
  factory NSSHIFTJISX0213EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSSHIFTJISX0213EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSHIFTJISX0213EncodingDetector")
        .cast<NSSHIFTJISX0213EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSSHIFTJISX0213EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSScanner_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScanner extends Struct<NSScanner> {
  factory NSScanner._() {
    throw UnimplementedError();
  }
  static Pointer<NSScanner> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScanner").cast<NSScanner>();
  }

  static int caseSensitive(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("caseSensitive"),
    );
  }

  static Pointer<Void> charactersToBeSkipped(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("charactersToBeSkipped"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSScanner> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static int isAtEnd(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAtEnd"),
    );
  }

  static Pointer<Void> locale(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static int scanCharactersFromSet(
    Pointer<NSScanner> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> intoString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanCharactersFromSet:intoString:"),
      arg,
      intoString,
    );
  }

  static int scanDecimal(
    Pointer<NSScanner> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanDecimal:"),
      arg,
    );
  }

  static int scanDouble(
    Pointer<NSScanner> _self,
    Pointer<Float> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanDouble:"),
      arg,
    );
  }

  static int scanFloat(
    Pointer<NSScanner> _self,
    Pointer<Float> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanFloat:"),
      arg,
    );
  }

  static int scanHexDouble(
    Pointer<NSScanner> _self,
    Pointer<Float> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanHexDouble:"),
      arg,
    );
  }

  static int scanHexFloat(
    Pointer<NSScanner> _self,
    Pointer<Float> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanHexFloat:"),
      arg,
    );
  }

  static int scanHexInt(
    Pointer<NSScanner> _self,
    Pointer<Uint32> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanHexInt:"),
      arg,
    );
  }

  static int scanHexLongLong(
    Pointer<NSScanner> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanHexLongLong:"),
      arg,
    );
  }

  static int scanInt(
    Pointer<NSScanner> _self,
    Pointer<Int32> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanInt:"),
      arg,
    );
  }

  static int scanInteger(
    Pointer<NSScanner> _self,
    Pointer<Int64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanInteger:"),
      arg,
    );
  }

  static int scanLocation(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("scanLocation"),
    );
  }

  static int scanLongLong(
    Pointer<NSScanner> _self,
    Pointer<Int64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanLongLong:"),
      arg,
    );
  }

  static int scanString(
    Pointer<NSScanner> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> intoString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanString:intoString:"),
      arg,
      intoString,
    );
  }

  static int scanUnsignedInteger(
    Pointer<NSScanner> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanUnsignedInteger:"),
      arg,
    );
  }

  static int scanUnsignedLongLong(
    Pointer<NSScanner> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanUnsignedLongLong:"),
      arg,
    );
  }

  static int scanUpToCharactersFromSet(
    Pointer<NSScanner> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> intoString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanUpToCharactersFromSet:intoString:"),
      arg,
      intoString,
    );
  }

  static int scanUpToString(
    Pointer<NSScanner> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> intoString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scanUpToString:intoString:"),
      arg,
      intoString,
    );
  }

  static void setCaseSensitive(
    Pointer<NSScanner> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setCaseSensitive:"),
      arg,
    );
  }

  static void setCharactersToBeSkipped(
    Pointer<NSScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCharactersToBeSkipped:"),
      arg,
    );
  }

  static void setLocale(
    Pointer<NSScanner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setScanLocation(
    Pointer<NSScanner> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setScanLocation:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<NSScanner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }
}

/// Objective-C class _NSScriptArgumentDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptArgumentDescription extends Struct<NSScriptArgumentDescription> {
  factory NSScriptArgumentDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptArgumentDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptArgumentDescription")
        .cast<NSScriptArgumentDescription>();
  }

  static int actualValueIsWritable(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("actualValueIsWritable"),
    );
  }

  static int appendParameterDeclarationsToAETEData(
    Pointer<NSScriptArgumentDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint16(
      _self,
      _objc.getSelector("appendParameterDeclarationsToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> firstPresentableName(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstPresentableName"),
    );
  }

  static Pointer<Void>
      initWithKey$appleEventCode$type$isOptional$isHidden$requiresAccess$presentableDescription$name$synonymDescriptions$(
    Pointer<NSScriptArgumentDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> type,
    @required int isOptional,
    @required int isHidden,
    @required int requiresAccess,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
    @required Pointer<Void> synonymDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:appleEventCode:type:isOptional:isHidden:requiresAccess:presentableDescription:name:synonymDescriptions:"),
      arg,
      appleEventCode,
      type,
      isOptional,
      isHidden,
      requiresAccess,
      presentableDescription,
      name,
      synonymDescriptions,
    );
  }

  static Pointer<Void>
      initWithKey$appleEventCode$type$isOptional$presentableDescription$nameOrNames$(
    Pointer<NSScriptArgumentDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> type,
    @required int isOptional,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> nameOrNames,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:appleEventCode:type:isOptional:presentableDescription:nameOrNames:"),
      arg,
      appleEventCode,
      type,
      isOptional,
      presentableDescription,
      nameOrNames,
    );
  }

  static int isHidden(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static int isOptional(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOptional"),
    );
  }

  static Pointer<Void> key(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static Pointer<Void> parameterDescriptorFromEvent(
    Pointer<NSScriptArgumentDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("parameterDescriptorFromEvent:"),
      arg,
    );
  }

  static Pointer<Void> presentableDescription(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableDescription"),
    );
  }

  static Pointer<Void> presentableNames(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableNames"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptArgumentDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> commandName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:commandName:"),
      arg,
      suiteName,
      commandName,
    );
  }

  static int requiresAccess(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("requiresAccess"),
    );
  }

  static Pointer<Void> typeDescription(
    Pointer<NSScriptArgumentDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeDescription"),
    );
  }
}

/// Objective-C class _NSScriptAttributeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptAttributeDescription
    extends Struct<NSScriptAttributeDescription> {
  factory NSScriptAttributeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptAttributeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptAttributeDescription")
        .cast<NSScriptAttributeDescription>();
  }

  static int appendPropertyDeclarationsToAETEData(
    Pointer<NSScriptAttributeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint16(
      _self,
      _objc.getSelector("appendPropertyDeclarationsToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> firstPresentableName(
    Pointer<NSScriptAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstPresentableName"),
    );
  }

  static Pointer<Void>
      initWithKey$type$isReadOnly$appleEventCode$presentableDescription$nameOrNames$(
    Pointer<NSScriptAttributeDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int isReadOnly,
    @required int appleEventCode,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> nameOrNames,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:isReadOnly:appleEventCode:presentableDescription:nameOrNames:"),
      arg,
      type,
      isReadOnly,
      appleEventCode,
      presentableDescription,
      nameOrNames,
    );
  }

  static Pointer<Void>
      initWithKey$type$access$appleEventCode$isHidden$presentableDescription$name$synonymDescriptions$accessGroupDescriptions$(
    Pointer<NSScriptAttributeDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int access,
    @required int appleEventCode,
    @required int isHidden,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
    @required Pointer<Void> synonymDescriptions,
    @required Pointer<Void> accessGroupDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:access:appleEventCode:isHidden:presentableDescription:name:synonymDescriptions:accessGroupDescriptions:"),
      arg,
      type,
      access,
      appleEventCode,
      isHidden,
      presentableDescription,
      name,
      synonymDescriptions,
      accessGroupDescriptions,
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptAttributeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static int matchesPresentableName(
    Pointer<NSScriptAttributeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesPresentableName:"),
      arg,
    );
  }

  static Pointer<Void> presentableDescription(
    Pointer<NSScriptAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableDescription"),
    );
  }

  static Pointer<Void> presentableNames(
    Pointer<NSScriptAttributeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableNames"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptAttributeDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> className,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:className:"),
      arg,
      suiteName,
      className,
    );
  }
}

/// Objective-C class _NSScriptClassDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptClassDescription extends Struct<NSScriptClassDescription> {
  factory NSScriptClassDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptClassDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptClassDescription")
        .cast<NSScriptClassDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static int appleEventCodeForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCodeForKey:"),
      arg,
    );
  }

  static Pointer<Void> attributeKeys(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributeKeys"),
    );
  }

  static Pointer<Void> classDescriptionForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptionForKey:"),
      arg,
    );
  }

  static Pointer<Void> className(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("className"),
    );
  }

  static void dealloc(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> defaultSubcontainerAttributeKey(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("defaultSubcontainerAttributeKey"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hasOrderedToManyRelationshipForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasOrderedToManyRelationshipForKey:"),
      arg,
    );
  }

  static int hasPropertyForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPropertyForKey:"),
      arg,
    );
  }

  static int hasReadablePropertyForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasReadablePropertyForKey:"),
      arg,
    );
  }

  static int hasWritablePropertyForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasWritablePropertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> implementationClassName(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("implementationClassName"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithSuiteName(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> className,
    @required Pointer<Void> dictionary,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSuiteName:className:dictionary:"),
      arg,
      className,
      dictionary,
    );
  }

  static Pointer<Void> inverseForRelationshipKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("inverseForRelationshipKey:"),
      arg,
    );
  }

  static int isLocationRequiredToCreateForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLocationRequiredToCreateForKey:"),
      arg,
    );
  }

  static int isReadOnlyKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReadOnlyKey:"),
      arg,
    );
  }

  static Pointer<Void> keyWithAppleEventCode(
    Pointer<NSScriptClassDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("keyWithAppleEventCode:"),
      arg,
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptClassDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> selectorForCommand(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("selectorForCommand:"),
      arg,
    );
  }

  static Pointer<Void> suiteName(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suiteName"),
    );
  }

  static Pointer<Void> superclassDescription(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("superclassDescription"),
    );
  }

  static int supportsCommand(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsCommand:"),
      arg,
    );
  }

  static Pointer<Void> toManyRelationshipKeys(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("toManyRelationshipKeys"),
    );
  }

  static Pointer<Void> toOneRelationshipKeys(
    Pointer<NSScriptClassDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("toOneRelationshipKeys"),
    );
  }

  static Pointer<Void> typeForKey(
    Pointer<NSScriptClassDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("typeForKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptClassDescriptionMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptClassDescriptionMoreIVars
    extends Struct<NSScriptClassDescriptionMoreIVars> {
  factory NSScriptClassDescriptionMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptClassDescriptionMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptClassDescriptionMoreIVars")
        .cast<NSScriptClassDescriptionMoreIVars>();
  }
}

/// Objective-C class _NSScriptCoercionHandler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCoercionHandler extends Struct<NSScriptCoercionHandler> {
  factory NSScriptCoercionHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCoercionHandler> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptCoercionHandler")
        .cast<NSScriptCoercionHandler>();
  }

  static Pointer<Void> coerceValue(
    Pointer<NSScriptCoercionHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("coerceValue:toClass:"),
      arg,
      toClass,
    );
  }

  static void dealloc(
    Pointer<NSScriptCoercionHandler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptCoercionHandler> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void registerCoercer(
    Pointer<NSScriptCoercionHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> toConvertFromClass,
    @required Pointer<Void> toClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerCoercer:selector:toConvertFromClass:toClass:"),
      arg,
      selector,
      toConvertFromClass,
      toClass,
    );
  }
}

/// Objective-C class _NSScriptCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCommand extends Struct<NSScriptCommand> {
  factory NSScriptCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScriptCommand").cast<NSScriptCommand>();
  }

  static Pointer<Void> appleEvent(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("appleEvent"),
    );
  }

  static Pointer<Void> arguments(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> commandDescription(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandDescription"),
    );
  }

  static void dealloc(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> directParameter(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("directParameter"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> evaluatedArguments(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("evaluatedArguments"),
    );
  }

  static Pointer<Void> evaluatedReceivers(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("evaluatedReceivers"),
    );
  }

  static Pointer<Void> evaluatedValueForArgumentValue(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("evaluatedValueForArgumentValue:"),
      arg,
    );
  }

  static Pointer<Void> executeCommand(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executeCommand"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCommandDescription(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCommandDescription:"),
      arg,
    );
  }

  static int isWellFormed(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isWellFormed"),
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static Pointer<Void> receiversSpecifier(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("receiversSpecifier"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static void resumeExecutionWithResult(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("resumeExecutionWithResult:"),
      arg,
    );
  }

  static Pointer<Void> scriptErrorExpectedTypeDescriptor(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scriptErrorExpectedTypeDescriptor"),
    );
  }

  static int scriptErrorNumber(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("scriptErrorNumber"),
    );
  }

  static Pointer<Void> scriptErrorOffendingObjectDescriptor(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scriptErrorOffendingObjectDescriptor"),
    );
  }

  static Pointer<Void> scriptErrorString(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scriptErrorString"),
    );
  }

  static void setArguments(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArguments:"),
      arg,
    );
  }

  static void setDirectParameter(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDirectParameter:"),
      arg,
    );
  }

  static void setReceiversSpecifier(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReceiversSpecifier:"),
      arg,
    );
  }

  static void setScriptErrorExpectedTypeDescriptor(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScriptErrorExpectedTypeDescriptor:"),
      arg,
    );
  }

  static void setScriptErrorNumber(
    Pointer<NSScriptCommand> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setScriptErrorNumber:"),
      arg,
    );
  }

  static void setScriptErrorOffendingObjectDescriptor(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScriptErrorOffendingObjectDescriptor:"),
      arg,
    );
  }

  static void setScriptErrorString(
    Pointer<NSScriptCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScriptErrorString:"),
      arg,
    );
  }

  static void suspendExecution(
    Pointer<NSScriptCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("suspendExecution"),
    );
  }
}

/// Objective-C class _NSScriptCommandConstructionContext_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCommandConstructionContext
    extends Struct<NSScriptCommandConstructionContext> {
  factory NSScriptCommandConstructionContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCommandConstructionContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptCommandConstructionContext")
        .cast<NSScriptCommandConstructionContext>();
  }
}

/// Objective-C class _NSScriptCommandDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCommandDescription extends Struct<NSScriptCommandDescription> {
  factory NSScriptCommandDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCommandDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptCommandDescription")
        .cast<NSScriptCommandDescription>();
  }

  static int appleEventClassCode(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventClassCode"),
    );
  }

  static int appleEventCode(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static int appleEventCodeForArgumentWithName(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCodeForArgumentWithName:"),
      arg,
    );
  }

  static int appleEventCodeForReturnType(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCodeForReturnType"),
    );
  }

  static Pointer<Void> argumentNames(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("argumentNames"),
    );
  }

  static Pointer<Void> commandClassName(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandClassName"),
    );
  }

  static Pointer<Void> commandName(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandName"),
    );
  }

  static Pointer<Void> createCommandInstance(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("createCommandInstance"),
    );
  }

  static Pointer<Void> createCommandInstanceWithZone(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("createCommandInstanceWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithSuiteName(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> commandName,
    @required Pointer<Void> dictionary,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSuiteName:commandName:dictionary:"),
      arg,
      commandName,
      dictionary,
    );
  }

  static int isOptionalArgumentWithName(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isOptionalArgumentWithName:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static Pointer<Void> returnType(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("returnType"),
    );
  }

  static Pointer<Void> suiteName(
    Pointer<NSScriptCommandDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suiteName"),
    );
  }

  static Pointer<Void> typeForArgumentWithName(
    Pointer<NSScriptCommandDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("typeForArgumentWithName:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptCommandDescriptionMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCommandDescriptionMoreIVars
    extends Struct<NSScriptCommandDescriptionMoreIVars> {
  factory NSScriptCommandDescriptionMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCommandDescriptionMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptCommandDescriptionMoreIVars")
        .cast<NSScriptCommandDescriptionMoreIVars>();
  }
}

/// Objective-C class _NSScriptCommandMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptCommandMoreIVars extends Struct<NSScriptCommandMoreIVars> {
  factory NSScriptCommandMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptCommandMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptCommandMoreIVars")
        .cast<NSScriptCommandMoreIVars>();
  }
}

/// Objective-C class _NSScriptComplexTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptComplexTypeDescription
    extends Struct<NSScriptComplexTypeDescription> {
  factory NSScriptComplexTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptComplexTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptComplexTypeDescription")
        .cast<NSScriptComplexTypeDescription>();
  }

  static Pointer<Void> alternativeTypeDescriptions(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alternativeTypeDescriptions"),
    );
  }

  static void appendObjectClassDeclarationToAETEData(
    Pointer<NSScriptComplexTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendObjectClassDeclarationToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> classDescription(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classDescription"),
    );
  }

  static Pointer<Void> coercedValue(
    Pointer<NSScriptComplexTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("coercedValue:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> errorExpectedTypeDescriptor(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorExpectedTypeDescriptor"),
    );
  }

  static Pointer<Void> initWithAppleEventCode(
    Pointer<NSScriptComplexTypeDescription> _self,
    int arg, {
    @required Pointer<Void> alernativeTypeDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_returns_p(
      _self,
      _objc.getSelector("initWithAppleEventCode:alernativeTypeDescriptions:"),
      arg,
      alernativeTypeDescriptions,
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptComplexTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptComplexTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }
}

/// Objective-C class _NSScriptDeclaredRecordTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptDeclaredRecordTypeDescription
    extends Struct<NSScriptDeclaredRecordTypeDescription> {
  factory NSScriptDeclaredRecordTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptDeclaredRecordTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptDeclaredRecordTypeDescription")
        .cast<NSScriptDeclaredRecordTypeDescription>();
  }

  static void appendObjectClassDeclarationToAETEData(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
    Pointer<Void> arg, {
    @required int includingParts,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector(
          "appendObjectClassDeclarationToAETEData:includingParts:"),
      arg,
      includingParts,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> fieldDescriptionForAppleEventCode(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> fieldDescriptionForKey(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForKey:"),
      arg,
    );
  }

  static Pointer<Void> fieldDescriptions(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fieldDescriptions"),
    );
  }

  static int hasHiddenParts(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasHiddenParts"),
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> fieldDescriptions,
    @required int isHidden,
    @required Pointer<Void> presentableDescription,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:appleEventCode:fieldDescriptions:isHidden:presentableDescription:"),
      arg,
      appleEventCode,
      fieldDescriptions,
      isHidden,
      presentableDescription,
    );
  }

  static int isHidden(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> presentableDescription(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableDescription"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptDeclaredRecordTypeDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:"),
      arg,
      suiteName,
    );
  }
}

/// Objective-C class _NSScriptEnumerationDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptEnumerationDescription
    extends Struct<NSScriptEnumerationDescription> {
  factory NSScriptEnumerationDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptEnumerationDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptEnumerationDescription")
        .cast<NSScriptEnumerationDescription>();
  }

  static void appendEnumerationDeclarationToAETEData(
    Pointer<NSScriptEnumerationDescription> _self,
    Pointer<Void> arg, {
    @required int includingParts,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_void(
      _self,
      _objc.getSelector(
          "appendEnumerationDeclarationToAETEData:includingParts:"),
      arg,
      includingParts,
    );
  }

  static Pointer<Void> coercedValue(
    Pointer<NSScriptEnumerationDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("coercedValue:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> enumeratorDescriptions(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("enumeratorDescriptions"),
    );
  }

  static Pointer<Void> errorExpectedTypeDescriptor(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorExpectedTypeDescriptor"),
    );
  }

  static int hasHiddenParts(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasHiddenParts"),
    );
  }

  static Pointer<Void> initWithName$appleEventCode$enumeratorDescriptions$(
    Pointer<NSScriptEnumerationDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> enumeratorDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_returns_p(
      _self,
      _objc.getSelector("initWithName:appleEventCode:enumeratorDescriptions:"),
      arg,
      appleEventCode,
      enumeratorDescriptions,
    );
  }

  static Pointer<Void>
      initWithName$appleEventCode$enumeratorDescriptions$isHidden$(
    Pointer<NSScriptEnumerationDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> enumeratorDescriptions,
    @required int isHidden,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:appleEventCode:enumeratorDescriptions:isHidden:"),
      arg,
      appleEventCode,
      enumeratorDescriptions,
      isHidden,
    );
  }

  static int isEnumeration(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnumeration"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptEnumerationDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }
}

/// Objective-C class _NSScriptEnumeratorDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptEnumeratorDescription
    extends Struct<NSScriptEnumeratorDescription> {
  factory NSScriptEnumeratorDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptEnumeratorDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptEnumeratorDescription")
        .cast<NSScriptEnumeratorDescription>();
  }

  static void dealloc(
    Pointer<NSScriptEnumeratorDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithAppleEventCode$presentableDescription$name$(
    Pointer<NSScriptEnumeratorDescription> _self,
    int arg, {
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAppleEventCode:presentableDescription:name:"),
      arg,
      presentableDescription,
      name,
    );
  }

  static Pointer<Void>
      initWithAppleEventCode$value$isHidden$presentableDescription$name$synonymDescriptions$(
    Pointer<NSScriptEnumeratorDescription> _self,
    int arg, {
    @required Pointer<Void> value,
    @required int isHidden,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
    @required Pointer<Void> synonymDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithAppleEventCode:value:isHidden:presentableDescription:name:synonymDescriptions:"),
      arg,
      value,
      isHidden,
      presentableDescription,
      name,
      synonymDescriptions,
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptEnumeratorDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> synonymDescriptions(
    Pointer<NSScriptEnumeratorDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("synonymDescriptions"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSScriptEnumeratorDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSScriptExecutionContext_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptExecutionContext extends Struct<NSScriptExecutionContext> {
  factory NSScriptExecutionContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptExecutionContext> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptExecutionContext")
        .cast<NSScriptExecutionContext>();
  }

  static void dealloc(
    Pointer<NSScriptExecutionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptExecutionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> objectBeingTested(
    Pointer<NSScriptExecutionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectBeingTested"),
    );
  }

  static Pointer<Void> rangeContainerObject(
    Pointer<NSScriptExecutionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeContainerObject"),
    );
  }

  static void setObjectBeingTested(
    Pointer<NSScriptExecutionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectBeingTested:"),
      arg,
    );
  }

  static void setRangeContainerObject(
    Pointer<NSScriptExecutionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRangeContainerObject:"),
      arg,
    );
  }

  static void setTopLevelObject(
    Pointer<NSScriptExecutionContext> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTopLevelObject:"),
      arg,
    );
  }

  static Pointer<Void> topLevelObject(
    Pointer<NSScriptExecutionContext> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("topLevelObject"),
    );
  }
}

/// Objective-C class _NSScriptExecutionContextMoreIVars_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptExecutionContextMoreIVars
    extends Struct<NSScriptExecutionContextMoreIVars> {
  factory NSScriptExecutionContextMoreIVars._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptExecutionContextMoreIVars> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptExecutionContextMoreIVars")
        .cast<NSScriptExecutionContextMoreIVars>();
  }
}

/// Objective-C class _NSScriptFakeObjectTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptFakeObjectTypeDescription
    extends Struct<NSScriptFakeObjectTypeDescription> {
  factory NSScriptFakeObjectTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptFakeObjectTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptFakeObjectTypeDescription")
        .cast<NSScriptFakeObjectTypeDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptFakeObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> initWithAppleEventCode(
    Pointer<NSScriptFakeObjectTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithAppleEventCode:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptListTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptListTypeDescription extends Struct<NSScriptListTypeDescription> {
  factory NSScriptListTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptListTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptListTypeDescription")
        .cast<NSScriptListTypeDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> coercedValue(
    Pointer<NSScriptListTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("coercedValue:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> elementTypeDescription(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("elementTypeDescription"),
    );
  }

  static Pointer<Void> errorExpectedTypeDescriptor(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorExpectedTypeDescriptor"),
    );
  }

  static Pointer<Void> initWithElementTypeDescription(
    Pointer<NSScriptListTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithElementTypeDescription:"),
      arg,
    );
  }

  static int isList(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isList"),
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptListTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptListTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }
}

/// Objective-C class _NSScriptObjectSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptObjectSpecifier extends Struct<NSScriptObjectSpecifier> {
  factory NSScriptObjectSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptObjectSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptObjectSpecifier")
        .cast<NSScriptObjectSpecifier>();
  }

  static Pointer<Void> childSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("childSpecifier"),
    );
  }

  static Pointer<Void> containerClassDescription(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerClassDescription"),
    );
  }

  static int containerIsObjectBeingTested(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("containerIsObjectBeingTested"),
    );
  }

  static int containerIsRangeContainerObject(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("containerIsRangeContainerObject"),
    );
  }

  static Pointer<Void> containerSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containerSpecifier"),
    );
  }

  static void dealloc(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptor(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("descriptor"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluationErrorNumber(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("evaluationErrorNumber"),
    );
  }

  static Pointer<Void> evaluationErrorSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("evaluationErrorSpecifier"),
    );
  }

  static Pointer<Int64> indicesOfObjectsByEvaluatingWithContainer(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Int64> count,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("indicesOfObjectsByEvaluatingWithContainer:count:"),
      arg,
      count,
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithContainerClassDescription(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static Pointer<Void> initWithContainerSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerSpecifier:key:"),
      arg,
      key,
    );
  }

  static Pointer<Void> key(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static Pointer<Void> keyClassDescription(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyClassDescription"),
    );
  }

  static Pointer<Void> objectsByEvaluatingSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectsByEvaluatingSpecifier"),
    );
  }

  static Pointer<Void> objectsByEvaluatingWithContainers(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsByEvaluatingWithContainers:"),
      arg,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static void setChildSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildSpecifier:"),
      arg,
    );
  }

  static void setContainerClassDescription(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerClassDescription:"),
      arg,
    );
  }

  static void setContainerIsObjectBeingTested(
    Pointer<NSScriptObjectSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setContainerIsObjectBeingTested:"),
      arg,
    );
  }

  static void setContainerIsRangeContainerObject(
    Pointer<NSScriptObjectSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setContainerIsRangeContainerObject:"),
      arg,
    );
  }

  static void setContainerSpecifier(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContainerSpecifier:"),
      arg,
    );
  }

  static void setEvaluationErrorNumber(
    Pointer<NSScriptObjectSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setEvaluationErrorNumber:"),
      arg,
    );
  }

  static void setKey(
    Pointer<NSScriptObjectSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptObjectTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptObjectTypeDescription
    extends Struct<NSScriptObjectTypeDescription> {
  factory NSScriptObjectTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptObjectTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptObjectTypeDescription")
        .cast<NSScriptObjectTypeDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> classDescription(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classDescription"),
    );
  }

  static void dealloc(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithClassDescription(
    Pointer<NSScriptObjectTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithClassDescription:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptObjectTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }
}

/// Objective-C class _NSScriptPropertiesRecordTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptPropertiesRecordTypeDescription
    extends Struct<NSScriptPropertiesRecordTypeDescription> {
  factory NSScriptPropertiesRecordTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptPropertiesRecordTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptPropertiesRecordTypeDescription")
        .cast<NSScriptPropertiesRecordTypeDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> errorExpectedTypeDescriptor(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorExpectedTypeDescriptor"),
    );
  }

  static Pointer<Void> fieldDescriptionForAppleEventCode(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> fieldDescriptionForKey(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForKey:"),
      arg,
    );
  }

  static Pointer<Void> initWithContainerClassDescription(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContainerClassDescription:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptPropertiesRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }
}

/// Objective-C class _NSScriptPropertyDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptPropertyDescription extends Struct<NSScriptPropertyDescription> {
  factory NSScriptPropertyDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptPropertyDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptPropertyDescription")
        .cast<NSScriptPropertyDescription>();
  }

  static int access(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("access"),
    );
  }

  static void addAccessGroups(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAccessGroups:"),
      arg,
    );
  }

  static void addReadAccessGroup(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addReadAccessGroup:"),
      arg,
    );
  }

  static void addWriteAccessGroup(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addWriteAccessGroup:"),
      arg,
    );
  }

  static void appendElementClassDeclarationToAETEData(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendElementClassDeclarationToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> fullTypeName(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fullTypeName"),
    );
  }

  static Pointer<Void> initWithKey(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int access,
    @required int isHidden,
    @required Pointer<Void> accessGroupDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:access:isHidden:accessGroupDescriptions:"),
      arg,
      type,
      access,
      isHidden,
      accessGroupDescriptions,
    );
  }

  static int isHidden(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static Pointer<Void> key(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptPropertyDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static int matchesPresentableName(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesPresentableName:"),
      arg,
    );
  }

  static Pointer<Void> presentableRelationshipClassName(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableRelationshipClassName"),
    );
  }

  static Pointer<Void> readAccessGroups(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("readAccessGroups"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> className,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:className:"),
      arg,
      suiteName,
      className,
    );
  }

  static void setTypeDescription(
    Pointer<NSScriptPropertyDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forReconcilingToSuiteRegistry,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTypeDescription:forReconcilingToSuiteRegistry:"),
      arg,
      forReconcilingToSuiteRegistry,
    );
  }

  static Pointer<Void> typeDescription(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeDescription"),
    );
  }

  static Pointer<Void> writeAccessGroups(
    Pointer<NSScriptPropertyDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("writeAccessGroups"),
    );
  }
}

/// Objective-C class _NSScriptRecordFieldDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptRecordFieldDescription
    extends Struct<NSScriptRecordFieldDescription> {
  factory NSScriptRecordFieldDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptRecordFieldDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptRecordFieldDescription")
        .cast<NSScriptRecordFieldDescription>();
  }

  static void appendPropertyDeclarationToAETEData(
    Pointer<NSScriptRecordFieldDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendPropertyDeclarationToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void>
      initWithKey$type$appleEventCode$isHidden$presentableDescription$name$synonymDescriptions$(
    Pointer<NSScriptRecordFieldDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int appleEventCode,
    @required int isHidden,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
    @required Pointer<Void> synonymDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:appleEventCode:isHidden:presentableDescription:name:synonymDescriptions:"),
      arg,
      type,
      appleEventCode,
      isHidden,
      presentableDescription,
      name,
      synonymDescriptions,
    );
  }

  static Pointer<Void>
      initWithKey$typeDescription$appleEventCode$presentableDescription$name$(
    Pointer<NSScriptRecordFieldDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> typeDescription,
    @required int appleEventCode,
    @required Pointer<Void> presentableDescription,
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint32_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:typeDescription:appleEventCode:presentableDescription:name:"),
      arg,
      typeDescription,
      appleEventCode,
      presentableDescription,
      name,
    );
  }

  static int isHidden(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static Pointer<Void> key(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptRecordFieldDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> presentableDescription(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableDescription"),
    );
  }

  static Pointer<Void> presentableName(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableName"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptRecordFieldDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> recordTypeName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:recordTypeName:"),
      arg,
      suiteName,
      recordTypeName,
    );
  }

  static Pointer<Void> synonymDescriptions(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("synonymDescriptions"),
    );
  }

  static Pointer<Void> typeDescription(
    Pointer<NSScriptRecordFieldDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeDescription"),
    );
  }
}

/// Objective-C class _NSScriptRecordTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptRecordTypeDescription
    extends Struct<NSScriptRecordTypeDescription> {
  factory NSScriptRecordTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptRecordTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptRecordTypeDescription")
        .cast<NSScriptRecordTypeDescription>();
  }

  static Pointer<Void> coercedValue(
    Pointer<NSScriptRecordTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("coercedValue:"),
      arg,
    );
  }

  static Pointer<Void> fieldDescriptionForAppleEventCode(
    Pointer<NSScriptRecordTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> fieldDescriptionForKey(
    Pointer<NSScriptRecordTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("fieldDescriptionForKey:"),
      arg,
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptRecordTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }
}

/// Objective-C class _NSScriptSDEFElement_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptSDEFElement extends Struct<NSScriptSDEFElement> {
  factory NSScriptSDEFElement._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptSDEFElement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScriptSDEFElement").cast<NSScriptSDEFElement>();
  }

  static void addDescription(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forSubelementName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addDescription:forSubelementName:"),
      arg,
      forSubelementName,
    );
  }

  static Pointer<Void> attributes(
    Pointer<NSScriptSDEFElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static void dealloc(
    Pointer<NSScriptSDEFElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptSDEFElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> descriptionForOptionalSubelementName(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("descriptionForOptionalSubelementName:"),
      arg,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:attributes:"),
      arg,
      attributes,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptSDEFElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> oneOrMoreDescriptionsForSubelementName(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("oneOrMoreDescriptionsForSubelementName:"),
      arg,
    );
  }

  static Pointer<Void> valueForOptionalAttributeKey(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForOptionalAttributeKey:"),
      arg,
    );
  }

  static Pointer<Void> valueForRequiredAttributeKey(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForRequiredAttributeKey:"),
      arg,
    );
  }

  static Pointer<Void> zeroOrMoreDescriptionsForSubelementName(
    Pointer<NSScriptSDEFElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("zeroOrMoreDescriptionsForSubelementName:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptSDEFParser_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptSDEFParser extends Struct<NSScriptSDEFParser> {
  factory NSScriptSDEFParser._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptSDEFParser> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScriptSDEFParser").cast<NSScriptSDEFParser>();
  }

  static void dealloc(
    Pointer<NSScriptSDEFParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithDataNoCopy(
    Pointer<NSScriptSDEFParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDataNoCopy:"),
      arg,
    );
  }

  static void parser$didStartElement$namespaceURI$qualifiedName$attributes$(
    Pointer<NSScriptSDEFParser> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didStartElement,
    @required Pointer<Void> namespaceURI,
    @required Pointer<Void> qualifiedName,
    @required Pointer<Void> attributes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector(
          "parser:didStartElement:namespaceURI:qualifiedName:attributes:"),
      arg,
      didStartElement,
      namespaceURI,
      qualifiedName,
      attributes,
    );
  }

  static void parser$didEndElement$namespaceURI$qualifiedName$(
    Pointer<NSScriptSDEFParser> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didEndElement,
    @required Pointer<Void> namespaceURI,
    @required Pointer<Void> qualifiedName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("parser:didEndElement:namespaceURI:qualifiedName:"),
      arg,
      didEndElement,
      namespaceURI,
      qualifiedName,
    );
  }

  static void parser$parseErrorOccurred$(
    Pointer<NSScriptSDEFParser> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> parseErrorOccurred,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("parser:parseErrorOccurred:"),
      arg,
      parseErrorOccurred,
    );
  }

  static void setBundle(
    Pointer<NSScriptSDEFParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setBundle:"),
      arg,
    );
  }

  static void setParsesCocoaElements(
    Pointer<NSScriptSDEFParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setParsesCocoaElements:"),
      arg,
    );
  }

  static Pointer<Void> suiteDescriptions(
    Pointer<NSScriptSDEFParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suiteDescriptions"),
    );
  }
}

/// Objective-C class _NSScriptSuiteDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptSuiteDescription extends Struct<NSScriptSuiteDescription> {
  factory NSScriptSuiteDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptSuiteDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptSuiteDescription")
        .cast<NSScriptSuiteDescription>();
  }

  static int appendSuiteDeclarationsToAETEData(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint16(
      _self,
      _objc.getSelector("appendSuiteDeclarationsToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> bundle(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bundle"),
    );
  }

  static Pointer<Void> classDescriptions(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptions"),
    );
  }

  static Pointer<Void> classDescriptionsByName(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptionsByName"),
    );
  }

  static Pointer<Void> commandDescriptions(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandDescriptions"),
    );
  }

  static Pointer<Void> commandDescriptionsByName(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("commandDescriptionsByName"),
    );
  }

  static void dealloc(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> firstPresentableName(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstPresentableName"),
    );
  }

  static Pointer<Void>
      initWithProperties$suiteName$usesUnnamedArguments$classSynonymDescriptions$(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> suiteName,
    @required int usesUnnamedArguments,
    @required Pointer<Void> classSynonymDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithProperties:suiteName:usesUnnamedArguments:classSynonymDescriptions:"),
      arg,
      suiteName,
      usesUnnamedArguments,
      classSynonymDescriptions,
    );
  }

  static Pointer<Void> initWithProperties$classExtensionDescriptions$(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> classExtensionDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithProperties:classExtensionDescriptions:"),
      arg,
      classExtensionDescriptions,
    );
  }

  static int isHidden(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> presentableDescription(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableDescription"),
    );
  }

  static Pointer<Void> presentableNames(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("presentableNames"),
    );
  }

  static void reconcileSelfToSuiteRegistry(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileSelfToSuiteRegistry:"),
      arg,
    );
  }

  static void reconcileSubdescriptionsToSuiteRegistry(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileSubdescriptionsToSuiteRegistry:"),
      arg,
    );
  }

  static void removeClassDescriptions(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeClassDescriptions:"),
      arg,
    );
  }

  static void removeCommandDescriptions(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeCommandDescriptions:"),
      arg,
    );
  }

  static void setClassDescription(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClassDescription:"),
      arg,
    );
  }

  static void setCommandDescription(
    Pointer<NSScriptSuiteDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCommandDescription:"),
      arg,
    );
  }

  static Pointer<Void> typeDescriptions(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeDescriptions"),
    );
  }

  static int usesUnnamedArguments(
    Pointer<NSScriptSuiteDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("usesUnnamedArguments"),
    );
  }
}

/// Objective-C class _NSScriptSuiteRegistry_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptSuiteRegistry extends Struct<NSScriptSuiteRegistry> {
  factory NSScriptSuiteRegistry._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptSuiteRegistry> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptSuiteRegistry")
        .cast<NSScriptSuiteRegistry>();
  }

  static Pointer<Void> aeteResource(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("aeteResource:"),
      arg,
    );
  }

  static int appleEventCodeForSuite(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCodeForSuite:"),
      arg,
    );
  }

  static Pointer<Void> bundleForSuite(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("bundleForSuite:"),
      arg,
    );
  }

  static Pointer<Void> classDescriptionWithAppleEventCode(
    Pointer<NSScriptSuiteRegistry> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("classDescriptionWithAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> classDescriptionsInSuite(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classDescriptionsInSuite:"),
      arg,
    );
  }

  static Pointer<Void> commandDescriptionWithAppleEventClass(
    Pointer<NSScriptSuiteRegistry> _self,
    int arg, {
    @required int andAppleEventCode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_Uint32_returns_p(
      _self,
      _objc.getSelector(
          "commandDescriptionWithAppleEventClass:andAppleEventCode:"),
      arg,
      andAppleEventCode,
    );
  }

  static Pointer<Void> commandDescriptionsInSuite(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("commandDescriptionsInSuite:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSScriptSuiteRegistry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptSuiteRegistry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptSuiteRegistry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void loadSuiteWithDictionary(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> fromBundle,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("loadSuiteWithDictionary:fromBundle:"),
      arg,
      fromBundle,
    );
  }

  static void loadSuitesFromBundle(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("loadSuitesFromBundle:"),
      arg,
    );
  }

  static void registerClassDescription(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerClassDescription:"),
      arg,
    );
  }

  static void registerCommandDescription(
    Pointer<NSScriptSuiteRegistry> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerCommandDescription:"),
      arg,
    );
  }

  static Pointer<Void> suiteForAppleEventCode(
    Pointer<NSScriptSuiteRegistry> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("suiteForAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> suiteNames(
    Pointer<NSScriptSuiteRegistry> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("suiteNames"),
    );
  }
}

/// Objective-C class _NSScriptSynonymDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptSynonymDescription extends Struct<NSScriptSynonymDescription> {
  factory NSScriptSynonymDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptSynonymDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptSynonymDescription")
        .cast<NSScriptSynonymDescription>();
  }

  static void dealloc(
    Pointer<NSScriptSynonymDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSScriptSynonymDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required int isHidden,
    @required int appleEventClassCode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_Int8_Uint32_returns_p(
      _self,
      _objc.getSelector(
          "initWithName:appleEventCode:isHidden:appleEventClassCode:"),
      arg,
      appleEventCode,
      isHidden,
      appleEventClassCode,
    );
  }
}

/// Objective-C class _NSScriptToManyRelationshipDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptToManyRelationshipDescription
    extends Struct<NSScriptToManyRelationshipDescription> {
  factory NSScriptToManyRelationshipDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptToManyRelationshipDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptToManyRelationshipDescription")
        .cast<NSScriptToManyRelationshipDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptToManyRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void>
      initWithKey$type$isReadOnly$appleEventCode$isLocationRequiredToCreate$(
    Pointer<NSScriptToManyRelationshipDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int isReadOnly,
    @required int appleEventCode,
    @required int isLocationRequiredToCreate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:isReadOnly:appleEventCode:isLocationRequiredToCreate:"),
      arg,
      type,
      isReadOnly,
      appleEventCode,
      isLocationRequiredToCreate,
    );
  }

  static Pointer<Void>
      initWithKey$type$access$isHidden$shouldByDefaultInsertAtBeginning$accessGroupDescriptions$(
    Pointer<NSScriptToManyRelationshipDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> type,
    @required int access,
    @required int isHidden,
    @required int shouldByDefaultInsertAtBeginning,
    @required Pointer<Void> accessGroupDescriptions,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKey:type:access:isHidden:shouldByDefaultInsertAtBeginning:accessGroupDescriptions:"),
      arg,
      type,
      access,
      isHidden,
      shouldByDefaultInsertAtBeginning,
      accessGroupDescriptions,
    );
  }

  static int isLocationRequiredToCreate(
    Pointer<NSScriptToManyRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLocationRequiredToCreate"),
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptToManyRelationshipDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static int matchesPresentableName(
    Pointer<NSScriptToManyRelationshipDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesPresentableName:"),
      arg,
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptToManyRelationshipDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> className,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:className:"),
      arg,
      suiteName,
      className,
    );
  }

  static int shouldByDefaultInsertAtBeginning(
    Pointer<NSScriptToManyRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldByDefaultInsertAtBeginning"),
    );
  }
}

/// Objective-C class _NSScriptToOneRelationshipDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptToOneRelationshipDescription
    extends Struct<NSScriptToOneRelationshipDescription> {
  factory NSScriptToOneRelationshipDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptToOneRelationshipDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptToOneRelationshipDescription")
        .cast<NSScriptToOneRelationshipDescription>();
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptToOneRelationshipDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
    @required Pointer<Void> className,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:className:"),
      arg,
      suiteName,
      className,
    );
  }

  static int shouldBecomeAETEPropertyDeclaration(
    Pointer<NSScriptToOneRelationshipDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldBecomeAETEPropertyDeclaration"),
    );
  }
}

/// Objective-C class _NSScriptTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptTypeDescription extends Struct<NSScriptTypeDescription> {
  factory NSScriptTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptTypeDescription")
        .cast<NSScriptTypeDescription>();
  }

  static int appleEventCode(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static Pointer<Void> classDescription(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classDescription"),
    );
  }

  static Pointer<Void> coercedValue(
    Pointer<NSScriptTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("coercedValue:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> errorExpectedTypeDescriptor(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorExpectedTypeDescriptor"),
    );
  }

  static int isEnumeration(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEnumeration"),
    );
  }

  static int isList(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isList"),
    );
  }

  static int matchesAppleEventCode(
    Pointer<NSScriptTypeDescription> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("matchesAppleEventCode:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }

  static void reconcileToSuiteRegistry(
    Pointer<NSScriptTypeDescription> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> suiteName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("reconcileToSuiteRegistry:suiteName:"),
      arg,
      suiteName,
    );
  }
}

/// Objective-C class _NSScriptValueTypeDescription_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptValueTypeDescription
    extends Struct<NSScriptValueTypeDescription> {
  factory NSScriptValueTypeDescription._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptValueTypeDescription> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptValueTypeDescription")
        .cast<NSScriptValueTypeDescription>();
  }

  static void appendObjectClassDeclarationToAETEData(
    Pointer<NSScriptValueTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("appendObjectClassDeclarationToAETEData:"),
      arg,
    );
  }

  static int appleEventCode(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("appleEventCode"),
    );
  }

  static void dealloc(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithName$appleEventCode$objcClassName$(
    Pointer<NSScriptValueTypeDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> objcClassName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_returns_p(
      _self,
      _objc.getSelector("initWithName:appleEventCode:objcClassName:"),
      arg,
      appleEventCode,
      objcClassName,
    );
  }

  static Pointer<Void> initWithName$appleEventCode$objcClassName$isHidden$(
    Pointer<NSScriptValueTypeDescription> _self,
    Pointer<Void> arg, {
    @required int appleEventCode,
    @required Pointer<Void> objcClassName,
    @required int isHidden,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint32_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithName:appleEventCode:objcClassName:isHidden:"),
      arg,
      appleEventCode,
      objcClassName,
      isHidden,
    );
  }

  static int isHidden(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isHidden"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> objcClassName(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcClassName"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcCreationMethodSelector2(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcCreationMethodSelector2"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector(
    Pointer<NSScriptValueTypeDescription> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector"),
    );
  }

  static Pointer<Void> objcDescriptorCreationMethodSelector2ForClass(
    Pointer<NSScriptValueTypeDescription> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objcDescriptorCreationMethodSelector2ForClass:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptWhoseTest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptWhoseTest extends Struct<NSScriptWhoseTest> {
  factory NSScriptWhoseTest._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptWhoseTest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSScriptWhoseTest").cast<NSScriptWhoseTest>();
  }

  static void encodeWithCoder(
    Pointer<NSScriptWhoseTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSScriptWhoseTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSScriptWhoseTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isTrue(
    Pointer<NSScriptWhoseTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTrue"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSScriptWhoseTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSScriptingAppleEventHandler_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSScriptingAppleEventHandler
    extends Struct<NSScriptingAppleEventHandler> {
  factory NSScriptingAppleEventHandler._() {
    throw UnimplementedError();
  }
  static Pointer<NSScriptingAppleEventHandler> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSScriptingAppleEventHandler")
        .cast<NSScriptingAppleEventHandler>();
  }

  static void handleCommandEvent(
    Pointer<NSScriptingAppleEventHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReplyEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleCommandEvent:withReplyEvent:"),
      arg,
      withReplyEvent,
    );
  }

  static void handleGetAETEEvent(
    Pointer<NSScriptingAppleEventHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReplyEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleGetAETEEvent:withReplyEvent:"),
      arg,
      withReplyEvent,
    );
  }

  static void registerForCommandDescription(
    Pointer<NSScriptingAppleEventHandler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerForCommandDescription:"),
      arg,
    );
  }

  static void registerNormalHandlersForCommandDescription(
    Pointer<NSScriptingAppleEventHandler> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerNormalHandlersForCommandDescription:"),
      arg,
    );
  }

  static Pointer<Void> secureCommandEvent(
    Pointer<NSScriptingAppleEventHandler> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withReplyEvent,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("secureCommandEvent:withReplyEvent:"),
      arg,
      withReplyEvent,
    );
  }
}

/// Objective-C class _NSSearchPathEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSearchPathEnumerator extends Struct<NSSearchPathEnumerator> {
  factory NSSearchPathEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSearchPathEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSearchPathEnumerator")
        .cast<NSSearchPathEnumerator>();
  }

  static Pointer<Void> initWithDirectory(
    Pointer<NSSearchPathEnumerator> _self,
    int arg, {
    @required int domains,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithDirectory:domains:"),
      arg,
      domains,
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSSearchPathEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }
}

/// Objective-C class _NSSecureUnarchiveFromDataTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSecureUnarchiveFromDataTransformer
    extends Struct<NSSecureUnarchiveFromDataTransformer> {
  factory NSSecureUnarchiveFromDataTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSSecureUnarchiveFromDataTransformer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSecureUnarchiveFromDataTransformer")
        .cast<NSSecureUnarchiveFromDataTransformer>();
  }

  static Pointer<Void> description(
    Pointer<NSSecureUnarchiveFromDataTransformer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> reverseTransformedValue(
    Pointer<NSSecureUnarchiveFromDataTransformer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reverseTransformedValue:"),
      arg,
    );
  }

  static Pointer<Void> transformedValue(
    Pointer<NSSecureUnarchiveFromDataTransformer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSSecurityScopedURLWrapper_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSecurityScopedURLWrapper extends Struct<NSSecurityScopedURLWrapper> {
  factory NSSecurityScopedURLWrapper._() {
    throw UnimplementedError();
  }
  static Pointer<NSSecurityScopedURLWrapper> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSecurityScopedURLWrapper")
        .cast<NSSecurityScopedURLWrapper>();
  }

  static void dealloc(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> domainIdentifier(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("domainIdentifier"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithProviderIdentifier(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> domainIdentifier,
    @required Pointer<Void> itemIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithProviderIdentifier:domainIdentifier:itemIdentifier:"),
      arg,
      domainIdentifier,
      itemIdentifier,
    );
  }

  static Pointer<Void> initWithURL$(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL$readonly$(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg, {
    @required int readonly,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:readonly:"),
      arg,
      readonly,
    );
  }

  static Pointer<Void> initWithURL$readonly$extensionClass$(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg, {
    @required int readonly,
    @required Pointer<Void> extensionClass,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:readonly:extensionClass:"),
      arg,
      readonly,
      extensionClass,
    );
  }

  static Pointer<Void> initWithURL$readonly$scope$(
    Pointer<NSSecurityScopedURLWrapper> _self,
    Pointer<Void> arg, {
    @required int readonly,
    @required Pointer<Void> scope,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:readonly:scope:"),
      arg,
      readonly,
      scope,
    );
  }

  static int isBackedByFileProvider(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBackedByFileProvider"),
    );
  }

  static int isReadonly(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isReadonly"),
    );
  }

  static Pointer<Void> itemIdentifier(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("itemIdentifier"),
    );
  }

  static Pointer<Void> providerIdentifier(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("providerIdentifier"),
    );
  }

  static Pointer<Void> url(
    Pointer<NSSecurityScopedURLWrapper> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Objective-C class _NSSelfExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSelfExpression extends Struct<NSSelfExpression> {
  factory NSSelfExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSSelfExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSelfExpression").cast<NSSelfExpression>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSelfExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSSelfExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSSelfExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSelfExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSSelfExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void release(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSSelfExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSSerializer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSerializer extends Struct<NSSerializer> {
  factory NSSerializer._() {
    throw UnimplementedError();
  }
  static Pointer<NSSerializer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSerializer").cast<NSSerializer>();
  }
}

/// Objective-C class _NSSetChange_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSetChange extends Struct<NSSetChange> {
  factory NSSetChange._() {
    throw UnimplementedError();
  }
  static Pointer<NSSetChange> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSetChange").cast<NSSetChange>();
  }

  static int changeType(
    Pointer<NSSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeType"),
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSSetChange> _self,
    int arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithType:object:"),
      arg,
      object,
    );
  }

  static Pointer<Void> value(
    Pointer<NSSetChange> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSSetChanges_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSetChanges extends Struct<NSSetChanges> {
  factory NSSetChanges._() {
    throw UnimplementedError();
  }
  static Pointer<NSSetChanges> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSetChanges").cast<NSSetChanges>();
  }

  static void addChange(
    Pointer<NSSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChange:"),
      arg,
    );
  }

  static void addObject(
    Pointer<NSSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void applyChangesToSet(
    Pointer<NSSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("applyChangesToSet:"),
      arg,
    );
  }

  static int changeCount(
    Pointer<NSSetChanges> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("changeCount"),
    );
  }

  static void enumerateChanges(
    Pointer<NSSetChanges> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateChanges:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static void enumerateChangesUsingBlock(
    Pointer<NSSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateChangesUsingBlock:"),
      arg,
    );
  }

  static void removeObject(
    Pointer<NSSetChanges> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }
}

/// Objective-C class _NSSetCommand_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSetCommand extends Struct<NSSetCommand> {
  factory NSSetCommand._() {
    throw UnimplementedError();
  }
  static Pointer<NSSetCommand> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSetCommand").cast<NSSetCommand>();
  }

  static void dealloc(
    Pointer<NSSetCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSetCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSetCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSetCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> keySpecifier(
    Pointer<NSSetCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keySpecifier"),
    );
  }

  static Pointer<Void> performDefaultImplementation(
    Pointer<NSSetCommand> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("performDefaultImplementation"),
    );
  }

  static void setReceiversSpecifier(
    Pointer<NSSetCommand> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReceiversSpecifier:"),
      arg,
    );
  }
}

/// Objective-C class _NSSetExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSetExpression extends Struct<NSSetExpression> {
  factory NSSetExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSSetExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSetExpression").cast<NSSetExpression>();
  }

  static void acceptVisitor(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSSetExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSetExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSetExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithType(
    Pointer<NSSetExpression> _self,
    int arg, {
    @required Pointer<Void> leftExpression,
    @required Pointer<Void> rightExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithType:leftExpression:rightExpression:"),
      arg,
      leftExpression,
      rightExpression,
    );
  }

  static int isEqual(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> leftExpression(
    Pointer<NSSetExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftExpression"),
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSSetExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSSetExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> rightExpression(
    Pointer<NSSetExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightExpression"),
    );
  }
}

/// Objective-C class _NSSimpleAttributeDictionary_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSimpleAttributeDictionary extends Struct<NSSimpleAttributeDictionary> {
  factory NSSimpleAttributeDictionary._() {
    throw UnimplementedError();
  }
  static Pointer<NSSimpleAttributeDictionary> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSimpleAttributeDictionary")
        .cast<NSSimpleAttributeDictionary>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSimpleAttributeDictionary> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int count(
    Pointer<NSSimpleAttributeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSSimpleAttributeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> keyEnumerator(
    Pointer<NSSimpleAttributeDictionary> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyEnumerator"),
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSSimpleAttributeDictionary> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> newWithKey(
    Pointer<NSSimpleAttributeDictionary> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("newWithKey:object:"),
      arg,
      object,
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSSimpleAttributeDictionary> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static int slotForKey(
    Pointer<NSSimpleAttributeDictionary> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("slotForKey:"),
      arg,
    );
  }
}

/// Objective-C class _NSSimpleAttributeDictionaryEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSimpleAttributeDictionaryEnumerator
    extends Struct<NSSimpleAttributeDictionaryEnumerator> {
  factory NSSimpleAttributeDictionaryEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSimpleAttributeDictionaryEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSimpleAttributeDictionaryEnumerator")
        .cast<NSSimpleAttributeDictionaryEnumerator>();
  }

  static void dealloc(
    Pointer<NSSimpleAttributeDictionaryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithAttributeDictionary(
    Pointer<NSSimpleAttributeDictionaryEnumerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAttributeDictionary:"),
      arg,
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSSimpleAttributeDictionaryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }
}

/// Objective-C class _NSSimpleCString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSimpleCString extends Struct<NSSimpleCString> {
  factory NSSimpleCString._() {
    throw UnimplementedError();
  }
  static Pointer<NSSimpleCString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSimpleCString").cast<NSSimpleCString>();
  }

  static int cStringLength(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cStringLength"),
    );
  }

  static int canBeConvertedToEncoding(
    Pointer<NSSimpleCString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToEncoding:"),
      arg,
    );
  }

  static int characterAtIndex(
    Pointer<NSSimpleCString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static int compare(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int64(
      _self,
      _objc.getSelector("compare:options:range:"),
      arg,
      options,
      range,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSimpleCString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fastestEncoding(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fastestEncoding"),
    );
  }

  static int getBytes(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg, {
    @required int maxLength,
    @required Pointer<Uint64> usedLength,
    @required int encoding,
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:"),
      arg,
      maxLength,
      usedLength,
      encoding,
      options,
      range,
      remainingRange,
    );
  }

  static void getCharacters(
    Pointer<NSSimpleCString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static int hasPrefix(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPrefix:"),
      arg,
    );
  }

  static int hasSuffix(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSuffix:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCStringNoCopy(
    Pointer<NSSimpleCString> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCStringNoCopy:length:"),
      arg,
      length,
    );
  }

  static int isEqual(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToString(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToString:"),
      arg,
    );
  }

  static int length(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static int smallestEncoding(
    Pointer<NSSimpleCString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("smallestEncoding"),
    );
  }

  static Pointer<Void> stringByAppendingString(
    Pointer<NSSimpleCString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingString:"),
      arg,
    );
  }
}

/// Objective-C class _NSSimpleOrthography_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSimpleOrthography extends Struct<NSSimpleOrthography> {
  factory NSSimpleOrthography._() {
    throw UnimplementedError();
  }
  static Pointer<NSSimpleOrthography> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSimpleOrthography").cast<NSSimpleOrthography>();
  }

  static Pointer<Void> allLanguages(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allLanguages"),
    );
  }

  static Pointer<Void> allScripts(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allScripts"),
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> dominantLanguage(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantLanguage"),
    );
  }

  static Pointer<Void> dominantLanguageForScript(
    Pointer<NSSimpleOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dominantLanguageForScript:"),
      arg,
    );
  }

  static Pointer<Void> dominantScript(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dominantScript"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSimpleOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSimpleOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithDominantScript(
    Pointer<NSSimpleOrthography> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> languageMap,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithDominantScript:languageMap:"),
      arg,
      languageMap,
    );
  }

  static Pointer<Void> initWithFlags(
    Pointer<NSSimpleOrthography> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint32_returns_p(
      _self,
      _objc.getSelector("initWithFlags:"),
      arg,
    );
  }

  static Pointer<Void> languageMap(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("languageMap"),
    );
  }

  static Pointer<Void> languagesForScript(
    Pointer<NSSimpleOrthography> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("languagesForScript:"),
      arg,
    );
  }

  static int orthographyFlags(
    Pointer<NSSimpleOrthography> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("orthographyFlags"),
    );
  }
}

/// Objective-C class _NSSimpleRegularExpressionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSimpleRegularExpressionCheckingResult
    extends Struct<NSSimpleRegularExpressionCheckingResult> {
  factory NSSimpleRegularExpressionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSSimpleRegularExpressionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSimpleRegularExpressionCheckingResult")
        .cast<NSSimpleRegularExpressionCheckingResult>();
  }

  static void dealloc(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> initWithRangeArray(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRangeArray:regularExpression:"),
      arg,
      regularExpression,
    );
  }

  static Pointer<Void> initWithRanges(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
    Pointer<Pointer<Void>> arg, {
    @required int count,
    @required Pointer<Void> regularExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithRanges:count:regularExpression:"),
      arg,
      count,
      regularExpression,
    );
  }

  static int numberOfRanges(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfRanges"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> rangeArray(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeArray"),
    );
  }

  static Pointer<Void> rangeAtIndex(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> regularExpression(
    Pointer<NSSimpleRegularExpressionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularExpression"),
    );
  }
}

/// Objective-C class _NSSingleByteEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSingleByteEncodingDetector
    extends Struct<NSSingleByteEncodingDetector> {
  factory NSSingleByteEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSSingleByteEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSingleByteEncodingDetector")
        .cast<NSSingleByteEncodingDetector>();
  }

  static double confidence(
    Pointer<NSSingleByteEncodingDetector> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("confidence"),
    );
  }
}

/// Objective-C class _NSSmartPunctuationController_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSmartPunctuationController
    extends Struct<NSSmartPunctuationController> {
  factory NSSmartPunctuationController._() {
    throw UnimplementedError();
  }
  static Pointer<NSSmartPunctuationController> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSmartPunctuationController")
        .cast<NSSmartPunctuationController>();
  }

  static Pointer<Void> client(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("client"),
    );
  }

  static void clientDidReplaceRange(
    Pointer<NSSmartPunctuationController> _self,
    Pointer<Void> arg, {
    @required int changeInLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("clientDidReplaceRange:changeInLength:"),
      arg,
      changeInLength,
    );
  }

  static void dealloc(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setClient(
    Pointer<NSSmartPunctuationController> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setClient:"),
      arg,
    );
  }

  static void setSmartDashesEnabled(
    Pointer<NSSmartPunctuationController> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSmartDashesEnabled:"),
      arg,
    );
  }

  static void setSmartQuoteOptions(
    Pointer<NSSmartPunctuationController> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSmartQuoteOptions:"),
      arg,
    );
  }

  static void setSmartQuotesEnabled(
    Pointer<NSSmartPunctuationController> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSmartQuotesEnabled:"),
      arg,
    );
  }

  static int smartDashesEnabled(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("smartDashesEnabled"),
    );
  }

  static Pointer<Void> smartQuoteOptions(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("smartQuoteOptions"),
    );
  }

  static int smartQuotesEnabled(
    Pointer<NSSmartPunctuationController> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("smartQuotesEnabled"),
    );
  }
}

/// Objective-C class _NSSmartQuoteOptions_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSmartQuoteOptions extends Struct<NSSmartQuoteOptions> {
  factory NSSmartQuoteOptions._() {
    throw UnimplementedError();
  }
  static Pointer<NSSmartQuoteOptions> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSmartQuoteOptions").cast<NSSmartQuoteOptions>();
  }

  static Pointer<Void> apostrophe(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("apostrophe"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSmartQuoteOptions> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSmartQuoteOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSmartQuoteOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithLeftSingleQuote(
    Pointer<NSSmartQuoteOptions> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> rightSingleQuote,
    @required Pointer<Void> apostrophe,
    @required Pointer<Void> leftDoubleQuote,
    @required Pointer<Void> rightDoubleQuote,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithLeftSingleQuote:rightSingleQuote:apostrophe:leftDoubleQuote:rightDoubleQuote:"),
      arg,
      rightSingleQuote,
      apostrophe,
      leftDoubleQuote,
      rightDoubleQuote,
    );
  }

  static int isEqual(
    Pointer<NSSmartQuoteOptions> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> leftDoubleQuote(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftDoubleQuote"),
    );
  }

  static Pointer<Void> leftSingleQuote(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftSingleQuote"),
    );
  }

  static Pointer<Void> rightDoubleQuote(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightDoubleQuote"),
    );
  }

  static Pointer<Void> rightSingleQuote(
    Pointer<NSSmartQuoteOptions> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightSingleQuote"),
    );
  }
}

/// Objective-C class _NSSocketPort_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSocketPort extends Struct<NSSocketPort> {
  factory NSSocketPort._() {
    throw UnimplementedError();
  }
  static Pointer<NSSocketPort> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSocketPort").cast<NSSocketPort>();
  }

  static void addConnection(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toRunLoop,
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("addConnection:toRunLoop:forMode:"),
      arg,
      toRunLoop,
      forMode,
    );
  }

  static Pointer<Void> address(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("address"),
    );
  }

  static void dealloc(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void handleConnDeath(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handleConnDeath:"),
      arg,
    );
  }

  static void handlePortMessage(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("handlePortMessage:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initRemoteWithProtocolFamily(
    Pointer<NSSocketPort> _self,
    int arg, {
    @required int socketType,
    @required int protocol,
    @required Pointer<Void> address,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Int32_Int32_p_returns_p(
      _self,
      _objc.getSelector(
          "initRemoteWithProtocolFamily:socketType:protocol:address:"),
      arg,
      socketType,
      protocol,
      address,
    );
  }

  static Pointer<Void> initRemoteWithTCPPort(
    Pointer<NSSocketPort> _self,
    int arg, {
    @required Pointer<Void> host,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_p_returns_p(
      _self,
      _objc.getSelector("initRemoteWithTCPPort:host:"),
      arg,
      host,
    );
  }

  static Pointer<Void> initWithProtocolFamily$socketType$protocol$address$(
    Pointer<NSSocketPort> _self,
    int arg, {
    @required int socketType,
    @required int protocol,
    @required Pointer<Void> address,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Int32_Int32_p_returns_p(
      _self,
      _objc.getSelector("initWithProtocolFamily:socketType:protocol:address:"),
      arg,
      socketType,
      protocol,
      address,
    );
  }

  static Pointer<Void> initWithProtocolFamily$socketType$protocol$socket$(
    Pointer<NSSocketPort> _self,
    int arg, {
    @required int socketType,
    @required int protocol,
    @required int socket,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_Int32_Int32_Int32_returns_p(
      _self,
      _objc.getSelector("initWithProtocolFamily:socketType:protocol:socket:"),
      arg,
      socketType,
      protocol,
      socket,
    );
  }

  static Pointer<Void> initWithTCPPort(
    Pointer<NSSocketPort> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_p(
      _self,
      _objc.getSelector("initWithTCPPort:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isValid(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static int protocol(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("protocol"),
    );
  }

  static int protocolFamily(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("protocolFamily"),
    );
  }

  static void release(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static void removeFromRunLoop(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeFromRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static Pointer<Void> retain(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void scheduleInRunLoop(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forMode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleInRunLoop:forMode:"),
      arg,
      forMode,
    );
  }

  static int sendBeforeDate$msgid$components$from$reserved$(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg, {
    @required int msgid,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:msgid:components:from:reserved:"),
      arg,
      msgid,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeDate$components$from$reserved$(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int reserved,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeDate:components:from:reserved:"),
      arg,
      components,
      from,
      reserved,
    );
  }

  static int sendBeforeTime(
    Pointer<NSSocketPort> _self,
    double arg, {
    @required Pointer<Void> streamData,
    @required Pointer<Void> components,
    @required Pointer<Void> from,
    @required int msgid,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8(
      _self,
      _objc.getSelector("sendBeforeTime:streamData:components:from:msgid:"),
      arg,
      streamData,
      components,
      from,
      msgid,
    );
  }

  static void setDelegate(
    Pointer<NSSocketPort> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static Pointer<Void> signature(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("signature"),
    );
  }

  static int socket(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("socket"),
    );
  }

  static int socketType(
    Pointer<NSSocketPort> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("socketType"),
    );
  }
}

/// Objective-C class _NSSocketPortNameServer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSocketPortNameServer extends Struct<NSSocketPortNameServer> {
  factory NSSocketPortNameServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSSocketPortNameServer> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSocketPortNameServer")
        .cast<NSSocketPortNameServer>();
  }

  static int defaultNameServerPortNumber(
    Pointer<NSSocketPortNameServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint16(
      _self,
      _objc.getSelector("defaultNameServerPortNumber"),
    );
  }

  static void netService$didNotPublish$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didNotPublish,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("netService:didNotPublish:"),
      arg,
      didNotPublish,
    );
  }

  static void netService$didNotResolve$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didNotResolve,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("netService:didNotResolve:"),
      arg,
      didNotResolve,
    );
  }

  static void netServiceDidStop(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("netServiceDidStop:"),
      arg,
    );
  }

  static void netServiceWillPublish(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("netServiceWillPublish:"),
      arg,
    );
  }

  static void netServiceWillResolve(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("netServiceWillResolve:"),
      arg,
    );
  }

  static Pointer<Void> portForName$host$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> host,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:host:"),
      arg,
      host,
    );
  }

  static Pointer<Void> portForName$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("portForName:"),
      arg,
    );
  }

  static Pointer<Void> portForName$host$nameServerPortNumber$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> host,
    @required int nameServerPortNumber,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint16_returns_p(
      _self,
      _objc.getSelector("portForName:host:nameServerPortNumber:"),
      arg,
      host,
      nameServerPortNumber,
    );
  }

  static int registerPort$name$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerPort:name:"),
      arg,
      name,
    );
  }

  static int registerPort$name$nameServerPortNumber$(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> name,
    @required int nameServerPortNumber,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint16_returns_Int8(
      _self,
      _objc.getSelector("registerPort:name:nameServerPortNumber:"),
      arg,
      name,
      nameServerPortNumber,
    );
  }

  static int removePortForName(
    Pointer<NSSocketPortNameServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("removePortForName:"),
      arg,
    );
  }

  static void setDefaultNameServerPortNumber(
    Pointer<NSSocketPortNameServer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint16_returns_void(
      _self,
      _objc.getSelector("setDefaultNameServerPortNumber:"),
      arg,
    );
  }
}

/// Objective-C class _NSSortDescriptor_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSortDescriptor extends Struct<NSSortDescriptor> {
  factory NSSortDescriptor._() {
    throw UnimplementedError();
  }
  static Pointer<NSSortDescriptor> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSortDescriptor").cast<NSSortDescriptor>();
  }

  static void allowEvaluation(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static int ascending(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ascending"),
    );
  }

  static Pointer<Void> comparator(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("comparator"),
    );
  }

  static int compareObject(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compareObject:toObject:"),
      arg,
      toObject,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSortDescriptor> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithKey$ascending$(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg, {
    @required int ascending,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithKey:ascending:"),
      arg,
      ascending,
    );
  }

  static Pointer<Void> initWithKey$ascending$selector$(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg, {
    @required int ascending,
    @required Pointer<Void> selector,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithKey:ascending:selector:"),
      arg,
      ascending,
      selector,
    );
  }

  static Pointer<Void> initWithKey$ascending$comparator$(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg, {
    @required int ascending,
    @required Pointer<Void> comparator,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_returns_p(
      _self,
      _objc.getSelector("initWithKey:ascending:comparator:"),
      arg,
      ascending,
      comparator,
    );
  }

  static int isEqual(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> key(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSSortDescriptor> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static Pointer<Void> reversedSortDescriptor(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reversedSortDescriptor"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSSortDescriptor> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }
}

/// Objective-C class _NSSpecifierTest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSpecifierTest extends Struct<NSSpecifierTest> {
  factory NSSpecifierTest._() {
    throw UnimplementedError();
  }
  static Pointer<NSSpecifierTest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSpecifierTest").cast<NSSpecifierTest>();
  }

  static void dealloc(
    Pointer<NSSpecifierTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSpecifierTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSpecifierTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSSpecifierTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSpecifierTest> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithObjectSpecifier(
    Pointer<NSSpecifierTest> _self,
    Pointer<Void> arg, {
    @required int comparisonOperator,
    @required Pointer<Void> testObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithObjectSpecifier:comparisonOperator:testObject:"),
      arg,
      comparisonOperator,
      testObject,
    );
  }

  static int isTrue(
    Pointer<NSSpecifierTest> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isTrue"),
    );
  }
}

/// Objective-C class _NSSpellCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSpellCheckingResult extends Struct<NSSpellCheckingResult> {
  factory NSSpellCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSSpellCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSpellCheckingResult")
        .cast<NSSpellCheckingResult>();
  }

  static void encodeWithCoder(
    Pointer<NSSpellCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSpellCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSSpellCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:"),
      arg,
    );
  }

  static Pointer<Void> range(
    Pointer<NSSpellCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSSpellCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSSpellCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }
}

/// Objective-C class _NSSpellServer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSpellServer extends Struct<NSSpellServer> {
  factory NSSpellServer._() {
    throw UnimplementedError();
  }
  static Pointer<NSSpellServer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSpellServer").cast<NSSpellServer>();
  }

  static Pointer<Void> autocorrectionDictionaryForLanguage(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> isGerman,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("autocorrectionDictionaryForLanguage:isGerman:"),
      arg,
      isGerman,
    );
  }

  static Pointer<Void> checkString$offset$types$options$orthography$wordCount$(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required int offset,
    @required int types,
    @required Pointer<Void> options,
    @required Pointer<Void> orthography,
    @required Pointer<Int64> wordCount,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "checkString:offset:types:options:orthography:wordCount:"),
      arg,
      offset,
      types,
      options,
      orthography,
      wordCount,
    );
  }

  static Pointer<Void>
      checkString$offset$types$options$orthography$learnedDictionaries$wordCount$(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required int offset,
    @required int types,
    @required Pointer<Void> options,
    @required Pointer<Void> orthography,
    @required Pointer<Void> learnedDictionaries,
    @required Pointer<Int64> wordCount,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "checkString:offset:types:options:orthography:learnedDictionaries:wordCount:"),
      arg,
      offset,
      types,
      options,
      orthography,
      learnedDictionaries,
      wordCount,
    );
  }

  static Pointer<Void> correctionForString(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> language,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("correctionForString:language:"),
      arg,
      language,
    );
  }

  static Pointer<Pointer<Void>> createDictHashTable(
    Pointer<NSSpellServer> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("createDictHashTable:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSpellServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSSpellServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> dictionaryInfo(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryInfo:"),
      arg,
    );
  }

  static int isWord(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inDictionaries,
    @required int caseSensitive,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("isWord:inDictionaries:caseSensitive:"),
      arg,
      inDictionaries,
      caseSensitive,
    );
  }

  static int isWordInUserDictionaries(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required int caseSensitive,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("isWordInUserDictionaries:caseSensitive:"),
      arg,
      caseSensitive,
    );
  }

  static void normalizeUserDictionary(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("normalizeUserDictionary:"),
      arg,
    );
  }

  static Pointer<Void> openUserDictionary(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("openUserDictionary:"),
      arg,
    );
  }

  static int registerLanguage(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> byVendor,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("registerLanguage:byVendor:"),
      arg,
      byVendor,
    );
  }

  static void run(
    Pointer<NSSpellServer> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("run"),
    );
  }

  static void setDelegate(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static int sizeOfDictionary(
    Pointer<NSSpellServer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("sizeOfDictionary:"),
      arg,
    );
  }
}

/// Objective-C class _NSSpellingSubstring_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSpellingSubstring extends Struct<NSSpellingSubstring> {
  factory NSSpellingSubstring._() {
    throw UnimplementedError();
  }
  static Pointer<NSSpellingSubstring> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSpellingSubstring").cast<NSSpellingSubstring>();
  }

  static int characterAtIndex(
    Pointer<NSSpellingSubstring> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSpellingSubstring> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getCharacters(
    Pointer<NSSpellingSubstring> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static Pointer<Void> initWithOriginalString(
    Pointer<NSSpellingSubstring> _self,
    Pointer<Void> arg, {
    @required int startingOffset,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOriginalString:startingOffset:"),
      arg,
      startingOffset,
    );
  }

  static int length(
    Pointer<NSSpellingSubstring> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

/// Objective-C class _NSStackInContainerRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSStackInContainerRule extends Struct<NSStackInContainerRule> {
  factory NSStackInContainerRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSStackInContainerRule> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSStackInContainerRule")
        .cast<NSStackInContainerRule>();
  }

  static Pointer<Void> containingRect(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("containingRect"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSStackInContainerRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithOrientation(
    Pointer<NSStackInContainerRule> _self,
    int arg, {
    @required Pointer<Void> stackedRects,
    @required Pointer<Void> containingRect,
    @required double spacing,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_p_float64_returns_p(
      _self,
      _objc.getSelector(
          "initWithOrientation:stackedRects:containingRect:spacing:"),
      arg,
      stackedRects,
      containingRect,
      spacing,
    );
  }

  static int isEqual(
    Pointer<NSStackInContainerRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static int orientation(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("orientation"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }

  static double spacing(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("spacing"),
    );
  }

  static Pointer<Void> stackedRects(
    Pointer<NSStackInContainerRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stackedRects"),
    );
  }
}

/// Objective-C class _NSStackLayoutRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSStackLayoutRule extends Struct<NSStackLayoutRule> {
  factory NSStackLayoutRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSStackLayoutRule> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSStackLayoutRule").cast<NSStackLayoutRule>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSStackLayoutRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithOrientation(
    Pointer<NSStackLayoutRule> _self,
    int arg, {
    @required Pointer<Void> stackedRects,
    @required double spacing,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithOrientation:stackedRects:spacing:"),
      arg,
      stackedRects,
      spacing,
    );
  }

  static int isEqual(
    Pointer<NSStackLayoutRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static int orientation(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("orientation"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }

  static double spacing(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("spacing"),
    );
  }

  static Pointer<Void> stackedRects(
    Pointer<NSStackLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stackedRects"),
    );
  }
}

/// Objective-C class _NSStackObservedValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSStackObservedValue extends Struct<NSStackObservedValue> {
  factory NSStackObservedValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSStackObservedValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSStackObservedValue").cast<NSStackObservedValue>();
  }

  static Pointer<Void> autorelease(
    Pointer<NSStackObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static void release(
    Pointer<NSStackObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSStackObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSStackObservedValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }

  static void setError(
    Pointer<NSStackObservedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setError:"),
      arg,
    );
  }

  static void setFinished(
    Pointer<NSStackObservedValue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setFinished:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSStackObservedValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSString_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSString extends Struct<NSString> {
  factory NSString._() {
    throw UnimplementedError();
  }
  static Pointer<NSString> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSString").cast<NSString>();
  }

  static Pointer<Void> CAMLType(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAMLType"),
    );
  }

  static Pointer<Void> CKBase64DecodedString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKBase64DecodedString"),
    );
  }

  static Pointer<Void> CKBase64EncodedURLSafeString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKBase64EncodedURLSafeString"),
    );
  }

  static Pointer<Void> CKDPIdentifier_Device(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_Device"),
    );
  }

  static Pointer<Void> CKDPIdentifier_Raw(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_Raw"),
    );
  }

  static Pointer<Void> CKDPIdentifier_Record(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_Record"),
    );
  }

  static Pointer<Void> CKDPIdentifier_ShareId(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_ShareId"),
    );
  }

  static Pointer<Void> CKDPIdentifier_Subscription(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_Subscription"),
    );
  }

  static Pointer<Void> CKDPIdentifier_User(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_User"),
    );
  }

  static Pointer<Void> CKDPIdentifier_Zone(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKDPIdentifier_Zone"),
    );
  }

  static Pointer<Void> CKMangledDocumentNameForURLFragment(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKMangledDocumentNameForURLFragment"),
    );
  }

  static Pointer<Void> CKNilIfLengthZero(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKNilIfLengthZero"),
    );
  }

  static Pointer<Void> CKSHA256(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKSHA256"),
    );
  }

  static Pointer<Void> CKSafeHashStringForPathComponent(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKSafeHashStringForPathComponent"),
    );
  }

  static Pointer<Void> CKSafeStringForPathComponent(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKSafeStringForPathComponent"),
    );
  }

  static Pointer<Void> CKSafeStringForURLPathComponent(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKSafeStringForURLPathComponent"),
    );
  }

  static Pointer<Void> CKSafeStringForURLWithCharsToBeEscaped(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CKSafeStringForURLWithCharsToBeEscaped:"),
      arg,
    );
  }

  static Pointer<Void> CKSanitizedPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKSanitizedPath"),
    );
  }

  static Pointer<Void> CKUnmangledDocumentNameFromURLFragment(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CKUnmangledDocumentNameFromURLFragment"),
    );
  }

  static Pointer<Utf8> UTF8String(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UTF8String"),
    );
  }

  static Pointer<Void> abCaseNormalizedCopy(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abCaseNormalizedCopy"),
    );
  }

  static void abEnumerateCharactersWithOptions(
    Pointer<NSString> _self,
    int arg, {
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("abEnumerateCharactersWithOptions:usingBlock:"),
      arg,
      usingBlock,
    );
  }

  static int abIsBlank(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("abIsBlank"),
    );
  }

  static Pointer<Void> abNameComponentTokens(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abNameComponentTokens"),
    );
  }

  static Pointer<Void> abNameComponentTokensUsingLocale(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Int64> inferredNameOrder,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("abNameComponentTokensUsingLocale:inferredNameOrder:"),
      arg,
      inferredNameOrder,
    );
  }

  static Pointer<Void> abNormalizedUID(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abNormalizedUID"),
    );
  }

  static Pointer<Void> abSha1HashString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abSha1HashString"),
    );
  }

  static Pointer<Void> abStandardizedPhoneNumber(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abStandardizedPhoneNumber"),
    );
  }

  static Pointer<Void> abStringByRemovingPunctuation(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abStringByRemovingPunctuation"),
    );
  }

  static Pointer<Void> abTokens(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abTokens"),
    );
  }

  static Pointer<Void> abUIDWithTableName(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("abUIDWithTableName:"),
      arg,
    );
  }

  static Pointer<Void> abVCardDataRepresentation(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abVCardDataRepresentation"),
    );
  }

  static Pointer<Void> abWords(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("abWords"),
    );
  }

  static Pointer<Void> ab_queryPieces(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ab_queryPieces"),
    );
  }

  static Pointer<Void> ab_queryPiecesNoLowerCase(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ab_queryPiecesNoLowerCase"),
    );
  }

  static int boolValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("boolValue"),
    );
  }

  static Pointer<Utf8> cString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cString"),
    );
  }

  static int cStringLength(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("cStringLength"),
    );
  }

  static Pointer<Utf8> cStringUsingEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("cStringUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> camelCase(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("camelCase"),
    );
  }

  static int canBeConvertedToEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("canBeConvertedToEncoding:"),
      arg,
    );
  }

  static Pointer<Void> capitalizedString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("capitalizedString"),
    );
  }

  static Pointer<Void> capitalizedStringWithLocale(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("capitalizedStringWithLocale:"),
      arg,
    );
  }

  static int caseInsensitiveCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("caseInsensitiveCompare:"),
      arg,
    );
  }

  static int characterAtIndex(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint16(
      _self,
      _objc.getSelector("characterAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> ckShortDescription(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ckShortDescription"),
    );
  }

  static Pointer<Void> cl_json_serializeKey(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cl_json_serializeKey"),
    );
  }

  static void cl_json_serializeValue(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("cl_json_serializeValue:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> clean(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("clean"),
    );
  }

  static Pointer<Void> commonPrefixWithString(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("commonPrefixWithString:options:"),
      arg,
      options,
    );
  }

  static int compare$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:"),
      arg,
    );
  }

  static int compare$options$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int64(
      _self,
      _objc.getSelector("compare:options:"),
      arg,
      options,
    );
  }

  static int compare$options$range$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int64(
      _self,
      _objc.getSelector("compare:options:range:"),
      arg,
      options,
      range,
    );
  }

  static int compare$options$range$locale$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_Int64(
      _self,
      _objc.getSelector("compare:options:range:locale:"),
      arg,
      options,
      range,
      locale,
    );
  }

  static int completePathIntoString(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg, {
    @required int caseSensitive,
    @required Pointer<Pointer<Void>> matchesIntoArray,
    @required Pointer<Void> filterTypes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_p_p_returns_Uint64(
      _self,
      _objc.getSelector(
          "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:"),
      arg,
      caseSensitive,
      matchesIntoArray,
      filterTypes,
    );
  }

  static Pointer<Void> componentsByLanguage(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("componentsByLanguage:"),
      arg,
    );
  }

  static Pointer<Void> componentsSeparatedByCharactersInSet(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("componentsSeparatedByCharactersInSet:"),
      arg,
    );
  }

  static Pointer<Void> componentsSeparatedByString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("componentsSeparatedByString:"),
      arg,
    );
  }

  static int containsString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsString:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> cutStringByResolvingAndStandardizingPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("cutStringByResolvingAndStandardizingPath"),
    );
  }

  static Pointer<Void> dataUsingEncoding$allowLossyConversion$(
    Pointer<NSString> _self,
    int arg, {
    @required int allowLossyConversion,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("dataUsingEncoding:allowLossyConversion:"),
      arg,
      allowLossyConversion,
    );
  }

  static Pointer<Void> dataUsingEncoding$(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("dataUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> decimalValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decimalValue"),
    );
  }

  static Pointer<Void> decomposedStringWithCanonicalMapping(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decomposedStringWithCanonicalMapping"),
    );
  }

  static Pointer<Void> decomposedStringWithCompatibilityMapping(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decomposedStringWithCompatibilityMapping"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> displayableString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("displayableString"),
    );
  }

  static double doubleValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleValue"),
    );
  }

  static void encodeWithCAMLWriter(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCAMLWriter:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Utf8> encodedBytesAndReturnLength(
    Pointer<NSString> _self,
    Pointer<Uint64> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("encodedBytesAndReturnLength:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> encodedDataAndReturnError(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("encodedDataAndReturnError:"),
      arg,
    );
  }

  static void enumerateLinesUsingBlock(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("enumerateLinesUsingBlock:"),
      arg,
    );
  }

  static void enumerateLinguisticTagsInRange(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Void> orthography,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector(
          "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:"),
      arg,
      scheme,
      options,
      orthography,
      usingBlock,
    );
  }

  static void enumerateSubstringsInRange(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> usingBlock,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("enumerateSubstringsInRange:options:usingBlock:"),
      arg,
      options,
      usingBlock,
    );
  }

  static int fastestEncoding(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fastestEncoding"),
    );
  }

  static Pointer<Utf8> fileSystemRepresentation(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileSystemRepresentation"),
    );
  }

  static Pointer<Void> firstCharacter(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("firstCharacter"),
    );
  }

  static double floatValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float32(
      _self,
      _objc.getSelector("floatValue"),
    );
  }

  static Pointer<Void> formatConfiguration(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("formatConfiguration"),
    );
  }

  static int
      getBytes$maxLength$filledLength$encoding$allowLossyConversion$range$remainingRange$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
    @required Pointer<Uint64> filledLength,
    @required int encoding,
    @required int allowLossyConversion,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:"),
      arg,
      maxLength,
      filledLength,
      encoding,
      allowLossyConversion,
      range,
      remainingRange,
    );
  }

  static int
      getBytes$maxLength$usedLength$encoding$options$range$remainingRange$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int maxLength,
    @required Pointer<Uint64> usedLength,
    @required int encoding,
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:"),
      arg,
      maxLength,
      usedLength,
      encoding,
      options,
      range,
      remainingRange,
    );
  }

  static int getCString$maxLength$encoding$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_returns_Int8(
      _self,
      _objc.getSelector("getCString:maxLength:encoding:"),
      arg,
      maxLength,
      encoding,
    );
  }

  static void getCString$maxLength$range$remainingRange$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
    @required Pointer<Void> range,
    @required Pointer<Pointer<Void>> remainingRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_void(
      _self,
      _objc.getSelector("getCString:maxLength:range:remainingRange:"),
      arg,
      maxLength,
      range,
      remainingRange,
    );
  }

  static void getCString$maxLength$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getCString:maxLength:"),
      arg,
      maxLength,
    );
  }

  static void getCString$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCString:"),
      arg,
    );
  }

  static void getCharacters$range$(
    Pointer<NSString> _self,
    Pointer<Uint16> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:range:"),
      arg,
      range,
    );
  }

  static void getCharacters$(
    Pointer<NSString> _self,
    Pointer<Uint16> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getCharacters:"),
      arg,
    );
  }

  static int getExternalRepresentation(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> extendedAttributes,
    @required Pointer<Void> forWritingToURLOrPath,
    @required int usingEncoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector(
          "getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:"),
      arg,
      extendedAttributes,
      forWritingToURLOrPath,
      usingEncoding,
      error,
    );
  }

  static int getFileSystemRepresentation(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int maxLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_Int8(
      _self,
      _objc.getSelector("getFileSystemRepresentation:maxLength:"),
      arg,
      maxLength,
    );
  }

  static void getLineStart(
    Pointer<NSString> _self,
    Pointer<Uint64> arg, {
    @required Pointer<Uint64> end,
    @required Pointer<Uint64> contentsEnd,
    @required Pointer<Void> forRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getLineStart:end:contentsEnd:forRange:"),
      arg,
      end,
      contentsEnd,
      forRange,
    );
  }

  static void getParagraphStart(
    Pointer<NSString> _self,
    Pointer<Uint64> arg, {
    @required Pointer<Uint64> end,
    @required Pointer<Uint64> contentsEnd,
    @required Pointer<Void> forRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getParagraphStart:end:contentsEnd:forRange:"),
      arg,
      end,
      contentsEnd,
      forRange,
    );
  }

  static int hasPrefix(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasPrefix:"),
      arg,
    );
  }

  static int hasSuffix(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("hasSuffix:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytesNoCopy(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int length,
    @required int encoding,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithBytesNoCopy:length:encoding:freeWhenDone:"),
      arg,
      length,
      encoding,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCString$encoding$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCString:encoding:"),
      arg,
      encoding,
    );
  }

  static Pointer<Void> initWithCString$length$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCString:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithCString$(
    Pointer<NSString> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCString:"),
      arg,
    );
  }

  static Pointer<Void> initWithCStringNoCopy(
    Pointer<NSString> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCStringNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCharacters(
    Pointer<NSString> _self,
    Pointer<Uint16> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithCharacters:length:"),
      arg,
      length,
    );
  }

  static Pointer<Void> initWithCharactersNoCopy(
    Pointer<NSString> _self,
    Pointer<Uint16> arg, {
    @required int length,
    @required int freeWhenDone,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("initWithCharactersNoCopy:length:freeWhenDone:"),
      arg,
      length,
      freeWhenDone,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfFile$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfFile$encoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int encoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:encoding:error:"),
      arg,
      encoding,
      error,
    );
  }

  static Pointer<Void> initWithContentsOfFile$usedEncoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> usedEncoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfFile:usedEncoding:error:"),
      arg,
      usedEncoding,
      error,
    );
  }

  static Pointer<Void> initWithContentsOfURL$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithContentsOfURL$usedEncoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> usedEncoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:usedEncoding:error:"),
      arg,
      usedEncoding,
      error,
    );
  }

  static Pointer<Void> initWithContentsOfURL$encoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int encoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:encoding:error:"),
      arg,
      encoding,
      error,
    );
  }

  static Pointer<Void> initWithData$encoding$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int encoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithData:encoding:"),
      arg,
      encoding,
    );
  }

  static Pointer<Void> initWithData$usedEncoding$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> usedEncoding,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:usedEncoding:"),
      arg,
      usedEncoding,
    );
  }

  static Pointer<Void> initWithFormat$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:"),
      arg,
    );
  }

  static Pointer<Void> initWithFormat$arguments$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:arguments:"),
      arg,
      arguments,
    );
  }

  static Pointer<Void> initWithFormat$locale$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:locale:"),
      arg,
      locale,
    );
  }

  static Pointer<Void> initWithFormat$locale$arguments$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> locale,
    @required Pointer<Void> arguments,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithFormat:locale:arguments:"),
      arg,
      locale,
      arguments,
    );
  }

  static Pointer<Void> initWithStdString(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg, {
    @required int copy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithStdString:copy:"),
      arg,
      copy,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithUTF8String(
    Pointer<NSString> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUTF8String:"),
      arg,
    );
  }

  static Pointer<Void> initWithValidatedFormat(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> validFormatSpecifiers,
    @required Pointer<Void> locale,
    @required Pointer<Void> arguments,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:"),
      arg,
      validFormatSpecifiers,
      locale,
      arguments,
      error,
    );
  }

  static int intValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("intValue"),
    );
  }

  static int integerValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("integerValue"),
    );
  }

  static Pointer<Void> intern(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("intern"),
    );
  }

  static int isAbsolutePath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAbsolutePath"),
    );
  }

  static int isCaseInsensitiveLike(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCaseInsensitiveLike:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToString:"),
      arg,
    );
  }

  static int isLike(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isLike:"),
      arg,
    );
  }

  static int isNSString__(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSString__"),
    );
  }

  static int isObjcReservedWord(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isObjcReservedWord"),
    );
  }

  static Pointer<Void> lastPathComponent(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lastPathComponent"),
    );
  }

  static int length(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }

  static int lengthOfBytesUsingEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("lengthOfBytesUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> lineRangeForRange(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("lineRangeForRange:"),
      arg,
    );
  }

  static Pointer<Void> linguisticTagsInRange(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> scheme,
    @required int options,
    @required Pointer<Void> orthography,
    @required Pointer<Pointer<Void>> tokenRanges,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "linguisticTagsInRange:scheme:options:orthography:tokenRanges:"),
      arg,
      scheme,
      options,
      orthography,
      tokenRanges,
    );
  }

  static Pointer<Void> loadDataWithTypeIdentifier(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forItemProviderCompletionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "loadDataWithTypeIdentifier:forItemProviderCompletionHandler:"),
      arg,
      forItemProviderCompletionHandler,
    );
  }

  static Pointer<Void> localizedCapitalizedString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedCapitalizedString"),
    );
  }

  static int localizedCaseInsensitiveCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("localizedCaseInsensitiveCompare:"),
      arg,
    );
  }

  static int localizedCaseInsensitiveContainsString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("localizedCaseInsensitiveContainsString:"),
      arg,
    );
  }

  static int localizedCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("localizedCompare:"),
      arg,
    );
  }

  static int localizedHasPrefix(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("localizedHasPrefix:"),
      arg,
    );
  }

  static int localizedHasSuffix(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("localizedHasSuffix:"),
      arg,
    );
  }

  static Pointer<Void> localizedLowercaseString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedLowercaseString"),
    );
  }

  static int localizedStandardCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("localizedStandardCompare:"),
      arg,
    );
  }

  static int localizedStandardContainsString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("localizedStandardContainsString:"),
      arg,
    );
  }

  static Pointer<Void> localizedStandardRangeOfString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("localizedStandardRangeOfString:"),
      arg,
    );
  }

  static Pointer<Void> localizedUppercaseString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localizedUppercaseString"),
    );
  }

  static int longLongValue(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("longLongValue"),
    );
  }

  static Pointer<Utf8> lossyCString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lossyCString"),
    );
  }

  static Pointer<Void> lowercaseString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("lowercaseString"),
    );
  }

  static Pointer<Void> lowercaseStringWithLocale(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("lowercaseStringWithLocale:"),
      arg,
    );
  }

  static int ls_isRecursiveKey(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("ls_isRecursiveKey"),
    );
  }

  static Pointer<Void> ls_updatedKey(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ls_updatedKey"),
    );
  }

  static int matches(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matches:"),
      arg,
    );
  }

  static int matchesPattern$caseInsensitive$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int caseInsensitive,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("matchesPattern:caseInsensitive:"),
      arg,
      caseInsensitive,
    );
  }

  static int matchesPattern$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesPattern:"),
      arg,
    );
  }

  static int matchesString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("matchesString:"),
      arg,
    );
  }

  static int maximumLengthOfBytesUsingEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_Uint64(
      _self,
      _objc.getSelector("maximumLengthOfBytesUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> mutableCopyWithZone(
    Pointer<NSString> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("mutableCopyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> paragraphRangeForRange(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("paragraphRangeForRange:"),
      arg,
    );
  }

  static Pointer<Void> pascalCase(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pascalCase"),
    );
  }

  static Pointer<Void> pathComponents(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathComponents"),
    );
  }

  static Pointer<Void> pathExtension(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pathExtension"),
    );
  }

  static Pointer<Void> pinyinStringFromPinyinWithToneNumber(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pinyinStringFromPinyinWithToneNumber"),
    );
  }

  static Pointer<Void> plural(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("plural"),
    );
  }

  static Pointer<Void> precomposedStringWithCanonicalMapping(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("precomposedStringWithCanonicalMapping"),
    );
  }

  static Pointer<Void> precomposedStringWithCompatibilityMapping(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("precomposedStringWithCompatibilityMapping"),
    );
  }

  static Pointer<Void> propertyList(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("propertyList"),
    );
  }

  static Pointer<Void> propertyListFromStringsFileFormat(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("propertyListFromStringsFileFormat"),
    );
  }

  static Pointer<Void> quotedStringRepresentation(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("quotedStringRepresentation"),
    );
  }

  static Pointer<Void> rangeOfCharacterFromSet$options$range$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("rangeOfCharacterFromSet:options:range:"),
      arg,
      options,
      range,
    );
  }

  static Pointer<Void> rangeOfCharacterFromSet$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfCharacterFromSet:"),
      arg,
    );
  }

  static Pointer<Void> rangeOfCharacterFromSet$options$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeOfCharacterFromSet:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> rangeOfComposedCharacterSequenceAtIndex(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeOfComposedCharacterSequenceAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> rangeOfComposedCharacterSequencesForRange(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfComposedCharacterSequencesForRange:"),
      arg,
    );
  }

  static Pointer<Void> rangeOfString$(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfString:"),
      arg,
    );
  }

  static Pointer<Void> rangeOfString$options$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeOfString:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> rangeOfString$options$range$locale$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfString:options:range:locale:"),
      arg,
      options,
      range,
      locale,
    );
  }

  static Pointer<Void> rangeOfString$options$range$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("rangeOfString:options:range:"),
      arg,
      options,
      range,
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static int scriptingBeginsWith(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingBeginsWith:"),
      arg,
    );
  }

  static int scriptingContains(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingContains:"),
      arg,
    );
  }

  static int scriptingEndsWith(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingEndsWith:"),
      arg,
    );
  }

  static int scriptingIsEqualTo(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsEqualTo:"),
      arg,
    );
  }

  static int scriptingIsGreaterThan(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsGreaterThan:"),
      arg,
    );
  }

  static int scriptingIsGreaterThanOrEqualTo(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsGreaterThanOrEqualTo:"),
      arg,
    );
  }

  static int scriptingIsLessThan(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsLessThan:"),
      arg,
    );
  }

  static int scriptingIsLessThanOrEqualTo(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("scriptingIsLessThanOrEqualTo:"),
      arg,
    );
  }

  static Pointer<Void> serverFormattedString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serverFormattedString"),
    );
  }

  static Pointer<Void> significantText(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("significantText"),
    );
  }

  static int simplifiedChineseCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("simplifiedChineseCompare:"),
      arg,
    );
  }

  static int smallestEncoding(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("smallestEncoding"),
    );
  }

  static Pointer<Void> standardizedURLPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardizedURLPath"),
    );
  }

  static Pointer<Void> stdString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stdString"),
    );
  }

  static Pointer<Void> stringByAbbreviatingWithTildeInPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAbbreviatingWithTildeInPath"),
    );
  }

  static Pointer<Void> stringByAddingPercentEncodingWithAllowedCharacters(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAddingPercentEncodingWithAllowedCharacters:"),
      arg,
    );
  }

  static Pointer<Void> stringByAddingPercentEscapes(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAddingPercentEscapes"),
    );
  }

  static Pointer<Void> stringByAddingPercentEscapesUsingEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("stringByAddingPercentEscapesUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingFormat(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingFormat:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingPathComponent(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingPathComponent:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingPathExtension(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingPathExtension:"),
      arg,
    );
  }

  static Pointer<Void> stringByAppendingString(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByAppendingString:"),
      arg,
    );
  }

  static Pointer<Void>
      stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector(
          "stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:"),
      arg,
    );
  }

  static Pointer<Void> stringByApplyingTransform(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int reverse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("stringByApplyingTransform:reverse:"),
      arg,
      reverse,
    );
  }

  static Pointer<Void> stringByConvertingPathToURL(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByConvertingPathToURL"),
    );
  }

  static Pointer<Void> stringByConvertingURLToPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByConvertingURLToPath"),
    );
  }

  static Pointer<Void> stringByDeletingLastPathComponent(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByDeletingLastPathComponent"),
    );
  }

  static Pointer<Void> stringByDeletingPathExtension(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByDeletingPathExtension"),
    );
  }

  static Pointer<Void> stringByExpandingTildeInPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByExpandingTildeInPath"),
    );
  }

  static Pointer<Void> stringByFoldingWithOptions(
    Pointer<NSString> _self,
    int arg, {
    @required Pointer<Void> locale,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("stringByFoldingWithOptions:locale:"),
      arg,
      locale,
    );
  }

  static Pointer<Void> stringByPaddingToLength(
    Pointer<NSString> _self,
    int arg, {
    @required Pointer<Void> withString,
    @required int startingAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_Uint64_returns_p(
      _self,
      _objc.getSelector("stringByPaddingToLength:withString:startingAtIndex:"),
      arg,
      withString,
      startingAtIndex,
    );
  }

  static Pointer<Void> stringByRemovingPercentEncoding(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByRemovingPercentEncoding"),
    );
  }

  static Pointer<Void> stringByRemovingPercentEscapes(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByRemovingPercentEscapes"),
    );
  }

  static Pointer<Void> stringByReplacingCharactersInRange(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByReplacingCharactersInRange:withString:"),
      arg,
      withString,
    );
  }

  static Pointer<Void> stringByReplacingOccurrencesOfString$withString$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByReplacingOccurrencesOfString:withString:"),
      arg,
      withString,
    );
  }

  static Pointer<Void>
      stringByReplacingOccurrencesOfString$withString$options$range$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withString,
    @required int options,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "stringByReplacingOccurrencesOfString:withString:options:range:"),
      arg,
      withString,
      options,
      range,
    );
  }

  static Pointer<Void> stringByReplacingPercentEscapesUsingEncoding(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("stringByReplacingPercentEscapesUsingEncoding:"),
      arg,
    );
  }

  static Pointer<Void> stringByResolvingSymlinksInPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByResolvingSymlinksInPath"),
    );
  }

  static Pointer<Void> stringByStandardizingPath(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByStandardizingPath"),
    );
  }

  static Pointer<Void> stringByStrippingDiacritics(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringByStrippingDiacritics"),
    );
  }

  static Pointer<Void> stringByTrimmingCharactersInSet(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringByTrimmingCharactersInSet:"),
      arg,
    );
  }

  static Pointer<Void> stringMarkingUpcaseTransitionsWithDelimiter2(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringMarkingUpcaseTransitionsWithDelimiter2:"),
      arg,
    );
  }

  static Pointer<Void> stringsByAppendingPaths(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringsByAppendingPaths:"),
      arg,
    );
  }

  static Pointer<Void> stripQuotes(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stripQuotes"),
    );
  }

  static Pointer<Void> strokeStringFromNumberString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("strokeStringFromNumberString"),
    );
  }

  static Pointer<Void> substringFromIndex(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("substringFromIndex:"),
      arg,
    );
  }

  static Pointer<Void> substringToIndex(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("substringToIndex:"),
      arg,
    );
  }

  static Pointer<Void> substringWithRange(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("substringWithRange:"),
      arg,
    );
  }

  static Pointer<Void> toneFromPinyinSyllableWithNumber(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("toneFromPinyinSyllableWithNumber"),
    );
  }

  static int traditionalChinesePinyinCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("traditionalChinesePinyinCompare:"),
      arg,
    );
  }

  static int traditionalChineseZhuyinCompare(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("traditionalChineseZhuyinCompare:"),
      arg,
    );
  }

  static Pointer<Void> uppercaseString(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uppercaseString"),
    );
  }

  static Pointer<Void> uppercaseStringWithLocale(
    Pointer<NSString> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("uppercaseStringWithLocale:"),
      arg,
    );
  }

  static Pointer<Void> variantFittingPresentationWidth(
    Pointer<NSString> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("variantFittingPresentationWidth:"),
      arg,
    );
  }

  static Pointer<Void> writableTypeIdentifiersForItemProvider(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("writableTypeIdentifiersForItemProvider"),
    );
  }

  static int writeToFile$atomically$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int atomically,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("writeToFile:atomically:"),
      arg,
      atomically,
    );
  }

  static int writeToFile$atomically$encoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int atomically,
    @required int encoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("writeToFile:atomically:encoding:error:"),
      arg,
      atomically,
      encoding,
      error,
    );
  }

  static int writeToURL$atomically$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int atomically,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("writeToURL:atomically:"),
      arg,
      atomically,
    );
  }

  static int writeToURL$atomically$encoding$error$(
    Pointer<NSString> _self,
    Pointer<Void> arg, {
    @required int atomically,
    @required int encoding,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("writeToURL:atomically:encoding:error:"),
      arg,
      atomically,
      encoding,
      error,
    );
  }

  static Pointer<Void> zhuyinSyllableFromPinyinSyllable(
    Pointer<NSString> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("zhuyinSyllableFromPinyinSyllable"),
    );
  }
}

/// Objective-C class _NSStringPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSStringPredicateOperator extends Struct<NSStringPredicateOperator> {
  factory NSStringPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSStringPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSStringPredicateOperator")
        .cast<NSStringPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSStringPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSStringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int flags(
    Pointer<NSStringPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("flags"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSStringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType(
    Pointer<NSStringPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int variant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:variant:"),
      arg,
      modifier,
      variant,
    );
  }

  static int isEqual(
    Pointer<NSStringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int options(
    Pointer<NSStringPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("options"),
    );
  }
}

/// Objective-C class _NSSubqueryExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSubqueryExpression extends Struct<NSSubqueryExpression> {
  factory NSSubqueryExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSSubqueryExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSubqueryExpression").cast<NSSubqueryExpression>();
  }

  static void acceptVisitor(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> collection(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("collection"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithExpression$usingIteratorVariable$predicate$(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingIteratorVariable,
    @required Pointer<Void> predicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithExpression:usingIteratorVariable:predicate:"),
      arg,
      usingIteratorVariable,
      predicate,
    );
  }

  static Pointer<Void> initWithExpression$usingIteratorExpression$predicate$(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> usingIteratorExpression,
    @required Pointer<Void> predicate,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc
          .getSelector("initWithExpression:usingIteratorExpression:predicate:"),
      arg,
      usingIteratorExpression,
      predicate,
    );
  }

  static int isEqual(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> minimalFormInContext(
    Pointer<NSSubqueryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("minimalFormInContext:"),
      arg,
    );
  }

  static Pointer<Void> predicate(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> variable(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variable"),
    );
  }

  static Pointer<Void> variableExpression(
    Pointer<NSSubqueryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variableExpression"),
    );
  }
}

/// Objective-C class _NSSubrangeData_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSubrangeData extends Struct<NSSubrangeData> {
  factory NSSubrangeData._() {
    throw UnimplementedError();
  }
  static Pointer<NSSubrangeData> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSubrangeData").cast<NSSubrangeData>();
  }

  static Pointer<Void> bytes(
    Pointer<NSSubrangeData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("bytes"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSubrangeData> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSubrangeData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getBytes$range$(
    Pointer<NSSubrangeData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("getBytes:range:"),
      arg,
      range,
    );
  }

  static void getBytes$length$(
    Pointer<NSSubrangeData> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getBytes:length:"),
      arg,
      length,
    );
  }

  static void getBytes$(
    Pointer<NSSubrangeData> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getBytes:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSSubrangeData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSSubrangeData> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:range:"),
      arg,
      range,
    );
  }

  static int length(
    Pointer<NSSubrangeData> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("length"),
    );
  }
}

/// Objective-C class _NSSubstitutionCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSubstitutionCheckingResult
    extends Struct<NSSubstitutionCheckingResult> {
  factory NSSubstitutionCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSSubstitutionCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSubstitutionCheckingResult")
        .cast<NSSubstitutionCheckingResult>();
  }

  static void dealloc(
    Pointer<NSSubstitutionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSSubstitutionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSubstitutionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSubstitutionCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange(
    Pointer<NSSubstitutionCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> replacementString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:replacementString:"),
      arg,
      replacementString,
    );
  }

  static Pointer<Void> range(
    Pointer<NSSubstitutionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> replacementString(
    Pointer<NSSubstitutionCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("replacementString"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSSubstitutionCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }
}

/// Objective-C class _NSSubstringPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSubstringPredicateOperator
    extends Struct<NSSubstringPredicateOperator> {
  factory NSSubstringPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSSubstringPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSSubstringPredicateOperator")
        .cast<NSSubstringPredicateOperator>();
  }

  static void encodeWithCoder(
    Pointer<NSSubstringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSubstringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithOperatorType(
    Pointer<NSSubstringPredicateOperator> _self,
    int arg, {
    @required int modifier,
    @required int variant,
    @required int position,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithOperatorType:modifier:variant:position:"),
      arg,
      modifier,
      variant,
      position,
    );
  }

  static int isEqual(
    Pointer<NSSubstringPredicateOperator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSSubstringPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static int position(
    Pointer<NSSubstringPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("position"),
    );
  }

  static Pointer<Void> selector(
    Pointer<NSSubstringPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSSubstringPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSSymbolicExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSSymbolicExpression extends Struct<NSSymbolicExpression> {
  factory NSSymbolicExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSSymbolicExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSSymbolicExpression").cast<NSSymbolicExpression>();
  }

  static Pointer<Void> constantValue(
    Pointer<NSSymbolicExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("constantValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSSymbolicExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSSymbolicExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSSymbolicExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSSymbolicExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }
}

/// Objective-C class _NSTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTask extends Struct<NSTask> {
  factory NSTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSTask> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSTask").cast<NSTask>();
  }

  static Pointer<Void> arguments(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("arguments"),
    );
  }

  static Pointer<Void> currentDirectoryPath(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentDirectoryPath"),
    );
  }

  static Pointer<Void> currentDirectoryURL(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("currentDirectoryURL"),
    );
  }

  static Pointer<Void> environment(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("environment"),
    );
  }

  static Pointer<Void> executableURL(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("executableURL"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void interrupt(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("interrupt"),
    );
  }

  static int isRunning(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRunning"),
    );
  }

  static void launch(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("launch"),
    );
  }

  static int launchAndReturnError(
    Pointer<NSTask> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("launchAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> launchPath(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("launchPath"),
    );
  }

  static int processIdentifier(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("processIdentifier"),
    );
  }

  static int qualityOfService(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static int resume(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static void setArguments(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArguments:"),
      arg,
    );
  }

  static void setCurrentDirectoryPath(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentDirectoryPath:"),
      arg,
    );
  }

  static void setCurrentDirectoryURL(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrentDirectoryURL:"),
      arg,
    );
  }

  static void setEnvironment(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEnvironment:"),
      arg,
    );
  }

  static void setExecutableURL(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExecutableURL:"),
      arg,
    );
  }

  static void setLaunchPath(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLaunchPath:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSTask> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setStandardError(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardError:"),
      arg,
    );
  }

  static void setStandardInput(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardInput:"),
      arg,
    );
  }

  static void setStandardOutput(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardOutput:"),
      arg,
    );
  }

  static void setTerminationHandler(
    Pointer<NSTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTerminationHandler:"),
      arg,
    );
  }

  static Pointer<Void> standardError(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardError"),
    );
  }

  static Pointer<Void> standardInput(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardInput"),
    );
  }

  static Pointer<Void> standardOutput(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardOutput"),
    );
  }

  static int suspend(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("suspend"),
    );
  }

  static int suspendCount(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("suspendCount"),
    );
  }

  static void terminate(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("terminate"),
    );
  }

  static Pointer<Void> terminationHandler(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("terminationHandler"),
    );
  }

  static int terminationReason(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("terminationReason"),
    );
  }

  static int terminationStatus(
    Pointer<NSTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("terminationStatus"),
    );
  }
}

/// Objective-C class _NSTernaryExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTernaryExpression extends Struct<NSTernaryExpression> {
  factory NSTernaryExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSTernaryExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSTernaryExpression").cast<NSTernaryExpression>();
  }

  static void acceptVisitor(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSTernaryExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static Pointer<Void> falseExpression(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("falseExpression"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithPredicate(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> trueExpression,
    @required Pointer<Void> falseExpression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithPredicate:trueExpression:falseExpression:"),
      arg,
      trueExpression,
      falseExpression,
    );
  }

  static int isEqual(
    Pointer<NSTernaryExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicate(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicate"),
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> trueExpression(
    Pointer<NSTernaryExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trueExpression"),
    );
  }
}

/// Objective-C class _NSTextCheckingKeyEvent_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTextCheckingKeyEvent extends Struct<NSTextCheckingKeyEvent> {
  factory NSTextCheckingKeyEvent._() {
    throw UnimplementedError();
  }
  static Pointer<NSTextCheckingKeyEvent> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSTextCheckingKeyEvent")
        .cast<NSTextCheckingKeyEvent>();
  }

  static Pointer<Void> characters(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("characters"),
    );
  }

  static Pointer<Void> charactersIgnoringModifiers(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("charactersIgnoringModifiers"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSTextCheckingKeyEvent> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSTextCheckingKeyEvent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int flags(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("flags"),
    );
  }

  static int hash(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSTextCheckingKeyEvent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithKeyboardLayoutType(
    Pointer<NSTextCheckingKeyEvent> _self,
    int arg, {
    @required int keyboardType,
    @required Pointer<Void> identifier,
    @required Pointer<Void> primaryLanguage,
    @required int flags,
    @required double timestamp,
    @required Pointer<Void> characters,
    @required Pointer<Void> charactersIgnoringModifiers,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithKeyboardLayoutType:keyboardType:identifier:primaryLanguage:flags:timestamp:characters:charactersIgnoringModifiers:"),
      arg,
      keyboardType,
      identifier,
      primaryLanguage,
      flags,
      timestamp,
      characters,
      charactersIgnoringModifiers,
    );
  }

  static int isEqual(
    Pointer<NSTextCheckingKeyEvent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keyboardLayoutIdentifier(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keyboardLayoutIdentifier"),
    );
  }

  static int keyboardLayoutType(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("keyboardLayoutType"),
    );
  }

  static int keyboardType(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("keyboardType"),
    );
  }

  static Pointer<Void> primaryLanguage(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("primaryLanguage"),
    );
  }

  static double timestamp(
    Pointer<NSTextCheckingKeyEvent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("timestamp"),
    );
  }
}

/// Objective-C class _NSTextCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTextCheckingResult extends Struct<NSTextCheckingResult> {
  factory NSTextCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSTextCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSTextCheckingResult").cast<NSTextCheckingResult>();
  }

  static Pointer<Void> URL(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer<Void> addressComponents(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addressComponents"),
    );
  }

  static Pointer<Void> alternativeStrings(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("alternativeStrings"),
    );
  }

  static Pointer<Void> components(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("components"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> date(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("date"),
    );
  }

  static Pointer<Void> decodeRangeWithCoder(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeRangeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static double duration(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("duration"),
    );
  }

  static void encodeRangeWithCoder(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeRangeWithCoder:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> grammarDetails(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("grammarDetails"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> leadingText(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leadingText"),
    );
  }

  static int numberOfRanges(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("numberOfRanges"),
    );
  }

  static Pointer<Void> orthography(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("orthography"),
    );
  }

  static Pointer<Void> phoneNumber(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("phoneNumber"),
    );
  }

  static Pointer<Void> range(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> rangeAtIndex(
    Pointer<NSTextCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("rangeAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> rangeWithName(
    Pointer<NSTextCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("rangeWithName:"),
      arg,
    );
  }

  static Pointer<Void> referenceDate(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referenceDate"),
    );
  }

  static Pointer<Void> regularExpression(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("regularExpression"),
    );
  }

  static Pointer<Void> replacementString(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("replacementString"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSTextCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static int timeIsApproximate(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsApproximate"),
    );
  }

  static int timeIsPast(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsPast"),
    );
  }

  static int timeIsSignificant(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("timeIsSignificant"),
    );
  }

  static Pointer<Void> timeZone(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("timeZone"),
    );
  }

  static Pointer<Void> trailingText(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("trailingText"),
    );
  }

  static Pointer<Void> underlyingResult(
    Pointer<NSTextCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingResult"),
    );
  }
}

/// Objective-C class _NSThread_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSThread extends Struct<NSThread> {
  factory NSThread._() {
    throw UnimplementedError();
  }
  static Pointer<NSThread> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSThread").cast<NSThread>();
  }

  static void cancel(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancel"),
    );
  }

  static void dealloc(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBlock(
    Pointer<NSThread> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBlock:"),
      arg,
    );
  }

  static Pointer<Void> initWithTarget(
    Pointer<NSThread> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTarget:selector:object:"),
      arg,
      selector,
      object,
    );
  }

  static int isCancelled(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCancelled"),
    );
  }

  static int isDying(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isDying"),
    );
  }

  static int isExecuting(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExecuting"),
    );
  }

  static int isFinished(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isFinished"),
    );
  }

  static int isMainThread(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isMainThread"),
    );
  }

  static void main(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("main"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int qualityOfService(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("qualityOfService"),
    );
  }

  static Pointer<Void> runLoop(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("runLoop"),
    );
  }

  static void setName(
    Pointer<NSThread> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setQualityOfService(
    Pointer<NSThread> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setQualityOfService:"),
      arg,
    );
  }

  static void setStackSize(
    Pointer<NSThread> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setStackSize:"),
      arg,
    );
  }

  static void setThreadPriority(
    Pointer<NSThread> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_void(
      _self,
      _objc.getSelector("setThreadPriority:"),
      arg,
    );
  }

  static int stackSize(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("stackSize"),
    );
  }

  static void start(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static Pointer<Void> threadDictionary(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("threadDictionary"),
    );
  }

  static double threadPriority(
    Pointer<NSThread> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("threadPriority"),
    );
  }
}

/// Objective-C class _NSTokenMatchingPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTokenMatchingPredicateOperator
    extends Struct<NSTokenMatchingPredicateOperator> {
  factory NSTokenMatchingPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSTokenMatchingPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSTokenMatchingPredicateOperator")
        .cast<NSTokenMatchingPredicateOperator>();
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSTokenMatchingPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> selector(
    Pointer<NSTokenMatchingPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("selector"),
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSTokenMatchingPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSTransitInformationCheckingResult_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTransitInformationCheckingResult
    extends Struct<NSTransitInformationCheckingResult> {
  factory NSTransitInformationCheckingResult._() {
    throw UnimplementedError();
  }
  static Pointer<NSTransitInformationCheckingResult> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSTransitInformationCheckingResult")
        .cast<NSTransitInformationCheckingResult>();
  }

  static Pointer<Void> components(
    Pointer<NSTransitInformationCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("components"),
    );
  }

  static void dealloc(
    Pointer<NSTransitInformationCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSTransitInformationCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSTransitInformationCheckingResult> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithRange$components$underlyingResult$(
    Pointer<NSTransitInformationCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
    @required Pointer<Void> underlyingResult,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:components:underlyingResult:"),
      arg,
      components,
      underlyingResult,
    );
  }

  static Pointer<Void> initWithRange$components$(
    Pointer<NSTransitInformationCheckingResult> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRange:components:"),
      arg,
      components,
    );
  }

  static Pointer<Void> range(
    Pointer<NSTransitInformationCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("range"),
    );
  }

  static Pointer<Void> resultByAdjustingRangesWithOffset(
    Pointer<NSTransitInformationCheckingResult> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_p(
      _self,
      _objc.getSelector("resultByAdjustingRangesWithOffset:"),
      arg,
    );
  }

  static int resultType(
    Pointer<NSTransitInformationCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("resultType"),
    );
  }

  static Pointer<Void> underlyingResult(
    Pointer<NSTransitInformationCheckingResult> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("underlyingResult"),
    );
  }
}

/// Objective-C class _NSTruePredicate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSTruePredicate extends Struct<NSTruePredicate> {
  factory NSTruePredicate._() {
    throw UnimplementedError();
  }
  static Pointer<NSTruePredicate> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSTruePredicate").cast<NSTruePredicate>();
  }

  static void acceptVisitor(
    Pointer<NSTruePredicate> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static Pointer<Void> autorelease(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("autorelease"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSTruePredicate> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSTruePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int evaluateWithObject(
    Pointer<NSTruePredicate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> substitutionVariables,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("evaluateWithObject:substitutionVariables:"),
      arg,
      substitutionVariables,
    );
  }

  static int hash(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSTruePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSTruePredicate> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static void release(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static int retainCount(
    Pointer<NSTruePredicate> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("retainCount"),
    );
  }
}

/// Objective-C class _NSURLComponents_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLComponents extends Struct<NSURLComponents> {
  factory NSURLComponents._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLComponents> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLComponents").cast<NSURLComponents>();
  }

  static Pointer<Void> URL(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static Pointer<Void> URLRelativeToURL(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("URLRelativeToURL:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSURLComponents> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> fragment(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fragment"),
    );
  }

  static void geo_updateQueryItemsWithBlock(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("geo_updateQueryItemsWithBlock:"),
      arg,
    );
  }

  static Pointer<Void> host(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("host"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithString(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithString:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg, {
    @required int resolvingAgainstBaseURL,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:resolvingAgainstBaseURL:"),
      arg,
      resolvingAgainstBaseURL,
    );
  }

  static Pointer<Void> password(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("password"),
    );
  }

  static Pointer<Void> path(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("path"),
    );
  }

  static Pointer<Void> percentEncodedFragment(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedFragment"),
    );
  }

  static Pointer<Void> percentEncodedHost(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedHost"),
    );
  }

  static Pointer<Void> percentEncodedPassword(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedPassword"),
    );
  }

  static Pointer<Void> percentEncodedPath(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedPath"),
    );
  }

  static Pointer<Void> percentEncodedQuery(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedQuery"),
    );
  }

  static Pointer<Void> percentEncodedQueryItems(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedQueryItems"),
    );
  }

  static Pointer<Void> percentEncodedUser(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("percentEncodedUser"),
    );
  }

  static Pointer<Void> port(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("port"),
    );
  }

  static Pointer<Void> query(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("query"),
    );
  }

  static Pointer<Void> queryItems(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("queryItems"),
    );
  }

  static Pointer<Void> rangeOfFragment(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfFragment"),
    );
  }

  static Pointer<Void> rangeOfHost(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfHost"),
    );
  }

  static Pointer<Void> rangeOfPassword(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfPassword"),
    );
  }

  static Pointer<Void> rangeOfPath(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfPath"),
    );
  }

  static Pointer<Void> rangeOfPort(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfPort"),
    );
  }

  static Pointer<Void> rangeOfQuery(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfQuery"),
    );
  }

  static Pointer<Void> rangeOfScheme(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfScheme"),
    );
  }

  static Pointer<Void> rangeOfUser(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeOfUser"),
    );
  }

  static Pointer<Void> scheme(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scheme"),
    );
  }

  static void setFragment(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setFragment:"),
      arg,
    );
  }

  static void setHost(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setHost:"),
      arg,
    );
  }

  static void setPassword(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPassword:"),
      arg,
    );
  }

  static void setPath(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPath:"),
      arg,
    );
  }

  static void setPercentEncodedFragment(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedFragment:"),
      arg,
    );
  }

  static void setPercentEncodedHost(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedHost:"),
      arg,
    );
  }

  static void setPercentEncodedPassword(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedPassword:"),
      arg,
    );
  }

  static void setPercentEncodedPath(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedPath:"),
      arg,
    );
  }

  static void setPercentEncodedQuery(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedQuery:"),
      arg,
    );
  }

  static void setPercentEncodedQueryItems(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedQueryItems:"),
      arg,
    );
  }

  static void setPercentEncodedUser(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPercentEncodedUser:"),
      arg,
    );
  }

  static void setPort(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPort:"),
      arg,
    );
  }

  static void setQuery(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQuery:"),
      arg,
    );
  }

  static void setQueryItems(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setQueryItems:"),
      arg,
    );
  }

  static void setScheme(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setScheme:"),
      arg,
    );
  }

  static void setUser(
    Pointer<NSURLComponents> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUser:"),
      arg,
    );
  }

  static Pointer<Void> string(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("string"),
    );
  }

  static Pointer<Void> user(
    Pointer<NSURLComponents> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("user"),
    );
  }
}

/// Objective-C class _NSURLConnectionDelegateProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLConnectionDelegateProxy
    extends Struct<NSURLConnectionDelegateProxy> {
  factory NSURLConnectionDelegateProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLConnectionDelegateProxy> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLConnectionDelegateProxy")
        .cast<NSURLConnectionDelegateProxy>();
  }

  static void connection$didReceiveData$lengthReceived$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveData,
    @required int lengthReceived,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveData:lengthReceived:"),
      arg,
      didReceiveData,
      lengthReceived,
    );
  }

  static void connection$didReceiveDataArray$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveDataArray,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveDataArray:"),
      arg,
      didReceiveDataArray,
    );
  }

  static int connection$canAuthenticateAgainstProtectionSpace$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> canAuthenticateAgainstProtectionSpace,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("connection:canAuthenticateAgainstProtectionSpace:"),
      arg,
      canAuthenticateAgainstProtectionSpace,
    );
  }

  static void connection$didReceiveAuthenticationChallenge$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveAuthenticationChallenge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveAuthenticationChallenge:"),
      arg,
      didReceiveAuthenticationChallenge,
    );
  }

  static void connection$didCancelAuthenticationChallenge$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didCancelAuthenticationChallenge,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didCancelAuthenticationChallenge:"),
      arg,
      didCancelAuthenticationChallenge,
    );
  }

  static Pointer<Void> connection$willSendRequest$redirectResponse$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> willSendRequest,
    @required Pointer<Void> redirectResponse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("connection:willSendRequest:redirectResponse:"),
      arg,
      willSendRequest,
      redirectResponse,
    );
  }

  static void connection$didReceiveData$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveData,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveData:"),
      arg,
      didReceiveData,
    );
  }

  static void
      connection$didSendBodyData$totalBytesWritten$totalBytesExpectedToWrite$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required int didSendBodyData,
    @required int totalBytesWritten,
    @required int totalBytesExpectedToWrite,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_Int64_Int64_returns_void(
      _self,
      _objc.getSelector(
          "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:"),
      arg,
      didSendBodyData,
      totalBytesWritten,
      totalBytesExpectedToWrite,
    );
  }

  static Pointer<Void> connection$willCacheResponse$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> willCacheResponse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("connection:willCacheResponse:"),
      arg,
      willCacheResponse,
    );
  }

  static void connection$didReceiveResponse$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveResponse,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveResponse:"),
      arg,
      didReceiveResponse,
    );
  }

  static void connection$didFailWithError$(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didFailWithError,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didFailWithError:"),
      arg,
      didFailWithError,
    );
  }

  static void connectionDidFinishLoading(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("connectionDidFinishLoading:"),
      arg,
    );
  }

  static int connectionShouldUseCredentialStorage(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("connectionShouldUseCredentialStorage:"),
      arg,
    );
  }

  static int respondsToSelector(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("respondsToSelector:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<NSURLConnectionDelegateProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }
}

/// Objective-C class _NSURLConnectionHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLConnectionHandle extends Struct<NSURLConnectionHandle> {
  factory NSURLConnectionHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLConnectionHandle> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLConnectionHandle")
        .cast<NSURLConnectionHandle>();
  }

  static void beginLoadInBackground(
    Pointer<NSURLConnectionHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoadInBackground"),
    );
  }

  static void connection$didFailLoadingWithError$(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didFailLoadingWithError,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didFailLoadingWithError:"),
      arg,
      didFailLoadingWithError,
    );
  }

  static void connection$didReceiveData$(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> didReceiveData,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("connection:didReceiveData:"),
      arg,
      didReceiveData,
    );
  }

  static void connectionDidFinishLoading(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("connectionDidFinishLoading:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSURLConnectionHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void endLoadInBackground(
    Pointer<NSURLConnectionHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endLoadInBackground"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:cached:"),
      arg,
      cached,
    );
  }

  static Pointer<Void> loadInForeground(
    Pointer<NSURLConnectionHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("loadInForeground"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> propertyForKeyIfAvailable(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKeyIfAvailable:"),
      arg,
    );
  }

  static int writeData(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static int writeProperty(
    Pointer<NSURLConnectionHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeProperty:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSURLDirectoryEnumerator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLDirectoryEnumerator extends Struct<NSURLDirectoryEnumerator> {
  factory NSURLDirectoryEnumerator._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLDirectoryEnumerator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLDirectoryEnumerator")
        .cast<NSURLDirectoryEnumerator>();
  }

  static void dealloc(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> directoryAttributes(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("directoryAttributes"),
    );
  }

  static Pointer<Void> errorHandler(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("errorHandler"),
    );
  }

  static Pointer<Void> fileAttributes(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("fileAttributes"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSURLDirectoryEnumerator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> includingPropertiesForKeys,
    @required int options,
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithURL:includingPropertiesForKeys:options:errorHandler:"),
      arg,
      includingPropertiesForKeys,
      options,
      errorHandler,
    );
  }

  static int level(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("level"),
    );
  }

  static Pointer<Void> nextObject(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextObject"),
    );
  }

  static void setErrorHandler(
    Pointer<NSURLDirectoryEnumerator> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setErrorHandler:"),
      arg,
    );
  }

  static void skipDescendants(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendants"),
    );
  }

  static void skipDescendents(
    Pointer<NSURLDirectoryEnumerator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("skipDescendents"),
    );
  }
}

/// Objective-C class _NSURLError_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLError extends Struct<NSURLError> {
  factory NSURLError._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLError> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLError").cast<NSURLError>();
  }

  static void encodeWithCoder(
    Pointer<NSURLError> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSURLFileTypeMappings_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLFileTypeMappings extends Struct<NSURLFileTypeMappings> {
  factory NSURLFileTypeMappings._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLFileTypeMappings> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLFileTypeMappings")
        .cast<NSURLFileTypeMappings>();
  }

  static Pointer<Void> MIMETypeForExtension(
    Pointer<NSURLFileTypeMappings> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("MIMETypeForExtension:"),
      arg,
    );
  }

  static Pointer<Void> extensionsForMIMEType(
    Pointer<NSURLFileTypeMappings> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("extensionsForMIMEType:"),
      arg,
    );
  }

  static Pointer<Void> preferredExtensionForMIMEType(
    Pointer<NSURLFileTypeMappings> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("preferredExtensionForMIMEType:"),
      arg,
    );
  }
}

/// Objective-C class _NSURLFileTypeMappingsInternal_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLFileTypeMappingsInternal
    extends Struct<NSURLFileTypeMappingsInternal> {
  factory NSURLFileTypeMappingsInternal._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLFileTypeMappingsInternal> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLFileTypeMappingsInternal")
        .cast<NSURLFileTypeMappingsInternal>();
  }

  static Pointer<Void> init(
    Pointer<NSURLFileTypeMappingsInternal> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }
}

/// Objective-C class _NSURLHandle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLHandle extends Struct<NSURLHandle> {
  factory NSURLHandle._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLHandle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLHandle").cast<NSURLHandle>();
  }

  static void addClient(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addClient:"),
      arg,
    );
  }

  static Pointer<Void> availableResourceData(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("availableResourceData"),
    );
  }

  static void backgroundLoadDidFailWithReason(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("backgroundLoadDidFailWithReason:"),
      arg,
    );
  }

  static void beginLoadInBackground(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginLoadInBackground"),
    );
  }

  static void cancelLoadInBackground(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("cancelLoadInBackground"),
    );
  }

  static void dealloc(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void didLoadBytes(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg, {
    @required int loadComplete,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("didLoadBytes:loadComplete:"),
      arg,
      loadComplete,
    );
  }

  static void endLoadInBackground(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endLoadInBackground"),
    );
  }

  static int expectedResourceDataSize(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("expectedResourceDataSize"),
    );
  }

  static Pointer<Void> failureReason(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("failureReason"),
    );
  }

  static void flushCachedData(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("flushCachedData"),
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg, {
    @required int cached,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("initWithURL:cached:"),
      arg,
      cached,
    );
  }

  static void loadInBackground(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("loadInBackground"),
    );
  }

  static Pointer<Void> loadInForeground(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("loadInForeground"),
    );
  }

  static Pointer<Void> propertyForKey(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKey:"),
      arg,
    );
  }

  static Pointer<Void> propertyForKeyIfAvailable(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertyForKeyIfAvailable:"),
      arg,
    );
  }

  static void removeClient(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeClient:"),
      arg,
    );
  }

  static Pointer<Void> resourceData(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("resourceData"),
    );
  }

  static int status(
    Pointer<NSURLHandle> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("status"),
    );
  }

  static int writeData(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeData:"),
      arg,
    );
  }

  static int writeProperty(
    Pointer<NSURLHandle> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("writeProperty:forKey:"),
      arg,
      forKey,
    );
  }
}

/// Objective-C class _NSURLHostNameAddressInfo_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLHostNameAddressInfo extends Struct<NSURLHostNameAddressInfo> {
  factory NSURLHostNameAddressInfo._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLHostNameAddressInfo> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSURLHostNameAddressInfo")
        .cast<NSURLHostNameAddressInfo>();
  }

  static Pointer<Pointer<Void>> addrinfo(
    Pointer<NSURLHostNameAddressInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("addrinfo"),
    );
  }

  static void dealloc(
    Pointer<NSURLHostNameAddressInfo> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }
}

/// Objective-C class _NSURLKeyValuePair_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLKeyValuePair extends Struct<NSURLKeyValuePair> {
  factory NSURLKeyValuePair._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLKeyValuePair> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLKeyValuePair").cast<NSURLKeyValuePair>();
  }

  static void dealloc(
    Pointer<NSURLKeyValuePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSURLKeyValuePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSURLKeyValuePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithKey(
    Pointer<NSURLKeyValuePair> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKey:value:"),
      arg,
      value,
    );
  }

  static int isEqual(
    Pointer<NSURLKeyValuePair> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> key(
    Pointer<NSURLKeyValuePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("key"),
    );
  }

  static void setKey(
    Pointer<NSURLKeyValuePair> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setKey:"),
      arg,
    );
  }

  static void setValue(
    Pointer<NSURLKeyValuePair> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setValue:"),
      arg,
    );
  }

  static Pointer<Void> value(
    Pointer<NSURLKeyValuePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSURLPromisePair_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLPromisePair extends Struct<NSURLPromisePair> {
  factory NSURLPromisePair._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLPromisePair> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLPromisePair").cast<NSURLPromisePair>();
  }

  static Pointer<Void> URL(
    Pointer<NSURLPromisePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URL"),
    );
  }

  static void dealloc(
    Pointer<NSURLPromisePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSURLPromisePair> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSURLPromisePair> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> logicalURL(
    Pointer<NSURLPromisePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("logicalURL"),
    );
  }

  static Pointer<Void> physicalURL(
    Pointer<NSURLPromisePair> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("physicalURL"),
    );
  }
}

/// Objective-C class _NSURLQueryItem_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLQueryItem extends Struct<NSURLQueryItem> {
  factory NSURLQueryItem._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLQueryItem> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLQueryItem").cast<NSURLQueryItem>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSURLQueryItem> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSURLQueryItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSURLQueryItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithName(
    Pointer<NSURLQueryItem> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> value,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:value:"),
      arg,
      value,
    );
  }

  static int isEqual(
    Pointer<NSURLQueryItem> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> name(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> value(
    Pointer<NSURLQueryItem> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("value"),
    );
  }
}

/// Objective-C class _NSURLQueue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLQueue extends Struct<NSURLQueue> {
  factory NSURLQueue._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLQueue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLQueue").cast<NSURLQueue>();
  }

  static void clear(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("clear"),
    );
  }

  static int count(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int indexOf(
    Pointer<NSURLQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("indexOf:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isEmpty(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEmpty"),
    );
  }

  static Pointer<Void> peek(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("peek"),
    );
  }

  static Pointer<Void> peekAt(
    Pointer<NSURLQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("peekAt:"),
      arg,
    );
  }

  static void put(
    Pointer<NSURLQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("put:"),
      arg,
    );
  }

  static int remove(
    Pointer<NSURLQueue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("remove:"),
      arg,
    );
  }

  static void setWaitOnTake(
    Pointer<NSURLQueue> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setWaitOnTake:"),
      arg,
    );
  }

  static Pointer<Void> take(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("take"),
    );
  }

  static int waitOnTake(
    Pointer<NSURLQueue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("waitOnTake"),
    );
  }
}

/// Objective-C class _NSURLQueueNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSURLQueueNode extends Struct<NSURLQueueNode> {
  factory NSURLQueueNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSURLQueueNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSURLQueueNode").cast<NSURLQueueNode>();
  }
}

/// Objective-C class _NSUTF16BEEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF16BEEncodingDetector extends Struct<NSUTF16BEEncodingDetector> {
  factory NSUTF16BEEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF16BEEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF16BEEncodingDetector")
        .cast<NSUTF16BEEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF16BEEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF16BaseEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF16BaseEncodingDetector extends Struct<NSUTF16BaseEncodingDetector> {
  factory NSUTF16BaseEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF16BaseEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF16BaseEncodingDetector")
        .cast<NSUTF16BaseEncodingDetector>();
  }
}

/// Objective-C class _NSUTF16EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF16EncodingDetector extends Struct<NSUTF16EncodingDetector> {
  factory NSUTF16EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF16EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF16EncodingDetector")
        .cast<NSUTF16EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF16EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF16LEEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF16LEEncodingDetector extends Struct<NSUTF16LEEncodingDetector> {
  factory NSUTF16LEEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF16LEEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF16LEEncodingDetector")
        .cast<NSUTF16LEEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF16LEEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF32BEEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF32BEEncodingDetector extends Struct<NSUTF32BEEncodingDetector> {
  factory NSUTF32BEEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF32BEEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF32BEEncodingDetector")
        .cast<NSUTF32BEEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF32BEEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF32EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF32EncodingDetector extends Struct<NSUTF32EncodingDetector> {
  factory NSUTF32EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF32EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF32EncodingDetector")
        .cast<NSUTF32EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF32EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF32LEEncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF32LEEncodingDetector extends Struct<NSUTF32LEEncodingDetector> {
  factory NSUTF32LEEncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF32LEEncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF32LEEncodingDetector")
        .cast<NSUTF32LEEncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF32LEEncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF7EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF7EncodingDetector extends Struct<NSUTF7EncodingDetector> {
  factory NSUTF7EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF7EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF7EncodingDetector")
        .cast<NSUTF7EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF7EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTF8EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTF8EncodingDetector extends Struct<NSUTF8EncodingDetector> {
  factory NSUTF8EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTF8EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTF8EncodingDetector")
        .cast<NSUTF8EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSUTF8EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSUTIPredicateOperator_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUTIPredicateOperator extends Struct<NSUTIPredicateOperator> {
  factory NSUTIPredicateOperator._() {
    throw UnimplementedError();
  }
  static Pointer<NSUTIPredicateOperator> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUTIPredicateOperator")
        .cast<NSUTIPredicateOperator>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUTIPredicateOperator> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> initForVariant(
    Pointer<NSUTIPredicateOperator> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initForVariant:"),
      arg,
    );
  }

  static int performPrimitiveOperationUsingObject(
    Pointer<NSUTIPredicateOperator> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> andObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("performPrimitiveOperationUsingObject:andObject:"),
      arg,
      andObject,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSUTIPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static int variant(
    Pointer<NSUTIPredicateOperator> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("variant"),
    );
  }
}

/// Objective-C class _NSUUID_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUUID extends Struct<NSUUID> {
  factory NSUUID._() {
    throw UnimplementedError();
  }
  static Pointer<NSUUID> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUUID").cast<NSUUID>();
  }

  static Pointer<Void> UUIDString(
    Pointer<NSUUID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("UUIDString"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUUID> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getUUIDBytes(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getUUIDBytes:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSUUID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSUUID> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithUUIDBytes(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUUIDBytes:"),
      arg,
    );
  }

  static Pointer<Void> initWithUUIDString(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithUUIDString:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSUUID> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }
}

/// Objective-C class _NSUbiquitousKeyValueStore_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUbiquitousKeyValueStore extends Struct<NSUbiquitousKeyValueStore> {
  factory NSUbiquitousKeyValueStore._() {
    throw UnimplementedError();
  }
  static Pointer<NSUbiquitousKeyValueStore> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUbiquitousKeyValueStore")
        .cast<NSUbiquitousKeyValueStore>();
  }

  static Pointer<Void> arrayForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("arrayForKey:"),
      arg,
    );
  }

  static int boolForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("boolForKey:"),
      arg,
    );
  }

  static Pointer<Void> dataForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dataForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> dictionaryForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryForKey:"),
      arg,
    );
  }

  static Pointer<Void> dictionaryRepresentation(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("dictionaryRepresentation"),
    );
  }

  static double doubleForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("doubleForKey:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void>
      initWithBundleIdentifier$storeIdentifier$additionalStore$(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> storeIdentifier,
    @required int additionalStore,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_returns_p(
      _self,
      _objc.getSelector(
          "initWithBundleIdentifier:storeIdentifier:additionalStore:"),
      arg,
      storeIdentifier,
      additionalStore,
    );
  }

  static Pointer<Void> initWithBundleIdentifier$storeIdentifier$(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> storeIdentifier,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBundleIdentifier:storeIdentifier:"),
      arg,
      storeIdentifier,
    );
  }

  static Pointer<Void> initWithBundleIdentifier$(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBundleIdentifier:"),
      arg,
    );
  }

  static int longLongForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("longLongForKey:"),
      arg,
    );
  }

  static int maximumDataLengthPerKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumDataLengthPerKey"),
    );
  }

  static int maximumKeyCount(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumKeyCount"),
    );
  }

  static int maximumKeyLength(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumKeyLength"),
    );
  }

  static int maximumTotalDataLength(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("maximumTotalDataLength"),
    );
  }

  static Pointer<Void> objectForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectForKey:"),
      arg,
    );
  }

  static void registerDefaultValues(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerDefaultValues:"),
      arg,
    );
  }

  static void removeObjectForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectForKey:"),
      arg,
    );
  }

  static void setArray(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArray:forKey:"),
      arg,
      forKey,
    );
  }

  static void setBool(
    Pointer<NSUbiquitousKeyValueStore> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("setBool:forKey:"),
      arg,
      forKey,
    );
  }

  static void setData(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setData:forKey:"),
      arg,
      forKey,
    );
  }

  static void setDictionary(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDictionary:forKey:"),
      arg,
      forKey,
    );
  }

  static void setDouble(
    Pointer<NSUbiquitousKeyValueStore> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("setDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void setLongLong(
    Pointer<NSUbiquitousKeyValueStore> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("setLongLong:forKey:"),
      arg,
      forKey,
    );
  }

  static void setObject(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void setString(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setString:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> stringForKey(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForKey:"),
      arg,
    );
  }

  static int synchronize(
    Pointer<NSUbiquitousKeyValueStore> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("synchronize"),
    );
  }

  static void synchronizeWithCompletionHandler(
    Pointer<NSUbiquitousKeyValueStore> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("synchronizeWithCompletionHandler:"),
      arg,
    );
  }

  static int synchronizeWithSourceForced(
    Pointer<NSUbiquitousKeyValueStore> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_Int8(
      _self,
      _objc.getSelector("synchronizeWithSourceForced:"),
      arg,
    );
  }
}

/// Objective-C class _NSUnarchiver_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnarchiver extends Struct<NSUnarchiver> {
  factory NSUnarchiver._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnarchiver> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnarchiver").cast<NSUnarchiver>();
  }

  static Pointer<Void> classNameDecodedForArchiveClassName(
    Pointer<NSUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("classNameDecodedForArchiveClassName:"),
      arg,
    );
  }

  static Pointer<Void> data(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("data"),
    );
  }

  static void dealloc(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void decodeArrayOfObjCType(
    Pointer<NSUnarchiver> _self,
    Pointer<Utf8> arg, {
    @required int count,
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("decodeArrayOfObjCType:count:at:"),
      arg,
      count,
      at,
    );
  }

  static Pointer<Void> decodeBytesWithReturnedLength(
    Pointer<NSUnarchiver> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesWithReturnedLength:"),
      arg,
    );
  }

  static void decodeClassName(
    Pointer<NSUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> asClassName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeClassName:asClassName:"),
      arg,
      asClassName,
    );
  }

  static Pointer<Void> decodeDataObject(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObject"),
    );
  }

  static Pointer<Void> decodeObject(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObject"),
    );
  }

  static Pointer<Void> decodePropertyList(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyList"),
    );
  }

  static void decodeValueOfObjCType(
    Pointer<NSUnarchiver> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void decodeValuesOfObjCTypes(
    Pointer<NSUnarchiver> _self,
    Pointer<Utf8> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValuesOfObjCTypes:"),
      arg,
    );
  }

  static Pointer<Void> initForReadingWithData(
    Pointer<NSUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initForReadingWithData:"),
      arg,
    );
  }

  static int isAtEnd(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isAtEnd"),
    );
  }

  static Pointer<Pointer<Void>> objectZone(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectZone"),
    );
  }

  static void replaceObject(
    Pointer<NSUnarchiver> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObject:withObject:"),
      arg,
      withObject,
    );
  }

  static void setObjectZone(
    Pointer<NSUnarchiver> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectZone:"),
      arg,
    );
  }

  static int systemVersion(
    Pointer<NSUnarchiver> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("systemVersion"),
    );
  }

  static int versionForClassName(
    Pointer<NSUnarchiver> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSUndoManager_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUndoManager extends Struct<NSUndoManager> {
  factory NSUndoManager._() {
    throw UnimplementedError();
  }
  static Pointer<NSUndoManager> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUndoManager").cast<NSUndoManager>();
  }

  static void beginCreationUndoGrouping(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginCreationUndoGrouping"),
    );
  }

  static void beginUndoGrouping(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("beginUndoGrouping"),
    );
  }

  static int canRedo(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canRedo"),
    );
  }

  static int canUndo(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("canUndo"),
    );
  }

  static void dealloc(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void disableUndoRegistration(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("disableUndoRegistration"),
    );
  }

  static void enableUndoRegistration(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("enableUndoRegistration"),
    );
  }

  static void endCreationUndoGrouping(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endCreationUndoGrouping"),
    );
  }

  static void endUndoGrouping(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("endUndoGrouping"),
    );
  }

  static int groupingLevel(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("groupingLevel"),
    );
  }

  static int groupsByEvent(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("groupsByEvent"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int isRedoing(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isRedoing"),
    );
  }

  static int isUndoRegistrationEnabled(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUndoRegistrationEnabled"),
    );
  }

  static int isUndoing(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isUndoing"),
    );
  }

  static int levelsOfUndo(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("levelsOfUndo"),
    );
  }

  static Pointer<Void> prepareWithInvocationTarget(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("prepareWithInvocationTarget:"),
      arg,
    );
  }

  static void redo(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("redo"),
    );
  }

  static int redoActionIsDiscardable(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("redoActionIsDiscardable"),
    );
  }

  static Pointer<Void> redoActionName(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("redoActionName"),
    );
  }

  static Pointer<Void> redoMenuItemTitle(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("redoMenuItemTitle"),
    );
  }

  static Pointer<Void> redoMenuTitleForUndoActionName(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("redoMenuTitleForUndoActionName:"),
      arg,
    );
  }

  static void registerUndoWithTarget$selector$object$(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> selector,
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerUndoWithTarget:selector:object:"),
      arg,
      selector,
      object,
    );
  }

  static void registerUndoWithTarget$handler$(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> handler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("registerUndoWithTarget:handler:"),
      arg,
      handler,
    );
  }

  static void removeAllActions(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllActions"),
    );
  }

  static void removeAllActionsWithTarget(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllActionsWithTarget:"),
      arg,
    );
  }

  static Pointer<Void> runLoopModes(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("runLoopModes"),
    );
  }

  static void setActionIsDiscardable(
    Pointer<NSUndoManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setActionIsDiscardable:"),
      arg,
    );
  }

  static void setActionName(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setActionName:"),
      arg,
    );
  }

  static void setGroupsByEvent(
    Pointer<NSUndoManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setGroupsByEvent:"),
      arg,
    );
  }

  static void setLevelsOfUndo(
    Pointer<NSUndoManager> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setLevelsOfUndo:"),
      arg,
    );
  }

  static void setNonCreationActionName(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNonCreationActionName:"),
      arg,
    );
  }

  static void setRunLoopModes(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRunLoopModes:"),
      arg,
    );
  }

  static void undo(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("undo"),
    );
  }

  static int undoActionIsDiscardable(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("undoActionIsDiscardable"),
    );
  }

  static Pointer<Void> undoActionName(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("undoActionName"),
    );
  }

  static Pointer<Void> undoMenuItemTitle(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("undoMenuItemTitle"),
    );
  }

  static Pointer<Void> undoMenuTitleForUndoActionName(
    Pointer<NSUndoManager> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("undoMenuTitleForUndoActionName:"),
      arg,
    );
  }

  static void undoNestedGroup(
    Pointer<NSUndoManager> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("undoNestedGroup"),
    );
  }
}

/// Objective-C class _NSUndoManagerProxy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUndoManagerProxy extends Struct<NSUndoManagerProxy> {
  factory NSUndoManagerProxy._() {
    throw UnimplementedError();
  }
  static Pointer<NSUndoManagerProxy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUndoManagerProxy").cast<NSUndoManagerProxy>();
  }

  static void forwardInvocation(
    Pointer<NSUndoManagerProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("forwardInvocation:"),
      arg,
    );
  }

  static Pointer<Void> initWithManager(
    Pointer<NSUndoManagerProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithManager:"),
      arg,
    );
  }

  static int isKindOfClass(
    Pointer<NSUndoManagerProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isKindOfClass:"),
      arg,
    );
  }

  static Pointer<Void> methodSignatureForSelector(
    Pointer<NSUndoManagerProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("methodSignatureForSelector:"),
      arg,
    );
  }

  static void release(
    Pointer<NSUndoManagerProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("release"),
    );
  }

  static Pointer<Void> retain(
    Pointer<NSUndoManagerProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("retain"),
    );
  }

  static void setTargetClass(
    Pointer<NSUndoManagerProxy> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTargetClass:"),
      arg,
    );
  }

  static void superRelease(
    Pointer<NSUndoManagerProxy> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("superRelease"),
    );
  }
}

/// Objective-C class _NSUniqueIDSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUniqueIDSpecifier extends Struct<NSUniqueIDSpecifier> {
  factory NSUniqueIDSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSUniqueIDSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUniqueIDSpecifier").cast<NSUniqueIDSpecifier>();
  }

  static void dealloc(
    Pointer<NSUniqueIDSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSUniqueIDSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUniqueIDSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$uniqueID$(
    Pointer<NSUniqueIDSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required Pointer<Void> uniqueID,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:uniqueID:"),
      arg,
      containerSpecifier,
      key,
      uniqueID,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSUniqueIDSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static void setUniqueID(
    Pointer<NSUniqueIDSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUniqueID:"),
      arg,
    );
  }

  static Pointer<Void> uniqueID(
    Pointer<NSUniqueIDSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("uniqueID"),
    );
  }
}

/// Objective-C class _NSUnit_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnit extends Struct<NSUnit> {
  factory NSUnit._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnit> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnit").cast<NSUnit>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUnit> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSUnit> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSUnit> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSUnit> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUnit> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUnit> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithSymbol(
    Pointer<NSUnit> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithSymbol:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSUnit> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> symbol(
    Pointer<NSUnit> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("symbol"),
    );
  }
}

/// Objective-C class _NSUnitAcceleration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitAcceleration extends Struct<NSUnitAcceleration> {
  factory NSUnitAcceleration._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitAcceleration> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitAcceleration").cast<NSUnitAcceleration>();
  }
}

/// Objective-C class _NSUnitAngle_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitAngle extends Struct<NSUnitAngle> {
  factory NSUnitAngle._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitAngle> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitAngle").cast<NSUnitAngle>();
  }
}

/// Objective-C class _NSUnitArea_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitArea extends Struct<NSUnitArea> {
  factory NSUnitArea._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitArea> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitArea").cast<NSUnitArea>();
  }
}

/// Objective-C class _NSUnitConcentrationMass_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitConcentrationMass extends Struct<NSUnitConcentrationMass> {
  factory NSUnitConcentrationMass._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitConcentrationMass> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitConcentrationMass")
        .cast<NSUnitConcentrationMass>();
  }
}

/// Objective-C class _NSUnitConverter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitConverter extends Struct<NSUnitConverter> {
  factory NSUnitConverter._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitConverter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitConverter").cast<NSUnitConverter>();
  }

  static double baseUnitValueFromValue(
    Pointer<NSUnitConverter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("baseUnitValueFromValue:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUnitConverter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static double valueFromBaseUnitValue(
    Pointer<NSUnitConverter> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("valueFromBaseUnitValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSUnitConverterLinear_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitConverterLinear extends Struct<NSUnitConverterLinear> {
  factory NSUnitConverterLinear._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitConverterLinear> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitConverterLinear")
        .cast<NSUnitConverterLinear>();
  }

  static double baseUnitValueFromValue(
    Pointer<NSUnitConverterLinear> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("baseUnitValueFromValue:"),
      arg,
    );
  }

  static double coefficient(
    Pointer<NSUnitConverterLinear> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("coefficient"),
    );
  }

  static double constant(
    Pointer<NSUnitConverterLinear> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("constant"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSUnitConverterLinear> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSUnitConverterLinear> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUnitConverterLinear> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoefficient$constant$(
    Pointer<NSUnitConverterLinear> _self,
    double arg, {
    @required double constant,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_float64_returns_p(
      _self,
      _objc.getSelector("initWithCoefficient:constant:"),
      arg,
      constant,
    );
  }

  static Pointer<Void> initWithCoefficient$(
    Pointer<NSUnitConverterLinear> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithCoefficient:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSUnitConverterLinear> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static double valueFromBaseUnitValue(
    Pointer<NSUnitConverterLinear> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("valueFromBaseUnitValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSUnitConverterReciprocal_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitConverterReciprocal extends Struct<NSUnitConverterReciprocal> {
  factory NSUnitConverterReciprocal._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitConverterReciprocal> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitConverterReciprocal")
        .cast<NSUnitConverterReciprocal>();
  }

  static double baseUnitValueFromValue(
    Pointer<NSUnitConverterReciprocal> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("baseUnitValueFromValue:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUnitConverterReciprocal> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSUnitConverterReciprocal> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSUnitConverterReciprocal> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUnitConverterReciprocal> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithReciprocalValue(
    Pointer<NSUnitConverterReciprocal> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_p(
      _self,
      _objc.getSelector("initWithReciprocalValue:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSUnitConverterReciprocal> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static double reciprocalValue(
    Pointer<NSUnitConverterReciprocal> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_float64(
      _self,
      _objc.getSelector("reciprocalValue"),
    );
  }

  static double valueFromBaseUnitValue(
    Pointer<NSUnitConverterReciprocal> _self,
    double arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("valueFromBaseUnitValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSUnitDispersion_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitDispersion extends Struct<NSUnitDispersion> {
  factory NSUnitDispersion._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitDispersion> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitDispersion").cast<NSUnitDispersion>();
  }
}

/// Objective-C class _NSUnitDuration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitDuration extends Struct<NSUnitDuration> {
  factory NSUnitDuration._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitDuration> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitDuration").cast<NSUnitDuration>();
  }
}

/// Objective-C class _NSUnitElectricCharge_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitElectricCharge extends Struct<NSUnitElectricCharge> {
  factory NSUnitElectricCharge._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitElectricCharge> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitElectricCharge").cast<NSUnitElectricCharge>();
  }
}

/// Objective-C class _NSUnitElectricCurrent_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitElectricCurrent extends Struct<NSUnitElectricCurrent> {
  factory NSUnitElectricCurrent._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitElectricCurrent> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitElectricCurrent")
        .cast<NSUnitElectricCurrent>();
  }
}

/// Objective-C class _NSUnitElectricPotentialDifference_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitElectricPotentialDifference
    extends Struct<NSUnitElectricPotentialDifference> {
  factory NSUnitElectricPotentialDifference._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitElectricPotentialDifference> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitElectricPotentialDifference")
        .cast<NSUnitElectricPotentialDifference>();
  }
}

/// Objective-C class _NSUnitElectricResistance_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitElectricResistance extends Struct<NSUnitElectricResistance> {
  factory NSUnitElectricResistance._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitElectricResistance> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUnitElectricResistance")
        .cast<NSUnitElectricResistance>();
  }
}

/// Objective-C class _NSUnitEnergy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitEnergy extends Struct<NSUnitEnergy> {
  factory NSUnitEnergy._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitEnergy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitEnergy").cast<NSUnitEnergy>();
  }
}

/// Objective-C class _NSUnitFormatter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitFormatter extends Struct<NSUnitFormatter> {
  factory NSUnitFormatter._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitFormatter> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitFormatter").cast<NSUnitFormatter>();
  }

  static void checkIfModified(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("checkIfModified"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUnitFormatter> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> locale(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("locale"),
    );
  }

  static Pointer<Void> numberFormatter(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("numberFormatter"),
    );
  }

  static void setLocale(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLocale:"),
      arg,
    );
  }

  static void setNumberFormatter(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNumberFormatter:"),
      arg,
    );
  }

  static void setUnitOptions(
    Pointer<NSUnitFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setUnitOptions:"),
      arg,
    );
  }

  static void setUnitStyle(
    Pointer<NSUnitFormatter> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setUnitStyle:"),
      arg,
    );
  }

  static Pointer<Void> stringForObjectValue(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringForObjectValue:"),
      arg,
    );
  }

  static Pointer<Void> stringForValue(
    Pointer<NSUnitFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Uint64_returns_p(
      _self,
      _objc.getSelector("stringForValue:unit:"),
      arg,
      unit,
    );
  }

  static Pointer<Void> stringForValue1(
    Pointer<NSUnitFormatter> _self,
    double arg, {
    @required int unit1,
    @required double value2,
    @required int unit2,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p(
      _self,
      _objc.getSelector("stringForValue1:unit1:value2:unit2:"),
      arg,
      unit1,
      value2,
      unit2,
    );
  }

  static Pointer<Void> stringFromUnit(
    Pointer<NSUnitFormatter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("stringFromUnit:"),
      arg,
    );
  }

  static int unitOptions(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("unitOptions"),
    );
  }

  static Pointer<Void> unitStringFromValue(
    Pointer<NSUnitFormatter> _self,
    double arg, {
    @required int unit,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_Uint64_returns_p(
      _self,
      _objc.getSelector("unitStringFromValue:unit:"),
      arg,
      unit,
    );
  }

  static int unitStyle(
    Pointer<NSUnitFormatter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("unitStyle"),
    );
  }
}

/// Objective-C class _NSUnitFrequency_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitFrequency extends Struct<NSUnitFrequency> {
  factory NSUnitFrequency._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitFrequency> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitFrequency").cast<NSUnitFrequency>();
  }
}

/// Objective-C class _NSUnitFuelEfficiency_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitFuelEfficiency extends Struct<NSUnitFuelEfficiency> {
  factory NSUnitFuelEfficiency._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitFuelEfficiency> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitFuelEfficiency").cast<NSUnitFuelEfficiency>();
  }
}

/// Objective-C class _NSUnitIlluminance_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitIlluminance extends Struct<NSUnitIlluminance> {
  factory NSUnitIlluminance._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitIlluminance> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitIlluminance").cast<NSUnitIlluminance>();
  }
}

/// Objective-C class _NSUnitLength_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitLength extends Struct<NSUnitLength> {
  factory NSUnitLength._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitLength> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitLength").cast<NSUnitLength>();
  }
}

/// Objective-C class _NSUnitMass_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitMass extends Struct<NSUnitMass> {
  factory NSUnitMass._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitMass> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitMass").cast<NSUnitMass>();
  }
}

/// Objective-C class _NSUnitPower_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitPower extends Struct<NSUnitPower> {
  factory NSUnitPower._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitPower> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitPower").cast<NSUnitPower>();
  }
}

/// Objective-C class _NSUnitPressure_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitPressure extends Struct<NSUnitPressure> {
  factory NSUnitPressure._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitPressure> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitPressure").cast<NSUnitPressure>();
  }
}

/// Objective-C class _NSUnitSpeed_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitSpeed extends Struct<NSUnitSpeed> {
  factory NSUnitSpeed._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitSpeed> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitSpeed").cast<NSUnitSpeed>();
  }
}

/// Objective-C class _NSUnitTemperature_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitTemperature extends Struct<NSUnitTemperature> {
  factory NSUnitTemperature._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitTemperature> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitTemperature").cast<NSUnitTemperature>();
  }
}

/// Objective-C class _NSUnitVolume_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnitVolume extends Struct<NSUnitVolume> {
  factory NSUnitVolume._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnitVolume> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnitVolume").cast<NSUnitVolume>();
  }
}

/// Objective-C class _NSUnkeyedPortCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUnkeyedPortCoder extends Struct<NSUnkeyedPortCoder> {
  factory NSUnkeyedPortCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSUnkeyedPortCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUnkeyedPortCoder").cast<NSUnkeyedPortCoder>();
  }

  static Pointer<Void> components(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("components"),
    );
  }

  static Pointer<Void> connection(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static void dealloc(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> decodeBytesWithReturnedLength(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Uint64> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesWithReturnedLength:"),
      arg,
    );
  }

  static Pointer<Void> decodeDataObject(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeDataObject"),
    );
  }

  static Pointer<Void> decodeInvocation(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeInvocation"),
    );
  }

  static Pointer<Void> decodePortObject(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePortObject"),
    );
  }

  static Pointer<Void> decodePropertyList(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodePropertyList"),
    );
  }

  static Pointer<Void> decodeRetainedObject(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeRetainedObject"),
    );
  }

  static void decodeReturnValue(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeReturnValue:"),
      arg,
    );
  }

  static void decodeValueOfObjCType(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void dispatch(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dispatch"),
    );
  }

  static void encodeBycopyObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeBycopyObject:"),
      arg,
    );
  }

  static void encodeByrefObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeByrefObject:"),
      arg,
    );
  }

  static void encodeBytes(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required int length,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:"),
      arg,
      length,
    );
  }

  static void encodeDataObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeInvocation(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeInvocation:"),
      arg,
    );
  }

  static void encodeObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required int isBycopy,
    @required int isByref,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Int8_returns_void(
      _self,
      _objc.getSelector("encodeObject:isBycopy:isByref:"),
      arg,
      isBycopy,
      isByref,
    );
  }

  static void encodePortObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePortObject:"),
      arg,
    );
  }

  static void encodePropertyList(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodePropertyList:"),
      arg,
    );
  }

  static void encodeReturnValue(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeReturnValue:"),
      arg,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static Pointer<Void> finishedComponents(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("finishedComponents"),
    );
  }

  static void importObject(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("importObject:"),
      arg,
    );
  }

  static Pointer<Void> importedObjects(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("importedObjects"),
    );
  }

  static Pointer<Void> initWithReceivePort(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> sendPort,
    @required Pointer<Void> components,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithReceivePort:sendPort:components:"),
      arg,
      sendPort,
      components,
    );
  }

  static void invalidate(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isBycopy(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isBycopy"),
    );
  }

  static int isByref(
    Pointer<NSUnkeyedPortCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isByref"),
    );
  }

  static int versionForClassName(
    Pointer<NSUnkeyedPortCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("versionForClassName:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserActivity_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserActivity extends Struct<NSUserActivity> {
  factory NSUserActivity._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserActivity> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUserActivity").cast<NSUserActivity>();
  }

  static Pointer<Void> activityType(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("activityType"),
    );
  }

  static void addUserInfoEntriesFromDictionary(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addUserInfoEntriesFromDictionary:"),
      arg,
    );
  }

  static void becomeCurrent(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("becomeCurrent"),
    );
  }

  static Pointer<Void> contentAttributeSet(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentAttributeSet"),
    );
  }

  static Pointer<Void> contentAttributes(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentAttributes"),
    );
  }

  static Pointer<Void> contentType(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentType"),
    );
  }

  static Pointer<Void> contentUserAction(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("contentUserAction"),
    );
  }

  static void dealloc(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> detectedBarcodeDescriptor(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("detectedBarcodeDescriptor"),
    );
  }

  static void didReceiveInputStream(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> outputStream,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("didReceiveInputStream:outputStream:"),
      arg,
      outputStream,
    );
  }

  static void didSynchronizeActivity(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("didSynchronizeActivity"),
    );
  }

  static Pointer<Void> expirationDate(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("expirationDate"),
    );
  }

  static void getContinuationStreamsWithCompletionHandler(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getContinuationStreamsWithCompletionHandler:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithActivityType(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithActivityType:"),
      arg,
    );
  }

  static Pointer<Void> initWithInternalUserActivity(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithInternalUserActivity:"),
      arg,
    );
  }

  static Pointer<Void> initWithTypeIdentifier(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithTypeIdentifier:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isEligibleForHandoff(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEligibleForHandoff"),
    );
  }

  static int isEligibleForPrediction(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEligibleForPrediction"),
    );
  }

  static int isEligibleForPublicIndexing(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEligibleForPublicIndexing"),
    );
  }

  static int isEligibleForSearch(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEligibleForSearch"),
    );
  }

  static int isEqual(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> keywords(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("keywords"),
    );
  }

  static int needsSave(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("needsSave"),
    );
  }

  static Pointer<Void> referrerURL(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("referrerURL"),
    );
  }

  static Pointer<Void> requiredUserInfoKeys(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("requiredUserInfoKeys"),
    );
  }

  static void resignCurrent(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resignCurrent"),
    );
  }

  static int sendGURLAppleEvent(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("sendGURLAppleEvent"),
    );
  }

  static void setContentAttributeSet(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentAttributeSet:"),
      arg,
    );
  }

  static void setContentAttributes(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentAttributes:"),
      arg,
    );
  }

  static void setContentType(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentType:"),
      arg,
    );
  }

  static void setContentUserAction(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentUserAction:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setDetectedCode(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDetectedCode:"),
      arg,
    );
  }

  static void setEligibleForHandoff(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEligibleForHandoff:"),
      arg,
    );
  }

  static void setEligibleForPrediction(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEligibleForPrediction:"),
      arg,
    );
  }

  static void setEligibleForPublicIndexing(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEligibleForPublicIndexing:"),
      arg,
    );
  }

  static void setEligibleForSearch(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setEligibleForSearch:"),
      arg,
    );
  }

  static void setExpirationDate(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExpirationDate:"),
      arg,
    );
  }

  static void setKeywords(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setKeywords:"),
      arg,
    );
  }

  static void setNeedsSave(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setNeedsSave:"),
      arg,
    );
  }

  static void setReferrerURL(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReferrerURL:"),
      arg,
    );
  }

  static void setRequiredUserInfoKeys(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRequiredUserInfoKeys:"),
      arg,
    );
  }

  static void setSupportsContinuationStreams(
    Pointer<NSUserActivity> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setSupportsContinuationStreams:"),
      arg,
    );
  }

  static void setTitle(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTitle:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void setWebPageURL(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebPageURL:"),
      arg,
    );
  }

  static void setWebpageURL(
    Pointer<NSUserActivity> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWebpageURL:"),
      arg,
    );
  }

  static int supportsContinuationStreams(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("supportsContinuationStreams"),
    );
  }

  static Pointer<Void> title(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("title"),
    );
  }

  static Pointer<Void> typeIdentifier(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("typeIdentifier"),
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer<Void> webPageURL(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webPageURL"),
    );
  }

  static Pointer<Void> webpageURL(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("webpageURL"),
    );
  }

  static void willSynchronizeActivity(
    Pointer<NSUserActivity> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("willSynchronizeActivity"),
    );
  }
}

/// Objective-C class _NSUserAppleScriptTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserAppleScriptTask extends Struct<NSUserAppleScriptTask> {
  factory NSUserAppleScriptTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserAppleScriptTask> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUserAppleScriptTask")
        .cast<NSUserAppleScriptTask>();
  }

  static void executeWithAppleEvent(
    Pointer<NSUserAppleScriptTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithAppleEvent:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void executeWithCompletionHandler(
    Pointer<NSUserAppleScriptTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithCompletionHandler:"),
      arg,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSUserAppleScriptTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:error:"),
      arg,
      error,
    );
  }

  static int isParentDefaultTarget(
    Pointer<NSUserAppleScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isParentDefaultTarget"),
    );
  }

  static void setParentDefaultTarget(
    Pointer<NSUserAppleScriptTask> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setParentDefaultTarget:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserAutomatorTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserAutomatorTask extends Struct<NSUserAutomatorTask> {
  factory NSUserAutomatorTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserAutomatorTask> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUserAutomatorTask").cast<NSUserAutomatorTask>();
  }

  static void dealloc(
    Pointer<NSUserAutomatorTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeWithCompletionHandler(
    Pointer<NSUserAutomatorTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithCompletionHandler:"),
      arg,
    );
  }

  static void executeWithInput(
    Pointer<NSUserAutomatorTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithInput:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void setVariables(
    Pointer<NSUserAutomatorTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVariables:"),
      arg,
    );
  }

  static Pointer<Void> variables(
    Pointer<NSUserAutomatorTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variables"),
    );
  }
}

/// Objective-C class _NSUserNotification_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserNotification extends Struct<NSUserNotification> {
  factory NSUserNotification._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserNotification> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUserNotification").cast<NSUserNotification>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUserNotification> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUserNotification> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setContentImage(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContentImage:"),
      arg,
    );
  }

  static void set_contentImageData(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_contentImageData:"),
      arg,
    );
  }

  static void set_identityImageData(
    Pointer<NSUserNotification> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_identityImageData:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserNotificationAction_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserNotificationAction extends Struct<NSUserNotificationAction> {
  factory NSUserNotificationAction._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserNotificationAction> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUserNotificationAction")
        .cast<NSUserNotificationAction>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSUserNotificationAction> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSUserNotificationAction> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUserNotificationAction> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSUserNotificationAction> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserNotificationCenter_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserNotificationCenter extends Struct<NSUserNotificationCenter> {
  factory NSUserNotificationCenter._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserNotificationCenter> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUserNotificationCenter")
        .cast<NSUserNotificationCenter>();
  }

  static void deliverNotification(
    Pointer<NSUserNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("deliverNotification:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSUserNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void removeAllDeliveredNotifications(
    Pointer<NSUserNotificationCenter> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllDeliveredNotifications"),
    );
  }

  static void removeDeliveredNotification(
    Pointer<NSUserNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeDeliveredNotification:"),
      arg,
    );
  }

  static void removeScheduledNotification(
    Pointer<NSUserNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeScheduledNotification:"),
      arg,
    );
  }

  static void scheduleNotification(
    Pointer<NSUserNotificationCenter> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("scheduleNotification:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserScriptTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserScriptTask extends Struct<NSUserScriptTask> {
  factory NSUserScriptTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserScriptTask> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUserScriptTask").cast<NSUserScriptTask>();
  }

  static void dealloc(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeWithCompletionHandler(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithCompletionHandler:"),
      arg,
    );
  }

  static void executeWithInterpreter(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> _arg2,
    Pointer<Void> arguments,
    Pointer<Void> _arg4,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithInterpreter:arguments::"),
      _arg2,
      arguments,
      _arg4,
    );
  }

  static Pointer<Void> initWithURL(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithURL:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> interpretErrorStatus(
    Pointer<NSUserScriptTask> _self,
    int arg, {
    @required Pointer<Void> withOutput,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_p(
      _self,
      _objc.getSelector("interpretErrorStatus:withOutput:"),
      arg,
      withOutput,
    );
  }

  static Pointer<Void> scriptURL(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("scriptURL"),
    );
  }

  static void setShowsProgressInMenuBar(
    Pointer<NSUserScriptTask> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShowsProgressInMenuBar:"),
      arg,
    );
  }

  static void setStandardError(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardError:"),
      arg,
    );
  }

  static void setStandardInput(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardInput:"),
      arg,
    );
  }

  static void setStandardOutput(
    Pointer<NSUserScriptTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStandardOutput:"),
      arg,
    );
  }

  static int showsProgressInMenuBar(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("showsProgressInMenuBar"),
    );
  }

  static Pointer<Void> standardError(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardError"),
    );
  }

  static Pointer<Void> standardInput(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardInput"),
    );
  }

  static Pointer<Void> standardOutput(
    Pointer<NSUserScriptTask> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("standardOutput"),
    );
  }
}

/// Objective-C class _NSUserScriptTaskRunner_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserScriptTaskRunner extends Struct<NSUserScriptTaskRunner> {
  factory NSUserScriptTaskRunner._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserScriptTaskRunner> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUserScriptTaskRunner")
        .cast<NSUserScriptTaskRunner>();
  }

  static void dealloc(
    Pointer<NSUserScriptTaskRunner> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void executeScript(
    Pointer<NSUserScriptTaskRunner> _self,
    Pointer<Void> _arg2,
    Pointer<Void> interpreter,
    Pointer<Void> arguments,
    Pointer<Void> standardInput,
    Pointer<Void> standardOutput,
    Pointer<Void> standardError,
    int showingProgress,
    Pointer<Void> _arg9,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "executeScript:interpreter:arguments:standardInput:standardOutput:standardError:showingProgress::"),
      _arg2,
      interpreter,
      arguments,
      standardInput,
      standardOutput,
      standardError,
      showingProgress,
      _arg9,
    );
  }

  static Pointer<Void> initWithConnection(
    Pointer<NSUserScriptTaskRunner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithConnection:"),
      arg,
    );
  }

  static int isSanitaryArgumentList(
    Pointer<NSUserScriptTaskRunner> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forInterpreter,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSanitaryArgumentList:forInterpreter:"),
      arg,
      forInterpreter,
    );
  }

  static int isValidScriptPath(
    Pointer<NSUserScriptTaskRunner> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValidScriptPath:"),
      arg,
    );
  }
}

/// Objective-C class _NSUserScriptTaskServiceDelegate_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserScriptTaskServiceDelegate
    extends Struct<NSUserScriptTaskServiceDelegate> {
  factory NSUserScriptTaskServiceDelegate._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserScriptTaskServiceDelegate> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSUserScriptTaskServiceDelegate")
        .cast<NSUserScriptTaskServiceDelegate>();
  }

  static int listener(
    Pointer<NSUserScriptTaskServiceDelegate> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> shouldAcceptNewConnection,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("listener:shouldAcceptNewConnection:"),
      arg,
      shouldAcceptNewConnection,
    );
  }
}

/// Objective-C class _NSUserUnixTask_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSUserUnixTask extends Struct<NSUserUnixTask> {
  factory NSUserUnixTask._() {
    throw UnimplementedError();
  }
  static Pointer<NSUserUnixTask> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSUserUnixTask").cast<NSUserUnixTask>();
  }

  static void executeWithArguments(
    Pointer<NSUserUnixTask> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> completionHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithArguments:completionHandler:"),
      arg,
      completionHandler,
    );
  }

  static void executeWithCompletionHandler(
    Pointer<NSUserUnixTask> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("executeWithCompletionHandler:"),
      arg,
    );
  }
}

/// Objective-C class _NSValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSValue extends Struct<NSValue> {
  factory NSValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSValue").cast<NSValue>();
  }

  static Pointer<Void> CAColorMatrixValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAColorMatrixValue"),
    );
  }

  static Pointer<Void> CAMLType(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAMLType"),
    );
  }

  static Pointer<Void> CAPoint3DValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CAPoint3DValue"),
    );
  }

  static Pointer<Void> CATransform3DValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CATransform3DValue"),
    );
  }

  static Pointer<Void> CA_addValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg, {
    @required int multipliedBy,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int32_returns_p(
      _self,
      _objc.getSelector("CA_addValue:multipliedBy:"),
      arg,
      multipliedBy,
    );
  }

  static int CA_copyNumericValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("CA_copyNumericValue:"),
      arg,
    );
  }

  static Pointer<Pointer<Void>> CA_copyRenderValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("CA_copyRenderValue"),
    );
  }

  static double CA_distanceToValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("CA_distanceToValue:"),
      arg,
    );
  }

  static Pointer<Void> CA_interpolateValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg, {
    @required double byFraction,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float32_returns_p(
      _self,
      _objc.getSelector("CA_interpolateValue:byFraction:"),
      arg,
      byFraction,
    );
  }

  static Pointer<Void> CA_interpolateValues(
    Pointer<NSValue> _self,
    Pointer<Void> _arg2,
    Pointer<Void> _arg3,
    Pointer<Void> _arg4,
    Pointer<Pointer<Void>> interpolator,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("CA_interpolateValues:::interpolator:"),
      _arg2,
      _arg3,
      _arg4,
      interpolator,
    );
  }

  static Pointer<Void> CA_roundToIntegerFromValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("CA_roundToIntegerFromValue:"),
      arg,
    );
  }

  static Pointer<Void> classForCoder(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("classForCoder"),
    );
  }

  static Pointer<Void> coordinateValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("coordinateValue"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSValue> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static Pointer<Void> description(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> edgeInsetsValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("edgeInsetsValue"),
    );
  }

  static void encodeWithCAMLWriter(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCAMLWriter:"),
      arg,
    );
  }

  static void encodeWithCoder(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static void getValue$(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getValue:"),
      arg,
    );
  }

  static void getValue$size$(
    Pointer<NSValue> _self,
    Pointer<Void> arg, {
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getValue:size:"),
      arg,
      size,
    );
  }

  static int hash(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithBytes(
    Pointer<NSValue> _self,
    Pointer<Void> arg, {
    @required Pointer<Utf8> objCType,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithBytes:objCType:"),
      arg,
      objCType,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isEqualToValue(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToValue:"),
      arg,
    );
  }

  static int isNSValue__(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isNSValue__"),
    );
  }

  static Pointer<Void> nonretainedObjectValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonretainedObjectValue"),
    );
  }

  static Pointer<Utf8> objCType(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objCType"),
    );
  }

  static Pointer<Void> pointValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointValue"),
    );
  }

  static Pointer<Void> pointerValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("pointerValue"),
    );
  }

  static Pointer<Void> rangeValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rangeValue"),
    );
  }

  static Pointer<Void> rectValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rectValue"),
    );
  }

  static Pointer<Void> replacementObjectForPortCoder(
    Pointer<NSValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForPortCoder:"),
      arg,
    );
  }

  static Pointer<Void> sizeValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("sizeValue"),
    );
  }

  static Pointer<Void> weakObjectValue(
    Pointer<NSValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weakObjectValue"),
    );
  }
}

/// Objective-C class _NSValueTransformer_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSValueTransformer extends Struct<NSValueTransformer> {
  factory NSValueTransformer._() {
    throw UnimplementedError();
  }
  static Pointer<NSValueTransformer> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSValueTransformer").cast<NSValueTransformer>();
  }

  static Pointer<Void> reverseTransformedValue(
    Pointer<NSValueTransformer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reverseTransformedValue:"),
      arg,
    );
  }

  static Pointer<Void> transformedValue(
    Pointer<NSValueTransformer> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSVariableAssignmentExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSVariableAssignmentExpression
    extends Struct<NSVariableAssignmentExpression> {
  factory NSVariableAssignmentExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSVariableAssignmentExpression> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSVariableAssignmentExpression")
        .cast<NSVariableAssignmentExpression>();
  }

  static void acceptVisitor(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg, {
    @required int flags,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("acceptVisitor:flags:"),
      arg,
      flags,
    );
  }

  static void allowEvaluation(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("allowEvaluation"),
    );
  }

  static Pointer<Void> assignmentVariable(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("assignmentVariable"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithAssignmentExpression(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> expression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAssignmentExpression:expression:"),
      arg,
      expression,
    );
  }

  static Pointer<Void> initWithAssignmentVariable(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> expression,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithAssignmentVariable:expression:"),
      arg,
      expression,
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSVariableAssignmentExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> subexpression(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("subexpression"),
    );
  }

  static Pointer<Void> variable(
    Pointer<NSVariableAssignmentExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variable"),
    );
  }
}

/// Objective-C class _NSVariableExpression_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSVariableExpression extends Struct<NSVariableExpression> {
  factory NSVariableExpression._() {
    throw UnimplementedError();
  }
  static Pointer<NSVariableExpression> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSVariableExpression").cast<NSVariableExpression>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSVariableExpression> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSVariableExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSVariableExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> expressionValueWithObject(
    Pointer<NSVariableExpression> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("expressionValueWithObject:context:"),
      arg,
      context,
    );
  }

  static int hash(
    Pointer<NSVariableExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSVariableExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> initWithObject(
    Pointer<NSVariableExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSVariableExpression> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> predicateFormat(
    Pointer<NSVariableExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("predicateFormat"),
    );
  }

  static Pointer<Void> variable(
    Pointer<NSVariableExpression> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("variable"),
    );
  }
}

/// Objective-C class _NSVisualFormatLayoutRule_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSVisualFormatLayoutRule extends Struct<NSVisualFormatLayoutRule> {
  factory NSVisualFormatLayoutRule._() {
    throw UnimplementedError();
  }
  static Pointer<NSVisualFormatLayoutRule> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSVisualFormatLayoutRule")
        .cast<NSVisualFormatLayoutRule>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSVisualFormatLayoutRule> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int hash(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> identifier(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("identifier"),
    );
  }

  static Pointer<Void> initWithVisualFormat(
    Pointer<NSVisualFormatLayoutRule> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> metrics,
    @required Pointer<Void> rects,
    @required Pointer<Void> containerRect,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithVisualFormat:options:metrics:rects:containerRect:"),
      arg,
      options,
      metrics,
      rects,
      containerRect,
    );
  }

  static int isEqual(
    Pointer<NSVisualFormatLayoutRule> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> makeChildRules(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("makeChildRules"),
    );
  }

  static Pointer<Void> ruleDescription(
    Pointer<NSVisualFormatLayoutRule> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("ruleDescription"),
    );
  }
}

/// Objective-C class _NSWINDOWS1250EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1250EncodingDetector
    extends Struct<NSWINDOWS1250EncodingDetector> {
  factory NSWINDOWS1250EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1250EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1250EncodingDetector")
        .cast<NSWINDOWS1250EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1250EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1251EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1251EncodingDetector
    extends Struct<NSWINDOWS1251EncodingDetector> {
  factory NSWINDOWS1251EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1251EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1251EncodingDetector")
        .cast<NSWINDOWS1251EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1251EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1252EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1252EncodingDetector
    extends Struct<NSWINDOWS1252EncodingDetector> {
  factory NSWINDOWS1252EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1252EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1252EncodingDetector")
        .cast<NSWINDOWS1252EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1252EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1253EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1253EncodingDetector
    extends Struct<NSWINDOWS1253EncodingDetector> {
  factory NSWINDOWS1253EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1253EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1253EncodingDetector")
        .cast<NSWINDOWS1253EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1253EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1254EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1254EncodingDetector
    extends Struct<NSWINDOWS1254EncodingDetector> {
  factory NSWINDOWS1254EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1254EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1254EncodingDetector")
        .cast<NSWINDOWS1254EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1254EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1255EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1255EncodingDetector
    extends Struct<NSWINDOWS1255EncodingDetector> {
  factory NSWINDOWS1255EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1255EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1255EncodingDetector")
        .cast<NSWINDOWS1255EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1255EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1256EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1256EncodingDetector
    extends Struct<NSWINDOWS1256EncodingDetector> {
  factory NSWINDOWS1256EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1256EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1256EncodingDetector")
        .cast<NSWINDOWS1256EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1256EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1257EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1257EncodingDetector
    extends Struct<NSWINDOWS1257EncodingDetector> {
  factory NSWINDOWS1257EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1257EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1257EncodingDetector")
        .cast<NSWINDOWS1257EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1257EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS1258EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS1258EncodingDetector
    extends Struct<NSWINDOWS1258EncodingDetector> {
  factory NSWINDOWS1258EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS1258EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS1258EncodingDetector")
        .cast<NSWINDOWS1258EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS1258EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS874EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS874EncodingDetector
    extends Struct<NSWINDOWS874EncodingDetector> {
  factory NSWINDOWS874EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS874EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS874EncodingDetector")
        .cast<NSWINDOWS874EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS874EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS932EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS932EncodingDetector
    extends Struct<NSWINDOWS932EncodingDetector> {
  factory NSWINDOWS932EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS932EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS932EncodingDetector")
        .cast<NSWINDOWS932EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS932EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS936EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS936EncodingDetector
    extends Struct<NSWINDOWS936EncodingDetector> {
  factory NSWINDOWS936EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS936EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS936EncodingDetector")
        .cast<NSWINDOWS936EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS936EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS949EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS949EncodingDetector
    extends Struct<NSWINDOWS949EncodingDetector> {
  factory NSWINDOWS949EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS949EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS949EncodingDetector")
        .cast<NSWINDOWS949EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS949EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWINDOWS950EncodingDetector_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWINDOWS950EncodingDetector
    extends Struct<NSWINDOWS950EncodingDetector> {
  factory NSWINDOWS950EncodingDetector._() {
    throw UnimplementedError();
  }
  static Pointer<NSWINDOWS950EncodingDetector> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSWINDOWS950EncodingDetector")
        .cast<NSWINDOWS950EncodingDetector>();
  }

  static int recognizeString(
    Pointer<NSWINDOWS950EncodingDetector> _self,
    Pointer<Utf8> arg, {
    @required int withDataLength,
    @required Pointer<Void> intoBuffer,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Uint64(
      _self,
      _objc.getSelector("recognizeString:withDataLength:intoBuffer:"),
      arg,
      withDataLength,
      intoBuffer,
    );
  }
}

/// Objective-C class _NSWeakObjectValue_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWeakObjectValue extends Struct<NSWeakObjectValue> {
  factory NSWeakObjectValue._() {
    throw UnimplementedError();
  }
  static Pointer<NSWeakObjectValue> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSWeakObjectValue").cast<NSWeakObjectValue>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSWeakObjectValue> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSWeakObjectValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void getValue$(
    Pointer<NSWeakObjectValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("getValue:"),
      arg,
    );
  }

  static void getValue$size$(
    Pointer<NSWeakObjectValue> _self,
    Pointer<Void> arg, {
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("getValue:size:"),
      arg,
      size,
    );
  }

  static int hash(
    Pointer<NSWeakObjectValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithObject(
    Pointer<NSWeakObjectValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithObject:"),
      arg,
    );
  }

  static int isEqualToValue(
    Pointer<NSWeakObjectValue> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqualToValue:"),
      arg,
    );
  }

  static Pointer<Void> nonretainedObjectValue(
    Pointer<NSWeakObjectValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nonretainedObjectValue"),
    );
  }

  static Pointer<Utf8> objCType(
    Pointer<NSWeakObjectValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objCType"),
    );
  }

  static Pointer<Void> weakObjectValue(
    Pointer<NSWeakObjectValue> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("weakObjectValue"),
    );
  }
}

/// Objective-C class _NSWhoseSpecifier_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWhoseSpecifier extends Struct<NSWhoseSpecifier> {
  factory NSWhoseSpecifier._() {
    throw UnimplementedError();
  }
  static Pointer<NSWhoseSpecifier> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSWhoseSpecifier").cast<NSWhoseSpecifier>();
  }

  static void dealloc(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSWhoseSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static int endSubelementIdentifier(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("endSubelementIdentifier"),
    );
  }

  static int endSubelementIndex(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("endSubelementIndex"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSWhoseSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$test$(
    Pointer<NSWhoseSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
    @required Pointer<Void> test,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:test:"),
      arg,
      containerSpecifier,
      key,
      test,
    );
  }

  static Pointer<Void>
      initWithContainerClassDescription$containerSpecifier$key$(
    Pointer<NSWhoseSpecifier> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> containerSpecifier,
    @required Pointer<Void> key,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithContainerClassDescription:containerSpecifier:key:"),
      arg,
      containerSpecifier,
      key,
    );
  }

  static void setEndSubelementIdentifier(
    Pointer<NSWhoseSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setEndSubelementIdentifier:"),
      arg,
    );
  }

  static void setEndSubelementIndex(
    Pointer<NSWhoseSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setEndSubelementIndex:"),
      arg,
    );
  }

  static void setStartSubelementIdentifier(
    Pointer<NSWhoseSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setStartSubelementIdentifier:"),
      arg,
    );
  }

  static void setStartSubelementIndex(
    Pointer<NSWhoseSpecifier> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setStartSubelementIndex:"),
      arg,
    );
  }

  static void setTest(
    Pointer<NSWhoseSpecifier> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setTest:"),
      arg,
    );
  }

  static int startSubelementIdentifier(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("startSubelementIdentifier"),
    );
  }

  static int startSubelementIndex(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("startSubelementIndex"),
    );
  }

  static Pointer<Void> test(
    Pointer<NSWhoseSpecifier> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("test"),
    );
  }
}

/// Objective-C class _NSWhoseTest_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSWhoseTest extends Struct<NSWhoseTest> {
  factory NSWhoseTest._() {
    throw UnimplementedError();
  }
  static Pointer<NSWhoseTest> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSWhoseTest").cast<NSWhoseTest>();
  }
}

/// Objective-C class _NSXMLAttributeDeclaration_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLAttributeDeclaration extends Struct<NSXMLAttributeDeclaration> {
  factory NSXMLAttributeDeclaration._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLAttributeDeclaration> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLAttributeDeclaration")
        .cast<NSXMLAttributeDeclaration>();
  }

  static void addEnumeration(
    Pointer<NSXMLAttributeDeclaration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addEnumeration:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLAttributeDeclaration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int defaultType(
    Pointer<NSXMLAttributeDeclaration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("defaultType"),
    );
  }

  static Pointer<Void> elementName(
    Pointer<NSXMLAttributeDeclaration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("elementName"),
    );
  }

  static Pointer<Void> enumerations(
    Pointer<NSXMLAttributeDeclaration> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("enumerations"),
    );
  }

  static int isEqual(
    Pointer<NSXMLAttributeDeclaration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static void setDefaultType(
    Pointer<NSXMLAttributeDeclaration> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDefaultType:"),
      arg,
    );
  }

  static void setElementName(
    Pointer<NSXMLAttributeDeclaration> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setElementName:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLChildren_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLChildren extends Struct<NSXMLChildren> {
  factory NSXMLChildren._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLChildren> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLChildren").cast<NSXMLChildren>();
  }

  static void addObject(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObject:"),
      arg,
    );
  }

  static void addObjectsFromArray(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addObjectsFromArray:"),
      arg,
    );
  }

  static int count(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("count"),
    );
  }

  static void dealloc(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void exchangeObjectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg, {
    @required int withObjectAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_void(
      _self,
      _objc.getSelector("exchangeObjectAtIndex:withObjectAtIndex:"),
      arg,
      withObjectAtIndex,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithMutableArray(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMutableArray:"),
      arg,
    );
  }

  static void insertObject(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObjects(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> atIndexes,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("insertObjects:atIndexes:"),
      arg,
      atIndexes,
    );
  }

  static void makeStale(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("makeStale"),
    );
  }

  static Pointer<Void> objectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> reallyAddObject(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reallyAddObject:"),
      arg,
    );
  }

  static Pointer<Void> reallyInsertObject(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("reallyInsertObject:atIndex:"),
      arg,
      atIndex,
    );
  }

  static Pointer<Void> reallyRemoveAllObjects(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("reallyRemoveAllObjects"),
    );
  }

  static Pointer<Void> reallyRemoveObject(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("reallyRemoveObject:"),
      arg,
    );
  }

  static Pointer<Void> reallyRemoveObjectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("reallyRemoveObjectAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> reallyReplaceObjectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("reallyReplaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void removeAllObjects(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeAllObjects"),
    );
  }

  static void removeLastObject(
    Pointer<NSXMLChildren> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("removeLastObject"),
    );
  }

  static void removeObject$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:"),
      arg,
    );
  }

  static void removeObject$inRange$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObject:inRange:"),
      arg,
      inRange,
    );
  }

  static void removeObjectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectAtIndex:"),
      arg,
    );
  }

  static void removeObjectIdenticalTo$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectIdenticalTo:"),
      arg,
    );
  }

  static void removeObjectIdenticalTo$inRange$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> inRange,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectIdenticalTo:inRange:"),
      arg,
      inRange,
    );
  }

  static void removeObjectsAtIndexes(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsAtIndexes:"),
      arg,
    );
  }

  static void removeObjectsFromIndices(
    Pointer<NSXMLChildren> _self,
    Pointer<Uint64> arg, {
    @required int numIndices,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectsFromIndices:numIndices:"),
      arg,
      numIndices,
    );
  }

  static void removeObjectsInArray(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsInArray:"),
      arg,
    );
  }

  static void removeObjectsInRange(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeObjectsInRange:"),
      arg,
    );
  }

  static void replaceObjectAtIndex(
    Pointer<NSXMLChildren> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void replaceObjectsAtIndexes(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjects,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsAtIndexes:withObjects:"),
      arg,
      withObjects,
    );
  }

  static void replaceObjectsInRange$withObjectsFromArray$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjectsFromArray,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsInRange:withObjectsFromArray:"),
      arg,
      withObjectsFromArray,
    );
  }

  static void replaceObjectsInRange$withObjectsFromArray$range$(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> withObjectsFromArray,
    @required Pointer<Void> range,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectsInRange:withObjectsFromArray:range:"),
      arg,
      withObjectsFromArray,
      range,
    );
  }

  static void setArray(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setArray:"),
      arg,
    );
  }

  static void sortUsingFunction(
    Pointer<NSXMLChildren> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> context,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("sortUsingFunction:context:"),
      arg,
      context,
    );
  }

  static void sortUsingSelector(
    Pointer<NSXMLChildren> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("sortUsingSelector:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLContext_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLContext extends Struct<NSXMLContext> {
  factory NSXMLContext._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLContext> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLContext").cast<NSXMLContext>();
  }
}

/// Objective-C class _NSXMLDTD_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLDTD extends Struct<NSXMLDTD> {
  factory NSXMLDTD._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLDTD> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLDTD").cast<NSXMLDTD>();
  }

  static void addChild(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChild:"),
      arg,
    );
  }

  static Pointer<Void> attributeDeclarationForName(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> elementName,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributeDeclarationForName:elementName:"),
      arg,
      elementName,
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLDTD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static Pointer<Void> childAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("childAtIndex:"),
      arg,
    );
  }

  static int childCount(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("childCount"),
    );
  }

  static Pointer<Void> children(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("children"),
    );
  }

  static int countOfChildren(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfChildren"),
    );
  }

  static void dealloc(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> elementDeclarationForName(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("elementDeclarationForName:"),
      arg,
    );
  }

  static Pointer<Void> entityDeclarationForName(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("entityDeclarationForName:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithKind(
    Pointer<NSXMLDTD> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:options:"),
      arg,
      options,
    );
  }

  static void insertChild(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChild:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertChildren(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChildren:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObject(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg, {
    @required int inChildrenAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:inChildrenAtIndex:"),
      arg,
      inChildrenAtIndex,
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> notationDeclarationForName(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("notationDeclarationForName:"),
      arg,
    );
  }

  static Pointer<Void> objectInChildrenAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectInChildrenAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> publicID(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicID"),
    );
  }

  static void removeChildAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeChildAtIndex:"),
      arg,
    );
  }

  static void removeObjectFromChildrenAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectFromChildrenAtIndex:"),
      arg,
    );
  }

  static void replaceChildAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg, {
    @required Pointer<Void> withNode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceChildAtIndex:withNode:"),
      arg,
      withNode,
    );
  }

  static void replaceObjectInChildrenAtIndex(
    Pointer<NSXMLDTD> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectInChildrenAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static void setChildren(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildren:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setPublicID(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicID:"),
      arg,
    );
  }

  static void setSystemID(
    Pointer<NSXMLDTD> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSystemID:"),
      arg,
    );
  }

  static Pointer<Void> systemID(
    Pointer<NSXMLDTD> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("systemID"),
    );
  }
}

/// Objective-C class _NSXMLDTDNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLDTDNode extends Struct<NSXMLDTDNode> {
  factory NSXMLDTDNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLDTDNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLDTDNode").cast<NSXMLDTDNode>();
  }

  static int DTDKind(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("DTDKind"),
    );
  }

  static Pointer<Void> XPath(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XPath"),
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLDTDNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int hash(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithKind$(
    Pointer<NSXMLDTDNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:"),
      arg,
    );
  }

  static Pointer<Void> initWithKind$options$(
    Pointer<NSXMLDTDNode> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithXMLString(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithXMLString:"),
      arg,
    );
  }

  static int isEqual(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isExternal(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isExternal"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> notationName(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("notationName"),
    );
  }

  static Pointer<Void> publicID(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicID"),
    );
  }

  static void setDTDKind(
    Pointer<NSXMLDTDNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDTDKind:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setNotationName(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNotationName:"),
      arg,
    );
  }

  static void setObjectValue(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectValue:"),
      arg,
    );
  }

  static void setPublicID(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setPublicID:"),
      arg,
    );
  }

  static void setStringValue(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStringValue:"),
      arg,
    );
  }

  static void setSystemID(
    Pointer<NSXMLDTDNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setSystemID:"),
      arg,
    );
  }

  static Pointer<Void> systemID(
    Pointer<NSXMLDTDNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("systemID"),
    );
  }
}

/// Objective-C class _NSXMLDocument_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLDocument extends Struct<NSXMLDocument> {
  factory NSXMLDocument._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLDocument> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLDocument").cast<NSXMLDocument>();
  }

  static Pointer<Void> DTD(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("DTD"),
    );
  }

  static Pointer<Void> MIMEType(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("MIMEType"),
    );
  }

  static Pointer<Void> URI(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static Pointer<Void> XMLData(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XMLData"),
    );
  }

  static Pointer<Void> XMLDataWithOptions(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("XMLDataWithOptions:"),
      arg,
    );
  }

  static Pointer<Void> XMLStringWithOptions(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("XMLStringWithOptions:"),
      arg,
    );
  }

  static Pointer<Void> XPath(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XPath"),
    );
  }

  static void addChild(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChild:"),
      arg,
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static Pointer<Void> characterEncoding(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("characterEncoding"),
    );
  }

  static Pointer<Void> childAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("childAtIndex:"),
      arg,
    );
  }

  static int childCount(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("childCount"),
    );
  }

  static Pointer<Void> children(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("children"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLDocument> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int countOfChildren(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfChildren"),
    );
  }

  static void dealloc(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int documentContentKind(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("documentContentKind"),
    );
  }

  static int hash(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithData$options$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithData$options$validExternalEntityURLs$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Void> validExternalEntityURLs,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:options:validExternalEntityURLs:error:"),
      arg,
      options,
      validExternalEntityURLs,
      error,
    );
  }

  static Pointer<Void> initWithKind(
    Pointer<NSXMLDocument> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithRootElement(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithRootElement:"),
      arg,
    );
  }

  static Pointer<Void> initWithXMLString(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithXMLString:options:error:"),
      arg,
      options,
      error,
    );
  }

  static void insertChild(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChild:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertChildren(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChildren:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObject(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int inChildrenAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:inChildrenAtIndex:"),
      arg,
      inChildrenAtIndex,
    );
  }

  static int isEqual(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int isStandalone(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isStandalone"),
    );
  }

  static Pointer<Void> objectByApplyingXSLT$arguments$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arguments,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByApplyingXSLT:arguments:error:"),
      arg,
      arguments,
      error,
    );
  }

  static Pointer<Void> objectByApplyingXSLT$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByApplyingXSLT:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> objectByApplyingXSLTAtURL$arguments$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arguments,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByApplyingXSLTAtURL:arguments:error:"),
      arg,
      arguments,
      error,
    );
  }

  static Pointer<Void> objectByApplyingXSLTAtURL$error$(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByApplyingXSLTAtURL:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> objectByApplyingXSLTString(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> arguments,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectByApplyingXSLTString:arguments:error:"),
      arg,
      arguments,
      error,
    );
  }

  static Pointer<Void> objectInChildrenAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectInChildrenAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectValue(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectValue"),
    );
  }

  static void removeChildAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeChildAtIndex:"),
      arg,
    );
  }

  static void removeObjectFromChildrenAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectFromChildrenAtIndex:"),
      arg,
    );
  }

  static void replaceChildAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg, {
    @required Pointer<Void> withNode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceChildAtIndex:withNode:"),
      arg,
      withNode,
    );
  }

  static void replaceObjectInChildrenAtIndex(
    Pointer<NSXMLDocument> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectInChildrenAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static Pointer<Void> rootElement(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootElement"),
    );
  }

  static void setCharacterEncoding(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCharacterEncoding:"),
      arg,
    );
  }

  static void setChildren(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildren:"),
      arg,
    );
  }

  static void setDTD(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDTD:"),
      arg,
    );
  }

  static void setDocumentContentKind(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setDocumentContentKind:"),
      arg,
    );
  }

  static void setMIMEType(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setMIMEType:"),
      arg,
    );
  }

  static void setObjectValue(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectValue:"),
      arg,
    );
  }

  static void setRootElement(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRootElement:"),
      arg,
    );
  }

  static void setStandalone(
    Pointer<NSXMLDocument> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStandalone:"),
      arg,
    );
  }

  static void setStringValue(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg, {
    @required int resolvingEntities,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStringValue:resolvingEntities:"),
      arg,
      resolvingEntities,
    );
  }

  static void setURI(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURI:"),
      arg,
    );
  }

  static void setVersion(
    Pointer<NSXMLDocument> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setVersion:"),
      arg,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static int validateAndReturnError(
    Pointer<NSXMLDocument> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateAndReturnError:"),
      arg,
    );
  }

  static Pointer<Void> version(
    Pointer<NSXMLDocument> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("version"),
    );
  }
}

/// Objective-C class _NSXMLElement_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLElement extends Struct<NSXMLElement> {
  factory NSXMLElement._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLElement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLElement").cast<NSXMLElement>();
  }

  static Pointer<Void> URI(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static Pointer<Void> XPath(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XPath"),
    );
  }

  static void addAttribute(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addAttribute:"),
      arg,
    );
  }

  static void addChild(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addChild:"),
      arg,
    );
  }

  static void addNamespace(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addNamespace:"),
      arg,
    );
  }

  static Pointer<Void> attributeForLocalName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributeForLocalName:URI:"),
      arg,
      URI,
    );
  }

  static Pointer<Void> attributeForName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("attributeForName:"),
      arg,
    );
  }

  static Pointer<Void> attributes(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("attributes"),
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static Pointer<Void> childAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("childAtIndex:"),
      arg,
    );
  }

  static int childCount(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("childCount"),
    );
  }

  static Pointer<Void> children(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("children"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLElement> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static int countOfAttributes(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfAttributes"),
    );
  }

  static int countOfChildren(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfChildren"),
    );
  }

  static int countOfNamespaces(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("countOfNamespaces"),
    );
  }

  static void dealloc(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> elementsForLocalName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("elementsForLocalName:URI:"),
      arg,
      URI,
    );
  }

  static Pointer<Void> elementsForName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("elementsForName:"),
      arg,
    );
  }

  static int hash(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithKind(
    Pointer<NSXMLElement> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithLocalName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithLocalName:URI:"),
      arg,
      URI,
    );
  }

  static Pointer<Void> initWithName$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:"),
      arg,
    );
  }

  static Pointer<Void> initWithName$URI$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:URI:"),
      arg,
      URI,
    );
  }

  static Pointer<Void> initWithName$stringValue$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> stringValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithName:stringValue:"),
      arg,
      stringValue,
    );
  }

  static Pointer<Void> initWithXMLString(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithXMLString:error:"),
      arg,
      error,
    );
  }

  static void insertChild(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChild:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertChildren(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required int atIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertChildren:atIndex:"),
      arg,
      atIndex,
    );
  }

  static void insertObject$inChildrenAtIndex$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required int inChildrenAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:inChildrenAtIndex:"),
      arg,
      inChildrenAtIndex,
    );
  }

  static void insertObject$inAttributesAtIndex$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required int inAttributesAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:inAttributesAtIndex:"),
      arg,
      inAttributesAtIndex,
    );
  }

  static void insertObject$inNamespacesAtIndex$(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg, {
    @required int inNamespacesAtIndex,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("insertObject:inNamespacesAtIndex:"),
      arg,
      inNamespacesAtIndex,
    );
  }

  static int isEqual(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> localName(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localName"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> namespaceForPrefix(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("namespaceForPrefix:"),
      arg,
    );
  }

  static Pointer<Void> namespaces(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("namespaces"),
    );
  }

  static void normalizeAdjacentTextNodesPreservingCDATA(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("normalizeAdjacentTextNodesPreservingCDATA:"),
      arg,
    );
  }

  static Pointer<Void> objectInAttributesAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectInAttributesAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectInChildrenAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectInChildrenAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectInNamespacesAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("objectInNamespacesAtIndex:"),
      arg,
    );
  }

  static Pointer<Void> objectValue(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectValue"),
    );
  }

  static Pointer<Void> prefix(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prefix"),
    );
  }

  static void removeAttributeForName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeAttributeForName:"),
      arg,
    );
  }

  static void removeChildAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeChildAtIndex:"),
      arg,
    );
  }

  static void removeNamespaceForPrefix(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("removeNamespaceForPrefix:"),
      arg,
    );
  }

  static void removeObjectFromAttributesAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectFromAttributesAtIndex:"),
      arg,
    );
  }

  static void removeObjectFromChildrenAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectFromChildrenAtIndex:"),
      arg,
    );
  }

  static void removeObjectFromNamespacesAtIndex(
    Pointer<NSXMLElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("removeObjectFromNamespacesAtIndex:"),
      arg,
    );
  }

  static void replaceChildAtIndex(
    Pointer<NSXMLElement> _self,
    int arg, {
    @required Pointer<Void> withNode,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceChildAtIndex:withNode:"),
      arg,
      withNode,
    );
  }

  static void replaceObjectInChildrenAtIndex(
    Pointer<NSXMLElement> _self,
    int arg, {
    @required Pointer<Void> withObject,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("replaceObjectInChildrenAtIndex:withObject:"),
      arg,
      withObject,
    );
  }

  static Pointer<Void> resolveNamespaceForName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("resolveNamespaceForName:"),
      arg,
    );
  }

  static Pointer<Void> resolvePrefixForNamespaceURI(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("resolvePrefixForNamespaceURI:"),
      arg,
    );
  }

  static void setAttributes(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributes:"),
      arg,
    );
  }

  static void setAttributesAsDictionary(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributesAsDictionary:"),
      arg,
    );
  }

  static void setAttributesWithDictionary(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAttributesWithDictionary:"),
      arg,
    );
  }

  static void setChildren(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setChildren:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setNamespaces(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNamespaces:"),
      arg,
    );
  }

  static void setObjectValue(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectValue:"),
      arg,
    );
  }

  static void setURI(
    Pointer<NSXMLElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURI:"),
      arg,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSXMLElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static int validateName(
    Pointer<NSXMLElement> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("validateName:error:"),
      arg,
      error,
    );
  }
}

/// Objective-C class _NSXMLElementDeclarationContent_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLElementDeclarationContent
    extends Struct<NSXMLElementDeclarationContent> {
  factory NSXMLElementDeclarationContent._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLElementDeclarationContent> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLElementDeclarationContent")
        .cast<NSXMLElementDeclarationContent>();
  }

  static void XMLStringSequenceStarted(
    Pointer<NSXMLElementDeclarationContent> _self,
    int arg, {
    @required int choiceStarted,
    @required Pointer<Void> appendingToString,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_Int8_p_returns_void(
      _self,
      _objc.getSelector(
          "XMLStringSequenceStarted:choiceStarted:appendingToString:"),
      arg,
      choiceStarted,
      appendingToString,
    );
  }

  static int contentKind(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("contentKind"),
    );
  }

  static void dealloc(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int hash(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithContentKind(
    Pointer<NSXMLElementDeclarationContent> _self,
    int arg, {
    @required int occurrence,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithContentKind:occurrence:"),
      arg,
      occurrence,
    );
  }

  static int isEqual(
    Pointer<NSXMLElementDeclarationContent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> leftChild(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("leftChild"),
    );
  }

  static Pointer<Pointer<Void>> libxml2Content(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("libxml2Content"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static int occurrence(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("occurrence"),
    );
  }

  static Pointer<Void> rightChild(
    Pointer<NSXMLElementDeclarationContent> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rightChild"),
    );
  }

  static void setLeftChild(
    Pointer<NSXMLElementDeclarationContent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setLeftChild:"),
      arg,
    );
  }

  static void setName(
    Pointer<NSXMLElementDeclarationContent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setRightChild(
    Pointer<NSXMLElementDeclarationContent> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRightChild:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLFidelityElement_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLFidelityElement extends Struct<NSXMLFidelityElement> {
  factory NSXMLFidelityElement._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLFidelityElement> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLFidelityElement").cast<NSXMLFidelityElement>();
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLFidelityElement> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLFidelityElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fidelity(
    Pointer<NSXMLFidelityElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fidelity"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLFidelityElement> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void setEndWhitespace(
    Pointer<NSXMLFidelityElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setEndWhitespace:"),
      arg,
    );
  }

  static void setFidelity(
    Pointer<NSXMLFidelityElement> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFidelity:"),
      arg,
    );
  }

  static void setWhitespace(
    Pointer<NSXMLFidelityElement> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWhitespace:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLFidelityNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLFidelityNode extends Struct<NSXMLFidelityNode> {
  factory NSXMLFidelityNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLFidelityNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLFidelityNode").cast<NSXMLFidelityNode>();
  }

  static void addEntity(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Void> arg, {
    @required int index,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addEntity:index:"),
      arg,
      index,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fidelity(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fidelity"),
    );
  }

  static Pointer<Void> initWithKind(
    Pointer<NSXMLFidelityNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:"),
      arg,
    );
  }

  static int isCDATA(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isCDATA"),
    );
  }

  static Pointer<Void> objectValue(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectValue"),
    );
  }

  static void setFidelity(
    Pointer<NSXMLFidelityNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFidelity:"),
      arg,
    );
  }

  static void setNames(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNames:"),
      arg,
    );
  }

  static void setRanges(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRanges:"),
      arg,
    );
  }

  static void setStringValue(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Void> arg, {
    @required int resolvingEntities,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStringValue:resolvingEntities:"),
      arg,
      resolvingEntities,
    );
  }

  static void setWhitespace(
    Pointer<NSXMLFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWhitespace:"),
      arg,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }

  static Pointer<Void> whitespace(
    Pointer<NSXMLFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("whitespace"),
    );
  }
}

/// Objective-C class _NSXMLNSArrayTransformerName_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNSArrayTransformerName extends Struct<NSXMLNSArrayTransformerName> {
  factory NSXMLNSArrayTransformerName._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNSArrayTransformerName> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNSArrayTransformerName")
        .cast<NSXMLNSArrayTransformerName>();
  }

  static Pointer<Void> transformedValue(
    Pointer<NSXMLNSArrayTransformerName> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNSDataTransformerName_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNSDataTransformerName extends Struct<NSXMLNSDataTransformerName> {
  factory NSXMLNSDataTransformerName._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNSDataTransformerName> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNSDataTransformerName")
        .cast<NSXMLNSDataTransformerName>();
  }

  static Pointer<Void> transformedValue(
    Pointer<NSXMLNSDataTransformerName> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNSDateTransformerName_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNSDateTransformerName extends Struct<NSXMLNSDateTransformerName> {
  factory NSXMLNSDateTransformerName._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNSDateTransformerName> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNSDateTransformerName")
        .cast<NSXMLNSDateTransformerName>();
  }

  static Pointer<Void> transformedValue(
    Pointer<NSXMLNSDateTransformerName> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNSNumberTransformerName_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNSNumberTransformerName
    extends Struct<NSXMLNSNumberTransformerName> {
  factory NSXMLNSNumberTransformerName._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNSNumberTransformerName> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNSNumberTransformerName")
        .cast<NSXMLNSNumberTransformerName>();
  }

  static void dealloc(
    Pointer<NSXMLNSNumberTransformerName> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLNSNumberTransformerName> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> transformedValue(
    Pointer<NSXMLNSNumberTransformerName> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNSURLTransformerName_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNSURLTransformerName extends Struct<NSXMLNSURLTransformerName> {
  factory NSXMLNSURLTransformerName._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNSURLTransformerName> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNSURLTransformerName")
        .cast<NSXMLNSURLTransformerName>();
  }

  static Pointer<Void> transformedValue(
    Pointer<NSXMLNSURLTransformerName> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("transformedValue:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNamedFidelityNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNamedFidelityNode extends Struct<NSXMLNamedFidelityNode> {
  factory NSXMLNamedFidelityNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNamedFidelityNode> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXMLNamedFidelityNode")
        .cast<NSXMLNamedFidelityNode>();
  }

  static void addEntity(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Void> arg, {
    @required int index,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("addEntity:index:"),
      arg,
      index,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLNamedFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fidelity(
    Pointer<NSXMLNamedFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fidelity"),
    );
  }

  static Pointer<Void> initWithKind(
    Pointer<NSXMLNamedFidelityNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:"),
      arg,
    );
  }

  static Pointer<Void> objectValue(
    Pointer<NSXMLNamedFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectValue"),
    );
  }

  static void setFidelity(
    Pointer<NSXMLNamedFidelityNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setFidelity:"),
      arg,
    );
  }

  static void setNames(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setNames:"),
      arg,
    );
  }

  static void setRanges(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRanges:"),
      arg,
    );
  }

  static void setStringValue(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Void> arg, {
    @required int resolvingEntities,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStringValue:resolvingEntities:"),
      arg,
      resolvingEntities,
    );
  }

  static void setWhitespace(
    Pointer<NSXMLNamedFidelityNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWhitespace:"),
      arg,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSXMLNamedFidelityNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }
}

/// Objective-C class _NSXMLNamedNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNamedNode extends Struct<NSXMLNamedNode> {
  factory NSXMLNamedNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNamedNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLNamedNode").cast<NSXMLNamedNode>();
  }

  static Pointer<Void> URI(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static Pointer<Void> XPath(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XPath"),
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLNamedNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLNamedNode> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int hash(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static Pointer<Void> initWithKind$(
    Pointer<NSXMLNamedNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:"),
      arg,
    );
  }

  static Pointer<Void> initWithKind$name$stringValue$(
    Pointer<NSXMLNamedNode> _self,
    int arg, {
    @required Pointer<Void> name,
    @required Pointer<Void> stringValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKind:name:stringValue:"),
      arg,
      name,
      stringValue,
    );
  }

  static Pointer<Void> initWithKind$name$stringValue$URI$(
    Pointer<NSXMLNamedNode> _self,
    int arg, {
    @required Pointer<Void> name,
    @required Pointer<Void> stringValue,
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKind:name:stringValue:URI:"),
      arg,
      name,
      stringValue,
      URI,
    );
  }

  static Pointer<Void> initWithKind$localName$stringValue$URI$(
    Pointer<NSXMLNamedNode> _self,
    int arg, {
    @required Pointer<Void> localName,
    @required Pointer<Void> stringValue,
    @required Pointer<Void> URI,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithKind:localName:stringValue:URI:"),
      arg,
      localName,
      stringValue,
      URI,
    );
  }

  static int isEqual(
    Pointer<NSXMLNamedNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static Pointer<Void> localName(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localName"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> prefix(
    Pointer<NSXMLNamedNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prefix"),
    );
  }

  static void setName(
    Pointer<NSXMLNamedNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setObjectValue(
    Pointer<NSXMLNamedNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectValue:"),
      arg,
    );
  }

  static void setURI(
    Pointer<NSXMLNamedNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURI:"),
      arg,
    );
  }
}

/// Objective-C class _NSXMLNode_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLNode extends Struct<NSXMLNode> {
  factory NSXMLNode._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLNode> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLNode").cast<NSXMLNode>();
  }

  static Pointer<Void> URI(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static Pointer<Void> XMLData(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XMLData"),
    );
  }

  static Pointer<Void> XMLString(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XMLString"),
    );
  }

  static Pointer<Void> XMLStringWithOptions(
    Pointer<NSXMLNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("XMLStringWithOptions:"),
      arg,
    );
  }

  static Pointer<Void> XPath(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("XPath"),
    );
  }

  static Pointer<Void> canonicalXMLStringPreservingComments(
    Pointer<NSXMLNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_p(
      _self,
      _objc.getSelector("canonicalXMLStringPreservingComments:"),
      arg,
    );
  }

  static Pointer<Void> childAtIndex(
    Pointer<NSXMLNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("childAtIndex:"),
      arg,
    );
  }

  static int childCount(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("childCount"),
    );
  }

  static Pointer<Void> children(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("children"),
    );
  }

  static Pointer<Void> copyWithZone(
    Pointer<NSXMLNode> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("copyWithZone:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static void detach(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("detach"),
    );
  }

  static int hash(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("hash"),
    );
  }

  static int index(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("index"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithKind$(
    Pointer<NSXMLNode> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:"),
      arg,
    );
  }

  static Pointer<Void> initWithKind$options$(
    Pointer<NSXMLNode> _self,
    int arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithKind:options:"),
      arg,
      options,
    );
  }

  static int isEqual(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("isEqual:"),
      arg,
    );
  }

  static int kind(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("kind"),
    );
  }

  static int level(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("level"),
    );
  }

  static Pointer<Void> localName(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("localName"),
    );
  }

  static Pointer<Void> name(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("name"),
    );
  }

  static Pointer<Void> nextNode(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextNode"),
    );
  }

  static Pointer<Void> nextSibling(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("nextSibling"),
    );
  }

  static Pointer<Void> nodesForXPath(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("nodesForXPath:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> objectValue(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("objectValue"),
    );
  }

  static Pointer<Void> objectsForXQuery$constants$error$(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> constants,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsForXQuery:constants:error:"),
      arg,
      constants,
      error,
    );
  }

  static Pointer<Void> objectsForXQuery$error$(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg, {
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("objectsForXQuery:error:"),
      arg,
      error,
    );
  }

  static Pointer<Void> parent(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parent"),
    );
  }

  static Pointer<Void> prefix(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("prefix"),
    );
  }

  static Pointer<Void> previousNode(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousNode"),
    );
  }

  static Pointer<Void> previousSibling(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("previousSibling"),
    );
  }

  static Pointer<Void> rootDocument(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("rootDocument"),
    );
  }

  static void setName(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setName:"),
      arg,
    );
  }

  static void setObjectValue(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setObjectValue:"),
      arg,
    );
  }

  static void setStringValue$(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setStringValue:"),
      arg,
    );
  }

  static void setStringValue$resolvingEntities$(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg, {
    @required int resolvingEntities,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setStringValue:resolvingEntities:"),
      arg,
      resolvingEntities,
    );
  }

  static void setURI(
    Pointer<NSXMLNode> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURI:"),
      arg,
    );
  }

  static Pointer<Void> stringValue(
    Pointer<NSXMLNode> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("stringValue"),
    );
  }
}

/// Objective-C class _NSXMLParser_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLParser extends Struct<NSXMLParser> {
  factory NSXMLParser._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLParser> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLParser").cast<NSXMLParser>();
  }

  static void abortParsing(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("abortParsing"),
    );
  }

  static Pointer<Void> allowedExternalEntityURLs(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allowedExternalEntityURLs"),
    );
  }

  static int columnNumber(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("columnNumber"),
    );
  }

  static void dealloc(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static int externalEntityResolvingPolicy(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("externalEntityResolvingPolicy"),
    );
  }

  static int finishIncrementalParse(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("finishIncrementalParse"),
    );
  }

  static Pointer<Void> initForIncrementalParsing(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("initForIncrementalParsing"),
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:"),
      arg,
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithData:"),
      arg,
    );
  }

  static Pointer<Void> initWithStream(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithStream:"),
      arg,
    );
  }

  static int lineNumber(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("lineNumber"),
    );
  }

  static int parse(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("parse"),
    );
  }

  static int parseData(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("parseData:"),
      arg,
    );
  }

  static int parseFromStream(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("parseFromStream"),
    );
  }

  static Pointer<Void> parserError(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parserError"),
    );
  }

  static Pointer<Void> publicID(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("publicID"),
    );
  }

  static void setAllowedExternalEntityURLs(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAllowedExternalEntityURLs:"),
      arg,
    );
  }

  static void setDelegate(
    Pointer<NSXMLParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setExternalEntityResolvingPolicy(
    Pointer<NSXMLParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setExternalEntityResolvingPolicy:"),
      arg,
    );
  }

  static void setShouldContinueAfterFatalError(
    Pointer<NSXMLParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldContinueAfterFatalError:"),
      arg,
    );
  }

  static void setShouldProcessNamespaces(
    Pointer<NSXMLParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldProcessNamespaces:"),
      arg,
    );
  }

  static void setShouldReportNamespacePrefixes(
    Pointer<NSXMLParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldReportNamespacePrefixes:"),
      arg,
    );
  }

  static void setShouldResolveExternalEntities(
    Pointer<NSXMLParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setShouldResolveExternalEntities:"),
      arg,
    );
  }

  static int shouldContinueAfterFatalError(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldContinueAfterFatalError"),
    );
  }

  static int shouldProcessNamespaces(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldProcessNamespaces"),
    );
  }

  static int shouldReportNamespacePrefixes(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldReportNamespacePrefixes"),
    );
  }

  static int shouldResolveExternalEntities(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("shouldResolveExternalEntities"),
    );
  }

  static Pointer<Void> systemID(
    Pointer<NSXMLParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("systemID"),
    );
  }
}

/// Objective-C class _NSXMLSAXParser_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLSAXParser extends Struct<NSXMLSAXParser> {
  factory NSXMLSAXParser._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLSAXParser> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLSAXParser").cast<NSXMLSAXParser>();
  }

  static int afterEntityLookup(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("afterEntityLookup"),
    );
  }

  static Pointer<Void> content(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("content"),
    );
  }

  static Pointer<Pointer<Void>> context(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("context"),
    );
  }

  static Pointer<Void> current(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("current"),
    );
  }

  static void dealloc(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int fidelityMask(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("fidelityMask"),
    );
  }

  static Pointer<Void> initWithContentsOfURL(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithContentsOfURL:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithData$options$error$(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithData$isSingleDTDNode$options$error$(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg, {
    @required int isSingleDTDNode,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int8_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:isSingleDTDNode:options:error:"),
      arg,
      isSingleDTDNode,
      options,
      error,
    );
  }

  static int isSingleDTDNode(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isSingleDTDNode"),
    );
  }

  static Pointer<Void> parse(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parse"),
    );
  }

  static Pointer<Void> root(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("root"),
    );
  }

  static void setAfterEntityLookup(
    Pointer<NSXMLSAXParser> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_returns_void(
      _self,
      _objc.getSelector("setAfterEntityLookup:"),
      arg,
    );
  }

  static void setContent(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContent:"),
      arg,
    );
  }

  static void setCurrent(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrent:"),
      arg,
    );
  }

  static void setError(
    Pointer<NSXMLSAXParser> _self,
    int arg, {
    @required Pointer<Void> info,
    @required int fatal,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_Int8_returns_void(
      _self,
      _objc.getSelector("setError:info:fatal:"),
      arg,
      info,
      fatal,
    );
  }

  static void setRoot(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoot:"),
      arg,
    );
  }

  static void setWhitespace(
    Pointer<NSXMLSAXParser> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setWhitespace:"),
      arg,
    );
  }

  static Pointer<Void> whitespace(
    Pointer<NSXMLSAXParser> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("whitespace"),
    );
  }
}

/// Objective-C class _NSXMLSchemaType_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLSchemaType extends Struct<NSXMLSchemaType> {
  factory NSXMLSchemaType._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLSchemaType> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLSchemaType").cast<NSXMLSchemaType>();
  }
}

/// Objective-C class _NSXMLTidy_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLTidy extends Struct<NSXMLTidy> {
  factory NSXMLTidy._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLTidy> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLTidy").cast<NSXMLTidy>();
  }
}

/// Objective-C class _NSXMLTreeReader_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXMLTreeReader extends Struct<NSXMLTreeReader> {
  factory NSXMLTreeReader._() {
    throw UnimplementedError();
  }
  static Pointer<NSXMLTreeReader> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXMLTreeReader").cast<NSXMLTreeReader>();
  }

  static Pointer<Void> DTDString(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("DTDString"),
    );
  }

  static Pointer<Void> URI(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("URI"),
    );
  }

  static Pointer<Void> allowedEntityURLs(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allowedEntityURLs"),
    );
  }

  static Pointer<Void> createNamedNodeFromNode(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Pointer<Void>> reader,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("createNamedNodeFromNode:reader:"),
      arg,
      reader,
    );
  }

  static void dealloc(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static int externalEntityLoadingPolicy(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int64(
      _self,
      _objc.getSelector("externalEntityLoadingPolicy"),
    );
  }

  static Pointer<Void> initWithData$documentClass$options$error$(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> documentClass,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:documentClass:options:error:"),
      arg,
      documentClass,
      options,
      error,
    );
  }

  static Pointer<Void>
      initWithData$documentClass$isSingleDTDNode$options$error$(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> documentClass,
    @required int isSingleDTDNode,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Int8_Uint64_p_returns_p(
      _self,
      _objc.getSelector(
          "initWithData:documentClass:isSingleDTDNode:options:error:"),
      arg,
      documentClass,
      isSingleDTDNode,
      options,
      error,
    );
  }

  static Pointer<Void> parse(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("parse"),
    );
  }

  static void processCDATA(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processCDATA:"),
      arg,
    );
  }

  static void processComment(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processComment:"),
      arg,
    );
  }

  static void processDocument(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processDocument:"),
      arg,
    );
  }

  static void processDocumentFragment(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processDocumentFragment:"),
      arg,
    );
  }

  static void processDocumentType(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processDocumentType:"),
      arg,
    );
  }

  static void processElement(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processElement:"),
      arg,
    );
  }

  static void processEndElement(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processEndElement:"),
      arg,
    );
  }

  static void processEndEntity(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processEndEntity:"),
      arg,
    );
  }

  static void processEntity(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processEntity:"),
      arg,
    );
  }

  static void processEntityReference(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processEntityReference:"),
      arg,
    );
  }

  static void processNode(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processNode:"),
      arg,
    );
  }

  static void processNotation(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processNotation:"),
      arg,
    );
  }

  static void processProcessingInstruction(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processProcessingInstruction:"),
      arg,
    );
  }

  static void processRealDocument(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processRealDocument:"),
      arg,
    );
  }

  static void processSignificantWhitespace(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processSignificantWhitespace:"),
      arg,
    );
  }

  static void processText(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processText:"),
      arg,
    );
  }

  static void processWhitespace(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processWhitespace:"),
      arg,
    );
  }

  static void processXMLDeclaration(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Pointer<Void>> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("processXMLDeclaration:"),
      arg,
    );
  }

  static Pointer<Void> root(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("root"),
    );
  }

  static void setAllowedEntityURLs(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setAllowedEntityURLs:"),
      arg,
    );
  }

  static void setContent(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setContent:"),
      arg,
    );
  }

  static void setCurrent(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setCurrent:"),
      arg,
    );
  }

  static void setError(
    Pointer<NSXMLTreeReader> _self,
    int arg, {
    @required Pointer<Void> info,
    @required int fatal,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_Int8_returns_void(
      _self,
      _objc.getSelector("setError:info:fatal:"),
      arg,
      info,
      fatal,
    );
  }

  static void setExternalEntityLoadingPolicy(
    Pointer<NSXMLTreeReader> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_returns_void(
      _self,
      _objc.getSelector("setExternalEntityLoadingPolicy:"),
      arg,
    );
  }

  static void setRoot(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRoot:"),
      arg,
    );
  }

  static void setURI(
    Pointer<NSXMLTreeReader> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setURI:"),
      arg,
    );
  }

  static Pointer<Void> url(
    Pointer<NSXMLTreeReader> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("url"),
    );
  }
}

/// Objective-C class _NSXPCCoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCCoder extends Struct<NSXPCCoder> {
  factory NSXPCCoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCCoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCCoder").cast<NSXPCCoder>();
  }

  static Pointer<Void> connection(
    Pointer<NSXPCCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static void dealloc(
    Pointer<NSXPCCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> decodeXPCObjectForKey(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeXPCObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeXPCObjectOfType(
    Pointer<NSXPCCoder> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeXPCObjectOfType:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeXPCObject(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeXPCObject:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> geo_decodeXPCDataForKey(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("geo_decodeXPCDataForKey:"),
      arg,
    );
  }

  static double geo_decodeXPCDoubleForKey$success$(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> success,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_float64(
      _self,
      _objc.getSelector("geo_decodeXPCDoubleForKey:success:"),
      arg,
      success,
    );
  }

  static double geo_decodeXPCDoubleForKey$defaultValue$(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required double defaultValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_float64_returns_float64(
      _self,
      _objc.getSelector("geo_decodeXPCDoubleForKey:defaultValue:"),
      arg,
      defaultValue,
    );
  }

  static int geo_decodeXPCInt64ForKey$success$(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Int8> success,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("geo_decodeXPCInt64ForKey:success:"),
      arg,
      success,
    );
  }

  static int geo_decodeXPCInt64ForKey$defaultValue$(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required int defaultValue,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Int64_returns_Int64(
      _self,
      _objc.getSelector("geo_decodeXPCInt64ForKey:defaultValue:"),
      arg,
      defaultValue,
    );
  }

  static Pointer<Void> geo_decodeXPCStringForKey(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("geo_decodeXPCStringForKey:"),
      arg,
    );
  }

  static void geo_encodeXPCData(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("geo_encodeXPCData:forKey:"),
      arg,
      forKey,
    );
  }

  static void geo_encodeXPCDouble(
    Pointer<NSXPCCoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("geo_encodeXPCDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void geo_encodeXPCInt64(
    Pointer<NSXPCCoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("geo_encodeXPCInt64:forKey:"),
      arg,
      forKey,
    );
  }

  static void geo_encodeXPCString(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("geo_encodeXPCString:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static int requiresSecureCoding(
    Pointer<NSXPCCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("requiresSecureCoding"),
    );
  }

  static void setUserInfo(
    Pointer<NSXPCCoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSXPCCoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }
}

/// Objective-C class _NSXPCConnection_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCConnection extends Struct<NSXPCConnection> {
  factory NSXPCConnection._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCConnection> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCConnection").cast<NSXPCConnection>();
  }

  static void addBarrierBlock(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("addBarrierBlock:"),
      arg,
    );
  }

  static int auditSessionIdentifier(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("auditSessionIdentifier"),
    );
  }

  static Pointer<Void> auditToken(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("auditToken"),
    );
  }

  static Pointer<Void> cuValueForEntitlementNoCache(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("cuValueForEntitlementNoCache:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static int effectiveGroupIdentifier(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("effectiveGroupIdentifier"),
    );
  }

  static int effectiveUserIdentifier(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint32(
      _self,
      _objc.getSelector("effectiveUserIdentifier"),
    );
  }

  static Pointer<Void> endpoint(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endpoint"),
    );
  }

  static Pointer<Void> exportedInterface(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exportedInterface"),
    );
  }

  static Pointer<Void> exportedObject(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("exportedObject"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithEndpoint(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithEndpoint:"),
      arg,
    );
  }

  static Pointer<Void> initWithListenerEndpoint(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithListenerEndpoint:"),
      arg,
    );
  }

  static Pointer<Void> initWithMachServiceName$options$(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithMachServiceName:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithMachServiceName$(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMachServiceName:"),
      arg,
    );
  }

  static Pointer<Void> initWithServiceName$options$(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg, {
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithServiceName:options:"),
      arg,
      options,
    );
  }

  static Pointer<Void> initWithServiceName$(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithServiceName:"),
      arg,
    );
  }

  static Pointer<Void> interruptionHandler(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("interruptionHandler"),
    );
  }

  static void invalidate(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static Pointer<Void> invalidationHandler(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("invalidationHandler"),
    );
  }

  static int processIdentifier(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int32(
      _self,
      _objc.getSelector("processIdentifier"),
    );
  }

  static Pointer<Void> remoteObjectInterface(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectInterface"),
    );
  }

  static Pointer<Void> remoteObjectProxy(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxy"),
    );
  }

  static Pointer<Void> remoteObjectProxyWithErrorHandler(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxyWithErrorHandler:"),
      arg,
    );
  }

  static Pointer<Void> remoteObjectProxyWithTimeout(
    Pointer<NSXPCConnection> _self,
    double arg, {
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxyWithTimeout:errorHandler:"),
      arg,
      errorHandler,
    );
  }

  static Pointer<Void> remoteObjectProxyWithUserInfo(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> errorHandler,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("remoteObjectProxyWithUserInfo:errorHandler:"),
      arg,
      errorHandler,
    );
  }

  static Pointer<Void> replacementObjectForEncoder(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> object,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("replacementObjectForEncoder:object:"),
      arg,
      object,
    );
  }

  static void resume(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static Pointer<Void> serviceName(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serviceName"),
    );
  }

  static void setDelegate(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setExportedInterface(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExportedInterface:"),
      arg,
    );
  }

  static void setExportedObject(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setExportedObject:"),
      arg,
    );
  }

  static void setInterruptionHandler(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInterruptionHandler:"),
      arg,
    );
  }

  static void setInvalidationHandler(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setInvalidationHandler:"),
      arg,
    );
  }

  static void setOptions(
    Pointer<NSXPCConnection> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOptions:"),
      arg,
    );
  }

  static void setRemoteObjectInterface(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setRemoteObjectInterface:"),
      arg,
    );
  }

  static void setUserInfo(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setUserInfo:"),
      arg,
    );
  }

  static void set_additionalInvalidationHandler(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_additionalInvalidationHandler:"),
      arg,
    );
  }

  static void start(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("start"),
    );
  }

  static void stop(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stop"),
    );
  }

  static void suspend(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("suspend"),
    );
  }

  static Pointer<Void> synchronousRemoteObjectProxyWithErrorHandler(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("synchronousRemoteObjectProxyWithErrorHandler:"),
      arg,
    );
  }

  static Pointer<Void> userInfo(
    Pointer<NSXPCConnection> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("userInfo"),
    );
  }

  static Pointer<Void> valueForEntitlement(
    Pointer<NSXPCConnection> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("valueForEntitlement:"),
      arg,
    );
  }
}

/// Objective-C class _NSXPCDecoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCDecoder extends Struct<NSXPCDecoder> {
  factory NSXPCDecoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCDecoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCDecoder").cast<NSXPCDecoder>();
  }

  static Pointer<Void> allowedClasses(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("allowedClasses"),
    );
  }

  static int allowsKeyedCoding(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static Pointer<Void> connection(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static int containsValueForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("containsValueForKey:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static int decodeBoolForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int8(
      _self,
      _objc.getSelector("decodeBoolForKey:"),
      arg,
    );
  }

  static Pointer<Utf8> decodeBytesForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Uint64> returnedLength,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeBytesForKey:returnedLength:"),
      arg,
      returnedLength,
    );
  }

  static double decodeDoubleForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float64(
      _self,
      _objc.getSelector("decodeDoubleForKey:"),
      arg,
    );
  }

  static double decodeFloatForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_float32(
      _self,
      _objc.getSelector("decodeFloatForKey:"),
      arg,
    );
  }

  static int decodeInt32ForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeInt32ForKey:"),
      arg,
    );
  }

  static int decodeInt64ForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeInt64ForKey:"),
      arg,
    );
  }

  static int decodeIntForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int32(
      _self,
      _objc.getSelector("decodeIntForKey:"),
      arg,
    );
  }

  static int decodeIntegerForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Int64(
      _self,
      _objc.getSelector("decodeIntegerForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeObject(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObject"),
    );
  }

  static Pointer<Void> decodeObjectForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeObjectOfClass(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClass:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> decodeObjectOfClasses(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeObjectOfClasses:forKey:"),
      arg,
      forKey,
    );
  }

  static void decodeValueOfObjCType(
    Pointer<NSXPCDecoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("decodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static Pointer<Void> decodeXPCObjectForKey(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeXPCObjectForKey:"),
      arg,
    );
  }

  static Pointer<Void> decodeXPCObjectOfType(
    Pointer<NSXPCDecoder> _self,
    Pointer<Pointer<Void>> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_p(
      _self,
      _objc.getSelector("decodeXPCObjectOfType:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCDecoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static void set_connection(
    Pointer<NSXPCDecoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_connection:"),
      arg,
    );
  }
}

/// Objective-C class _NSXPCEncoder_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCEncoder extends Struct<NSXPCEncoder> {
  factory NSXPCEncoder._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCEncoder> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCEncoder").cast<NSXPCEncoder>();
  }

  static int allowsKeyedCoding(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("allowsKeyedCoding"),
    );
  }

  static Pointer<Void> connection(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("connection"),
    );
  }

  static void dealloc(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static void encodeBool(
    Pointer<NSXPCEncoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int8_p_returns_void(
      _self,
      _objc.getSelector("encodeBool:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeBytes(
    Pointer<NSXPCEncoder> _self,
    Pointer<Utf8> arg, {
    @required int length,
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("encodeBytes:length:forKey:"),
      arg,
      length,
      forKey,
    );
  }

  static void encodeConditionalObject(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeConditionalObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeDataObject(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeDataObject:"),
      arg,
    );
  }

  static void encodeDouble(
    Pointer<NSXPCEncoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float64_p_returns_void(
      _self,
      _objc.getSelector("encodeDouble:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeFloat(
    Pointer<NSXPCEncoder> _self,
    double arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_float32_p_returns_void(
      _self,
      _objc.getSelector("encodeFloat:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt(
    Pointer<NSXPCEncoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt32(
    Pointer<NSXPCEncoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int32_p_returns_void(
      _self,
      _objc.getSelector("encodeInt32:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInt64(
    Pointer<NSXPCEncoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInt64:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeInteger(
    Pointer<NSXPCEncoder> _self,
    int arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Int64_p_returns_void(
      _self,
      _objc.getSelector("encodeInteger:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$forKey$(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:forKey:"),
      arg,
      forKey,
    );
  }

  static void encodeObject$(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeObject:"),
      arg,
    );
  }

  static void encodeValueOfObjCType(
    Pointer<NSXPCEncoder> _self,
    Pointer<Utf8> arg, {
    @required Pointer<Void> at,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeValueOfObjCType:at:"),
      arg,
      at,
    );
  }

  static void encodeXPCObject(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forKey,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeXPCObject:forKey:"),
      arg,
      forKey,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCEncoder> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithStackSpace(
    Pointer<NSXPCEncoder> _self,
    Pointer<Utf8> arg, {
    @required int size,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithStackSpace:size:"),
      arg,
      size,
    );
  }

  static void setDelegate(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void set_connection(
    Pointer<NSXPCEncoder> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("set_connection:"),
      arg,
    );
  }
}

/// Objective-C class _NSXPCInterface_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCInterface extends Struct<NSXPCInterface> {
  factory NSXPCInterface._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCInterface> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCInterface").cast<NSXPCInterface>();
  }

  static Pointer<Void> classForSelector(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("classForSelector:argumentIndex:ofReply:"),
      arg,
      argumentIndex,
      ofReply,
    );
  }

  static Pointer<Void> classesForSelector(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("classesForSelector:argumentIndex:ofReply:"),
      arg,
      argumentIndex,
      ofReply,
    );
  }

  static void dealloc(
    Pointer<NSXPCInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> debugDescription(
    Pointer<NSXPCInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("debugDescription"),
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> interfaceForSelector(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_Int8_returns_p(
      _self,
      _objc.getSelector("interfaceForSelector:argumentIndex:ofReply:"),
      arg,
      argumentIndex,
      ofReply,
    );
  }

  static Pointer<Void> protocol(
    Pointer<NSXPCInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("protocol"),
    );
  }

  static Pointer<Void> replyBlockSignatureForSelector(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("replyBlockSignatureForSelector:"),
      arg,
    );
  }

  static void setClass(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forSelector,
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector("setClass:forSelector:argumentIndex:ofReply:"),
      arg,
      forSelector,
      argumentIndex,
      ofReply,
    );
  }

  static void setClasses(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forSelector,
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector("setClasses:forSelector:argumentIndex:ofReply:"),
      arg,
      forSelector,
      argumentIndex,
      ofReply,
    );
  }

  static void setInterface(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forSelector,
    @required int argumentIndex,
    @required int ofReply,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_Int8_returns_void(
      _self,
      _objc.getSelector("setInterface:forSelector:argumentIndex:ofReply:"),
      arg,
      forSelector,
      argumentIndex,
      ofReply,
    );
  }

  static void setProtocol(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setProtocol:"),
      arg,
    );
  }

  static void setReplyBlockSignature(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> forSelector,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_returns_void(
      _self,
      _objc.getSelector("setReplyBlockSignature:forSelector:"),
      arg,
      forSelector,
    );
  }

  static void setVersion(
    Pointer<NSXPCInterface> _self,
    int arg, {
    @required Pointer<Void> forSelector,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_p_returns_void(
      _self,
      _objc.getSelector("setVersion:forSelector:"),
      arg,
      forSelector,
    );
  }

  static void set_remoteVersion(
    Pointer<NSXPCInterface> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("set_remoteVersion:"),
      arg,
    );
  }

  static int version(
    Pointer<NSXPCInterface> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Uint64(
      _self,
      _objc.getSelector("version"),
    );
  }

  static int versionForSelector(
    Pointer<NSXPCInterface> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_Uint64(
      _self,
      _objc.getSelector("versionForSelector:"),
      arg,
    );
  }
}

/// Objective-C class _NSXPCListener_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCListener extends Struct<NSXPCListener> {
  factory NSXPCListener._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCListener> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSXPCListener").cast<NSXPCListener>();
  }

  static void dealloc(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> delegate(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("delegate"),
    );
  }

  static Pointer<Void> description(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("description"),
    );
  }

  static Pointer<Void> endpoint(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("endpoint"),
    );
  }

  static Pointer<Void> initWithMachServiceName(
    Pointer<NSXPCListener> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithMachServiceName:"),
      arg,
    );
  }

  static Pointer<Void> initWithServiceName(
    Pointer<NSXPCListener> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithServiceName:"),
      arg,
    );
  }

  static void invalidate(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static void resume(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("resume"),
    );
  }

  static Pointer<Void> serviceName(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("serviceName"),
    );
  }

  static void setDelegate(
    Pointer<NSXPCListener> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("setDelegate:"),
      arg,
    );
  }

  static void setOptions(
    Pointer<NSXPCListener> _self,
    int arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_Uint64_returns_void(
      _self,
      _objc.getSelector("setOptions:"),
      arg,
    );
  }

  static void stop(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("stop"),
    );
  }

  static void suspend(
    Pointer<NSXPCListener> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("suspend"),
    );
  }
}

/// Objective-C class _NSXPCListenerEndpoint_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSXPCListenerEndpoint extends Struct<NSXPCListenerEndpoint> {
  factory NSXPCListenerEndpoint._() {
    throw UnimplementedError();
  }
  static Pointer<NSXPCListenerEndpoint> allocate() {
    _openDynamicLibrary();
    return _objc
        .allocate("NSXPCListenerEndpoint")
        .cast<NSXPCListenerEndpoint>();
  }

  static void dealloc(
    Pointer<NSXPCListenerEndpoint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static void encodeWithCoder(
    Pointer<NSXPCListenerEndpoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_void(
      _self,
      _objc.getSelector("encodeWithCoder:"),
      arg,
    );
  }

  static Pointer<Void> init(
    Pointer<NSXPCListenerEndpoint> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("init"),
    );
  }

  static Pointer<Void> initWithCoder(
    Pointer<NSXPCListenerEndpoint> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("initWithCoder:"),
      arg,
    );
  }
}

/// Objective-C class _NSZipFileArchive_.
///
/// Generated with [ffi_tool](https://pub.dev/packages/ffi_tool).
///
/// You can find documentation at the [website](https://developer.apple.com/documentation/foundation?language=objc).
@unsized
class NSZipFileArchive extends Struct<NSZipFileArchive> {
  factory NSZipFileArchive._() {
    throw UnimplementedError();
  }
  static Pointer<NSZipFileArchive> allocate() {
    _openDynamicLibrary();
    return _objc.allocate("NSZipFileArchive").cast<NSZipFileArchive>();
  }

  static Pointer<Void> archiveData(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archiveData"),
    );
  }

  static Pointer<Void> archiveStream(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("archiveStream"),
    );
  }

  static Pointer<Void> contentsForEntryName(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("contentsForEntryName:"),
      arg,
    );
  }

  static void dealloc(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("dealloc"),
    );
  }

  static Pointer<Void> entryNames(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_p(
      _self,
      _objc.getSelector("entryNames"),
    );
  }

  static Pointer<Void> initWithData(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithData:options:error:"),
      arg,
      options,
      error,
    );
  }

  static Pointer<Void> initWithEntryNames$contents$properties$options$(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> contents,
    @required Pointer<Void> properties,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithEntryNames:contents:properties:options:"),
      arg,
      contents,
      properties,
      options,
    );
  }

  static Pointer<Void> initWithEntryNames$dataProvider$options$(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> dataProvider,
    @required int options,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_returns_p(
      _self,
      _objc.getSelector("initWithEntryNames:dataProvider:options:"),
      arg,
      dataProvider,
      options,
    );
  }

  static Pointer<Void> initWithPath(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_p(
      _self,
      _objc.getSelector("initWithPath:options:error:"),
      arg,
      options,
      error,
    );
  }

  static void invalidate(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_void(
      _self,
      _objc.getSelector("invalidate"),
    );
  }

  static int isValid(
    Pointer<NSZipFileArchive> _self,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_returns_Int8(
      _self,
      _objc.getSelector("isValid"),
    );
  }

  static Pointer<Void> propertiesForEntryName(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("propertiesForEntryName:"),
      arg,
    );
  }

  static Pointer<Void> streamForEntryName(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg,
  ) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_returns_p(
      _self,
      _objc.getSelector("streamForEntryName:"),
      arg,
    );
  }

  static int writeContentsForEntryName(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required Pointer<Void> toFile,
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("writeContentsForEntryName:toFile:options:error:"),
      arg,
      toFile,
      options,
      error,
    );
  }

  static int writeToFile(
    Pointer<NSZipFileArchive> _self,
    Pointer<Void> arg, {
    @required int options,
    @required Pointer<Pointer<Void>> error,
  }) {
    _openDynamicLibrary();
    return _call_objc_p_p_p_Uint64_p_returns_Int8(
      _self,
      _objc.getSelector("writeToFile:options:error:"),
      arg,
      options,
      error,
    );
  }
}

final _call_objc_p_p_Int16_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int16_p_returns_p_C,
    _call_objc_p_p_Int16_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int16_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int16 arg, Pointer withBehavior);
typedef _call_objc_p_p_Int16_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer withBehavior);

final _call_objc_p_p_Int16_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int16_returns_p_C,
    _call_objc_p_p_Int16_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int16_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int16 arg);
typedef _call_objc_p_p_Int16_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int32_Int32_Int32_Int32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Int32_Int32_Int32_returns_p_C,
        _call_objc_p_p_Int32_Int32_Int32_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Int32_Int32_Int32_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int32 arg,
    Int32 socketType,
    Int32 protocol,
    Int32 socket);
typedef _call_objc_p_p_Int32_Int32_Int32_Int32_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int socketType,
        int protocol, int socket);

final _call_objc_p_p_Int32_Int32_Int32_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Int32_Int32_p_returns_p_C,
        _call_objc_p_p_Int32_Int32_Int32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Int32_Int32_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int32 arg,
    Int32 socketType,
    Int32 protocol,
    Pointer address);
typedef _call_objc_p_p_Int32_Int32_Int32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int socketType,
    int protocol,
    Pointer address);

final _call_objc_p_p_Int32_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_Int8_returns_p_C,
        _call_objc_p_p_Int32_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Int8 closeOnDealloc);
typedef _call_objc_p_p_Int32_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int closeOnDealloc);

final _call_objc_p_p_Int32_p_float64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_p_float64_p_returns_Int8_C,
        _call_objc_p_p_Int32_p_float64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_float64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Int32 arg,
    Pointer intoExpression,
    Float withCoefficient,
    Pointer container);
typedef _call_objc_p_p_Int32_p_float64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer intoExpression,
    double withCoefficient,
    Pointer container);

final _call_objc_p_p_Int32_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_p_returns_p_C,
    _call_objc_p_p_Int32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Pointer withOutput);
typedef _call_objc_p_p_Int32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer withOutput);

final _call_objc_p_p_Int32_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int32_p_returns_void_C,
        _call_objc_p_p_Int32_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg, Pointer forKey);
typedef _call_objc_p_p_Int32_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forKey);

final _call_objc_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_p_C,
    _call_objc_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int32_returns_void_C,
    _call_objc_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int32 arg);
typedef _call_objc_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p_C,
            _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Int64 arg, Int64 months,
        Int64 days, Int64 hours, Int64 minutes, Int64 seconds);
typedef _call_objc_p_p_Int64_Int64_Int64_Int64_Int64_Int64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int months,
        int days, int hours, int minutes, int seconds);

final _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C,
            _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Int64 arg,
        Uint64 month,
        Uint64 day,
        Uint64 hour,
        Uint64 minute,
        Uint64 second,
        Pointer timeZone);
typedef _call_objc_p_p_Int64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int month,
        int day, int hour, int minute, int second, Pointer timeZone);

final _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p_C,
            _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Int64 arg,
        Uint64 keyboardType,
        Pointer identifier,
        Pointer primaryLanguage,
        Uint64 flags,
        Float timestamp,
        Pointer characters,
        Pointer charactersIgnoringModifiers);
typedef _call_objc_p_p_Int64_Uint64_p_p_Uint64_float64_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int keyboardType,
        Pointer identifier,
        Pointer primaryLanguage,
        int flags,
        double timestamp,
        Pointer characters,
        Pointer charactersIgnoringModifiers);

final _call_objc_p_p_Int64_p_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_Int8_returns_void_C,
        _call_objc_p_p_Int64_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer info, Int8 fatal);
typedef _call_objc_p_p_Int64_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer info, int fatal);

final _call_objc_p_p_Int64_p_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_float64_returns_p_C,
        _call_objc_p_p_Int64_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int64 arg,
    Pointer stackedRects,
    Float spacing);
typedef _call_objc_p_p_Int64_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer stackedRects,
    double spacing);

final _call_objc_p_p_Int64_p_p_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_p_float64_returns_p_C,
        _call_objc_p_p_Int64_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Int64 arg,
    Pointer stackedRects,
    Pointer containingRect,
    Float spacing);
typedef _call_objc_p_p_Int64_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer stackedRects,
    Pointer containingRect,
    double spacing);

final _call_objc_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer beforeDate);
typedef _call_objc_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer beforeDate);

final _call_objc_p_p_Int64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_p_returns_p_C,
    _call_objc_p_p_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer fromURL);
typedef _call_objc_p_p_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer fromURL);

final _call_objc_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg, Pointer forKey);
typedef _call_objc_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forKey);

final _call_objc_p_p_Int64_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_Int8_C,
    _call_objc_p_p_Int64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_Uint32 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_returns_Uint32_C,
        _call_objc_p_p_Int64_returns_Uint32_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_returns_Uint64_C,
        _call_objc_p_p_Int64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_float64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int64_returns_float64_C,
        _call_objc_p_p_Int64_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_p_C,
    _call_objc_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int64_returns_void_C,
    _call_objc_p_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int64 arg);
typedef _call_objc_p_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Int8_Int8_returns_p_C,
        _call_objc_p_p_Int8_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Int8 private, Int8 shouldExpand);
typedef _call_objc_p_p_Int8_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int private, int shouldExpand);

final _call_objc_p_p_Int8_Int8_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_Int8_p_returns_void_C,
        _call_objc_p_p_Int8_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_Int8_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Int8 arg, Int8 choiceStarted, Pointer appendingToString);
typedef _call_objc_p_p_Int8_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int choiceStarted,
    Pointer appendingToString);

final _call_objc_p_p_Int8_p_Int32_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_p_Int32_p_returns_void_C,
        _call_objc_p_p_Int8_p_Int32_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_Int32_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer withString,
    Int32 fromPid,
    Pointer thenContinue);
typedef _call_objc_p_p_Int8_p_Int32_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer withString,
    int fromPid,
    Pointer thenContinue);

final _call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void_C,
        _call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer withID,
    Uint64 options,
    Pointer purposeID,
    Pointer subitemURL,
    Pointer toPresenter,
    Pointer usingReplySender);
typedef _call_objc_p_p_Int8_p_Uint64_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer withID,
    int options,
    Pointer purposeID,
    Pointer subitemURL,
    Pointer toPresenter,
    Pointer usingReplySender);

final _call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer withID,
    Pointer purposeID,
    Pointer subitemURL,
    Uint64 options,
    Pointer completionHandler);
typedef _call_objc_p_p_Int8_p_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer withID,
    Pointer purposeID,
    Pointer subitemURL,
    int options,
    Pointer completionHandler);

final _call_objc_p_p_Int8_p_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_p_p_p_returns_Int8_C,
        _call_objc_p_p_Int8_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer itemAtURL,
    Pointer destinationURL,
    Pointer error);
typedef _call_objc_p_p_Int8_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer itemAtURL,
    Pointer destinationURL,
    Pointer error);

final _call_objc_p_p_Int8_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Int8_p_p_p_returns_void_C,
        _call_objc_p_p_Int8_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Int8 arg,
    Pointer withID,
    Pointer toPresenterForID,
    Pointer usingReplySender);
typedef _call_objc_p_p_Int8_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer withID,
    Pointer toPresenterForID,
    Pointer usingReplySender);

final _call_objc_p_p_Int8_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_p_returns_p_C,
    _call_objc_p_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Pointer toPresenterForID);
typedef _call_objc_p_p_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer toPresenterForID);

final _call_objc_p_p_Int8_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_p_returns_void_C,
    _call_objc_p_p_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg, Pointer forKey);
typedef _call_objc_p_p_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forKey);

final _call_objc_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_Int8_C,
    _call_objc_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_p_C,
    _call_objc_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Int8_returns_void_C,
    _call_objc_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Int8 arg);
typedef _call_objc_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint16_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint16_p_returns_p_C,
    _call_objc_p_p_Uint16_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint16_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint16 arg, Pointer host);
typedef _call_objc_p_p_Uint16_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer host);

final _call_objc_p_p_Uint16_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint16_returns_Int8_C,
    _call_objc_p_p_Uint16_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint16_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint16 arg);
typedef _call_objc_p_p_Uint16_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint16_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint16_returns_p_C,
    _call_objc_p_p_Uint16_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint16_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint16 arg);
typedef _call_objc_p_p_Uint16_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint16_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint16_returns_void_C,
    _call_objc_p_p_Uint16_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint16_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint16 arg);
typedef _call_objc_p_p_Uint16_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p_C,
            _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Uint32 arg, Uint32 eventID,
        Pointer targetDescriptor, Int16 returnID, Int32 transactionID);
typedef _call_objc_p_p_Uint32_Uint32_p_Int16_Int32_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int eventID,
        Pointer targetDescriptor, int returnID, int transactionID);

final _call_objc_p_p_Uint32_Uint32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_Uint32_returns_p_C,
        _call_objc_p_p_Uint32_Uint32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_Uint32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint32 andAppleEventCode);
typedef _call_objc_p_p_Uint32_Uint32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int andAppleEventCode);

final _call_objc_p_p_Uint32_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_Uint32_returns_void_C,
        _call_objc_p_p_Uint32_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint32 andEventID);
typedef _call_objc_p_p_Uint32_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int andEventID);

final _call_objc_p_p_Uint32_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_Uint64_returns_p_C,
        _call_objc_p_p_Uint32_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint64 options);
typedef _call_objc_p_p_Uint32_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int options);

final _call_objc_p_p_Uint32_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_Uint64_returns_void_C,
        _call_objc_p_p_Uint32_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Uint64 count);
typedef _call_objc_p_p_Uint32_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int count);

final _call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p_C,
        _call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint32 arg,
    Pointer value,
    Int8 isHidden,
    Pointer presentableDescription,
    Pointer name,
    Pointer synonymDescriptions);
typedef _call_objc_p_p_Uint32_p_Int8_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer value,
    int isHidden,
    Pointer presentableDescription,
    Pointer name,
    Pointer synonymDescriptions);

final _call_objc_p_p_Uint32_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_p_Uint64_returns_p_C,
        _call_objc_p_p_Uint32_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Pointer bytes, Uint64 length);
typedef _call_objc_p_p_Uint32_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer bytes, int length);

final _call_objc_p_p_Uint32_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_p_p_returns_p_C,
        _call_objc_p_p_Uint32_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Uint32 arg, Pointer presentableDescription, Pointer name);
typedef _call_objc_p_p_Uint32_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer presentableDescription,
    Pointer name);

final _call_objc_p_p_Uint32_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_p_returns_Int8_C,
        _call_objc_p_p_Uint32_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Pointer port);
typedef _call_objc_p_p_Uint32_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer port);

final _call_objc_p_p_Uint32_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint32_p_returns_p_C,
    _call_objc_p_p_Uint32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Uint32 arg, Pointer alernativeTypeDescriptions);
typedef _call_objc_p_p_Uint32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer alernativeTypeDescriptions);

final _call_objc_p_p_Uint32_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint32_p_returns_void_C,
        _call_objc_p_p_Uint32_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg, Pointer forKey);
typedef _call_objc_p_p_Uint32_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forKey);

final _call_objc_p_p_Uint32_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint32_returns_Int8_C,
    _call_objc_p_p_Uint32_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_objc_p_p_Uint32_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint32_returns_p_C,
    _call_objc_p_p_Uint32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_objc_p_p_Uint32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint32_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint32_returns_void_C,
    _call_objc_p_p_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint32 arg);
typedef _call_objc_p_p_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p_C,
            _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Uint64 arg,
        Int16 scale,
        Int8 raiseOnExactness,
        Int8 raiseOnOverflow,
        Int8 raiseOnUnderflow,
        Int8 raiseOnDivideByZero);
typedef _call_objc_p_p_Uint64_Int16_Int8_Int8_Int8_Int8_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int scale,
        int raiseOnExactness,
        int raiseOnOverflow,
        int raiseOnUnderflow,
        int raiseOnDivideByZero);

final _call_objc_p_p_Uint64_Int16_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int16_Int8_returns_p_C,
        _call_objc_p_p_Uint64_Int16_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int16_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int16 exponent, Int8 isNegative);
typedef _call_objc_p_p_Uint64_Int16_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int exponent, int isNegative);

final _call_objc_p_p_Uint64_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int32_returns_void_C,
        _call_objc_p_p_Uint64_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int32 $$$for);
typedef _call_objc_p_p_Uint64_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int $$$for);

final _call_objc_p_p_Uint64_Int64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int64_p_p_returns_p_C,
        _call_objc_p_p_Uint64_Int64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Int64 unit,
    Pointer scheme,
    Pointer tokenRange);
typedef _call_objc_p_p_Uint64_Int64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int unit,
    Pointer scheme,
    Pointer tokenRange);

final _call_objc_p_p_Uint64_Int64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int64_p_returns_p_C,
        _call_objc_p_p_Uint64_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Int64 fullPolicy,
    Pointer outputQueue);
typedef _call_objc_p_p_Uint64_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int fullPolicy, Pointer outputQueue);

final _call_objc_p_p_Uint64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int64_returns_p_C,
        _call_objc_p_p_Uint64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int64 unit);
typedef _call_objc_p_p_Uint64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int unit);

final _call_objc_p_p_Uint64_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int64_returns_void_C,
        _call_objc_p_p_Uint64_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int64 by);
typedef _call_objc_p_p_Uint64_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int by);

final _call_objc_p_p_Uint64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Int8_returns_p_C,
        _call_objc_p_p_Uint64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Int8 allowLossyConversion);
typedef _call_objc_p_p_Uint64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int allowLossyConversion);

final _call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p_C,
        _call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Uint32 CFStringEncoding,
    Pointer stackBuffer,
    Uint64 bufferLength,
    Pointer placeholder);
typedef _call_objc_p_p_Uint64_Uint32_p_Uint64_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        int arg,
        int CFStringEncoding,
        Pointer stackBuffer,
        int bufferLength,
        Pointer placeholder);

final _call_objc_p_p_Uint64_Uint32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint32_returns_p_C,
        _call_objc_p_p_Uint64_Uint32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint32 CFStringEncoding);
typedef _call_objc_p_p_Uint64_Uint32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int CFStringEncoding);

final _call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p_C,
            _call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Uint64 modifier,
    Int8 negate,
    Uint64 options);
typedef _call_objc_p_p_Uint64_Uint64_Int8_Uint64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int modifier,
        int negate, int options);

final _call_objc_p_p_Uint64_Uint64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_Int8_returns_p_C,
        _call_objc_p_p_Uint64_Uint64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint64 modifier, Int8 negate);
typedef _call_objc_p_p_Uint64_Uint64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int modifier, int negate);

final _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p_C,
            _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Uint64 arg,
        Uint64 modifier, Uint64 variant, Uint64 position);
typedef _call_objc_p_p_Uint64_Uint64_Uint64_Uint64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, int arg, int modifier,
        int variant, int position);

final _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p_C,
        _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Uint64 sourceIndex,
    Uint64 destinationIndex,
    Pointer value);
typedef _call_objc_p_p_Uint64_Uint64_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int sourceIndex,
    int destinationIndex,
    Pointer value);

final _call_objc_p_p_Uint64_Uint64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_Uint64_returns_p_C,
        _call_objc_p_p_Uint64_Uint64_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint64 modifier, Uint64 variant);
typedef _call_objc_p_p_Uint64_Uint64_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int modifier, int variant);

final _call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p_C,
        _call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Uint64 inDomain,
    Pointer appropriateForURL,
    Int8 create,
    Pointer error);
typedef _call_objc_p_p_Uint64_Uint64_p_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    int inDomain,
    Pointer appropriateForURL,
    int create,
    Pointer error);

final _call_objc_p_p_Uint64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_returns_p_C,
        _call_objc_p_p_Uint64_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint64 options);
typedef _call_objc_p_p_Uint64_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, int options);

final _call_objc_p_p_Uint64_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_Uint64_returns_void_C,
        _call_objc_p_p_Uint64_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Uint64 withObjectAtIndex);
typedef _call_objc_p_p_Uint64_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int withObjectAtIndex);

final _call_objc_p_p_Uint64_float64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_float64_p_returns_p_C,
        _call_objc_p_p_Uint64_float64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_float64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Float timeout, Pointer error);
typedef _call_objc_p_p_Uint64_float64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, double timeout, Pointer error);

final _call_objc_p_p_Uint64_p_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_Int64_returns_void_C,
        _call_objc_p_p_Uint64_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_Int64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer range,
    Int64 changeInLength);
typedef _call_objc_p_p_Uint64_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer range, int changeInLength);

final _call_objc_p_p_Uint64_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_Uint64_returns_p_C,
        _call_objc_p_p_Uint64_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer withString,
    Uint64 startingAtIndex);
typedef _call_objc_p_p_Uint64_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer withString,
    int startingAtIndex);

final _call_objc_p_p_Uint64_p_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_float64_returns_p_C,
        _call_objc_p_p_Uint64_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer range, Float score);
typedef _call_objc_p_p_Uint64_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer range, double score);

final _call_objc_p_p_Uint64_p_p_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_Int8_returns_void_C,
        _call_objc_p_p_Uint64_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer key,
    Pointer value,
    Int8 isNew);
typedef _call_objc_p_p_Uint64_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer key,
    Pointer value,
    int isNew);

final _call_objc_p_p_Uint64_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_p_p_returns_p_C,
        _call_objc_p_p_Uint64_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer scheme,
    Pointer tokenRange,
    Pointer sentenceRange,
    Pointer scores);
typedef _call_objc_p_p_Uint64_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer scheme,
    Pointer tokenRange,
    Pointer sentenceRange,
    Pointer scores);

final _call_objc_p_p_Uint64_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_p_returns_p_C,
        _call_objc_p_p_Uint64_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer localName,
    Pointer stringValue,
    Pointer URI);
typedef _call_objc_p_p_Uint64_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer localName,
    Pointer stringValue,
    Pointer URI);

final _call_objc_p_p_Uint64_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_p_returns_void_C,
        _call_objc_p_p_Uint64_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint64 arg,
    Pointer inputItems,
    Pointer listenerEndpoint,
    Pointer completion);
typedef _call_objc_p_p_Uint64_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    int arg,
    Pointer inputItems,
    Pointer listenerEndpoint,
    Pointer completion);

final _call_objc_p_p_Uint64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_returns_p_C,
        _call_objc_p_p_Uint64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Uint64 arg, Pointer name, Pointer stringValue);
typedef _call_objc_p_p_Uint64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer name, Pointer stringValue);

final _call_objc_p_p_Uint64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_p_returns_void_C,
        _call_objc_p_p_Uint64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Uint64 arg, Pointer reason, Pointer usingBlock);
typedef _call_objc_p_p_Uint64_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer reason, Pointer usingBlock);

final _call_objc_p_p_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_returns_Int8_C,
        _call_objc_p_p_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Uint64 arg, Pointer causePresenterToRelinquish);
typedef _call_objc_p_p_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer causePresenterToRelinquish);

final _call_objc_p_p_Uint64_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_returns_Uint64_C,
        _call_objc_p_p_Uint64_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer passingTest);
typedef _call_objc_p_p_Uint64_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer passingTest);

final _call_objc_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_p_returns_p_C,
    _call_objc_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer withObject);
typedef _call_objc_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer withObject);

final _call_objc_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg, Pointer forSelector);
typedef _call_objc_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, Pointer forSelector);

final _call_objc_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_Int8_C,
    _call_objc_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_Uint16 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_Uint16_C,
        _call_objc_p_p_Uint64_returns_Uint16_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Uint16_C = Uint16 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Uint16_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint64_returns_Uint64_C,
        _call_objc_p_p_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_p_C,
    _call_objc_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint64_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint64_returns_void_C,
    _call_objc_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint64 arg);
typedef _call_objc_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void_C,
            _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Uint8 arg,
    Uint8 byte2,
    Uint8 byte3,
    Uint8 byte4);
typedef _call_objc_p_p_Uint8_Uint8_Uint8_Uint8_returns_void_Dart
    = void Function(
        Pointer _arg0, Pointer _arg1, int arg, int byte2, int byte3, int byte4);

final _call_objc_p_p_Uint8_Uint8_Uint8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint8_Uint8_Uint8_returns_void_C,
        _call_objc_p_p_Uint8_Uint8_Uint8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint8_Uint8_Uint8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg, Uint8 byte2, Uint8 byte3);
typedef _call_objc_p_p_Uint8_Uint8_Uint8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int byte2, int byte3);

final _call_objc_p_p_Uint8_Uint8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_Uint8_Uint8_returns_void_C,
        _call_objc_p_p_Uint8_Uint8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint8_Uint8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg, Uint8 byte2);
typedef _call_objc_p_p_Uint8_Uint8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg, int byte2);

final _call_objc_p_p_Uint8_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint8_returns_Int8_C,
    _call_objc_p_p_Uint8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint8_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg);
typedef _call_objc_p_p_Uint8_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint8_returns_p_C,
    _call_objc_p_p_Uint8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg);
typedef _call_objc_p_p_Uint8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_Uint8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_Uint8_returns_void_C,
    _call_objc_p_p_Uint8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_Uint8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Uint8 arg);
typedef _call_objc_p_p_Uint8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, int arg);

final _call_objc_p_p_float32_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float32_p_returns_void_C,
        _call_objc_p_p_float32_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float32_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg, Pointer forKey);
typedef _call_objc_p_p_float32_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg, Pointer forKey);

final _call_objc_p_p_float32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_float32_returns_p_C,
    _call_objc_p_p_float32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float32_returns_void_C,
        _call_objc_p_p_float32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_Int64_returns_p_C,
        _call_objc_p_p_float64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg, Int64 unit);
typedef _call_objc_p_p_float64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg, int unit);

final _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p_C,
            _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Float arg, Uint64 unit1,
        Float value2, Uint64 unit2);
typedef _call_objc_p_p_float64_Uint64_float64_Uint64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, double arg, int unit1,
        double value2, int unit2);

final _call_objc_p_p_float64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_Uint64_returns_p_C,
        _call_objc_p_p_float64_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg, Uint64 unit);
typedef _call_objc_p_p_float64_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg, int unit);

final _call_objc_p_p_float64_float32_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_float32_p_returns_p_C,
        _call_objc_p_p_float64_float32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_float32_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Float arg,
    Float priority,
    Pointer identifier);
typedef _call_objc_p_p_float64_float32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    double arg,
    double priority,
    Pointer identifier);

final _call_objc_p_p_float64_float64_float64_float64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_float64_float64_float64_float64_returns_p_C,
            _call_objc_p_p_float64_float64_float64_float64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_float64_float64_float64_float64_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Float arg, Float leading,
        Float bottom, Float trailing);
typedef _call_objc_p_p_float64_float64_float64_float64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, double arg, double leading,
        double bottom, double trailing);

final _call_objc_p_p_float64_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_float64_returns_p_C,
        _call_objc_p_p_float64_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg, Float constant);
typedef _call_objc_p_p_float64_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg, double constant);

final _call_objc_p_p_float64_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_float64_returns_void_C,
        _call_objc_p_p_float64_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg, Float value);
typedef _call_objc_p_p_float64_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg, double value);

final _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_p_p_p_Uint32_returns_Int8_C,
        _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Float arg,
    Pointer streamData,
    Pointer components,
    Pointer from,
    Uint32 msgid);
typedef _call_objc_p_p_float64_p_p_p_Uint32_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    double arg,
    Pointer streamData,
    Pointer components,
    Pointer from,
    int msgid);

final _call_objc_p_p_float64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_float64_p_returns_p_C,
    _call_objc_p_p_float64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg, Pointer errorHandler);
typedef _call_objc_p_p_float64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg, Pointer errorHandler);

final _call_objc_p_p_float64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_p_returns_void_C,
        _call_objc_p_p_float64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg, Pointer forKey);
typedef _call_objc_p_p_float64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg, Pointer forKey);

final _call_objc_p_p_float64_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_Int64_C,
        _call_objc_p_p_float64_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_float64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_float64_C,
        _call_objc_p_p_float64_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_float64_returns_p_C,
    _call_objc_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_float64_returns_void_C,
        _call_objc_p_p_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Float arg);
typedef _call_objc_p_p_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, double arg);

final _call_objc_p_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int32_returns_p_C,
    _call_objc_p_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int32 multipliedBy);
typedef _call_objc_p_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int multipliedBy);

final _call_objc_p_p_p_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int32_returns_void_C,
        _call_objc_p_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int32 includingParts);
typedef _call_objc_p_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int includingParts);

final _call_objc_p_p_p_Int64_Int64_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int64_Int64_returns_void_C,
        _call_objc_p_p_p_Int64_Int64_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int64_Int64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 didSendBodyData,
    Int64 totalBytesWritten,
    Int64 totalBytesExpectedToWrite);
typedef _call_objc_p_p_p_Int64_Int64_Int64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int didSendBodyData,
    int totalBytesWritten,
    int totalBytesExpectedToWrite);

final _call_objc_p_p_p_Int64_Int64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int64_p_returns_p_C,
        _call_objc_p_p_p_Int64_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 flags,
    Int64 createMode,
    Pointer error);
typedef _call_objc_p_p_p_Int64_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int flags,
    int createMode,
    Pointer error);

final _call_objc_p_p_p_Int64_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int64_p_returns_void_C,
        _call_objc_p_p_p_Int64_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 fileOptions,
    Int64 visibility,
    Pointer loadHandler);
typedef _call_objc_p_p_p_Int64_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int fileOptions,
    int visibility,
    Pointer loadHandler);

final _call_objc_p_p_p_Int64_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_Int64_returns_p_C,
        _call_objc_p_p_p_Int64_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 flags, Int64 createMode);
typedef _call_objc_p_p_p_Int64_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int flags, int createMode);

final _call_objc_p_p_p_Int64_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_Int64_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 unit,
    Pointer scheme,
    Uint64 options,
    Pointer tokenRanges);
typedef _call_objc_p_p_p_Int64_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int unit,
    Pointer scheme,
    int options,
    Pointer tokenRanges);

final _call_objc_p_p_p_Int64_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_Uint64_p_returns_void_C,
        _call_objc_p_p_p_Int64_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 unit,
    Pointer scheme,
    Uint64 options,
    Pointer usingBlock);
typedef _call_objc_p_p_p_Int64_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int unit,
    Pointer scheme,
    int options,
    Pointer usingBlock);

final _call_objc_p_p_p_Int64_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_p_returns_Int8_C,
        _call_objc_p_p_p_Int64_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int64 usingInfeasibilityHandlingBehavior,
    Pointer prospectiveRowHead,
    Pointer mutuallyExclusiveConstraints);
typedef _call_objc_p_p_p_Int64_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int usingInfeasibilityHandlingBehavior,
    Pointer prospectiveRowHead,
    Pointer mutuallyExclusiveConstraints);

final _call_objc_p_p_p_Int64_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int64_p_returns_p_C,
    _call_objc_p_p_p_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Int64 preferredRepresentation, Pointer loader);
typedef _call_objc_p_p_p_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int preferredRepresentation,
    Pointer loader);

final _call_objc_p_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Int64 visibility, Pointer loadHandler);
typedef _call_objc_p_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int visibility,
    Pointer loadHandler);

final _call_objc_p_p_p_Int64_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_returns_Int64_C,
        _call_objc_p_p_p_Int64_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 defaultValue);
typedef _call_objc_p_p_p_Int64_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int defaultValue);

final _call_objc_p_p_p_Int64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_returns_Int8_C,
        _call_objc_p_p_p_Int64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 fileOptions);
typedef _call_objc_p_p_p_Int64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int fileOptions);

final _call_objc_p_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int64_returns_p_C,
    _call_objc_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 fromEdge);
typedef _call_objc_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int fromEdge);

final _call_objc_p_p_p_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int64_returns_void_C,
        _call_objc_p_p_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int64 changeInLength);
typedef _call_objc_p_p_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int changeInLength);

final _call_objc_p_p_p_Int8_Int8_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_returns_Int8_C,
        _call_objc_p_p_p_Int8_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Int8 atomically, Int8 updateFilenames);
typedef _call_objc_p_p_p_Int8_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int atomically,
    int updateFilenames);

final _call_objc_p_p_p_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_returns_p_C,
        _call_objc_p_p_p_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 excludingExcessNodes,
    Int8 excludingReactors);
typedef _call_objc_p_p_p_Int8_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int excludingExcessNodes,
    int excludingReactors);

final _call_objc_p_p_p_Int8_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Int8_returns_void_C,
        _call_objc_p_p_p_Int8_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 isBycopy, Int8 isByref);
typedef _call_objc_p_p_p_Int8_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int isBycopy, int isByref);

final _call_objc_p_p_p_Int8_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Uint64_p_returns_Int8_C,
        _call_objc_p_p_p_Int8_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Uint64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 atomically,
    Uint64 encoding,
    Pointer error);
typedef _call_objc_p_p_p_Int8_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int atomically,
    int encoding,
    Pointer error);

final _call_objc_p_p_p_Int8_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_Uint64_p_returns_p_C,
        _call_objc_p_p_p_Int8_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 isSingleDTDNode,
    Uint64 options,
    Pointer error);
typedef _call_objc_p_p_p_Int8_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int isSingleDTDNode,
    int options,
    Pointer error);

final _call_objc_p_p_p_Int8_p_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_p_p_returns_Uint64_C,
        _call_objc_p_p_p_Int8_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 removeBackup,
    Pointer errorHandler,
    Pointer temp,
    Pointer backup);
typedef _call_objc_p_p_p_Int8_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int removeBackup,
    Pointer errorHandler,
    Pointer temp,
    Pointer backup);

final _call_objc_p_p_p_Int8_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_p_returns_Int8_C,
        _call_objc_p_p_p_Int8_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 reverse,
    Pointer range,
    Pointer updatedRange);
typedef _call_objc_p_p_p_Int8_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int reverse,
    Pointer range,
    Pointer updatedRange);

final _call_objc_p_p_p_Int8_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_p_returns_Uint64_C,
        _call_objc_p_p_p_Int8_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 caseSensitive,
    Pointer matchesIntoArray,
    Pointer filterTypes);
typedef _call_objc_p_p_p_Int8_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int caseSensitive,
    Pointer matchesIntoArray,
    Pointer filterTypes);

final _call_objc_p_p_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 forReading, Pointer error);
typedef _call_objc_p_p_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int forReading, Pointer error);

final _call_objc_p_p_p_Int8_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_returns_Uint64_C,
        _call_objc_p_p_p_Int8_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 removeBackup,
    Pointer errorHandler);
typedef _call_objc_p_p_p_Int8_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int removeBackup,
    Pointer errorHandler);

final _call_objc_p_p_p_Int8_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_p_returns_p_C,
    _call_objc_p_p_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Int8 ascending, Pointer comparator);
typedef _call_objc_p_p_p_Int8_p_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, int ascending, Pointer comparator);

final _call_objc_p_p_p_Int8_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_p_returns_void_C,
        _call_objc_p_p_p_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Int8 orContainedItem,
    Pointer relinquishUsingProcedureGetter);
typedef _call_objc_p_p_p_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int orContainedItem,
    Pointer relinquishUsingProcedureGetter);

final _call_objc_p_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_Int8_C,
    _call_objc_p_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 atomically);
typedef _call_objc_p_p_p_Int8_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int atomically);

final _call_objc_p_p_p_Int8_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Int8_returns_Uint64_C,
        _call_objc_p_p_p_Int8_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 lazy);
typedef _call_objc_p_p_p_Int8_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int lazy);

final _call_objc_p_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_p_C,
    _call_objc_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 cached);
typedef _call_objc_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int cached);

final _call_objc_p_p_p_Int8_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Int8_returns_void_C,
    _call_objc_p_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Int8_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Int8 resolvingEntities);
typedef _call_objc_p_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int resolvingEntities);

final _call_objc_p_p_p_Uint32_Int8_Uint32_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_Int8_Uint32_returns_p_C,
        _call_objc_p_p_p_Uint32_Int8_Uint32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_Int8_Uint32_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint32 appleEventCode,
    Int8 isHidden,
    Uint32 appleEventClassCode);
typedef _call_objc_p_p_p_Uint32_Int8_Uint32_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int appleEventCode,
    int isHidden,
    int appleEventClassCode);

final _call_objc_p_p_p_Uint32_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_Uint64_returns_void_C,
        _call_objc_p_p_p_Uint32_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint32 flags, Uint64 id);
typedef _call_objc_p_p_p_Uint32_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int flags, int id);

final _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p_C,
            _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint32 appleEventCode,
        Pointer type,
        Int8 isOptional,
        Int8 isHidden,
        Uint64 requiresAccess,
        Pointer presentableDescription,
        Pointer name,
        Pointer synonymDescriptions);
typedef _call_objc_p_p_p_Uint32_p_Int8_Int8_Uint64_p_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int appleEventCode,
        Pointer type,
        int isOptional,
        int isHidden,
        int requiresAccess,
        Pointer presentableDescription,
        Pointer name,
        Pointer synonymDescriptions);

final _call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p_C,
        _call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint32 appleEventCode,
    Pointer type,
    Int8 isOptional,
    Pointer presentableDescription,
    Pointer nameOrNames);
typedef _call_objc_p_p_p_Uint32_p_Int8_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int appleEventCode,
    Pointer type,
    int isOptional,
    Pointer presentableDescription,
    Pointer nameOrNames);

final _call_objc_p_p_p_Uint32_p_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_p_Int8_p_returns_p_C,
        _call_objc_p_p_p_Uint32_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_p_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint32 appleEventCode,
    Pointer fieldDescriptions,
    Int8 isHidden,
    Pointer presentableDescription);
typedef _call_objc_p_p_p_Uint32_p_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int appleEventCode,
    Pointer fieldDescriptions,
    int isHidden,
    Pointer presentableDescription);

final _call_objc_p_p_p_Uint32_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_p_Int8_returns_p_C,
        _call_objc_p_p_p_Uint32_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint32 appleEventCode,
    Pointer objcClassName,
    Int8 isHidden);
typedef _call_objc_p_p_p_Uint32_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int appleEventCode,
    Pointer objcClassName,
    int isHidden);

final _call_objc_p_p_p_Uint32_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_p_returns_p_C,
        _call_objc_p_p_p_Uint32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Uint32 appleEventCode, Pointer objcClassName);
typedef _call_objc_p_p_p_Uint32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int appleEventCode,
    Pointer objcClassName);

final _call_objc_p_p_p_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint32_returns_void_C,
        _call_objc_p_p_p_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint32_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint32 sequence);
typedef _call_objc_p_p_p_Uint32_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int sequence);

final _call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p_C,
        _call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 length,
    Int8 copy,
    Int8 freeWhenDone,
    Int8 bytesAreVM);
typedef _call_objc_p_p_p_Uint64_Int8_Int8_Int8_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, Pointer arg, int length,
        int copy, int freeWhenDone, int bytesAreVM);

final _call_objc_p_p_p_Uint64_Int8_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_Int8_returns_void_C,
        _call_objc_p_p_p_Uint64_Int8_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 length,
    Int8 freeWhenDone,
    Int8 isUnicode);
typedef _call_objc_p_p_p_Uint64_Int8_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int length,
    int freeWhenDone,
    int isUnicode);

final _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C,
            _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 syllableCount,
        Int8 lastSyllableIsPartial,
        Uint64 score,
        Uint64 replacementCount,
        Uint64 transpositionCount,
        Uint64 insertionCount,
        Uint64 deletionCount,
        Uint64 indexOfFirstModification,
        Uint64 rangeCount,
        Pointer ranges);
typedef _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int syllableCount,
        int lastSyllableIsPartial,
        int score,
        int replacementCount,
        int transpositionCount,
        int insertionCount,
        int deletionCount,
        int indexOfFirstModification,
        int rangeCount,
        Pointer ranges);

final _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C,
            _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 syllableCount,
        Int8 lastSyllableIsPartial,
        Uint64 score,
        Uint64 replacementCount,
        Uint64 transpositionCount,
        Uint64 insertionCount,
        Uint64 deletionCount,
        Uint64 rangeCount,
        Pointer ranges);
typedef _call_objc_p_p_p_Uint64_Int8_Uint64_Uint64_Uint64_Uint64_Uint64_Uint64_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int syllableCount,
        int lastSyllableIsPartial,
        int score,
        int replacementCount,
        int transpositionCount,
        int insertionCount,
        int deletionCount,
        int rangeCount,
        Pointer ranges);

final _call_objc_p_p_p_Uint64_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_p_returns_p_C,
        _call_objc_p_p_p_Uint64_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 length,
    Int8 copy,
    Pointer deallocator);
typedef _call_objc_p_p_p_Uint64_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int length,
    int copy,
    Pointer deallocator);

final _call_objc_p_p_p_Uint64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Int8_returns_p_C,
        _call_objc_p_p_p_Uint64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 argumentIndex,
    Int8 ofReply);
typedef _call_objc_p_p_p_Uint64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int argumentIndex, int ofReply);

final _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_Int8_returns_p_C,
        _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 length,
    Uint64 encoding,
    Int8 freeWhenDone);
typedef _call_objc_p_p_p_Uint64_Uint64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int length,
    int encoding,
    int freeWhenDone);

final _call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 offset,
    Uint64 types,
    Pointer options,
    Pointer orthography,
    Pointer learnedDictionaries,
    Pointer wordCount);
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int offset,
        int types,
        Pointer options,
        Pointer orthography,
        Pointer learnedDictionaries,
        Pointer wordCount);

final _call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 offset,
    Uint64 types,
    Pointer options,
    Pointer orthography,
    Pointer wordCount);
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int offset,
    int types,
    Pointer options,
    Pointer orthography,
    Pointer wordCount);

final _call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8_C,
        _call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 ofDirectory,
    Uint64 inDomain,
    Pointer toItemAtURL,
    Pointer error);
typedef _call_objc_p_p_p_Uint64_Uint64_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int ofDirectory,
    int inDomain,
    Pointer toItemAtURL,
    Pointer error);

final _call_objc_p_p_p_Uint64_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_p_returns_void_C,
        _call_objc_p_p_p_Uint64_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 postingStyle,
    Uint64 coalesceMask,
    Pointer forModes);
typedef _call_objc_p_p_p_Uint64_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int postingStyle,
    int coalesceMask,
    Pointer forModes);

final _call_objc_p_p_p_Uint64_Uint64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_returns_Int8_C,
        _call_objc_p_p_p_Uint64_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 maxLength,
    Uint64 encoding);
typedef _call_objc_p_p_p_Uint64_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int maxLength, int encoding);

final _call_objc_p_p_p_Uint64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_Uint64_returns_p_C,
        _call_objc_p_p_p_Uint64_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 length, Uint64 encoding);
typedef _call_objc_p_p_p_Uint64_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int length, int encoding);

final _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8 =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8_C,
            _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8_C
    = Int8 Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 maxLength,
        Pointer filledLength,
        Uint64 encoding,
        Int8 allowLossyConversion,
        Pointer range,
        Pointer remainingRange);
typedef _call_objc_p_p_p_Uint64_p_Uint64_Int8_p_p_returns_Int8_Dart
    = int Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int maxLength,
        Pointer filledLength,
        int encoding,
        int allowLossyConversion,
        Pointer range,
        Pointer remainingRange);

final _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8 =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8_C,
            _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8_C
    = Int8 Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Uint64 maxLength,
        Pointer usedLength,
        Uint64 encoding,
        Uint64 options,
        Pointer range,
        Pointer remainingRange);
typedef _call_objc_p_p_p_Uint64_p_Uint64_Uint64_p_p_returns_Int8_Dart
    = int Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        int maxLength,
        Pointer usedLength,
        int encoding,
        int options,
        Pointer range,
        Pointer remainingRange);

final _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void_C,
        _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer writingItemsAtURLs,
    Uint64 name2,
    Pointer error,
    Pointer byAccessor);
typedef _call_objc_p_p_p_Uint64_p_Uint64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer writingItemsAtURLs,
    int name2,
    Pointer error,
    Pointer byAccessor);

final _call_objc_p_p_p_Uint64_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer writingURLs,
    Uint64 name2,
    Pointer claimer);
typedef _call_objc_p_p_p_Uint64_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer writingURLs,
    int name2,
    Pointer claimer);

final _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8_C,
        _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 msgid,
    Pointer components,
    Pointer from,
    Uint64 reserved);
typedef _call_objc_p_p_p_Uint64_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int msgid,
    Pointer components,
    Pointer from,
    int reserved);

final _call_objc_p_p_p_Uint64_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer metrics,
    Pointer rects,
    Pointer containerRect);
typedef _call_objc_p_p_p_Uint64_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer metrics,
    Pointer rects,
    Pointer containerRect);

final _call_objc_p_p_p_Uint64_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_p_returns_void_C,
        _call_objc_p_p_p_Uint64_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer purposeID,
    Pointer subitemURL,
    Pointer completionHandler);
typedef _call_objc_p_p_p_Uint64_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer purposeID,
    Pointer subitemURL,
    Pointer completionHandler);

final _call_objc_p_p_p_Uint64_p_p_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_Int64_C,
        _call_objc_p_p_p_Uint64_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer range,
    Pointer locale);
typedef _call_objc_p_p_p_Uint64_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer range,
    Pointer locale);

final _call_objc_p_p_p_Uint64_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_Int8_C,
        _call_objc_p_p_p_Uint64_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer originalContentsURL,
    Pointer error);
typedef _call_objc_p_p_p_Uint64_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer originalContentsURL,
    Pointer error);

final _call_objc_p_p_p_Uint64_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_Uint64_C,
        _call_objc_p_p_p_Uint64_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer range,
    Pointer withTemplate);
typedef _call_objc_p_p_p_Uint64_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer range,
    Pointer withTemplate);

final _call_objc_p_p_p_Uint64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 options,
    Pointer validExternalEntityURLs,
    Pointer error);
typedef _call_objc_p_p_p_Uint64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int options,
    Pointer validExternalEntityURLs,
    Pointer error);

final _call_objc_p_p_p_Uint64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_p_returns_void_C,
        _call_objc_p_p_p_Uint64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 maxLength,
    Pointer range,
    Pointer remainingRange);
typedef _call_objc_p_p_p_Uint64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int maxLength,
    Pointer range,
    Pointer remainingRange);

final _call_objc_p_p_p_Uint64_p_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_Int64_C,
        _call_objc_p_p_p_Uint64_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 options, Pointer range);
typedef _call_objc_p_p_p_Uint64_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int options, Pointer range);

final _call_objc_p_p_p_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_Int8_C,
        _call_objc_p_p_p_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 options, Pointer error);
typedef _call_objc_p_p_p_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int options, Pointer error);

final _call_objc_p_p_p_Uint64_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_Uint64_C,
        _call_objc_p_p_p_Uint64_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Uint64 withDataLength,
    Pointer intoBuffer);
typedef _call_objc_p_p_p_Uint64_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    int withDataLength,
    Pointer intoBuffer);

final _call_objc_p_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 options, Pointer error);
typedef _call_objc_p_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int options, Pointer error);

final _call_objc_p_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 length, Pointer forKey);
typedef _call_objc_p_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int length, Pointer forKey);

final _call_objc_p_p_p_Uint64_returns_Int64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_Int64_C,
        _call_objc_p_p_p_Uint64_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 options);
typedef _call_objc_p_p_p_Uint64_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int options);

final _call_objc_p_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_Int8_C,
        _call_objc_p_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 maxLength);
typedef _call_objc_p_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int maxLength);

final _call_objc_p_p_p_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_Uint64_C,
        _call_objc_p_p_p_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 length);
typedef _call_objc_p_p_p_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int length);

final _call_objc_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_Uint64_returns_p_C,
    _call_objc_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 size);
typedef _call_objc_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int size);

final _call_objc_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Uint64 index);
typedef _call_objc_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, int index);

final _call_objc_p_p_p_float32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_float32_returns_p_C,
    _call_objc_p_p_p_float32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float byFraction);
typedef _call_objc_p_p_p_float32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double byFraction);

final _call_objc_p_p_p_float64_float32_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float32_p_returns_p_C,
        _call_objc_p_p_p_float64_float32_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_float32_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float constant,
    Float priority,
    Pointer identifier);
typedef _call_objc_p_p_p_float64_float32_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double constant,
    double priority,
    Pointer identifier);

final _call_objc_p_p_p_float64_float64_float32_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_float64_float64_float32_p_returns_p_C,
            _call_objc_p_p_p_float64_float64_float32_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_float32_p_returns_p_C
    = Pointer Function(Pointer _arg0, Pointer _arg1, Pointer arg,
        Float multiplier, Float constant, Float priority, Pointer identifier);
typedef _call_objc_p_p_p_float64_float64_float32_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        double multiplier,
        double constant,
        double priority,
        Pointer identifier);

final _call_objc_p_p_p_float64_float64_float64_Int64_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_float64_float64_float64_Int64_returns_p_C,
            _call_objc_p_p_p_float64_float64_float64_Int64_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_float64_Int64_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Float value,
        Float huggingPriority,
        Float compressionResistancePriority,
        Int64 orientation);
typedef _call_objc_p_p_p_float64_float64_float64_Int64_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        double value,
        double huggingPriority,
        double compressionResistancePriority,
        int orientation);

final _call_objc_p_p_p_float64_float64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float64_p_p_returns_void_C,
        _call_objc_p_p_p_float64_float64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float priority,
    Float times,
    Pointer processVarNewToReceiver,
    Pointer processVarDroppedFromReceiver);
typedef _call_objc_p_p_p_float64_float64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double priority,
    double times,
    Pointer processVarNewToReceiver,
    Pointer processVarDroppedFromReceiver);

final _call_objc_p_p_p_float64_float64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float64_p_returns_void_C,
        _call_objc_p_p_p_float64_float64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float priority,
    Float times,
    Pointer toObjectiveRow);
typedef _call_objc_p_p_p_float64_float64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double priority,
    double times,
    Pointer toObjectiveRow);

final _call_objc_p_p_p_float64_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float64_returns_p_C,
        _call_objc_p_p_p_float64_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float times, Float plus);
typedef _call_objc_p_p_p_float64_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double times, double plus);

final _call_objc_p_p_p_float64_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_float64_returns_void_C,
        _call_objc_p_p_p_float64_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float priority, Float times);
typedef _call_objc_p_p_p_float64_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double priority, double times);

final _call_objc_p_p_p_float64_p_p_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_p_p_Int8_returns_p_C,
        _call_objc_p_p_p_float64_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float interval,
    Pointer target,
    Pointer selector,
    Pointer userInfo,
    Int8 repeats);
typedef _call_objc_p_p_p_float64_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double interval,
    Pointer target,
    Pointer selector,
    Pointer userInfo,
    int repeats);

final _call_objc_p_p_p_float64_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_p_p_returns_void_C,
        _call_objc_p_p_p_float64_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float withVarPlusDelta,
    Pointer timesVar,
    Pointer processVarNewToReceiver,
    Pointer processVarDroppedFromReceiver);
typedef _call_objc_p_p_p_float64_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double withVarPlusDelta,
    Pointer timesVar,
    Pointer processVarNewToReceiver,
    Pointer processVarDroppedFromReceiver);

final _call_objc_p_p_p_float64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_p_returns_void_C,
        _call_objc_p_p_p_float64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float coefficient,
    Pointer processVariableNewToReceiver,
    Pointer processVariableDroppedFromReceiver);
typedef _call_objc_p_p_p_float64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double coefficient,
    Pointer processVariableNewToReceiver,
    Pointer processVariableDroppedFromReceiver);

final _call_objc_p_p_p_float64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_returns_Int8_C,
        _call_objc_p_p_p_float64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Float withCoefficient, Pointer forConstraint);
typedef _call_objc_p_p_p_float64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double withCoefficient,
    Pointer forConstraint);

final _call_objc_p_p_p_float64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_returns_p_C,
        _call_objc_p_p_p_float64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float priority, Pointer engine);
typedef _call_objc_p_p_p_float64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double priority, Pointer engine);

final _call_objc_p_p_p_float64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_p_returns_void_C,
        _call_objc_p_p_p_float64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Float withMarkerPlusCoefficient,
    Pointer timesCol);
typedef _call_objc_p_p_p_float64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    double withMarkerPlusCoefficient,
    Pointer timesCol);

final _call_objc_p_p_p_float64_returns_float64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_returns_float64_C,
        _call_objc_p_p_p_float64_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float defaultValue);
typedef _call_objc_p_p_p_float64_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double defaultValue);

final _call_objc_p_p_p_float64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_float64_returns_p_C,
    _call_objc_p_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float multiplier);
typedef _call_objc_p_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double multiplier);

final _call_objc_p_p_p_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_float64_returns_void_C,
        _call_objc_p_p_p_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_float64_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Float withVarPlusDelta);
typedef _call_objc_p_p_p_float64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, double withVarPlusDelta);

final _call_objc_p_p_p_p_Int32_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int32_Uint64_p_returns_void_C,
        _call_objc_p_p_p_p_Int32_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int32_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forClaimWithID,
    Int32 madeByClientWithProcessIdentifier,
    Uint64 options,
    Pointer completionHandler);
typedef _call_objc_p_p_p_p_Int32_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forClaimWithID,
    int madeByClientWithProcessIdentifier,
    int options,
    Pointer completionHandler);

final _call_objc_p_p_p_p_Int32_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int32_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_Int32_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int32_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forPresenterWithID,
    Int32 fromProcessWithIdentifier,
    Pointer observedUbiquityAttributes,
    Pointer url,
    Pointer newURL);
typedef _call_objc_p_p_p_p_Int32_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forPresenterWithID,
    int fromProcessWithIdentifier,
    Pointer observedUbiquityAttributes,
    Pointer url,
    Pointer newURL);

final _call_objc_p_p_p_p_Int32_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_Int32_returns_p_C,
    _call_objc_p_p_p_p_Int32_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int32_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer blockSink, Int32 tag);
typedef _call_objc_p_p_p_p_Int32_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer blockSink, int tag);

final _call_objc_p_p_p_p_Int32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int32_returns_void_C,
        _call_objc_p_p_p_p_Int32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forClaimWithID,
    Int32 fromProcessWithIdentifier);
typedef _call_objc_p_p_p_p_Int32_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forClaimWithID,
    int fromProcessWithIdentifier);

final _call_objc_p_p_p_p_Int64_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_Int8_p_returns_p_C,
        _call_objc_p_p_p_p_Int64_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer matchingExtension,
    Int64 options,
    Int8 keepExtension,
    Pointer error);
typedef _call_objc_p_p_p_p_Int64_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer matchingExtension,
    int options,
    int keepExtension,
    Pointer error);

final _call_objc_p_p_p_p_Int64_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_Int8_returns_p_C,
        _call_objc_p_p_p_p_Int64_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer matchingExtension,
    Int64 options,
    Int8 keepExtension);
typedef _call_objc_p_p_p_p_Int64_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer matchingExtension,
    int options,
    int keepExtension);

final _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p_C,
            _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer secondAnchor,
        Int64 relation,
        Float multiplier,
        Float constant,
        Float priority,
        Pointer identifier);
typedef _call_objc_p_p_p_p_Int64_float64_float64_float32_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer secondAnchor,
        int relation,
        double multiplier,
        double constant,
        double priority,
        Pointer identifier);

final _call_objc_p_p_p_p_Int64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_p_returns_Int8_C,
        _call_objc_p_p_p_p_Int64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer row,
    Int64 usingInfeasibilityHandlingBehavior,
    Pointer mutuallyExclusiveConstraints);
typedef _call_objc_p_p_p_p_Int64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer row,
    int usingInfeasibilityHandlingBehavior,
    Pointer mutuallyExclusiveConstraints);

final _call_objc_p_p_p_p_Int64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_p_returns_p_C,
        _call_objc_p_p_p_p_Int64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer inString,
    Int64 offset,
    Pointer template);
typedef _call_objc_p_p_p_p_Int64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer inString,
    int offset,
    Pointer template);

final _call_objc_p_p_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer file,
    Int64 lineNumber,
    Pointer description);
typedef _call_objc_p_p_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer file,
    int lineNumber,
    Pointer description);

final _call_objc_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_Int64_returns_p_C,
    _call_objc_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer secondLayoutRect, Int64 relation);
typedef _call_objc_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer secondLayoutRect,
    int relation);

final _call_objc_p_p_p_p_Int64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int64_returns_void_C,
        _call_objc_p_p_p_p_Int64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int64_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer didReceiveData, Int64 lengthReceived);
typedef _call_objc_p_p_p_p_Int64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer didReceiveData,
    int lengthReceived);

final _call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p_C,
        _call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    Int8 isReadOnly,
    Uint32 appleEventCode,
    Int8 isLocationRequiredToCreate);
typedef _call_objc_p_p_p_p_Int8_Uint32_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    int isReadOnly,
    int appleEventCode,
    int isLocationRequiredToCreate);

final _call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p_C,
        _call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    Int8 isReadOnly,
    Uint32 appleEventCode,
    Pointer presentableDescription,
    Pointer nameOrNames);
typedef _call_objc_p_p_p_p_Int8_Uint32_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    int isReadOnly,
    int appleEventCode,
    Pointer presentableDescription,
    Pointer nameOrNames);

final _call_objc_p_p_p_p_Int8_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_Uint64_p_returns_p_C,
        _call_objc_p_p_p_p_Int8_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer documentClass,
    Int8 isSingleDTDNode,
    Uint64 options,
    Pointer error);
typedef _call_objc_p_p_p_p_Int8_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer documentClass,
    int isSingleDTDNode,
    int options,
    Pointer error);

final _call_objc_p_p_p_p_Int8_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_p_returns_Uint64_C,
        _call_objc_p_p_p_p_Int8_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer errorHandler,
    Int8 remapContents,
    Pointer hardLinkPath);
typedef _call_objc_p_p_p_p_Int8_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer errorHandler,
    int remapContents,
    Pointer hardLinkPath);

final _call_objc_p_p_p_p_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_p_returns_p_C,
        _call_objc_p_p_p_p_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer suiteName,
    Int8 usesUnnamedArguments,
    Pointer classSynonymDescriptions);
typedef _call_objc_p_p_p_p_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer suiteName,
    int usesUnnamedArguments,
    Pointer classSynonymDescriptions);

final _call_objc_p_p_p_p_Int8_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_returns_Int8_C,
        _call_objc_p_p_p_p_Int8_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer inDictionaries, Int8 caseSensitive);
typedef _call_objc_p_p_p_p_Int8_returns_Int8_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer inDictionaries, int caseSensitive);

final _call_objc_p_p_p_p_Int8_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_Int8_returns_p_C,
    _call_objc_p_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer storeIdentifier, Int8 additionalStore);
typedef _call_objc_p_p_p_p_Int8_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer storeIdentifier, int additionalStore);

final _call_objc_p_p_p_p_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Int8_returns_void_C,
        _call_objc_p_p_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Int8_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer didRemoveObservance, Int8 recurse);
typedef _call_objc_p_p_p_p_Int8_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer didRemoveObservance, int recurse);

final _call_objc_p_p_p_p_Uint16_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint16_returns_Int8_C,
        _call_objc_p_p_p_p_Uint16_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint16_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer name, Uint16 nameServerPortNumber);
typedef _call_objc_p_p_p_p_Uint16_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer name,
    int nameServerPortNumber);

final _call_objc_p_p_p_p_Uint16_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint16_returns_p_C,
        _call_objc_p_p_p_p_Uint16_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint16_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer host, Uint16 nameServerPortNumber);
typedef _call_objc_p_p_p_p_Uint16_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer host,
    int nameServerPortNumber);

final _call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p_C,
        _call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    Uint32 appleEventCode,
    Int8 isHidden,
    Pointer presentableDescription,
    Pointer name,
    Pointer synonymDescriptions);
typedef _call_objc_p_p_p_p_Uint32_Int8_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    int appleEventCode,
    int isHidden,
    Pointer presentableDescription,
    Pointer name,
    Pointer synonymDescriptions);

final _call_objc_p_p_p_p_Uint32_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint32_Uint32_returns_void_C,
        _call_objc_p_p_p_p_Uint32_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint32_Uint32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andSelector,
    Uint32 forEventClass,
    Uint32 andEventID);
typedef _call_objc_p_p_p_p_Uint32_Uint32_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer andSelector,
    int forEventClass,
    int andEventID);

final _call_objc_p_p_p_p_Uint32_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint32_p_p_returns_p_C,
        _call_objc_p_p_p_p_Uint32_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint32_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer typeDescription,
    Uint32 appleEventCode,
    Pointer presentableDescription,
    Pointer name);
typedef _call_objc_p_p_p_p_Uint32_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer typeDescription,
    int appleEventCode,
    Pointer presentableDescription,
    Pointer name);

final _call_objc_p_p_p_p_Uint32_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint32_p_returns_void_C,
        _call_objc_p_p_p_p_Uint32_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint32_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer exception,
    Uint32 sequence,
    Pointer imports);
typedef _call_objc_p_p_p_p_Uint32_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer exception,
    int sequence,
    Pointer imports);

final _call_objc_p_p_p_p_Uint32_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint32_returns_void_C,
        _call_objc_p_p_p_p_Uint32_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint32_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer selector,
    Uint32 toTranslateFromDescriptorType);
typedef _call_objc_p_p_p_p_Uint32_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer selector,
    int toTranslateFromDescriptorType);

final _call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p_C,
        _call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    Uint64 access,
    Int8 isHidden,
    Int8 shouldByDefaultInsertAtBeginning,
    Pointer accessGroupDescriptions);
typedef _call_objc_p_p_p_p_Uint64_Int8_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    int access,
    int isHidden,
    int shouldByDefaultInsertAtBeginning,
    Pointer accessGroupDescriptions);

final _call_objc_p_p_p_p_Uint64_Int8_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_Int8_p_returns_p_C,
        _call_objc_p_p_p_p_Uint64_Int8_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Int8_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    Uint64 access,
    Int8 isHidden,
    Pointer accessGroupDescriptions);
typedef _call_objc_p_p_p_p_Uint64_Int8_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer type,
    int access,
    int isHidden,
    Pointer accessGroupDescriptions);

final _call_objc_p_p_p_p_Uint64_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_Int8_returns_void_C,
        _call_objc_p_p_p_p_Uint64_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Int8_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forSelector,
    Uint64 argumentIndex,
    Int8 ofReply);
typedef _call_objc_p_p_p_p_Uint64_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forSelector,
    int argumentIndex,
    int ofReply);

final _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p_C,
            _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer type,
        Uint64 access,
        Uint32 appleEventCode,
        Int8 isHidden,
        Pointer presentableDescription,
        Pointer name,
        Pointer synonymDescriptions,
        Pointer accessGroupDescriptions);
typedef _call_objc_p_p_p_p_Uint64_Uint32_Int8_p_p_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer type,
        int access,
        int appleEventCode,
        int isHidden,
        Pointer presentableDescription,
        Pointer name,
        Pointer synonymDescriptions,
        Pointer accessGroupDescriptions);

final _call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p_C,
        _call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer rightExpression,
    Uint64 modifier,
    Uint64 type,
    Uint64 options);
typedef _call_objc_p_p_p_p_Uint64_Uint64_Uint64_returns_p_Dart
    = Pointer Function(Pointer _arg0, Pointer _arg1, Pointer arg,
        Pointer rightExpression, int modifier, int type, int options);

final _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    Uint64 options,
    Pointer name2,
    Uint64 name3,
    Pointer claimer);
typedef _call_objc_p_p_p_p_Uint64_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer url,
    int options,
    Pointer name2,
    int name3,
    Pointer claimer);

final _call_objc_p_p_p_p_Uint64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_p_returns_p_C,
        _call_objc_p_p_p_p_Uint64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer scheme,
    Uint64 options,
    Pointer orthography,
    Pointer tokenRanges);
typedef _call_objc_p_p_p_p_Uint64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer scheme,
    int options,
    Pointer orthography,
    Pointer tokenRanges);

final _call_objc_p_p_p_p_Uint64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_p_returns_void_C,
        _call_objc_p_p_p_p_Uint64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer scheme,
    Uint64 options,
    Pointer orthography,
    Pointer usingBlock);
typedef _call_objc_p_p_p_p_Uint64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer scheme,
    int options,
    Pointer orthography,
    Pointer usingBlock);

final _call_objc_p_p_p_p_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_returns_Int8_C,
        _call_objc_p_p_p_p_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toFile,
    Uint64 options,
    Pointer error);
typedef _call_objc_p_p_p_p_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer toFile,
    int options,
    Pointer error);

final _call_objc_p_p_p_p_Uint64_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_returns_Uint64_C,
        _call_objc_p_p_p_p_Uint64_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withString,
    Uint64 options,
    Pointer range);
typedef _call_objc_p_p_p_p_Uint64_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withString,
    int options,
    Pointer range);

final _call_objc_p_p_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer documentClass,
    Uint64 options,
    Pointer error);
typedef _call_objc_p_p_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer documentClass,
    int options,
    Pointer error);

final _call_objc_p_p_p_p_Uint64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_p_returns_void_C,
        _call_objc_p_p_p_p_Uint64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forKeyPath,
    Uint64 options,
    Pointer context);
typedef _call_objc_p_p_p_p_Uint64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forKeyPath,
    int options,
    Pointer context);

final _call_objc_p_p_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_returns_Int8_C,
        _call_objc_p_p_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer values, Uint64 count);
typedef _call_objc_p_p_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer values, int count);

final _call_objc_p_p_p_p_Uint64_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_returns_Uint64_C,
        _call_objc_p_p_p_p_Uint64_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer objects, Uint64 count);
typedef _call_objc_p_p_p_p_Uint64_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer objects, int count);

final _call_objc_p_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_returns_p_C,
        _call_objc_p_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer dataProvider, Uint64 options);
typedef _call_objc_p_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer dataProvider,
    int options);

final _call_objc_p_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_Uint64_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withCString, Uint64 length);
typedef _call_objc_p_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer withCString, int length);

final _call_objc_p_p_p_p_float64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_float64_p_returns_Int8_C,
        _call_objc_p_p_p_p_float64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_float64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer expression,
    Float integralizationAdjustment,
    Pointer mutuallyExclusiveConstraints);
typedef _call_objc_p_p_p_p_float64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer expression,
    double integralizationAdjustment,
    Pointer mutuallyExclusiveConstraints);

final _call_objc_p_p_p_p_float64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_float64_returns_void_C,
        _call_objc_p_p_p_p_float64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_float64_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withVariable, Float coefficient);
typedef _call_objc_p_p_p_p_float64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withVariable,
    double coefficient);

final _call_objc_p_p_p_p_p_Int64_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int64_p_returns_void_C,
        _call_objc_p_p_p_p_p_Int64_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int64_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer object,
    Pointer file,
    Int64 lineNumber,
    Pointer description);
typedef _call_objc_p_p_p_p_p_Int64_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer object,
    Pointer file,
    int lineNumber,
    Pointer description);

final _call_objc_p_p_p_p_p_Int64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int64_returns_p_C,
        _call_objc_p_p_p_p_p_Int64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    Int64 index);
typedef _call_objc_p_p_p_p_p_Int64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    int index);

final _call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64_C,
        _call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer docInfo,
    Pointer errorHandler,
    Int8 remapContents,
    Int8 markBusy,
    Pointer hardLinkPath);
typedef _call_objc_p_p_p_p_p_Int8_Int8_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer docInfo,
    Pointer errorHandler,
    int remapContents,
    int markBusy,
    Pointer hardLinkPath);

final _call_objc_p_p_p_p_p_Int8_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_p_returns_Int8_C,
        _call_objc_p_p_p_p_p_Int8_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withObservance,
    Pointer willChangeValueForKeyOrKeys,
    Int8 recurse,
    Pointer forwardingValues);
typedef _call_objc_p_p_p_p_p_Int8_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withObservance,
    Pointer willChangeValueForKeyOrKeys,
    int recurse,
    Pointer forwardingValues);

final _call_objc_p_p_p_p_p_Int8_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_p_returns_Uint64_C,
        _call_objc_p_p_p_p_p_Int8_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer docInfo,
    Pointer errorHandler,
    Int8 remapContents,
    Pointer hardLinkPath);
typedef _call_objc_p_p_p_p_p_Int8_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer docInfo,
    Pointer errorHandler,
    int remapContents,
    Pointer hardLinkPath);

final _call_objc_p_p_p_p_p_Int8_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_p_returns_void_C,
        _call_objc_p_p_p_p_p_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withObservance,
    Pointer didChangeValueForKeyOrKeys,
    Int8 recurse,
    Pointer forwardingValues);
typedef _call_objc_p_p_p_p_p_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withObservance,
    Pointer didChangeValueForKeyOrKeys,
    int recurse,
    Pointer forwardingValues);

final _call_objc_p_p_p_p_p_Int8_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_returns_p_C,
        _call_objc_p_p_p_p_p_Int8_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer componentRange,
    Pointer forAddingLeafNode,
    Int8 create);
typedef _call_objc_p_p_p_p_p_Int8_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer componentRange,
    Pointer forAddingLeafNode,
    int create);

final _call_objc_p_p_p_p_p_Int8_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Int8_returns_void_C,
        _call_objc_p_p_p_p_p_Int8_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Int8_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer forID, Pointer withValues, Int8 isOld);
typedef _call_objc_p_p_p_p_p_Int8_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forID,
    Pointer withValues,
    int isOld);

final _call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8_C,
        _call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withItemAtURL,
    Pointer backupItemName,
    Uint64 options,
    Pointer resultingItemURL,
    Pointer error);
typedef _call_objc_p_p_p_p_p_Uint64_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withItemAtURL,
    Pointer backupItemName,
    int options,
    Pointer resultingItemURL,
    Pointer error);

final _call_objc_p_p_p_p_p_Uint64_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_p_returns_Int8_C,
        _call_objc_p_p_p_p_p_Uint64_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer extendedAttributes,
    Pointer forWritingToURLOrPath,
    Uint64 usingEncoding,
    Pointer error);
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer extendedAttributes,
    Pointer forWritingToURLOrPath,
    int usingEncoding,
    Pointer error);

final _call_objc_p_p_p_p_p_Uint64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_p_returns_p_C,
        _call_objc_p_p_p_p_p_Uint64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    Uint64 relativePosition,
    Pointer baseSpecifier);
typedef _call_objc_p_p_p_p_p_Uint64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    int relativePosition,
    Pointer baseSpecifier);

final _call_objc_p_p_p_p_p_Uint64_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_returns_Int8_C,
        _call_objc_p_p_p_p_p_Uint64_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer components,
    Pointer from,
    Uint64 reserved);
typedef _call_objc_p_p_p_p_p_Uint64_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer components,
    Pointer from,
    int reserved);

final _call_objc_p_p_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_returns_p_C,
        _call_objc_p_p_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer contents,
    Pointer properties,
    Uint64 options);
typedef _call_objc_p_p_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer contents,
    Pointer properties,
    int options);

final _call_objc_p_p_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer object,
    Pointer userInfo,
    Uint64 options);
typedef _call_objc_p_p_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer object,
    Pointer userInfo,
    int options);

final _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p_C,
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        Float duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        Int8 timeIsSignificant,
        Int8 timeIsApproximate,
        Int8 timeIsPast,
        Pointer leadingText,
        Pointer trailingText);
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_p_p_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        double duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        int timeIsSignificant,
        int timeIsApproximate,
        int timeIsPast,
        Pointer leadingText,
        Pointer trailingText);

final _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p_C,
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        Float duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        Int8 timeIsSignificant,
        Int8 timeIsApproximate,
        Int8 timeIsPast);
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_Int8_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        double duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        int timeIsSignificant,
        int timeIsApproximate,
        int timeIsPast);

final _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p_C,
            _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p_C
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        Float duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        Int8 timeIsSignificant,
        Int8 timeIsApproximate);
typedef _call_objc_p_p_p_p_p_float64_p_p_Int8_Int8_returns_p_Dart
    = Pointer Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer date,
        Pointer timeZone,
        double duration,
        Pointer referenceDate,
        Pointer underlyingResult,
        int timeIsSignificant,
        int timeIsApproximate);

final _call_objc_p_p_p_p_p_float64_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_float64_p_p_returns_p_C,
        _call_objc_p_p_p_p_p_float64_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    Float duration,
    Pointer referenceDate,
    Pointer underlyingResult);
typedef _call_objc_p_p_p_p_p_float64_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    double duration,
    Pointer referenceDate,
    Pointer underlyingResult);

final _call_objc_p_p_p_p_p_float64_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_float64_p_returns_p_C,
        _call_objc_p_p_p_p_p_float64_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    Float duration,
    Pointer referenceDate);
typedef _call_objc_p_p_p_p_p_float64_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    double duration,
    Pointer referenceDate);

final _call_objc_p_p_p_p_p_float64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_float64_returns_p_C,
        _call_objc_p_p_p_p_p_float64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_float64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    Float duration);
typedef _call_objc_p_p_p_p_p_float64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer date,
    Pointer timeZone,
    double duration);

final _call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withID,
    Pointer uniqueID,
    Pointer forProvidedItemsURL,
    Uint64 options,
    Pointer withServer,
    Pointer reply);
typedef _call_objc_p_p_p_p_p_p_Uint64_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withID,
    Pointer uniqueID,
    Pointer forProvidedItemsURL,
    int options,
    Pointer withServer,
    Pointer reply);

final _call_objc_p_p_p_p_p_p_Uint64_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_Uint64_returns_void_C,
        _call_objc_p_p_p_p_p_p_Uint64_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_Uint64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer selector,
    Pointer name,
    Pointer object,
    Uint64 suspensionBehavior);
typedef _call_objc_p_p_p_p_p_p_Uint64_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer selector,
    Pointer name,
    Pointer object,
    int suspensionBehavior);

final _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void =
    _objc.dlForObjectiveC.lookupFunction<
            _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void_C,
            _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer withID,
    Pointer fileURL,
    Pointer lastPresentedItemEventIdentifier,
    Pointer ubiquityAttributes,
    Uint64 options,
    Uint64 responses);
typedef _call_objc_p_p_p_p_p_p_p_Uint64_Uint64_returns_void_Dart
    = void Function(
        Pointer _arg0,
        Pointer _arg1,
        Pointer arg,
        Pointer withID,
        Pointer fileURL,
        Pointer lastPresentedItemEventIdentifier,
        Pointer ubiquityAttributes,
        int options,
        int responses);

final _call_objc_p_p_p_p_p_p_p_Uint64_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_Uint64_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_Uint64_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_Uint64_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer key,
    Pointer implementation,
    Pointer selector,
    Pointer extraArguments,
    Uint64 count);
typedef _call_objc_p_p_p_p_p_p_p_Uint64_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer key,
    Pointer implementation,
    Pointer selector,
    Pointer extraArguments,
    int count);

final _call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer _arg2,
    Pointer interpreter,
    Pointer arguments,
    Pointer standardInput,
    Pointer standardOutput,
    Pointer standardError,
    Int8 showingProgress,
    Pointer _arg9);
typedef _call_objc_p_p_p_p_p_p_p_p_Int8_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer _arg2,
    Pointer interpreter,
    Pointer arguments,
    Pointer standardInput,
    Pointer standardOutput,
    Pointer standardError,
    int showingProgress,
    Pointer _arg9);

final _call_objc_p_p_p_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forID,
    Pointer acknowledgementAppBundleIDs,
    Pointer category,
    Pointer fileURL,
    Pointer initialValues,
    Pointer completionHandler);
typedef _call_objc_p_p_p_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forID,
    Pointer acknowledgementAppBundleIDs,
    Pointer category,
    Pointer fileURL,
    Pointer initialValues,
    Pointer completionHandler);

final _call_objc_p_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_p_returns_p_C,
        _call_objc_p_p_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer key,
    Pointer baseGetter,
    Pointer baseSetter,
    Pointer containerIsa,
    Pointer proxyClass);
typedef _call_objc_p_p_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer key,
    Pointer baseGetter,
    Pointer baseSetter,
    Pointer containerIsa,
    Pointer proxyClass);

final _call_objc_p_p_p_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_returns_Int8_C,
        _call_objc_p_p_p_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer proposedSelectedRange,
    Pointer originalString,
    Pointer originalSelectedRange,
    Pointer errorDescription);
typedef _call_objc_p_p_p_p_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer proposedSelectedRange,
    Pointer originalString,
    Pointer originalSelectedRange,
    Pointer errorDescription);

final _call_objc_p_p_p_p_p_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_returns_Uint64_C,
        _call_objc_p_p_p_p_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer path,
    Pointer dirInfo,
    Pointer zone,
    Pointer plist);
typedef _call_objc_p_p_p_p_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer path,
    Pointer dirInfo,
    Pointer zone,
    Pointer plist);

final _call_objc_p_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer validFormatSpecifiers,
    Pointer locale,
    Pointer arguments,
    Pointer error);
typedef _call_objc_p_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer validFormatSpecifiers,
    Pointer locale,
    Pointer arguments,
    Pointer error);

final _call_objc_p_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer didStartElement,
    Pointer namespaceURI,
    Pointer qualifiedName,
    Pointer attributes);
typedef _call_objc_p_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer didStartElement,
    Pointer namespaceURI,
    Pointer qualifiedName,
    Pointer attributes);

final _call_objc_p_p_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_returns_Int8_C,
        _call_objc_p_p_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forString,
    Pointer range,
    Pointer error);
typedef _call_objc_p_p_p_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer forString,
    Pointer range,
    Pointer error);

final _call_objc_p_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    Pointer test);
typedef _call_objc_p_p_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer containerSpecifier,
    Pointer key,
    Pointer test);

final _call_objc_p_p_p_p_p_p_returns_void = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_p_returns_void_C,
        _call_objc_p_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer end,
    Pointer contentsEnd,
    Pointer forRange);
typedef _call_objc_p_p_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0,
    Pointer _arg1,
    Pointer arg,
    Pointer end,
    Pointer contentsEnd,
    Pointer forRange);

final _call_objc_p_p_p_p_p_returns_Int16 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_Int16_C,
    _call_objc_p_p_p_p_p_returns_Int16_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Int16_C = Int16 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withRawReply, Pointer handlerRefCon);
typedef _call_objc_p_p_p_p_p_returns_Int16_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withRawReply, Pointer handlerRefCon);

final _call_objc_p_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Int8_C = Int8 Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer forString, Pointer errorDescription);
typedef _call_objc_p_p_p_p_p_returns_Int8_Dart = int Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer forString, Pointer errorDescription);

final _call_objc_p_p_p_p_p_returns_Uint64 = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_p_p_p_returns_Uint64_C,
        _call_objc_p_p_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer key, Pointer value);
typedef _call_objc_p_p_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer key, Pointer value);

final _call_objc_p_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_p_C = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer constants, Pointer error);
typedef _call_objc_p_p_p_p_p_returns_p_Dart = Pointer Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer constants, Pointer error);

final _call_objc_p_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_p_returns_void_C = Void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withObjectsFromArray, Pointer range);
typedef _call_objc_p_p_p_p_p_returns_void_Dart = void Function(Pointer _arg0,
    Pointer _arg1, Pointer arg, Pointer withObjectsFromArray, Pointer range);

final _call_objc_p_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer success);
typedef _call_objc_p_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer success);

final _call_objc_p_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);
typedef _call_objc_p_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer error);

final _call_objc_p_p_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_Uint64_C,
    _call_objc_p_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer fileAttributes);
typedef _call_objc_p_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer fileAttributes);

final _call_objc_p_p_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_float64_C,
    _call_objc_p_p_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer success);
typedef _call_objc_p_p_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer success);

final _call_objc_p_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_p_C,
    _call_objc_p_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer forKey);
typedef _call_objc_p_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer forKey);

final _call_objc_p_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_p_returns_void_C,
    _call_objc_p_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer forSelector);
typedef _call_objc_p_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg, Pointer forSelector);

final _call_objc_p_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int32_C,
    _call_objc_p_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int64_C,
    _call_objc_p_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Int8_C,
    _call_objc_p_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Uint16 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Uint16_C,
    _call_objc_p_p_p_returns_Uint16_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Uint16_C = Uint16 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Uint16_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Uint32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Uint32_C,
    _call_objc_p_p_p_returns_Uint32_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_Uint64_C,
    _call_objc_p_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_float32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_float32_C,
    _call_objc_p_p_p_returns_float32_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_float32_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_float32_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_float64_C,
    _call_objc_p_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_p = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_p_C,
    _call_objc_p_p_p_returns_p_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_p_returns_void_C,
    _call_objc_p_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);
typedef _call_objc_p_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1, Pointer arg);

final _call_objc_p_p_returns_Int16 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int16_C,
    _call_objc_p_p_returns_Int16_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int16_C = Int16 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int16_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int32_C,
    _call_objc_p_p_returns_Int32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int32_C = Int32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int64_C,
    _call_objc_p_p_returns_Int64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int64_C = Int64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Int8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Int8_C,
    _call_objc_p_p_returns_Int8_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Int8_C = Int8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Int8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint16 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint16_C,
    _call_objc_p_p_returns_Uint16_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint16_C = Uint16 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint16_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint32_C,
    _call_objc_p_p_returns_Uint32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint32_C = Uint32 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint32_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint64_C,
    _call_objc_p_p_returns_Uint64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint64_C = Uint64 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint64_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_Uint8 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_Uint8_C,
    _call_objc_p_p_returns_Uint8_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_Uint8_C = Uint8 Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_Uint8_Dart = int Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_float32 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_float32_C,
    _call_objc_p_p_returns_float32_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_float32_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_float32_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_float64 = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_float64_C,
    _call_objc_p_p_returns_float64_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_float64_C = Float Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_float64_Dart = double Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_p = _objc.dlForObjectiveC
    .lookupFunction<_call_objc_p_p_returns_p_C, _call_objc_p_p_returns_p_Dart>(
        "objc_msgSend");
typedef _call_objc_p_p_returns_p_C = Pointer Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_p_Dart = Pointer Function(
    Pointer _arg0, Pointer _arg1);

final _call_objc_p_p_returns_void = _objc.dlForObjectiveC.lookupFunction<
    _call_objc_p_p_returns_void_C,
    _call_objc_p_p_returns_void_Dart>("objc_msgSend");
typedef _call_objc_p_p_returns_void_C = Void Function(
    Pointer _arg0, Pointer _arg1);
typedef _call_objc_p_p_returns_void_Dart = void Function(
    Pointer _arg0, Pointer _arg1);
